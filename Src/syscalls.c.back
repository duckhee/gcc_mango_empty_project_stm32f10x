/* Support files for GNU libc.  Files in the system namespace go here.
   Files in the C namespace (ie those that do not start with an
   underscore) go in .c.  */

//#include <_ansi.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/fcntl.h>
#include <stdio.h>
#include <string.h>
#include <time.h>
#include <sys/time.h>
#include <sys/times.h>
#include <errno.h>
//#include <reent.h>
#include <unistd.h>
#include <sys/wait.h>

#undef errno
extern int errno;

#define MAX_STACK_SIZE 0x2000

extern int __io_putchar(int ch) __attribute__((weak));
extern int __io_getchar(void) __attribute__((weak));

#ifndef FreeRTOS
register char* stack_ptr asm("sp");
#endif

caddr_t _sbrk(int incr) {
  extern char end asm("end");
  static char* heap_end;
  char* prev_heap_end, *min_stack_ptr;

  if (heap_end == 0) {
    heap_end = &end;
  }

  prev_heap_end = heap_end;

#ifdef FreeRTOS
  /* Use the NVIC offset register to locate the main stack pointer. */
  min_stack_ptr = (char*)(*(unsigned int*) * (unsigned int*)0xE000ED08);
  /* Locate the STACK bottom address */
  min_stack_ptr -= MAX_STACK_SIZE;

  if (heap_end + incr > min_stack_ptr)
#else
  if (heap_end + incr > stack_ptr)
#endif
  {
//		write(1, "Heap and stack collision\n", 25);
//		abort();
    errno = ENOMEM;
    return (caddr_t) - 1;
  }

  heap_end += incr;

  return (caddr_t) prev_heap_end;
}

/*
 * _gettimeofday primitive (Stub function)
 * */
int _gettimeofday (struct timeval* tp, struct timezone* tzp) {
  /* Return fixed data for the timezone.  */
  if (tzp) {
    tzp->tz_minuteswest = 0;
    tzp->tz_dsttime = 0;
  }

  return 0;
}
void initialise_monitor_handles() {
}

int _getpid(void) {
  return 1;
}

int _kill(int pid, int sig) {
  errno = EINVAL;
  return -1;
}

void _exit (int status) {
  _kill(status, -1);
  while (1) {}
}

int _write(int file, char* ptr, int len) {
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++) {
    __io_putchar( *ptr++ );
  }
  return len;
}

int _close(int file) {
  return -1;
}

int _fstat(int file, struct stat* st) {
  st->st_mode = S_IFCHR;
  return 0;
}

int _isatty(int file) {
  return 1;
}

int _lseek(int file, int ptr, int dir) {
  return 0;
}

int _read(int file, char* ptr, int len) {
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++) {
    *ptr++ = __io_getchar();
  }

  return len;
}

int _open(char* path, int flags, ...) {
  /* Pretend like we always fail */
  return -1;
}

int _wait(int* status) {
  errno = ECHILD;
  return -1;
}

int _unlink(char* name) {
  errno = ENOENT;
  return -1;
}

int _times(struct tms* buf) {
  return -1;
}

int _stat(char* file, struct stat* st) {
  st->st_mode = S_IFCHR;
  return 0;
}

int _link(char* old, char* new) {
  errno = EMLINK;
  return -1;
}

int _fork(void) {
  errno = EAGAIN;
  return -1;
}

int _execve(char* name, char** argv, char** env) {
  errno = ENOMEM;
  return -1;
}





//#include <_ansi.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/fcntl.h>
#include <stdio.h>
#include <string.h>
#include <time.h>
#include <sys/time.h>
#include <sys/times.h>
#include <errno.h>
//#include <reent.h>
#include <unistd.h>
#include <sys/wait.h>

#undef errno
extern int errno;

#define MAX_STACK_SIZE 0x200



GETCHAR_PROTOTYPE
{
   /* Loop until the end of receive */
   while(USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET);
  
   /* Read a character to the USART */
   return (USART_ReceiveData(USART1));
}
/*  Retargets the C library printf function to the USART.  */


uint8_t USART_GetCharacter(USART_TypeDef *  usart_p)
{
    uint8_t data;

    /* Loop until the end of transmission */
    while(USART_GetFlagStatus(usart_p, USART_FLAG_RXNE) == RESET);

    /* Write a character to the USART */
    data = USART_ReceiveData(usart_p);

    USART_SendData(usart_p, data);
    while(USART_GetFlagStatus(usart_p, USART_FLAG_TXE) == RESET);

    if( data == '\r' )  return (int)('\n');
    else                return(data);
}








#ifdef __GNUC__
  #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
  //#define GETCHAR_PROTOTYPE int __io_getchar(void)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
 //#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif 





int _write(int file, char* ptr, int len) {
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++) {
    __io_putchar( *ptr++ );
  }
  return len;
}


GETCHAR_PROTOTYPE
{
   /* Loop until the end of receive */
   while(USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET);
  
   /* Read a character to the USART */
   return (USART_ReceiveData(USART1));
}
/*  Retargets the C library printf function to the USART.  */



int _read(int file, char* ptr, int len) {
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++) {
    *ptr++ = __io_getchar();
  }

  return len;
}



/*
 * Name   : putchar
 * Input  : None
 * Output : None
 * Return : None
 */
PUTCHAR_PROTOTYPE
{
    /* Write a character to the USART */  
    if( ch == '\n') {
        USART_SendData(USART1, '\r');
        while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
        USART_SendData(USART1, '\n');
    }else {
        USART_SendData(USART1, (u8) ch);
    }
   USART_SendData(USART1, (uint8_t)ch);

    /* Loop until the end of transmission */
    while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);

    return ch;
}





int _write(int file, char* ch, int len)
{

}



#include <stdio.h>
#include <sys/stat.h>
#include "stm32f10x.h"


__attribute__ ((used)) int _write(int fd, char *ptr, int len)
{
    size_t i;
    for(i = 0; i < len; i++)
    {
        fputc(USART1, (uint8_t *)&ch);
    }
    return len;
}