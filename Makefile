##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [2.29.1] date: [Mon Sep 03 22:38:33 KST 2018]
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET = empty_project


######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Og


#######################################
# paths
#######################################
# Build path
BUILD_DIR = build

RTOS_FLAGS = yes


include exinc.mk
include rtosInc.mk

include source.mk
include rtosSrc.mk
#include inc.mk


#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mthumb -mcpu=cortex-m3 -std=gnu99

# fpu
# NONE for Cortex-M0/M0+/M3

# float-abi


# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS =  \
-D USE_STDPERIPH_DRIVER \
-D BOARD_DEF_MANGO_M32 \

#---------------------------------------------------------------------------
# Include 디렉토리
#---------------------------------------------------------------------------
#include 하기 위한 옵션 설정
INCLUDE = -I./include -I.


ifeq ($(RTOS_FLAGS), yes)
ALL_INCLUDES = $(C_INCLUDES) $(RTOSINCLUDE)
ALL_SOURCES = $(C_SOURCES) $(RTOS_SOURCES)
else
ALL_INCLUDES = $(C_INCLUDES)
ALL_SOURCES = $(C_SOURCES)
endif


# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections
#CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections -fomit-frame-pointer
CFLAGS = $(MCU) $(C_DEFS) $(INCLUDE) $(OPT) -Wall -fdata-sections -ffunction-sections
CFLAGS += $(patsubst %,-I%,$(ALL_INCLUDES))
CFLAGS += -fdata-sections -Wall -Wextra -Wimplicit -Wcast-align -Wpointer-arith -Wredundant-decls -Wshadow -Wcast-qual -Wcast-align
CFLAGS += -g -gdwarf-2 -u _printf_float -u _scanf_float
ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif


# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"


#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = STM32F103RBTx_FLASH.ld

# libraries
LIBS = -lc -lm -lnosys
LIBDIR = 
LDFLAGS = $(MCU) -specs=nano.specs  -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections -static -u _printf_float -u _scanf_float 

# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin gccversion

#show lib
gcc_help:
	$(CC) -print-mulit-lib
#show dectory search path
gcc_dir:
	$(CC) -print-search-dirs
#show basic spec charset
gcc_dump:
	$(CC) -dumpspecs
	
gccversion:
	$(CC) --version

#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(ALL_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(ALL_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@	
	
$(BUILD_DIR):
	mkdir $@		


flash: $(TARGET).bin
	st-flash write $(BUILD_DIR)$(TARGET).bin 0x8000000

down_load: $(TARGET).bin
	~/stm32ld /dev/tty.usbserial-14201 115200 $(BUILD_DIR)/$(TARGET).bin

erase:
	st-flash erase

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)
  
#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***