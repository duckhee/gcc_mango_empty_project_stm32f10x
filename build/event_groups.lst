ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"event_groups.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvTestWaitCondition,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	prvTestWaitCondition:
  25              	.LFB41:
  26              		.file 1 "FreeRTOS/Src/event_groups.c"
   1:FreeRTOS/Src/event_groups.c **** /*
   2:FreeRTOS/Src/event_groups.c ****  * FreeRTOS Kernel V10.1.1
   3:FreeRTOS/Src/event_groups.c ****  * Copyright (C) 2018 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/Src/event_groups.c ****  *
   5:FreeRTOS/Src/event_groups.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:FreeRTOS/Src/event_groups.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:FreeRTOS/Src/event_groups.c ****  * the Software without restriction, including without limitation the rights to
   8:FreeRTOS/Src/event_groups.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:FreeRTOS/Src/event_groups.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:FreeRTOS/Src/event_groups.c ****  * subject to the following conditions:
  11:FreeRTOS/Src/event_groups.c ****  *
  12:FreeRTOS/Src/event_groups.c ****  * The above copyright notice and this permission notice shall be included in all
  13:FreeRTOS/Src/event_groups.c ****  * copies or substantial portions of the Software.
  14:FreeRTOS/Src/event_groups.c ****  *
  15:FreeRTOS/Src/event_groups.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:FreeRTOS/Src/event_groups.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:FreeRTOS/Src/event_groups.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:FreeRTOS/Src/event_groups.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:FreeRTOS/Src/event_groups.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:FreeRTOS/Src/event_groups.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:FreeRTOS/Src/event_groups.c ****  *
  22:FreeRTOS/Src/event_groups.c ****  * http://www.FreeRTOS.org
  23:FreeRTOS/Src/event_groups.c ****  * http://aws.amazon.com/freertos
  24:FreeRTOS/Src/event_groups.c ****  *
  25:FreeRTOS/Src/event_groups.c ****  * 1 tab == 4 spaces!
  26:FreeRTOS/Src/event_groups.c ****  */
  27:FreeRTOS/Src/event_groups.c **** 
  28:FreeRTOS/Src/event_groups.c **** /* Standard includes. */
  29:FreeRTOS/Src/event_groups.c **** #include <stdlib.h>
  30:FreeRTOS/Src/event_groups.c **** 
  31:FreeRTOS/Src/event_groups.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  32:FreeRTOS/Src/event_groups.c **** all the API functions to use the MPU wrappers.  That should only be done when
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s 			page 2


  33:FreeRTOS/Src/event_groups.c **** task.h is included from an application file. */
  34:FreeRTOS/Src/event_groups.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:FreeRTOS/Src/event_groups.c **** 
  36:FreeRTOS/Src/event_groups.c **** /* FreeRTOS includes. */
  37:FreeRTOS/Src/event_groups.c **** #include "FreeRTOS.h"
  38:FreeRTOS/Src/event_groups.c **** #include "task.h"
  39:FreeRTOS/Src/event_groups.c **** #include "timers.h"
  40:FreeRTOS/Src/event_groups.c **** #include "event_groups.h"
  41:FreeRTOS/Src/event_groups.c **** 
  42:FreeRTOS/Src/event_groups.c **** /* Lint e961, e750 and e9021 are suppressed as a MISRA exception justified
  43:FreeRTOS/Src/event_groups.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  44:FreeRTOS/Src/event_groups.c **** for the header files above, but not in this file, in order to generate the
  45:FreeRTOS/Src/event_groups.c **** correct privileged Vs unprivileged linkage and placement. */
  46:FreeRTOS/Src/event_groups.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021 See comment above. */
  47:FreeRTOS/Src/event_groups.c **** 
  48:FreeRTOS/Src/event_groups.c **** /* The following bit fields convey control information in a task's event list
  49:FreeRTOS/Src/event_groups.c **** item value.  It is important they don't clash with the
  50:FreeRTOS/Src/event_groups.c **** taskEVENT_LIST_ITEM_VALUE_IN_USE definition. */
  51:FreeRTOS/Src/event_groups.c **** #if configUSE_16_BIT_TICKS == 1
  52:FreeRTOS/Src/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x0100U
  53:FreeRTOS/Src/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x0200U
  54:FreeRTOS/Src/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x0400U
  55:FreeRTOS/Src/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff00U
  56:FreeRTOS/Src/event_groups.c **** #else
  57:FreeRTOS/Src/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x01000000UL
  58:FreeRTOS/Src/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x02000000UL
  59:FreeRTOS/Src/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x04000000UL
  60:FreeRTOS/Src/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff000000UL
  61:FreeRTOS/Src/event_groups.c **** #endif
  62:FreeRTOS/Src/event_groups.c **** 
  63:FreeRTOS/Src/event_groups.c **** typedef struct EventGroupDef_t
  64:FreeRTOS/Src/event_groups.c **** {
  65:FreeRTOS/Src/event_groups.c **** 	EventBits_t uxEventBits;
  66:FreeRTOS/Src/event_groups.c **** 	List_t xTasksWaitingForBits;		/*< List of tasks waiting for a bit to be set. */
  67:FreeRTOS/Src/event_groups.c **** 
  68:FreeRTOS/Src/event_groups.c **** 	#if( configUSE_TRACE_FACILITY == 1 )
  69:FreeRTOS/Src/event_groups.c **** 		UBaseType_t uxEventGroupNumber;
  70:FreeRTOS/Src/event_groups.c **** 	#endif
  71:FreeRTOS/Src/event_groups.c **** 
  72:FreeRTOS/Src/event_groups.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
  73:FreeRTOS/Src/event_groups.c **** 		uint8_t ucStaticallyAllocated; /*< Set to pdTRUE if the event group is statically allocated to en
  74:FreeRTOS/Src/event_groups.c **** 	#endif
  75:FreeRTOS/Src/event_groups.c **** } EventGroup_t;
  76:FreeRTOS/Src/event_groups.c **** 
  77:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
  78:FreeRTOS/Src/event_groups.c **** 
  79:FreeRTOS/Src/event_groups.c **** /*
  80:FreeRTOS/Src/event_groups.c ****  * Test the bits set in uxCurrentEventBits to see if the wait condition is met.
  81:FreeRTOS/Src/event_groups.c ****  * The wait condition is defined by xWaitForAllBits.  If xWaitForAllBits is
  82:FreeRTOS/Src/event_groups.c ****  * pdTRUE then the wait condition is met if all the bits set in uxBitsToWaitFor
  83:FreeRTOS/Src/event_groups.c ****  * are also set in uxCurrentEventBits.  If xWaitForAllBits is pdFALSE then the
  84:FreeRTOS/Src/event_groups.c ****  * wait condition is met if any of the bits set in uxBitsToWait for are also set
  85:FreeRTOS/Src/event_groups.c ****  * in uxCurrentEventBits.
  86:FreeRTOS/Src/event_groups.c ****  */
  87:FreeRTOS/Src/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxB
  88:FreeRTOS/Src/event_groups.c **** 
  89:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s 			page 3


  90:FreeRTOS/Src/event_groups.c **** 
  91:FreeRTOS/Src/event_groups.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
  92:FreeRTOS/Src/event_groups.c **** 
  93:FreeRTOS/Src/event_groups.c **** 	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
  94:FreeRTOS/Src/event_groups.c **** 	{
  95:FreeRTOS/Src/event_groups.c **** 	EventGroup_t *pxEventBits;
  96:FreeRTOS/Src/event_groups.c **** 
  97:FreeRTOS/Src/event_groups.c **** 		/* A StaticEventGroup_t object must be provided. */
  98:FreeRTOS/Src/event_groups.c **** 		configASSERT( pxEventGroupBuffer );
  99:FreeRTOS/Src/event_groups.c **** 
 100:FreeRTOS/Src/event_groups.c **** 		#if( configASSERT_DEFINED == 1 )
 101:FreeRTOS/Src/event_groups.c **** 		{
 102:FreeRTOS/Src/event_groups.c **** 			/* Sanity check that the size of the structure used to declare a
 103:FreeRTOS/Src/event_groups.c **** 			variable of type StaticEventGroup_t equals the size of the real
 104:FreeRTOS/Src/event_groups.c **** 			event group structure. */
 105:FreeRTOS/Src/event_groups.c **** 			volatile size_t xSize = sizeof( StaticEventGroup_t );
 106:FreeRTOS/Src/event_groups.c **** 			configASSERT( xSize == sizeof( EventGroup_t ) );
 107:FreeRTOS/Src/event_groups.c **** 		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
 108:FreeRTOS/Src/event_groups.c **** 		#endif /* configASSERT_DEFINED */
 109:FreeRTOS/Src/event_groups.c **** 
 110:FreeRTOS/Src/event_groups.c **** 		/* The user has provided a statically allocated event group - use it. */
 111:FreeRTOS/Src/event_groups.c **** 		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticE
 112:FreeRTOS/Src/event_groups.c **** 
 113:FreeRTOS/Src/event_groups.c **** 		if( pxEventBits != NULL )
 114:FreeRTOS/Src/event_groups.c **** 		{
 115:FreeRTOS/Src/event_groups.c **** 			pxEventBits->uxEventBits = 0;
 116:FreeRTOS/Src/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 117:FreeRTOS/Src/event_groups.c **** 
 118:FreeRTOS/Src/event_groups.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 119:FreeRTOS/Src/event_groups.c **** 			{
 120:FreeRTOS/Src/event_groups.c **** 				/* Both static and dynamic allocation can be used, so note that
 121:FreeRTOS/Src/event_groups.c **** 				this event group was created statically in case the event group
 122:FreeRTOS/Src/event_groups.c **** 				is later deleted. */
 123:FreeRTOS/Src/event_groups.c **** 				pxEventBits->ucStaticallyAllocated = pdTRUE;
 124:FreeRTOS/Src/event_groups.c **** 			}
 125:FreeRTOS/Src/event_groups.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 126:FreeRTOS/Src/event_groups.c **** 
 127:FreeRTOS/Src/event_groups.c **** 			traceEVENT_GROUP_CREATE( pxEventBits );
 128:FreeRTOS/Src/event_groups.c **** 		}
 129:FreeRTOS/Src/event_groups.c **** 		else
 130:FreeRTOS/Src/event_groups.c **** 		{
 131:FreeRTOS/Src/event_groups.c **** 			/* xEventGroupCreateStatic should only ever be called with
 132:FreeRTOS/Src/event_groups.c **** 			pxEventGroupBuffer pointing to a pre-allocated (compile time
 133:FreeRTOS/Src/event_groups.c **** 			allocated) StaticEventGroup_t variable. */
 134:FreeRTOS/Src/event_groups.c **** 			traceEVENT_GROUP_CREATE_FAILED();
 135:FreeRTOS/Src/event_groups.c **** 		}
 136:FreeRTOS/Src/event_groups.c **** 
 137:FreeRTOS/Src/event_groups.c **** 		return pxEventBits;
 138:FreeRTOS/Src/event_groups.c **** 	}
 139:FreeRTOS/Src/event_groups.c **** 
 140:FreeRTOS/Src/event_groups.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 141:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
 142:FreeRTOS/Src/event_groups.c **** 
 143:FreeRTOS/Src/event_groups.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 144:FreeRTOS/Src/event_groups.c **** 
 145:FreeRTOS/Src/event_groups.c **** 	EventGroupHandle_t xEventGroupCreate( void )
 146:FreeRTOS/Src/event_groups.c **** 	{
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s 			page 4


 147:FreeRTOS/Src/event_groups.c **** 	EventGroup_t *pxEventBits;
 148:FreeRTOS/Src/event_groups.c **** 
 149:FreeRTOS/Src/event_groups.c **** 		/* Allocate the event group.  Justification for MISRA deviation as
 150:FreeRTOS/Src/event_groups.c **** 		follows:  pvPortMalloc() always ensures returned memory blocks are
 151:FreeRTOS/Src/event_groups.c **** 		aligned per the requirements of the MCU stack.  In this case
 152:FreeRTOS/Src/event_groups.c **** 		pvPortMalloc() must return a pointer that is guaranteed to meet the
 153:FreeRTOS/Src/event_groups.c **** 		alignment requirements of the EventGroup_t structure - which (if you
 154:FreeRTOS/Src/event_groups.c **** 		follow it through) is the alignment requirements of the TickType_t type
 155:FreeRTOS/Src/event_groups.c **** 		(EventBits_t being of TickType_t itself).  Therefore, whenever the
 156:FreeRTOS/Src/event_groups.c **** 		stack alignment requirements are greater than or equal to the
 157:FreeRTOS/Src/event_groups.c **** 		TickType_t alignment requirements the cast is safe.  In other cases,
 158:FreeRTOS/Src/event_groups.c **** 		where the natural word size of the architecture is less than
 159:FreeRTOS/Src/event_groups.c **** 		sizeof( TickType_t ), the TickType_t variables will be accessed in two
 160:FreeRTOS/Src/event_groups.c **** 		or more reads operations, and the alignment requirements is only that
 161:FreeRTOS/Src/event_groups.c **** 		of each individual read. */
 162:FreeRTOS/Src/event_groups.c **** 		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see
 163:FreeRTOS/Src/event_groups.c **** 
 164:FreeRTOS/Src/event_groups.c **** 		if( pxEventBits != NULL )
 165:FreeRTOS/Src/event_groups.c **** 		{
 166:FreeRTOS/Src/event_groups.c **** 			pxEventBits->uxEventBits = 0;
 167:FreeRTOS/Src/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 168:FreeRTOS/Src/event_groups.c **** 
 169:FreeRTOS/Src/event_groups.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 170:FreeRTOS/Src/event_groups.c **** 			{
 171:FreeRTOS/Src/event_groups.c **** 				/* Both static and dynamic allocation can be used, so note this
 172:FreeRTOS/Src/event_groups.c **** 				event group was allocated statically in case the event group is
 173:FreeRTOS/Src/event_groups.c **** 				later deleted. */
 174:FreeRTOS/Src/event_groups.c **** 				pxEventBits->ucStaticallyAllocated = pdFALSE;
 175:FreeRTOS/Src/event_groups.c **** 			}
 176:FreeRTOS/Src/event_groups.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 177:FreeRTOS/Src/event_groups.c **** 
 178:FreeRTOS/Src/event_groups.c **** 			traceEVENT_GROUP_CREATE( pxEventBits );
 179:FreeRTOS/Src/event_groups.c **** 		}
 180:FreeRTOS/Src/event_groups.c **** 		else
 181:FreeRTOS/Src/event_groups.c **** 		{
 182:FreeRTOS/Src/event_groups.c **** 			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and doe
 183:FreeRTOS/Src/event_groups.c **** 		}
 184:FreeRTOS/Src/event_groups.c **** 
 185:FreeRTOS/Src/event_groups.c **** 		return pxEventBits;
 186:FreeRTOS/Src/event_groups.c **** 	}
 187:FreeRTOS/Src/event_groups.c **** 
 188:FreeRTOS/Src/event_groups.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 189:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
 190:FreeRTOS/Src/event_groups.c **** 
 191:FreeRTOS/Src/event_groups.c **** EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const E
 192:FreeRTOS/Src/event_groups.c **** {
 193:FreeRTOS/Src/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 194:FreeRTOS/Src/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 195:FreeRTOS/Src/event_groups.c **** BaseType_t xAlreadyYielded;
 196:FreeRTOS/Src/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 197:FreeRTOS/Src/event_groups.c **** 
 198:FreeRTOS/Src/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 199:FreeRTOS/Src/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 200:FreeRTOS/Src/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 201:FreeRTOS/Src/event_groups.c **** 	{
 202:FreeRTOS/Src/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 203:FreeRTOS/Src/event_groups.c **** 	}
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s 			page 5


 204:FreeRTOS/Src/event_groups.c **** 	#endif
 205:FreeRTOS/Src/event_groups.c **** 
 206:FreeRTOS/Src/event_groups.c **** 	vTaskSuspendAll();
 207:FreeRTOS/Src/event_groups.c **** 	{
 208:FreeRTOS/Src/event_groups.c **** 		uxOriginalBitValue = pxEventBits->uxEventBits;
 209:FreeRTOS/Src/event_groups.c **** 
 210:FreeRTOS/Src/event_groups.c **** 		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 211:FreeRTOS/Src/event_groups.c **** 
 212:FreeRTOS/Src/event_groups.c **** 		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 213:FreeRTOS/Src/event_groups.c **** 		{
 214:FreeRTOS/Src/event_groups.c **** 			/* All the rendezvous bits are now set - no need to block. */
 215:FreeRTOS/Src/event_groups.c **** 			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 216:FreeRTOS/Src/event_groups.c **** 
 217:FreeRTOS/Src/event_groups.c **** 			/* Rendezvous always clear the bits.  They will have been cleared
 218:FreeRTOS/Src/event_groups.c **** 			already unless this is the only task in the rendezvous. */
 219:FreeRTOS/Src/event_groups.c **** 			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 220:FreeRTOS/Src/event_groups.c **** 
 221:FreeRTOS/Src/event_groups.c **** 			xTicksToWait = 0;
 222:FreeRTOS/Src/event_groups.c **** 		}
 223:FreeRTOS/Src/event_groups.c **** 		else
 224:FreeRTOS/Src/event_groups.c **** 		{
 225:FreeRTOS/Src/event_groups.c **** 			if( xTicksToWait != ( TickType_t ) 0 )
 226:FreeRTOS/Src/event_groups.c **** 			{
 227:FreeRTOS/Src/event_groups.c **** 				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );
 228:FreeRTOS/Src/event_groups.c **** 
 229:FreeRTOS/Src/event_groups.c **** 				/* Store the bits that the calling task is waiting for in the
 230:FreeRTOS/Src/event_groups.c **** 				task's event list item so the kernel knows when a match is
 231:FreeRTOS/Src/event_groups.c **** 				found.  Then enter the blocked state. */
 232:FreeRTOS/Src/event_groups.c **** 				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eve
 233:FreeRTOS/Src/event_groups.c **** 
 234:FreeRTOS/Src/event_groups.c **** 				/* This assignment is obsolete as uxReturn will get set after
 235:FreeRTOS/Src/event_groups.c **** 				the task unblocks, but some compilers mistakenly generate a
 236:FreeRTOS/Src/event_groups.c **** 				warning about uxReturn being returned without being set if the
 237:FreeRTOS/Src/event_groups.c **** 				assignment is omitted. */
 238:FreeRTOS/Src/event_groups.c **** 				uxReturn = 0;
 239:FreeRTOS/Src/event_groups.c **** 			}
 240:FreeRTOS/Src/event_groups.c **** 			else
 241:FreeRTOS/Src/event_groups.c **** 			{
 242:FreeRTOS/Src/event_groups.c **** 				/* The rendezvous bits were not set, but no block time was
 243:FreeRTOS/Src/event_groups.c **** 				specified - just return the current event bit value. */
 244:FreeRTOS/Src/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 245:FreeRTOS/Src/event_groups.c **** 				xTimeoutOccurred = pdTRUE;
 246:FreeRTOS/Src/event_groups.c **** 			}
 247:FreeRTOS/Src/event_groups.c **** 		}
 248:FreeRTOS/Src/event_groups.c **** 	}
 249:FreeRTOS/Src/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 250:FreeRTOS/Src/event_groups.c **** 
 251:FreeRTOS/Src/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 252:FreeRTOS/Src/event_groups.c **** 	{
 253:FreeRTOS/Src/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 254:FreeRTOS/Src/event_groups.c **** 		{
 255:FreeRTOS/Src/event_groups.c **** 			portYIELD_WITHIN_API();
 256:FreeRTOS/Src/event_groups.c **** 		}
 257:FreeRTOS/Src/event_groups.c **** 		else
 258:FreeRTOS/Src/event_groups.c **** 		{
 259:FreeRTOS/Src/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 260:FreeRTOS/Src/event_groups.c **** 		}
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s 			page 6


 261:FreeRTOS/Src/event_groups.c **** 
 262:FreeRTOS/Src/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 263:FreeRTOS/Src/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 264:FreeRTOS/Src/event_groups.c **** 		the required bits were set they will have been stored in the task's
 265:FreeRTOS/Src/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
 266:FreeRTOS/Src/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 267:FreeRTOS/Src/event_groups.c **** 
 268:FreeRTOS/Src/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 269:FreeRTOS/Src/event_groups.c **** 		{
 270:FreeRTOS/Src/event_groups.c **** 			/* The task timed out, just return the current event bit value. */
 271:FreeRTOS/Src/event_groups.c **** 			taskENTER_CRITICAL();
 272:FreeRTOS/Src/event_groups.c **** 			{
 273:FreeRTOS/Src/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 274:FreeRTOS/Src/event_groups.c **** 
 275:FreeRTOS/Src/event_groups.c **** 				/* Although the task got here because it timed out before the
 276:FreeRTOS/Src/event_groups.c **** 				bits it was waiting for were set, it is possible that since it
 277:FreeRTOS/Src/event_groups.c **** 				unblocked another task has set the bits.  If this is the case
 278:FreeRTOS/Src/event_groups.c **** 				then it needs to clear the bits before exiting. */
 279:FreeRTOS/Src/event_groups.c **** 				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 280:FreeRTOS/Src/event_groups.c **** 				{
 281:FreeRTOS/Src/event_groups.c **** 					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 282:FreeRTOS/Src/event_groups.c **** 				}
 283:FreeRTOS/Src/event_groups.c **** 				else
 284:FreeRTOS/Src/event_groups.c **** 				{
 285:FreeRTOS/Src/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 286:FreeRTOS/Src/event_groups.c **** 				}
 287:FreeRTOS/Src/event_groups.c **** 			}
 288:FreeRTOS/Src/event_groups.c **** 			taskEXIT_CRITICAL();
 289:FreeRTOS/Src/event_groups.c **** 
 290:FreeRTOS/Src/event_groups.c **** 			xTimeoutOccurred = pdTRUE;
 291:FreeRTOS/Src/event_groups.c **** 		}
 292:FreeRTOS/Src/event_groups.c **** 		else
 293:FreeRTOS/Src/event_groups.c **** 		{
 294:FreeRTOS/Src/event_groups.c **** 			/* The task unblocked because the bits were set. */
 295:FreeRTOS/Src/event_groups.c **** 		}
 296:FreeRTOS/Src/event_groups.c **** 
 297:FreeRTOS/Src/event_groups.c **** 		/* Control bits might be set as the task had blocked should not be
 298:FreeRTOS/Src/event_groups.c **** 		returned. */
 299:FreeRTOS/Src/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 300:FreeRTOS/Src/event_groups.c **** 	}
 301:FreeRTOS/Src/event_groups.c **** 
 302:FreeRTOS/Src/event_groups.c **** 	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );
 303:FreeRTOS/Src/event_groups.c **** 
 304:FreeRTOS/Src/event_groups.c **** 	/* Prevent compiler warnings when trace macros are not used. */
 305:FreeRTOS/Src/event_groups.c **** 	( void ) xTimeoutOccurred;
 306:FreeRTOS/Src/event_groups.c **** 
 307:FreeRTOS/Src/event_groups.c **** 	return uxReturn;
 308:FreeRTOS/Src/event_groups.c **** }
 309:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
 310:FreeRTOS/Src/event_groups.c **** 
 311:FreeRTOS/Src/event_groups.c **** EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor,
 312:FreeRTOS/Src/event_groups.c **** {
 313:FreeRTOS/Src/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 314:FreeRTOS/Src/event_groups.c **** EventBits_t uxReturn, uxControlBits = 0;
 315:FreeRTOS/Src/event_groups.c **** BaseType_t xWaitConditionMet, xAlreadyYielded;
 316:FreeRTOS/Src/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 317:FreeRTOS/Src/event_groups.c **** 
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s 			page 7


 318:FreeRTOS/Src/event_groups.c **** 	/* Check the user is not attempting to wait on the bits used by the kernel
 319:FreeRTOS/Src/event_groups.c **** 	itself, and that at least one bit is being requested. */
 320:FreeRTOS/Src/event_groups.c **** 	configASSERT( xEventGroup );
 321:FreeRTOS/Src/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 322:FreeRTOS/Src/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 323:FreeRTOS/Src/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 324:FreeRTOS/Src/event_groups.c **** 	{
 325:FreeRTOS/Src/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 326:FreeRTOS/Src/event_groups.c **** 	}
 327:FreeRTOS/Src/event_groups.c **** 	#endif
 328:FreeRTOS/Src/event_groups.c **** 
 329:FreeRTOS/Src/event_groups.c **** 	vTaskSuspendAll();
 330:FreeRTOS/Src/event_groups.c **** 	{
 331:FreeRTOS/Src/event_groups.c **** 		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 332:FreeRTOS/Src/event_groups.c **** 
 333:FreeRTOS/Src/event_groups.c **** 		/* Check to see if the wait condition is already met or not. */
 334:FreeRTOS/Src/event_groups.c **** 		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 335:FreeRTOS/Src/event_groups.c **** 
 336:FreeRTOS/Src/event_groups.c **** 		if( xWaitConditionMet != pdFALSE )
 337:FreeRTOS/Src/event_groups.c **** 		{
 338:FreeRTOS/Src/event_groups.c **** 			/* The wait condition has already been met so there is no need to
 339:FreeRTOS/Src/event_groups.c **** 			block. */
 340:FreeRTOS/Src/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 341:FreeRTOS/Src/event_groups.c **** 			xTicksToWait = ( TickType_t ) 0;
 342:FreeRTOS/Src/event_groups.c **** 
 343:FreeRTOS/Src/event_groups.c **** 			/* Clear the wait bits if requested to do so. */
 344:FreeRTOS/Src/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 345:FreeRTOS/Src/event_groups.c **** 			{
 346:FreeRTOS/Src/event_groups.c **** 				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 347:FreeRTOS/Src/event_groups.c **** 			}
 348:FreeRTOS/Src/event_groups.c **** 			else
 349:FreeRTOS/Src/event_groups.c **** 			{
 350:FreeRTOS/Src/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 351:FreeRTOS/Src/event_groups.c **** 			}
 352:FreeRTOS/Src/event_groups.c **** 		}
 353:FreeRTOS/Src/event_groups.c **** 		else if( xTicksToWait == ( TickType_t ) 0 )
 354:FreeRTOS/Src/event_groups.c **** 		{
 355:FreeRTOS/Src/event_groups.c **** 			/* The wait condition has not been met, but no block time was
 356:FreeRTOS/Src/event_groups.c **** 			specified, so just return the current value. */
 357:FreeRTOS/Src/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 358:FreeRTOS/Src/event_groups.c **** 			xTimeoutOccurred = pdTRUE;
 359:FreeRTOS/Src/event_groups.c **** 		}
 360:FreeRTOS/Src/event_groups.c **** 		else
 361:FreeRTOS/Src/event_groups.c **** 		{
 362:FreeRTOS/Src/event_groups.c **** 			/* The task is going to block to wait for its required bits to be
 363:FreeRTOS/Src/event_groups.c **** 			set.  uxControlBits are used to remember the specified behaviour of
 364:FreeRTOS/Src/event_groups.c **** 			this call to xEventGroupWaitBits() - for use when the event bits
 365:FreeRTOS/Src/event_groups.c **** 			unblock the task. */
 366:FreeRTOS/Src/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 367:FreeRTOS/Src/event_groups.c **** 			{
 368:FreeRTOS/Src/event_groups.c **** 				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 369:FreeRTOS/Src/event_groups.c **** 			}
 370:FreeRTOS/Src/event_groups.c **** 			else
 371:FreeRTOS/Src/event_groups.c **** 			{
 372:FreeRTOS/Src/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 373:FreeRTOS/Src/event_groups.c **** 			}
 374:FreeRTOS/Src/event_groups.c **** 
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s 			page 8


 375:FreeRTOS/Src/event_groups.c **** 			if( xWaitForAllBits != pdFALSE )
 376:FreeRTOS/Src/event_groups.c **** 			{
 377:FreeRTOS/Src/event_groups.c **** 				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 378:FreeRTOS/Src/event_groups.c **** 			}
 379:FreeRTOS/Src/event_groups.c **** 			else
 380:FreeRTOS/Src/event_groups.c **** 			{
 381:FreeRTOS/Src/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 382:FreeRTOS/Src/event_groups.c **** 			}
 383:FreeRTOS/Src/event_groups.c **** 
 384:FreeRTOS/Src/event_groups.c **** 			/* Store the bits that the calling task is waiting for in the
 385:FreeRTOS/Src/event_groups.c **** 			task's event list item so the kernel knows when a match is
 386:FreeRTOS/Src/event_groups.c **** 			found.  Then enter the blocked state. */
 387:FreeRTOS/Src/event_groups.c **** 			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxCo
 388:FreeRTOS/Src/event_groups.c **** 
 389:FreeRTOS/Src/event_groups.c **** 			/* This is obsolete as it will get set after the task unblocks, but
 390:FreeRTOS/Src/event_groups.c **** 			some compilers mistakenly generate a warning about the variable
 391:FreeRTOS/Src/event_groups.c **** 			being returned without being set if it is not done. */
 392:FreeRTOS/Src/event_groups.c **** 			uxReturn = 0;
 393:FreeRTOS/Src/event_groups.c **** 
 394:FreeRTOS/Src/event_groups.c **** 			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
 395:FreeRTOS/Src/event_groups.c **** 		}
 396:FreeRTOS/Src/event_groups.c **** 	}
 397:FreeRTOS/Src/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 398:FreeRTOS/Src/event_groups.c **** 
 399:FreeRTOS/Src/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 400:FreeRTOS/Src/event_groups.c **** 	{
 401:FreeRTOS/Src/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 402:FreeRTOS/Src/event_groups.c **** 		{
 403:FreeRTOS/Src/event_groups.c **** 			portYIELD_WITHIN_API();
 404:FreeRTOS/Src/event_groups.c **** 		}
 405:FreeRTOS/Src/event_groups.c **** 		else
 406:FreeRTOS/Src/event_groups.c **** 		{
 407:FreeRTOS/Src/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 408:FreeRTOS/Src/event_groups.c **** 		}
 409:FreeRTOS/Src/event_groups.c **** 
 410:FreeRTOS/Src/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 411:FreeRTOS/Src/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 412:FreeRTOS/Src/event_groups.c **** 		the required bits were set they will have been stored in the task's
 413:FreeRTOS/Src/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
 414:FreeRTOS/Src/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 415:FreeRTOS/Src/event_groups.c **** 
 416:FreeRTOS/Src/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 417:FreeRTOS/Src/event_groups.c **** 		{
 418:FreeRTOS/Src/event_groups.c **** 			taskENTER_CRITICAL();
 419:FreeRTOS/Src/event_groups.c **** 			{
 420:FreeRTOS/Src/event_groups.c **** 				/* The task timed out, just return the current event bit value. */
 421:FreeRTOS/Src/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 422:FreeRTOS/Src/event_groups.c **** 
 423:FreeRTOS/Src/event_groups.c **** 				/* It is possible that the event bits were updated between this
 424:FreeRTOS/Src/event_groups.c **** 				task leaving the Blocked state and running again. */
 425:FreeRTOS/Src/event_groups.c **** 				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 426:FreeRTOS/Src/event_groups.c **** 				{
 427:FreeRTOS/Src/event_groups.c **** 					if( xClearOnExit != pdFALSE )
 428:FreeRTOS/Src/event_groups.c **** 					{
 429:FreeRTOS/Src/event_groups.c **** 						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 430:FreeRTOS/Src/event_groups.c **** 					}
 431:FreeRTOS/Src/event_groups.c **** 					else
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s 			page 9


 432:FreeRTOS/Src/event_groups.c **** 					{
 433:FreeRTOS/Src/event_groups.c **** 						mtCOVERAGE_TEST_MARKER();
 434:FreeRTOS/Src/event_groups.c **** 					}
 435:FreeRTOS/Src/event_groups.c **** 				}
 436:FreeRTOS/Src/event_groups.c **** 				else
 437:FreeRTOS/Src/event_groups.c **** 				{
 438:FreeRTOS/Src/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 439:FreeRTOS/Src/event_groups.c **** 				}
 440:FreeRTOS/Src/event_groups.c **** 				xTimeoutOccurred = pdTRUE;
 441:FreeRTOS/Src/event_groups.c **** 			}
 442:FreeRTOS/Src/event_groups.c **** 			taskEXIT_CRITICAL();
 443:FreeRTOS/Src/event_groups.c **** 		}
 444:FreeRTOS/Src/event_groups.c **** 		else
 445:FreeRTOS/Src/event_groups.c **** 		{
 446:FreeRTOS/Src/event_groups.c **** 			/* The task unblocked because the bits were set. */
 447:FreeRTOS/Src/event_groups.c **** 		}
 448:FreeRTOS/Src/event_groups.c **** 
 449:FreeRTOS/Src/event_groups.c **** 		/* The task blocked so control bits may have been set. */
 450:FreeRTOS/Src/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 451:FreeRTOS/Src/event_groups.c **** 	}
 452:FreeRTOS/Src/event_groups.c **** 	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
 453:FreeRTOS/Src/event_groups.c **** 
 454:FreeRTOS/Src/event_groups.c **** 	/* Prevent compiler warnings when trace macros are not used. */
 455:FreeRTOS/Src/event_groups.c **** 	( void ) xTimeoutOccurred;
 456:FreeRTOS/Src/event_groups.c **** 
 457:FreeRTOS/Src/event_groups.c **** 	return uxReturn;
 458:FreeRTOS/Src/event_groups.c **** }
 459:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
 460:FreeRTOS/Src/event_groups.c **** 
 461:FreeRTOS/Src/event_groups.c **** EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
 462:FreeRTOS/Src/event_groups.c **** {
 463:FreeRTOS/Src/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 464:FreeRTOS/Src/event_groups.c **** EventBits_t uxReturn;
 465:FreeRTOS/Src/event_groups.c **** 
 466:FreeRTOS/Src/event_groups.c **** 	/* Check the user is not attempting to clear the bits used by the kernel
 467:FreeRTOS/Src/event_groups.c **** 	itself. */
 468:FreeRTOS/Src/event_groups.c **** 	configASSERT( xEventGroup );
 469:FreeRTOS/Src/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 470:FreeRTOS/Src/event_groups.c **** 
 471:FreeRTOS/Src/event_groups.c **** 	taskENTER_CRITICAL();
 472:FreeRTOS/Src/event_groups.c **** 	{
 473:FreeRTOS/Src/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );
 474:FreeRTOS/Src/event_groups.c **** 
 475:FreeRTOS/Src/event_groups.c **** 		/* The value returned is the event group value prior to the bits being
 476:FreeRTOS/Src/event_groups.c **** 		cleared. */
 477:FreeRTOS/Src/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
 478:FreeRTOS/Src/event_groups.c **** 
 479:FreeRTOS/Src/event_groups.c **** 		/* Clear the bits. */
 480:FreeRTOS/Src/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
 481:FreeRTOS/Src/event_groups.c **** 	}
 482:FreeRTOS/Src/event_groups.c **** 	taskEXIT_CRITICAL();
 483:FreeRTOS/Src/event_groups.c **** 
 484:FreeRTOS/Src/event_groups.c **** 	return uxReturn;
 485:FreeRTOS/Src/event_groups.c **** }
 486:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
 487:FreeRTOS/Src/event_groups.c **** 
 488:FreeRTOS/Src/event_groups.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_T
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s 			page 10


 489:FreeRTOS/Src/event_groups.c **** 
 490:FreeRTOS/Src/event_groups.c **** 	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsTo
 491:FreeRTOS/Src/event_groups.c **** 	{
 492:FreeRTOS/Src/event_groups.c **** 		BaseType_t xReturn;
 493:FreeRTOS/Src/event_groups.c **** 
 494:FreeRTOS/Src/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
 495:FreeRTOS/Src/event_groups.c **** 		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( 
 496:FreeRTOS/Src/event_groups.c **** 
 497:FreeRTOS/Src/event_groups.c **** 		return xReturn;
 498:FreeRTOS/Src/event_groups.c **** 	}
 499:FreeRTOS/Src/event_groups.c **** 
 500:FreeRTOS/Src/event_groups.c **** #endif
 501:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
 502:FreeRTOS/Src/event_groups.c **** 
 503:FreeRTOS/Src/event_groups.c **** EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
 504:FreeRTOS/Src/event_groups.c **** {
 505:FreeRTOS/Src/event_groups.c **** UBaseType_t uxSavedInterruptStatus;
 506:FreeRTOS/Src/event_groups.c **** EventGroup_t const * const pxEventBits = xEventGroup;
 507:FreeRTOS/Src/event_groups.c **** EventBits_t uxReturn;
 508:FreeRTOS/Src/event_groups.c **** 
 509:FreeRTOS/Src/event_groups.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 510:FreeRTOS/Src/event_groups.c **** 	{
 511:FreeRTOS/Src/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
 512:FreeRTOS/Src/event_groups.c **** 	}
 513:FreeRTOS/Src/event_groups.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 514:FreeRTOS/Src/event_groups.c **** 
 515:FreeRTOS/Src/event_groups.c **** 	return uxReturn;
 516:FreeRTOS/Src/event_groups.c **** } /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to co
 517:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
 518:FreeRTOS/Src/event_groups.c **** 
 519:FreeRTOS/Src/event_groups.c **** EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
 520:FreeRTOS/Src/event_groups.c **** {
 521:FreeRTOS/Src/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 522:FreeRTOS/Src/event_groups.c **** ListItem_t const *pxListEnd;
 523:FreeRTOS/Src/event_groups.c **** List_t const * pxList;
 524:FreeRTOS/Src/event_groups.c **** EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 525:FreeRTOS/Src/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 526:FreeRTOS/Src/event_groups.c **** BaseType_t xMatchFound = pdFALSE;
 527:FreeRTOS/Src/event_groups.c **** 
 528:FreeRTOS/Src/event_groups.c **** 	/* Check the user is not attempting to set the bits used by the kernel
 529:FreeRTOS/Src/event_groups.c **** 	itself. */
 530:FreeRTOS/Src/event_groups.c **** 	configASSERT( xEventGroup );
 531:FreeRTOS/Src/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 532:FreeRTOS/Src/event_groups.c **** 
 533:FreeRTOS/Src/event_groups.c **** 	pxList = &( pxEventBits->xTasksWaitingForBits );
 534:FreeRTOS/Src/event_groups.c **** 	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is use
 535:FreeRTOS/Src/event_groups.c **** 	vTaskSuspendAll();
 536:FreeRTOS/Src/event_groups.c **** 	{
 537:FreeRTOS/Src/event_groups.c **** 		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
 538:FreeRTOS/Src/event_groups.c **** 
 539:FreeRTOS/Src/event_groups.c **** 		pxListItem = listGET_HEAD_ENTRY( pxList );
 540:FreeRTOS/Src/event_groups.c **** 
 541:FreeRTOS/Src/event_groups.c **** 		/* Set the bits. */
 542:FreeRTOS/Src/event_groups.c **** 		pxEventBits->uxEventBits |= uxBitsToSet;
 543:FreeRTOS/Src/event_groups.c **** 
 544:FreeRTOS/Src/event_groups.c **** 		/* See if the new bit value should unblock any tasks. */
 545:FreeRTOS/Src/event_groups.c **** 		while( pxListItem != pxListEnd )
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s 			page 11


 546:FreeRTOS/Src/event_groups.c **** 		{
 547:FreeRTOS/Src/event_groups.c **** 			pxNext = listGET_NEXT( pxListItem );
 548:FreeRTOS/Src/event_groups.c **** 			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 549:FreeRTOS/Src/event_groups.c **** 			xMatchFound = pdFALSE;
 550:FreeRTOS/Src/event_groups.c **** 
 551:FreeRTOS/Src/event_groups.c **** 			/* Split the bits waited for from the control bits. */
 552:FreeRTOS/Src/event_groups.c **** 			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 553:FreeRTOS/Src/event_groups.c **** 			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 554:FreeRTOS/Src/event_groups.c **** 
 555:FreeRTOS/Src/event_groups.c **** 			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 556:FreeRTOS/Src/event_groups.c **** 			{
 557:FreeRTOS/Src/event_groups.c **** 				/* Just looking for single bit being set. */
 558:FreeRTOS/Src/event_groups.c **** 				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 559:FreeRTOS/Src/event_groups.c **** 				{
 560:FreeRTOS/Src/event_groups.c **** 					xMatchFound = pdTRUE;
 561:FreeRTOS/Src/event_groups.c **** 				}
 562:FreeRTOS/Src/event_groups.c **** 				else
 563:FreeRTOS/Src/event_groups.c **** 				{
 564:FreeRTOS/Src/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 565:FreeRTOS/Src/event_groups.c **** 				}
 566:FreeRTOS/Src/event_groups.c **** 			}
 567:FreeRTOS/Src/event_groups.c **** 			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 568:FreeRTOS/Src/event_groups.c **** 			{
 569:FreeRTOS/Src/event_groups.c **** 				/* All bits are set. */
 570:FreeRTOS/Src/event_groups.c **** 				xMatchFound = pdTRUE;
 571:FreeRTOS/Src/event_groups.c **** 			}
 572:FreeRTOS/Src/event_groups.c **** 			else
 573:FreeRTOS/Src/event_groups.c **** 			{
 574:FreeRTOS/Src/event_groups.c **** 				/* Need all bits to be set, but not all the bits were set. */
 575:FreeRTOS/Src/event_groups.c **** 			}
 576:FreeRTOS/Src/event_groups.c **** 
 577:FreeRTOS/Src/event_groups.c **** 			if( xMatchFound != pdFALSE )
 578:FreeRTOS/Src/event_groups.c **** 			{
 579:FreeRTOS/Src/event_groups.c **** 				/* The bits match.  Should the bits be cleared on exit? */
 580:FreeRTOS/Src/event_groups.c **** 				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 581:FreeRTOS/Src/event_groups.c **** 				{
 582:FreeRTOS/Src/event_groups.c **** 					uxBitsToClear |= uxBitsWaitedFor;
 583:FreeRTOS/Src/event_groups.c **** 				}
 584:FreeRTOS/Src/event_groups.c **** 				else
 585:FreeRTOS/Src/event_groups.c **** 				{
 586:FreeRTOS/Src/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 587:FreeRTOS/Src/event_groups.c **** 				}
 588:FreeRTOS/Src/event_groups.c **** 
 589:FreeRTOS/Src/event_groups.c **** 				/* Store the actual event flag value in the task's event list
 590:FreeRTOS/Src/event_groups.c **** 				item before removing the task from the event list.  The
 591:FreeRTOS/Src/event_groups.c **** 				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
 592:FreeRTOS/Src/event_groups.c **** 				that is was unblocked due to its required bits matching, rather
 593:FreeRTOS/Src/event_groups.c **** 				than because it timed out. */
 594:FreeRTOS/Src/event_groups.c **** 				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO
 595:FreeRTOS/Src/event_groups.c **** 			}
 596:FreeRTOS/Src/event_groups.c **** 
 597:FreeRTOS/Src/event_groups.c **** 			/* Move onto the next list item.  Note pxListItem->pxNext is not
 598:FreeRTOS/Src/event_groups.c **** 			used here as the list item may have been removed from the event list
 599:FreeRTOS/Src/event_groups.c **** 			and inserted into the ready/pending reading list. */
 600:FreeRTOS/Src/event_groups.c **** 			pxListItem = pxNext;
 601:FreeRTOS/Src/event_groups.c **** 		}
 602:FreeRTOS/Src/event_groups.c **** 
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s 			page 12


 603:FreeRTOS/Src/event_groups.c **** 		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
 604:FreeRTOS/Src/event_groups.c **** 		bit was set in the control word. */
 605:FreeRTOS/Src/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
 606:FreeRTOS/Src/event_groups.c **** 	}
 607:FreeRTOS/Src/event_groups.c **** 	( void ) xTaskResumeAll();
 608:FreeRTOS/Src/event_groups.c **** 
 609:FreeRTOS/Src/event_groups.c **** 	return pxEventBits->uxEventBits;
 610:FreeRTOS/Src/event_groups.c **** }
 611:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
 612:FreeRTOS/Src/event_groups.c **** 
 613:FreeRTOS/Src/event_groups.c **** void vEventGroupDelete( EventGroupHandle_t xEventGroup )
 614:FreeRTOS/Src/event_groups.c **** {
 615:FreeRTOS/Src/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 616:FreeRTOS/Src/event_groups.c **** const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 617:FreeRTOS/Src/event_groups.c **** 
 618:FreeRTOS/Src/event_groups.c **** 	vTaskSuspendAll();
 619:FreeRTOS/Src/event_groups.c **** 	{
 620:FreeRTOS/Src/event_groups.c **** 		traceEVENT_GROUP_DELETE( xEventGroup );
 621:FreeRTOS/Src/event_groups.c **** 
 622:FreeRTOS/Src/event_groups.c **** 		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 623:FreeRTOS/Src/event_groups.c **** 		{
 624:FreeRTOS/Src/event_groups.c **** 			/* Unblock the task, returning 0 as the event list is being deleted
 625:FreeRTOS/Src/event_groups.c **** 			and cannot therefore have any bits set. */
 626:FreeRTOS/Src/event_groups.c **** 			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaiting
 627:FreeRTOS/Src/event_groups.c **** 			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO
 628:FreeRTOS/Src/event_groups.c **** 		}
 629:FreeRTOS/Src/event_groups.c **** 
 630:FreeRTOS/Src/event_groups.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
 631:FreeRTOS/Src/event_groups.c **** 		{
 632:FreeRTOS/Src/event_groups.c **** 			/* The event group can only have been allocated dynamically - free
 633:FreeRTOS/Src/event_groups.c **** 			it again. */
 634:FreeRTOS/Src/event_groups.c **** 			vPortFree( pxEventBits );
 635:FreeRTOS/Src/event_groups.c **** 		}
 636:FreeRTOS/Src/event_groups.c **** 		#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 637:FreeRTOS/Src/event_groups.c **** 		{
 638:FreeRTOS/Src/event_groups.c **** 			/* The event group could have been allocated statically or
 639:FreeRTOS/Src/event_groups.c **** 			dynamically, so check before attempting to free the memory. */
 640:FreeRTOS/Src/event_groups.c **** 			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 641:FreeRTOS/Src/event_groups.c **** 			{
 642:FreeRTOS/Src/event_groups.c **** 				vPortFree( pxEventBits );
 643:FreeRTOS/Src/event_groups.c **** 			}
 644:FreeRTOS/Src/event_groups.c **** 			else
 645:FreeRTOS/Src/event_groups.c **** 			{
 646:FreeRTOS/Src/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 647:FreeRTOS/Src/event_groups.c **** 			}
 648:FreeRTOS/Src/event_groups.c **** 		}
 649:FreeRTOS/Src/event_groups.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 650:FreeRTOS/Src/event_groups.c **** 	}
 651:FreeRTOS/Src/event_groups.c **** 	( void ) xTaskResumeAll();
 652:FreeRTOS/Src/event_groups.c **** }
 653:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
 654:FreeRTOS/Src/event_groups.c **** 
 655:FreeRTOS/Src/event_groups.c **** /* For internal use only - execute a 'set bits' command that was pended from
 656:FreeRTOS/Src/event_groups.c **** an interrupt. */
 657:FreeRTOS/Src/event_groups.c **** void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
 658:FreeRTOS/Src/event_groups.c **** {
 659:FreeRTOS/Src/event_groups.c **** 	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoi
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s 			page 13


 660:FreeRTOS/Src/event_groups.c **** }
 661:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
 662:FreeRTOS/Src/event_groups.c **** 
 663:FreeRTOS/Src/event_groups.c **** /* For internal use only - execute a 'clear bits' command that was pended from
 664:FreeRTOS/Src/event_groups.c **** an interrupt. */
 665:FreeRTOS/Src/event_groups.c **** void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
 666:FreeRTOS/Src/event_groups.c **** {
 667:FreeRTOS/Src/event_groups.c **** 	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't 
 668:FreeRTOS/Src/event_groups.c **** }
 669:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
 670:FreeRTOS/Src/event_groups.c **** 
 671:FreeRTOS/Src/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxB
 672:FreeRTOS/Src/event_groups.c **** {
  27              		.loc 1 672 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
 673:FreeRTOS/Src/event_groups.c **** BaseType_t xWaitConditionMet = pdFALSE;
 674:FreeRTOS/Src/event_groups.c **** 
 675:FreeRTOS/Src/event_groups.c **** 	if( xWaitForAllBits == pdFALSE )
  33              		.loc 1 675 0
  34 0000 1AB9     		cbnz	r2, .L2
 676:FreeRTOS/Src/event_groups.c **** 	{
 677:FreeRTOS/Src/event_groups.c **** 		/* Task only has to wait for one bit within uxBitsToWaitFor to be
 678:FreeRTOS/Src/event_groups.c **** 		set.  Is one already set? */
 679:FreeRTOS/Src/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
  35              		.loc 1 679 0
  36 0002 0842     		tst	r0, r1
  37 0004 06D1     		bne	.L4
 673:FreeRTOS/Src/event_groups.c **** BaseType_t xWaitConditionMet = pdFALSE;
  38              		.loc 1 673 0
  39 0006 0020     		movs	r0, #0
  40              	.LVL1:
  41 0008 7047     		bx	lr
  42              	.LVL2:
  43              	.L2:
 680:FreeRTOS/Src/event_groups.c **** 		{
 681:FreeRTOS/Src/event_groups.c **** 			xWaitConditionMet = pdTRUE;
 682:FreeRTOS/Src/event_groups.c **** 		}
 683:FreeRTOS/Src/event_groups.c **** 		else
 684:FreeRTOS/Src/event_groups.c **** 		{
 685:FreeRTOS/Src/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 686:FreeRTOS/Src/event_groups.c **** 		}
 687:FreeRTOS/Src/event_groups.c **** 	}
 688:FreeRTOS/Src/event_groups.c **** 	else
 689:FreeRTOS/Src/event_groups.c **** 	{
 690:FreeRTOS/Src/event_groups.c **** 		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
 691:FreeRTOS/Src/event_groups.c **** 		Are they set already? */
 692:FreeRTOS/Src/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
  44              		.loc 1 692 0
  45 000a 31EA0003 		bics	r3, r1, r0
  46 000e 03D0     		beq	.L5
 673:FreeRTOS/Src/event_groups.c **** 
  47              		.loc 1 673 0
  48 0010 0020     		movs	r0, #0
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s 			page 14


  49              	.LVL3:
  50 0012 7047     		bx	lr
  51              	.LVL4:
  52              	.L4:
 681:FreeRTOS/Src/event_groups.c **** 		}
  53              		.loc 1 681 0
  54 0014 0120     		movs	r0, #1
  55              	.LVL5:
  56 0016 7047     		bx	lr
  57              	.LVL6:
  58              	.L5:
 693:FreeRTOS/Src/event_groups.c **** 		{
 694:FreeRTOS/Src/event_groups.c **** 			xWaitConditionMet = pdTRUE;
  59              		.loc 1 694 0
  60 0018 0120     		movs	r0, #1
  61              	.LVL7:
 695:FreeRTOS/Src/event_groups.c **** 		}
 696:FreeRTOS/Src/event_groups.c **** 		else
 697:FreeRTOS/Src/event_groups.c **** 		{
 698:FreeRTOS/Src/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 699:FreeRTOS/Src/event_groups.c **** 		}
 700:FreeRTOS/Src/event_groups.c **** 	}
 701:FreeRTOS/Src/event_groups.c **** 
 702:FreeRTOS/Src/event_groups.c **** 	return xWaitConditionMet;
 703:FreeRTOS/Src/event_groups.c **** }
  62              		.loc 1 703 0
  63 001a 7047     		bx	lr
  64              		.cfi_endproc
  65              	.LFE41:
  67              		.section	.text.xEventGroupCreate,"ax",%progbits
  68              		.align	2
  69              		.global	xEventGroupCreate
  70              		.thumb
  71              		.thumb_func
  73              	xEventGroupCreate:
  74              	.LFB32:
 146:FreeRTOS/Src/event_groups.c **** 	EventGroup_t *pxEventBits;
  75              		.loc 1 146 0
  76              		.cfi_startproc
  77              		@ args = 0, pretend = 0, frame = 0
  78              		@ frame_needed = 0, uses_anonymous_args = 0
  79 0000 10B5     		push	{r4, lr}
  80              	.LCFI0:
  81              		.cfi_def_cfa_offset 8
  82              		.cfi_offset 4, -8
  83              		.cfi_offset 14, -4
 162:FreeRTOS/Src/event_groups.c **** 
  84              		.loc 1 162 0
  85 0002 1820     		movs	r0, #24
  86 0004 FFF7FEFF 		bl	pvPortMalloc
  87              	.LVL8:
 164:FreeRTOS/Src/event_groups.c **** 		{
  88              		.loc 1 164 0
  89 0008 0446     		mov	r4, r0
  90 000a 20B1     		cbz	r0, .L7
 166:FreeRTOS/Src/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
  91              		.loc 1 166 0
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s 			page 15


  92 000c 0023     		movs	r3, #0
  93 000e 40F8043B 		str	r3, [r0], #4
  94              	.LVL9:
 167:FreeRTOS/Src/event_groups.c **** 
  95              		.loc 1 167 0
  96 0012 FFF7FEFF 		bl	vListInitialise
  97              	.LVL10:
  98              	.L7:
 186:FreeRTOS/Src/event_groups.c **** 
  99              		.loc 1 186 0
 100 0016 2046     		mov	r0, r4
 101 0018 10BD     		pop	{r4, pc}
 102              		.cfi_endproc
 103              	.LFE32:
 105 001a 00BF     		.section	.text.xEventGroupWaitBits,"ax",%progbits
 106              		.align	2
 107              		.global	xEventGroupWaitBits
 108              		.thumb
 109              		.thumb_func
 111              	xEventGroupWaitBits:
 112              	.LFB34:
 312:FreeRTOS/Src/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 113              		.loc 1 312 0
 114              		.cfi_startproc
 115              		@ args = 4, pretend = 0, frame = 0
 116              		@ frame_needed = 0, uses_anonymous_args = 0
 117              	.LVL11:
 118 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 119              	.LCFI1:
 120              		.cfi_def_cfa_offset 32
 121              		.cfi_offset 3, -32
 122              		.cfi_offset 4, -28
 123              		.cfi_offset 5, -24
 124              		.cfi_offset 6, -20
 125              		.cfi_offset 7, -16
 126              		.cfi_offset 8, -12
 127              		.cfi_offset 9, -8
 128              		.cfi_offset 14, -4
 129 0004 0746     		mov	r7, r0
 130 0006 0E46     		mov	r6, r1
 131 0008 9146     		mov	r9, r2
 132 000a 9846     		mov	r8, r3
 133 000c 089D     		ldr	r5, [sp, #32]
 134              	.LVL12:
 329:FreeRTOS/Src/event_groups.c **** 	{
 135              		.loc 1 329 0
 136 000e FFF7FEFF 		bl	vTaskSuspendAll
 137              	.LVL13:
 138              	.LBB6:
 331:FreeRTOS/Src/event_groups.c **** 
 139              		.loc 1 331 0
 140 0012 3C68     		ldr	r4, [r7]
 141              	.LVL14:
 334:FreeRTOS/Src/event_groups.c **** 
 142              		.loc 1 334 0
 143 0014 4246     		mov	r2, r8
 144 0016 3146     		mov	r1, r6
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s 			page 16


 145 0018 2046     		mov	r0, r4
 146 001a FFF7FEFF 		bl	prvTestWaitCondition
 147              	.LVL15:
 336:FreeRTOS/Src/event_groups.c **** 		{
 148              		.loc 1 336 0
 149 001e 38B1     		cbz	r0, .L10
 150              	.LVL16:
 344:FreeRTOS/Src/event_groups.c **** 			{
 151              		.loc 1 344 0
 152 0020 B9F1000F 		cmp	r9, #0
 153 0024 18D0     		beq	.L18
 346:FreeRTOS/Src/event_groups.c **** 			}
 154              		.loc 1 346 0
 155 0026 24EA0603 		bic	r3, r4, r6
 156 002a 3B60     		str	r3, [r7]
 341:FreeRTOS/Src/event_groups.c **** 
 157              		.loc 1 341 0
 158 002c 0025     		movs	r5, #0
 159 002e 14E0     		b	.L11
 160              	.LVL17:
 161              	.L10:
 353:FreeRTOS/Src/event_groups.c **** 		{
 162              		.loc 1 353 0
 163 0030 9DB1     		cbz	r5, .L11
 366:FreeRTOS/Src/event_groups.c **** 			{
 164              		.loc 1 366 0
 165 0032 B9F1000F 		cmp	r9, #0
 166 0036 01D1     		bne	.L19
 167              	.LBE6:
 314:FreeRTOS/Src/event_groups.c **** BaseType_t xWaitConditionMet, xAlreadyYielded;
 168              		.loc 1 314 0
 169 0038 0021     		movs	r1, #0
 170 003a 01E0     		b	.L12
 171              	.L19:
 172              	.LBB7:
 368:FreeRTOS/Src/event_groups.c **** 			}
 173              		.loc 1 368 0
 174 003c 4FF08071 		mov	r1, #16777216
 175              	.L12:
 176              	.LVL18:
 375:FreeRTOS/Src/event_groups.c **** 			{
 177              		.loc 1 375 0
 178 0040 B8F1000F 		cmp	r8, #0
 179 0044 01D0     		beq	.L13
 377:FreeRTOS/Src/event_groups.c **** 			}
 180              		.loc 1 377 0
 181 0046 41F08061 		orr	r1, r1, #67108864
 182              	.LVL19:
 183              	.L13:
 387:FreeRTOS/Src/event_groups.c **** 
 184              		.loc 1 387 0
 185 004a 2A46     		mov	r2, r5
 186 004c 3143     		orrs	r1, r1, r6
 187              	.LVL20:
 188 004e 381D     		adds	r0, r7, #4
 189              	.LVL21:
 190 0050 FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s 			page 17


 191              	.LVL22:
 392:FreeRTOS/Src/event_groups.c **** 
 192              		.loc 1 392 0
 193 0054 0024     		movs	r4, #0
 194              	.LVL23:
 195 0056 00E0     		b	.L11
 196              	.LVL24:
 197              	.L18:
 341:FreeRTOS/Src/event_groups.c **** 
 198              		.loc 1 341 0
 199 0058 0025     		movs	r5, #0
 200              	.LVL25:
 201              	.L11:
 202              	.LBE7:
 397:FreeRTOS/Src/event_groups.c **** 
 203              		.loc 1 397 0
 204 005a FFF7FEFF 		bl	xTaskResumeAll
 205              	.LVL26:
 399:FreeRTOS/Src/event_groups.c **** 	{
 206              		.loc 1 399 0
 207 005e 0DB3     		cbz	r5, .L14
 401:FreeRTOS/Src/event_groups.c **** 		{
 208              		.loc 1 401 0
 209 0060 38B9     		cbnz	r0, .L15
 403:FreeRTOS/Src/event_groups.c **** 		}
 210              		.loc 1 403 0
 211 0062 4FF08052 		mov	r2, #268435456
 212 0066 114B     		ldr	r3, .L21
 213 0068 1A60     		str	r2, [r3]
 214              		.syntax unified
 215              	@ 403 "FreeRTOS/Src/event_groups.c" 1
 216 006a BFF34F8F 		dsb
 217              	@ 0 "" 2
 218              	@ 403 "FreeRTOS/Src/event_groups.c" 1
 219 006e BFF36F8F 		isb
 220              	@ 0 "" 2
 221              		.thumb
 222              		.syntax unified
 223              	.L15:
 414:FreeRTOS/Src/event_groups.c **** 
 224              		.loc 1 414 0
 225 0072 FFF7FEFF 		bl	uxTaskResetEventItemValue
 226              	.LVL27:
 227 0076 0446     		mov	r4, r0
 228              	.LVL28:
 416:FreeRTOS/Src/event_groups.c **** 		{
 229              		.loc 1 416 0
 230 0078 10F0007F 		tst	r0, #33554432
 231 007c 10D1     		bne	.L16
 418:FreeRTOS/Src/event_groups.c **** 			{
 232              		.loc 1 418 0
 233 007e FFF7FEFF 		bl	vPortEnterCritical
 234              	.LVL29:
 421:FreeRTOS/Src/event_groups.c **** 
 235              		.loc 1 421 0
 236 0082 3C68     		ldr	r4, [r7]
 237              	.LVL30:
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s 			page 18


 425:FreeRTOS/Src/event_groups.c **** 				{
 238              		.loc 1 425 0
 239 0084 4246     		mov	r2, r8
 240 0086 3146     		mov	r1, r6
 241 0088 2046     		mov	r0, r4
 242 008a FFF7FEFF 		bl	prvTestWaitCondition
 243              	.LVL31:
 244 008e 28B1     		cbz	r0, .L17
 427:FreeRTOS/Src/event_groups.c **** 					{
 245              		.loc 1 427 0
 246 0090 B9F1000F 		cmp	r9, #0
 247 0094 02D0     		beq	.L17
 429:FreeRTOS/Src/event_groups.c **** 					}
 248              		.loc 1 429 0
 249 0096 24EA0606 		bic	r6, r4, r6
 250              	.LVL32:
 251 009a 3E60     		str	r6, [r7]
 252              	.L17:
 253              	.LVL33:
 442:FreeRTOS/Src/event_groups.c **** 		}
 254              		.loc 1 442 0
 255 009c FFF7FEFF 		bl	vPortExitCritical
 256              	.LVL34:
 257              	.L16:
 450:FreeRTOS/Src/event_groups.c **** 	}
 258              		.loc 1 450 0
 259 00a0 24F07F44 		bic	r4, r4, #-16777216
 260              	.LVL35:
 261              	.L14:
 458:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
 262              		.loc 1 458 0
 263 00a4 2046     		mov	r0, r4
 264 00a6 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 265              	.LVL36:
 266              	.L22:
 267 00aa 00BF     		.align	2
 268              	.L21:
 269 00ac 04ED00E0 		.word	-536810236
 270              		.cfi_endproc
 271              	.LFE34:
 273              		.section	.text.xEventGroupClearBits,"ax",%progbits
 274              		.align	2
 275              		.global	xEventGroupClearBits
 276              		.thumb
 277              		.thumb_func
 279              	xEventGroupClearBits:
 280              	.LFB35:
 462:FreeRTOS/Src/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 281              		.loc 1 462 0
 282              		.cfi_startproc
 283              		@ args = 0, pretend = 0, frame = 0
 284              		@ frame_needed = 0, uses_anonymous_args = 0
 285              	.LVL37:
 286 0000 70B5     		push	{r4, r5, r6, lr}
 287              	.LCFI2:
 288              		.cfi_def_cfa_offset 16
 289              		.cfi_offset 4, -16
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s 			page 19


 290              		.cfi_offset 5, -12
 291              		.cfi_offset 6, -8
 292              		.cfi_offset 14, -4
 293 0002 0646     		mov	r6, r0
 294 0004 0C46     		mov	r4, r1
 295              	.LVL38:
 471:FreeRTOS/Src/event_groups.c **** 	{
 296              		.loc 1 471 0
 297 0006 FFF7FEFF 		bl	vPortEnterCritical
 298              	.LVL39:
 477:FreeRTOS/Src/event_groups.c **** 
 299              		.loc 1 477 0
 300 000a 3568     		ldr	r5, [r6]
 301              	.LVL40:
 480:FreeRTOS/Src/event_groups.c **** 	}
 302              		.loc 1 480 0
 303 000c 25EA0404 		bic	r4, r5, r4
 304              	.LVL41:
 305 0010 3460     		str	r4, [r6]
 482:FreeRTOS/Src/event_groups.c **** 
 306              		.loc 1 482 0
 307 0012 FFF7FEFF 		bl	vPortExitCritical
 308              	.LVL42:
 485:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
 309              		.loc 1 485 0
 310 0016 2846     		mov	r0, r5
 311 0018 70BD     		pop	{r4, r5, r6, pc}
 312              		.cfi_endproc
 313              	.LFE35:
 315 001a 00BF     		.section	.text.xEventGroupGetBitsFromISR,"ax",%progbits
 316              		.align	2
 317              		.global	xEventGroupGetBitsFromISR
 318              		.thumb
 319              		.thumb_func
 321              	xEventGroupGetBitsFromISR:
 322              	.LFB36:
 504:FreeRTOS/Src/event_groups.c **** UBaseType_t uxSavedInterruptStatus;
 323              		.loc 1 504 0
 324              		.cfi_startproc
 325              		@ args = 0, pretend = 0, frame = 0
 326              		@ frame_needed = 0, uses_anonymous_args = 0
 327              		@ link register save eliminated.
 328              	.LVL43:
 329              	.LBB8:
 330              	.LBB9:
 331              		.file 2 "FreeRTOS/ARM_CM3/portmacro.h"
   1:FreeRTOS/ARM_CM3/portmacro.h **** /*
   2:FreeRTOS/ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.1.1
   3:FreeRTOS/ARM_CM3/portmacro.h ****  * Copyright (C) 2018 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/ARM_CM3/portmacro.h ****  *
   5:FreeRTOS/ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:FreeRTOS/ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:FreeRTOS/ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:FreeRTOS/ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:FreeRTOS/ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:FreeRTOS/ARM_CM3/portmacro.h ****  * subject to the following conditions:
  11:FreeRTOS/ARM_CM3/portmacro.h ****  *
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s 			page 20


  12:FreeRTOS/ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:FreeRTOS/ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  14:FreeRTOS/ARM_CM3/portmacro.h ****  *
  15:FreeRTOS/ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:FreeRTOS/ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:FreeRTOS/ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:FreeRTOS/ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:FreeRTOS/ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:FreeRTOS/ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:FreeRTOS/ARM_CM3/portmacro.h ****  *
  22:FreeRTOS/ARM_CM3/portmacro.h ****  * http://www.FreeRTOS.org
  23:FreeRTOS/ARM_CM3/portmacro.h ****  * http://aws.amazon.com/freertos
  24:FreeRTOS/ARM_CM3/portmacro.h ****  *
  25:FreeRTOS/ARM_CM3/portmacro.h ****  * 1 tab == 4 spaces!
  26:FreeRTOS/ARM_CM3/portmacro.h ****  */
  27:FreeRTOS/ARM_CM3/portmacro.h **** 
  28:FreeRTOS/ARM_CM3/portmacro.h **** 
  29:FreeRTOS/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  30:FreeRTOS/ARM_CM3/portmacro.h **** #define PORTMACRO_H
  31:FreeRTOS/ARM_CM3/portmacro.h **** 
  32:FreeRTOS/ARM_CM3/portmacro.h **** #ifdef __cplusplus
  33:FreeRTOS/ARM_CM3/portmacro.h **** extern "C" {
  34:FreeRTOS/ARM_CM3/portmacro.h **** #endif
  35:FreeRTOS/ARM_CM3/portmacro.h **** 
  36:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  37:FreeRTOS/ARM_CM3/portmacro.h ****  * Port specific definitions.
  38:FreeRTOS/ARM_CM3/portmacro.h ****  *
  39:FreeRTOS/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:FreeRTOS/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  41:FreeRTOS/ARM_CM3/portmacro.h ****  *
  42:FreeRTOS/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  43:FreeRTOS/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  44:FreeRTOS/ARM_CM3/portmacro.h ****  */
  45:FreeRTOS/ARM_CM3/portmacro.h **** 
  46:FreeRTOS/ARM_CM3/portmacro.h **** /* Type definitions. */
  47:FreeRTOS/ARM_CM3/portmacro.h **** #define portCHAR		char
  48:FreeRTOS/ARM_CM3/portmacro.h **** #define portFLOAT		float
  49:FreeRTOS/ARM_CM3/portmacro.h **** #define portDOUBLE		double
  50:FreeRTOS/ARM_CM3/portmacro.h **** #define portLONG		long
  51:FreeRTOS/ARM_CM3/portmacro.h **** #define portSHORT		short
  52:FreeRTOS/ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:FreeRTOS/ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  54:FreeRTOS/ARM_CM3/portmacro.h **** 
  55:FreeRTOS/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:FreeRTOS/ARM_CM3/portmacro.h **** typedef long BaseType_t;
  57:FreeRTOS/ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  58:FreeRTOS/ARM_CM3/portmacro.h **** 
  59:FreeRTOS/ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:FreeRTOS/ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
  61:FreeRTOS/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:FreeRTOS/ARM_CM3/portmacro.h **** #else
  63:FreeRTOS/ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
  64:FreeRTOS/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:FreeRTOS/ARM_CM3/portmacro.h **** 
  66:FreeRTOS/ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:FreeRTOS/ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
  68:FreeRTOS/ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s 			page 21


  69:FreeRTOS/ARM_CM3/portmacro.h **** #endif
  70:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  71:FreeRTOS/ARM_CM3/portmacro.h **** 
  72:FreeRTOS/ARM_CM3/portmacro.h **** /* Architecture specifics. */
  73:FreeRTOS/ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:FreeRTOS/ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:FreeRTOS/ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  77:FreeRTOS/ARM_CM3/portmacro.h **** 
  78:FreeRTOS/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  79:FreeRTOS/ARM_CM3/portmacro.h **** #define portYIELD() 															\
  80:FreeRTOS/ARM_CM3/portmacro.h **** {																				\
  81:FreeRTOS/ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:FreeRTOS/ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:FreeRTOS/ARM_CM3/portmacro.h **** 																				\
  84:FreeRTOS/ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:FreeRTOS/ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:FreeRTOS/ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:FreeRTOS/ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
  88:FreeRTOS/ARM_CM3/portmacro.h **** }
  89:FreeRTOS/ARM_CM3/portmacro.h **** 
  90:FreeRTOS/ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:FreeRTOS/ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:FreeRTOS/ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:FreeRTOS/ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  95:FreeRTOS/ARM_CM3/portmacro.h **** 
  96:FreeRTOS/ARM_CM3/portmacro.h **** /* Critical section management. */
  97:FreeRTOS/ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
  98:FreeRTOS/ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
  99:FreeRTOS/ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:FreeRTOS/ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:FreeRTOS/ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:FreeRTOS/ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:FreeRTOS/ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:FreeRTOS/ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:FreeRTOS/ARM_CM3/portmacro.h **** 
 106:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 107:FreeRTOS/ARM_CM3/portmacro.h **** 
 108:FreeRTOS/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:FreeRTOS/ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:FreeRTOS/ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 111:FreeRTOS/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:FreeRTOS/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 114:FreeRTOS/ARM_CM3/portmacro.h **** 
 115:FreeRTOS/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 116:FreeRTOS/ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:FreeRTOS/ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:FreeRTOS/ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:FreeRTOS/ARM_CM3/portmacro.h **** #endif
 120:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 121:FreeRTOS/ARM_CM3/portmacro.h **** 
 122:FreeRTOS/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 123:FreeRTOS/ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:FreeRTOS/ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:FreeRTOS/ARM_CM3/portmacro.h **** #endif
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s 			page 22


 126:FreeRTOS/ARM_CM3/portmacro.h **** 
 127:FreeRTOS/ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:FreeRTOS/ARM_CM3/portmacro.h **** 
 129:FreeRTOS/ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 130:FreeRTOS/ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:FreeRTOS/ARM_CM3/portmacro.h **** 	{
 132:FreeRTOS/ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 133:FreeRTOS/ARM_CM3/portmacro.h **** 
 134:FreeRTOS/ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:FreeRTOS/ARM_CM3/portmacro.h **** 		return ucReturn;
 136:FreeRTOS/ARM_CM3/portmacro.h **** 	}
 137:FreeRTOS/ARM_CM3/portmacro.h **** 
 138:FreeRTOS/ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 139:FreeRTOS/ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:FreeRTOS/ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:FreeRTOS/ARM_CM3/portmacro.h **** 	#endif
 142:FreeRTOS/ARM_CM3/portmacro.h **** 
 143:FreeRTOS/ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:FreeRTOS/ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:FreeRTOS/ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:FreeRTOS/ARM_CM3/portmacro.h **** 
 147:FreeRTOS/ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:FreeRTOS/ARM_CM3/portmacro.h **** 
 149:FreeRTOS/ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:FreeRTOS/ARM_CM3/portmacro.h **** 
 151:FreeRTOS/ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:FreeRTOS/ARM_CM3/portmacro.h **** 
 153:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 154:FreeRTOS/ARM_CM3/portmacro.h **** 
 155:FreeRTOS/ARM_CM3/portmacro.h **** #ifdef configASSERT
 156:FreeRTOS/ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:FreeRTOS/ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:FreeRTOS/ARM_CM3/portmacro.h **** #endif
 159:FreeRTOS/ARM_CM3/portmacro.h **** 
 160:FreeRTOS/ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 161:FreeRTOS/ARM_CM3/portmacro.h **** #define portNOP()
 162:FreeRTOS/ARM_CM3/portmacro.h **** 
 163:FreeRTOS/ARM_CM3/portmacro.h **** #define portINLINE	__inline
 164:FreeRTOS/ARM_CM3/portmacro.h **** 
 165:FreeRTOS/ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 166:FreeRTOS/ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:FreeRTOS/ARM_CM3/portmacro.h **** #endif
 168:FreeRTOS/ARM_CM3/portmacro.h **** 
 169:FreeRTOS/ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:FreeRTOS/ARM_CM3/portmacro.h **** {
 171:FreeRTOS/ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:FreeRTOS/ARM_CM3/portmacro.h **** BaseType_t xReturn;
 173:FreeRTOS/ARM_CM3/portmacro.h **** 
 174:FreeRTOS/ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:FreeRTOS/ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:FreeRTOS/ARM_CM3/portmacro.h **** 
 177:FreeRTOS/ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:FreeRTOS/ARM_CM3/portmacro.h **** 	{
 179:FreeRTOS/ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 180:FreeRTOS/ARM_CM3/portmacro.h **** 	}
 181:FreeRTOS/ARM_CM3/portmacro.h **** 	else
 182:FreeRTOS/ARM_CM3/portmacro.h **** 	{
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s 			page 23


 183:FreeRTOS/ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 184:FreeRTOS/ARM_CM3/portmacro.h **** 	}
 185:FreeRTOS/ARM_CM3/portmacro.h **** 
 186:FreeRTOS/ARM_CM3/portmacro.h **** 	return xReturn;
 187:FreeRTOS/ARM_CM3/portmacro.h **** }
 188:FreeRTOS/ARM_CM3/portmacro.h **** 
 189:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 190:FreeRTOS/ARM_CM3/portmacro.h **** 
 191:FreeRTOS/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:FreeRTOS/ARM_CM3/portmacro.h **** {
 193:FreeRTOS/ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 194:FreeRTOS/ARM_CM3/portmacro.h **** 
 195:FreeRTOS/ARM_CM3/portmacro.h **** 	__asm volatile
 196:FreeRTOS/ARM_CM3/portmacro.h **** 	(
 197:FreeRTOS/ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n" \
 198:FreeRTOS/ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:FreeRTOS/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 200:FreeRTOS/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 201:FreeRTOS/ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:FreeRTOS/ARM_CM3/portmacro.h **** 	);
 203:FreeRTOS/ARM_CM3/portmacro.h **** }
 204:FreeRTOS/ARM_CM3/portmacro.h **** 
 205:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 206:FreeRTOS/ARM_CM3/portmacro.h **** 
 207:FreeRTOS/ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:FreeRTOS/ARM_CM3/portmacro.h **** {
 209:FreeRTOS/ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:FreeRTOS/ARM_CM3/portmacro.h **** 
 211:FreeRTOS/ARM_CM3/portmacro.h **** 	__asm volatile
 332              		.loc 2 211 0
 333              		.syntax unified
 334              	@ 211 "FreeRTOS/ARM_CM3/portmacro.h" 1
 335 0000 EFF31183 			mrs r3, basepri											
 336 0004 4FF0BF02 		mov r2, #191												
 337 0008 82F31188 		msr basepri, r2											
 338 000c BFF36F8F 		isb														
 339 0010 BFF34F8F 		dsb														
 340              	
 341              	@ 0 "" 2
 342              		.thumb
 343              		.syntax unified
 344              	.LBE9:
 345              	.LBE8:
 511:FreeRTOS/Src/event_groups.c **** 	}
 346              		.loc 1 511 0
 347 0014 0068     		ldr	r0, [r0]
 348              	.LVL44:
 349              	.LBB10:
 350              	.LBB11:
 212:FreeRTOS/ARM_CM3/portmacro.h **** 	(
 213:FreeRTOS/ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:FreeRTOS/ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n" \
 215:FreeRTOS/ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:FreeRTOS/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 217:FreeRTOS/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 218:FreeRTOS/ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:FreeRTOS/ARM_CM3/portmacro.h **** 	);
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s 			page 24


 220:FreeRTOS/ARM_CM3/portmacro.h **** 
 221:FreeRTOS/ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:FreeRTOS/ARM_CM3/portmacro.h **** 	warnings. */
 223:FreeRTOS/ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 224:FreeRTOS/ARM_CM3/portmacro.h **** }
 225:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 226:FreeRTOS/ARM_CM3/portmacro.h **** 
 227:FreeRTOS/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:FreeRTOS/ARM_CM3/portmacro.h **** {
 229:FreeRTOS/ARM_CM3/portmacro.h **** 	__asm volatile
 351              		.loc 2 229 0
 352              		.syntax unified
 353              	@ 229 "FreeRTOS/ARM_CM3/portmacro.h" 1
 354 0016 83F31188 			msr basepri, r3	
 355              	@ 0 "" 2
 356              		.thumb
 357              		.syntax unified
 358              	.LBE11:
 359              	.LBE10:
 516:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
 360              		.loc 1 516 0
 361 001a 7047     		bx	lr
 362              		.cfi_endproc
 363              	.LFE36:
 365              		.section	.text.xEventGroupSetBits,"ax",%progbits
 366              		.align	2
 367              		.global	xEventGroupSetBits
 368              		.thumb
 369              		.thumb_func
 371              	xEventGroupSetBits:
 372              	.LFB37:
 520:FreeRTOS/Src/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 373              		.loc 1 520 0
 374              		.cfi_startproc
 375              		@ args = 0, pretend = 0, frame = 0
 376              		@ frame_needed = 0, uses_anonymous_args = 0
 377              	.LVL45:
 378 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 379              	.LCFI3:
 380              		.cfi_def_cfa_offset 24
 381              		.cfi_offset 3, -24
 382              		.cfi_offset 4, -20
 383              		.cfi_offset 5, -16
 384              		.cfi_offset 6, -12
 385              		.cfi_offset 7, -8
 386              		.cfi_offset 14, -4
 387 0002 0446     		mov	r4, r0
 388 0004 0D46     		mov	r5, r1
 389              	.LVL46:
 534:FreeRTOS/Src/event_groups.c **** 	vTaskSuspendAll();
 390              		.loc 1 534 0
 391 0006 00F10C06 		add	r6, r0, #12
 392              	.LVL47:
 535:FreeRTOS/Src/event_groups.c **** 	{
 393              		.loc 1 535 0
 394 000a FFF7FEFF 		bl	vTaskSuspendAll
 395              	.LVL48:
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s 			page 25


 539:FreeRTOS/Src/event_groups.c **** 
 396              		.loc 1 539 0
 397 000e 2069     		ldr	r0, [r4, #16]
 398              	.LVL49:
 542:FreeRTOS/Src/event_groups.c **** 
 399              		.loc 1 542 0
 400 0010 2368     		ldr	r3, [r4]
 401 0012 1D43     		orrs	r5, r5, r3
 402              	.LVL50:
 403 0014 2560     		str	r5, [r4]
 524:FreeRTOS/Src/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 404              		.loc 1 524 0
 405 0016 0027     		movs	r7, #0
 545:FreeRTOS/Src/event_groups.c **** 		{
 406              		.loc 1 545 0
 407 0018 1FE0     		b	.L27
 408              	.LVL51:
 409              	.L32:
 547:FreeRTOS/Src/event_groups.c **** 			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 410              		.loc 1 547 0
 411 001a 4568     		ldr	r5, [r0, #4]
 412              	.LVL52:
 548:FreeRTOS/Src/event_groups.c **** 			xMatchFound = pdFALSE;
 413              		.loc 1 548 0
 414 001c 0368     		ldr	r3, [r0]
 415              	.LVL53:
 553:FreeRTOS/Src/event_groups.c **** 
 416              		.loc 1 553 0
 417 001e 23F07F42 		bic	r2, r3, #-16777216
 418              	.LVL54:
 555:FreeRTOS/Src/event_groups.c **** 			{
 419              		.loc 1 555 0
 420 0022 13F0806F 		tst	r3, #67108864
 421 0026 04D1     		bne	.L28
 558:FreeRTOS/Src/event_groups.c **** 				{
 422              		.loc 1 558 0
 423 0028 2168     		ldr	r1, [r4]
 424 002a 0A42     		tst	r2, r1
 425 002c 07D1     		bne	.L33
 549:FreeRTOS/Src/event_groups.c **** 
 426              		.loc 1 549 0
 427 002e 0021     		movs	r1, #0
 428 0030 08E0     		b	.L29
 429              	.L28:
 567:FreeRTOS/Src/event_groups.c **** 			{
 430              		.loc 1 567 0
 431 0032 2168     		ldr	r1, [r4]
 432 0034 32EA0101 		bics	r1, r2, r1
 433 0038 03D0     		beq	.L34
 549:FreeRTOS/Src/event_groups.c **** 
 434              		.loc 1 549 0
 435 003a 0021     		movs	r1, #0
 436 003c 02E0     		b	.L29
 437              	.L33:
 560:FreeRTOS/Src/event_groups.c **** 				}
 438              		.loc 1 560 0
 439 003e 0121     		movs	r1, #1
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s 			page 26


 440 0040 00E0     		b	.L29
 441              	.L34:
 570:FreeRTOS/Src/event_groups.c **** 			}
 442              		.loc 1 570 0
 443 0042 0121     		movs	r1, #1
 444              	.L29:
 445              	.LVL55:
 577:FreeRTOS/Src/event_groups.c **** 			{
 446              		.loc 1 577 0
 447 0044 41B1     		cbz	r1, .L30
 580:FreeRTOS/Src/event_groups.c **** 				{
 448              		.loc 1 580 0
 449 0046 13F0807F 		tst	r3, #16777216
 450 004a 00D0     		beq	.L31
 582:FreeRTOS/Src/event_groups.c **** 				}
 451              		.loc 1 582 0
 452 004c 1743     		orrs	r7, r7, r2
 453              	.LVL56:
 454              	.L31:
 594:FreeRTOS/Src/event_groups.c **** 			}
 455              		.loc 1 594 0
 456 004e 2168     		ldr	r1, [r4]
 457              	.LVL57:
 458 0050 41F00071 		orr	r1, r1, #33554432
 459 0054 FFF7FEFF 		bl	vTaskRemoveFromUnorderedEventList
 460              	.LVL58:
 461              	.L30:
 549:FreeRTOS/Src/event_groups.c **** 
 462              		.loc 1 549 0
 463 0058 2846     		mov	r0, r5
 464              	.LVL59:
 465              	.L27:
 545:FreeRTOS/Src/event_groups.c **** 		{
 466              		.loc 1 545 0
 467 005a B042     		cmp	r0, r6
 468 005c DDD1     		bne	.L32
 605:FreeRTOS/Src/event_groups.c **** 	}
 469              		.loc 1 605 0
 470 005e 2368     		ldr	r3, [r4]
 471 0060 23EA0707 		bic	r7, r3, r7
 472              	.LVL60:
 473 0064 2760     		str	r7, [r4]
 607:FreeRTOS/Src/event_groups.c **** 
 474              		.loc 1 607 0
 475 0066 FFF7FEFF 		bl	xTaskResumeAll
 476              	.LVL61:
 610:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
 477              		.loc 1 610 0
 478 006a 2068     		ldr	r0, [r4]
 479 006c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 480              		.cfi_endproc
 481              	.LFE37:
 483 006e 00BF     		.section	.text.xEventGroupSync,"ax",%progbits
 484              		.align	2
 485              		.global	xEventGroupSync
 486              		.thumb
 487              		.thumb_func
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s 			page 27


 489              	xEventGroupSync:
 490              	.LFB33:
 192:FreeRTOS/Src/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 491              		.loc 1 192 0
 492              		.cfi_startproc
 493              		@ args = 0, pretend = 0, frame = 0
 494              		@ frame_needed = 0, uses_anonymous_args = 0
 495              	.LVL62:
 496 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 497              	.LCFI4:
 498              		.cfi_def_cfa_offset 24
 499              		.cfi_offset 4, -24
 500              		.cfi_offset 5, -20
 501              		.cfi_offset 6, -16
 502              		.cfi_offset 7, -12
 503              		.cfi_offset 8, -8
 504              		.cfi_offset 14, -4
 505 0004 0546     		mov	r5, r0
 506 0006 0C46     		mov	r4, r1
 507 0008 1746     		mov	r7, r2
 508 000a 1E46     		mov	r6, r3
 509              	.LVL63:
 206:FreeRTOS/Src/event_groups.c **** 	{
 510              		.loc 1 206 0
 511 000c FFF7FEFF 		bl	vTaskSuspendAll
 512              	.LVL64:
 208:FreeRTOS/Src/event_groups.c **** 
 513              		.loc 1 208 0
 514 0010 D5F80080 		ldr	r8, [r5]
 515              	.LVL65:
 210:FreeRTOS/Src/event_groups.c **** 
 516              		.loc 1 210 0
 517 0014 2146     		mov	r1, r4
 518 0016 2846     		mov	r0, r5
 519 0018 FFF7FEFF 		bl	xEventGroupSetBits
 520              	.LVL66:
 212:FreeRTOS/Src/event_groups.c **** 		{
 521              		.loc 1 212 0
 522 001c 48EA0404 		orr	r4, r8, r4
 523              	.LVL67:
 524 0020 37EA0403 		bics	r3, r7, r4
 525 0024 05D1     		bne	.L37
 526              	.LVL68:
 219:FreeRTOS/Src/event_groups.c **** 
 527              		.loc 1 219 0
 528 0026 2B68     		ldr	r3, [r5]
 529 0028 23EA0703 		bic	r3, r3, r7
 530 002c 2B60     		str	r3, [r5]
 531              	.LVL69:
 221:FreeRTOS/Src/event_groups.c **** 		}
 532              		.loc 1 221 0
 533 002e 0026     		movs	r6, #0
 534 0030 09E0     		b	.L38
 535              	.LVL70:
 536              	.L37:
 225:FreeRTOS/Src/event_groups.c **** 			{
 537              		.loc 1 225 0
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s 			page 28


 538 0032 3EB1     		cbz	r6, .L39
 232:FreeRTOS/Src/event_groups.c **** 
 539              		.loc 1 232 0
 540 0034 3246     		mov	r2, r6
 541 0036 47F0A061 		orr	r1, r7, #83886080
 542 003a 281D     		adds	r0, r5, #4
 543 003c FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 544              	.LVL71:
 238:FreeRTOS/Src/event_groups.c **** 			}
 545              		.loc 1 238 0
 546 0040 0024     		movs	r4, #0
 547 0042 00E0     		b	.L38
 548              	.LVL72:
 549              	.L39:
 244:FreeRTOS/Src/event_groups.c **** 				xTimeoutOccurred = pdTRUE;
 550              		.loc 1 244 0
 551 0044 2C68     		ldr	r4, [r5]
 552              	.LVL73:
 553              	.L38:
 249:FreeRTOS/Src/event_groups.c **** 
 554              		.loc 1 249 0
 555 0046 FFF7FEFF 		bl	xTaskResumeAll
 556              	.LVL74:
 251:FreeRTOS/Src/event_groups.c **** 	{
 557              		.loc 1 251 0
 558 004a DEB1     		cbz	r6, .L40
 253:FreeRTOS/Src/event_groups.c **** 		{
 559              		.loc 1 253 0
 560 004c 38B9     		cbnz	r0, .L41
 255:FreeRTOS/Src/event_groups.c **** 		}
 561              		.loc 1 255 0
 562 004e 4FF08052 		mov	r2, #268435456
 563 0052 0E4B     		ldr	r3, .L45
 564 0054 1A60     		str	r2, [r3]
 565              		.syntax unified
 566              	@ 255 "FreeRTOS/Src/event_groups.c" 1
 567 0056 BFF34F8F 		dsb
 568              	@ 0 "" 2
 569              	@ 255 "FreeRTOS/Src/event_groups.c" 1
 570 005a BFF36F8F 		isb
 571              	@ 0 "" 2
 572              		.thumb
 573              		.syntax unified
 574              	.L41:
 266:FreeRTOS/Src/event_groups.c **** 
 575              		.loc 1 266 0
 576 005e FFF7FEFF 		bl	uxTaskResetEventItemValue
 577              	.LVL75:
 578 0062 0446     		mov	r4, r0
 579              	.LVL76:
 268:FreeRTOS/Src/event_groups.c **** 		{
 580              		.loc 1 268 0
 581 0064 10F0007F 		tst	r0, #33554432
 582 0068 0AD1     		bne	.L42
 271:FreeRTOS/Src/event_groups.c **** 			{
 583              		.loc 1 271 0
 584 006a FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s 			page 29


 585              	.LVL77:
 273:FreeRTOS/Src/event_groups.c **** 
 586              		.loc 1 273 0
 587 006e 2C68     		ldr	r4, [r5]
 588              	.LVL78:
 279:FreeRTOS/Src/event_groups.c **** 				{
 589              		.loc 1 279 0
 590 0070 37EA0403 		bics	r3, r7, r4
 591 0074 02D1     		bne	.L43
 281:FreeRTOS/Src/event_groups.c **** 				}
 592              		.loc 1 281 0
 593 0076 24EA0707 		bic	r7, r4, r7
 594              	.LVL79:
 595 007a 2F60     		str	r7, [r5]
 596              	.L43:
 288:FreeRTOS/Src/event_groups.c **** 
 597              		.loc 1 288 0
 598 007c FFF7FEFF 		bl	vPortExitCritical
 599              	.LVL80:
 600              	.L42:
 299:FreeRTOS/Src/event_groups.c **** 	}
 601              		.loc 1 299 0
 602 0080 24F07F44 		bic	r4, r4, #-16777216
 603              	.LVL81:
 604              	.L40:
 308:FreeRTOS/Src/event_groups.c **** /*-----------------------------------------------------------*/
 605              		.loc 1 308 0
 606 0084 2046     		mov	r0, r4
 607 0086 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 608              	.LVL82:
 609              	.L46:
 610 008a 00BF     		.align	2
 611              	.L45:
 612 008c 04ED00E0 		.word	-536810236
 613              		.cfi_endproc
 614              	.LFE33:
 616              		.section	.text.vEventGroupDelete,"ax",%progbits
 617              		.align	2
 618              		.global	vEventGroupDelete
 619              		.thumb
 620              		.thumb_func
 622              	vEventGroupDelete:
 623              	.LFB38:
 614:FreeRTOS/Src/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 624              		.loc 1 614 0
 625              		.cfi_startproc
 626              		@ args = 0, pretend = 0, frame = 0
 627              		@ frame_needed = 0, uses_anonymous_args = 0
 628              	.LVL83:
 629 0000 10B5     		push	{r4, lr}
 630              	.LCFI5:
 631              		.cfi_def_cfa_offset 8
 632              		.cfi_offset 4, -8
 633              		.cfi_offset 14, -4
 634 0002 0446     		mov	r4, r0
 635              	.LVL84:
 618:FreeRTOS/Src/event_groups.c **** 	{
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s 			page 30


 636              		.loc 1 618 0
 637 0004 FFF7FEFF 		bl	vTaskSuspendAll
 638              	.LVL85:
 622:FreeRTOS/Src/event_groups.c **** 		{
 639              		.loc 1 622 0
 640 0008 04E0     		b	.L48
 641              	.L49:
 627:FreeRTOS/Src/event_groups.c **** 		}
 642              		.loc 1 627 0
 643 000a 4FF00071 		mov	r1, #33554432
 644 000e 2069     		ldr	r0, [r4, #16]
 645 0010 FFF7FEFF 		bl	vTaskRemoveFromUnorderedEventList
 646              	.LVL86:
 647              	.L48:
 622:FreeRTOS/Src/event_groups.c **** 		{
 648              		.loc 1 622 0
 649 0014 6368     		ldr	r3, [r4, #4]
 650 0016 002B     		cmp	r3, #0
 651 0018 F7D1     		bne	.L49
 634:FreeRTOS/Src/event_groups.c **** 		}
 652              		.loc 1 634 0
 653 001a 2046     		mov	r0, r4
 654 001c FFF7FEFF 		bl	vPortFree
 655              	.LVL87:
 651:FreeRTOS/Src/event_groups.c **** }
 656              		.loc 1 651 0
 657 0020 FFF7FEFF 		bl	xTaskResumeAll
 658              	.LVL88:
 659 0024 10BD     		pop	{r4, pc}
 660              		.cfi_endproc
 661              	.LFE38:
 663 0026 00BF     		.section	.text.vEventGroupSetBitsCallback,"ax",%progbits
 664              		.align	2
 665              		.global	vEventGroupSetBitsCallback
 666              		.thumb
 667              		.thumb_func
 669              	vEventGroupSetBitsCallback:
 670              	.LFB39:
 658:FreeRTOS/Src/event_groups.c **** 	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoi
 671              		.loc 1 658 0
 672              		.cfi_startproc
 673              		@ args = 0, pretend = 0, frame = 0
 674              		@ frame_needed = 0, uses_anonymous_args = 0
 675              	.LVL89:
 676 0000 08B5     		push	{r3, lr}
 677              	.LCFI6:
 678              		.cfi_def_cfa_offset 8
 679              		.cfi_offset 3, -8
 680              		.cfi_offset 14, -4
 659:FreeRTOS/Src/event_groups.c **** }
 681              		.loc 1 659 0
 682 0002 FFF7FEFF 		bl	xEventGroupSetBits
 683              	.LVL90:
 684 0006 08BD     		pop	{r3, pc}
 685              		.cfi_endproc
 686              	.LFE39:
 688              		.section	.text.vEventGroupClearBitsCallback,"ax",%progbits
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s 			page 31


 689              		.align	2
 690              		.global	vEventGroupClearBitsCallback
 691              		.thumb
 692              		.thumb_func
 694              	vEventGroupClearBitsCallback:
 695              	.LFB40:
 666:FreeRTOS/Src/event_groups.c **** 	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't 
 696              		.loc 1 666 0
 697              		.cfi_startproc
 698              		@ args = 0, pretend = 0, frame = 0
 699              		@ frame_needed = 0, uses_anonymous_args = 0
 700              	.LVL91:
 701 0000 08B5     		push	{r3, lr}
 702              	.LCFI7:
 703              		.cfi_def_cfa_offset 8
 704              		.cfi_offset 3, -8
 705              		.cfi_offset 14, -4
 667:FreeRTOS/Src/event_groups.c **** }
 706              		.loc 1 667 0
 707 0002 FFF7FEFF 		bl	xEventGroupClearBits
 708              	.LVL92:
 709 0006 08BD     		pop	{r3, pc}
 710              		.cfi_endproc
 711              	.LFE40:
 713              		.text
 714              	.Letext0:
 715              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20160926/arm-none-eabi/include/machine/_default_types
 716              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi/20160926/arm-none-eabi/include/sys/_stdint.h"
 717              		.file 5 "FreeRTOS/Inc/list.h"
 718              		.file 6 "FreeRTOS/Inc/event_groups.h"
 719              		.file 7 "FreeRTOS/Inc/portable.h"
 720              		.file 8 "FreeRTOS/Inc/task.h"
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s 			page 32


DEFINED SYMBOLS
                            *ABS*:0000000000000000 event_groups.c
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s:20     .text.prvTestWaitCondition:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s:24     .text.prvTestWaitCondition:0000000000000000 prvTestWaitCondition
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s:68     .text.xEventGroupCreate:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s:73     .text.xEventGroupCreate:0000000000000000 xEventGroupCreate
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s:106    .text.xEventGroupWaitBits:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s:111    .text.xEventGroupWaitBits:0000000000000000 xEventGroupWaitBits
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s:269    .text.xEventGroupWaitBits:00000000000000ac $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s:274    .text.xEventGroupClearBits:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s:279    .text.xEventGroupClearBits:0000000000000000 xEventGroupClearBits
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s:316    .text.xEventGroupGetBitsFromISR:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s:321    .text.xEventGroupGetBitsFromISR:0000000000000000 xEventGroupGetBitsFromISR
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s:366    .text.xEventGroupSetBits:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s:371    .text.xEventGroupSetBits:0000000000000000 xEventGroupSetBits
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s:484    .text.xEventGroupSync:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s:489    .text.xEventGroupSync:0000000000000000 xEventGroupSync
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s:612    .text.xEventGroupSync:000000000000008c $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s:617    .text.vEventGroupDelete:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s:622    .text.vEventGroupDelete:0000000000000000 vEventGroupDelete
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s:664    .text.vEventGroupSetBitsCallback:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s:669    .text.vEventGroupSetBitsCallback:0000000000000000 vEventGroupSetBitsCallback
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s:689    .text.vEventGroupClearBitsCallback:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccoi3aQN.s:694    .text.vEventGroupClearBitsCallback:0000000000000000 vEventGroupClearBitsCallback
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
pvPortMalloc
vListInitialise
vTaskSuspendAll
vTaskPlaceOnUnorderedEventList
xTaskResumeAll
uxTaskResetEventItemValue
vPortEnterCritical
vPortExitCritical
vTaskRemoveFromUnorderedEventList
vPortFree
