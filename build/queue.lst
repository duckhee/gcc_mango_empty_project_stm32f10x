ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"queue.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvIsQueueFull,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	prvIsQueueFull:
  25              	.LFB52:
  26              		.file 1 "FreeRTOS/Src/queue.c"
   1:FreeRTOS/Src/queue.c **** /*
   2:FreeRTOS/Src/queue.c ****  * FreeRTOS Kernel V10.1.1
   3:FreeRTOS/Src/queue.c ****  * Copyright (C) 2018 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/Src/queue.c ****  *
   5:FreeRTOS/Src/queue.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:FreeRTOS/Src/queue.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:FreeRTOS/Src/queue.c ****  * the Software without restriction, including without limitation the rights to
   8:FreeRTOS/Src/queue.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:FreeRTOS/Src/queue.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:FreeRTOS/Src/queue.c ****  * subject to the following conditions:
  11:FreeRTOS/Src/queue.c ****  *
  12:FreeRTOS/Src/queue.c ****  * The above copyright notice and this permission notice shall be included in all
  13:FreeRTOS/Src/queue.c ****  * copies or substantial portions of the Software.
  14:FreeRTOS/Src/queue.c ****  *
  15:FreeRTOS/Src/queue.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:FreeRTOS/Src/queue.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:FreeRTOS/Src/queue.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:FreeRTOS/Src/queue.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:FreeRTOS/Src/queue.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:FreeRTOS/Src/queue.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:FreeRTOS/Src/queue.c ****  *
  22:FreeRTOS/Src/queue.c ****  * http://www.FreeRTOS.org
  23:FreeRTOS/Src/queue.c ****  * http://aws.amazon.com/freertos
  24:FreeRTOS/Src/queue.c ****  *
  25:FreeRTOS/Src/queue.c ****  * 1 tab == 4 spaces!
  26:FreeRTOS/Src/queue.c ****  */
  27:FreeRTOS/Src/queue.c **** 
  28:FreeRTOS/Src/queue.c **** #include <stdlib.h>
  29:FreeRTOS/Src/queue.c **** #include <string.h>
  30:FreeRTOS/Src/queue.c **** 
  31:FreeRTOS/Src/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  32:FreeRTOS/Src/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 2


  33:FreeRTOS/Src/queue.c **** task.h is included from an application file. */
  34:FreeRTOS/Src/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:FreeRTOS/Src/queue.c **** 
  36:FreeRTOS/Src/queue.c **** #include "FreeRTOS.h"
  37:FreeRTOS/Src/queue.c **** #include "task.h"
  38:FreeRTOS/Src/queue.c **** #include "queue.h"
  39:FreeRTOS/Src/queue.c **** 
  40:FreeRTOS/Src/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  41:FreeRTOS/Src/queue.c **** 	#include "croutine.h"
  42:FreeRTOS/Src/queue.c **** #endif
  43:FreeRTOS/Src/queue.c **** 
  44:FreeRTOS/Src/queue.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  45:FreeRTOS/Src/queue.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  46:FreeRTOS/Src/queue.c **** for the header files above, but not in this file, in order to generate the
  47:FreeRTOS/Src/queue.c **** correct privileged Vs unprivileged linkage and placement. */
  48:FreeRTOS/Src/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  49:FreeRTOS/Src/queue.c **** 
  50:FreeRTOS/Src/queue.c **** 
  51:FreeRTOS/Src/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  52:FreeRTOS/Src/queue.c **** #define queueUNLOCKED					( ( int8_t ) -1 )
  53:FreeRTOS/Src/queue.c **** #define queueLOCKED_UNMODIFIED			( ( int8_t ) 0 )
  54:FreeRTOS/Src/queue.c **** 
  55:FreeRTOS/Src/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  56:FreeRTOS/Src/queue.c **** pcTail members are used as pointers into the queue storage area.  When the
  57:FreeRTOS/Src/queue.c **** Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
  58:FreeRTOS/Src/queue.c **** not necessary, and the pcHead pointer is set to NULL to indicate that the
  59:FreeRTOS/Src/queue.c **** structure instead holds a pointer to the mutex holder (if any).  Map alternative
  60:FreeRTOS/Src/queue.c **** names to the pcHead and structure member to ensure the readability of the code
  61:FreeRTOS/Src/queue.c **** is maintained.  The QueuePointers_t and SemaphoreData_t types are used to form
  62:FreeRTOS/Src/queue.c **** a union as their usage is mutually exclusive dependent on what the queue is
  63:FreeRTOS/Src/queue.c **** being used for. */
  64:FreeRTOS/Src/queue.c **** #define uxQueueType						pcHead
  65:FreeRTOS/Src/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
  66:FreeRTOS/Src/queue.c **** 
  67:FreeRTOS/Src/queue.c **** typedef struct QueuePointers
  68:FreeRTOS/Src/queue.c **** {
  69:FreeRTOS/Src/queue.c **** 	int8_t *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more byte i
  70:FreeRTOS/Src/queue.c **** 	int8_t *pcReadFrom;				/*< Points to the last place that a queued item was read from when the stru
  71:FreeRTOS/Src/queue.c **** } QueuePointers_t;
  72:FreeRTOS/Src/queue.c **** 
  73:FreeRTOS/Src/queue.c **** typedef struct SemaphoreData
  74:FreeRTOS/Src/queue.c **** {
  75:FreeRTOS/Src/queue.c **** 	TaskHandle_t xMutexHolder;		 /*< The handle of the task that holds the mutex. */
  76:FreeRTOS/Src/queue.c **** 	UBaseType_t uxRecursiveCallCount;/*< Maintains a count of the number of times a recursive mutex ha
  77:FreeRTOS/Src/queue.c **** } SemaphoreData_t;
  78:FreeRTOS/Src/queue.c **** 
  79:FreeRTOS/Src/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
  80:FreeRTOS/Src/queue.c **** zero. */
  81:FreeRTOS/Src/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( UBaseType_t ) 0 )
  82:FreeRTOS/Src/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( TickType_t ) 0U )
  83:FreeRTOS/Src/queue.c **** 
  84:FreeRTOS/Src/queue.c **** #if( configUSE_PREEMPTION == 0 )
  85:FreeRTOS/Src/queue.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  86:FreeRTOS/Src/queue.c **** 	performed just because a higher priority task has been woken. */
  87:FreeRTOS/Src/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION()
  88:FreeRTOS/Src/queue.c **** #else
  89:FreeRTOS/Src/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 3


  90:FreeRTOS/Src/queue.c **** #endif
  91:FreeRTOS/Src/queue.c **** 
  92:FreeRTOS/Src/queue.c **** /*
  93:FreeRTOS/Src/queue.c ****  * Definition of the queue used by the scheduler.
  94:FreeRTOS/Src/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
  95:FreeRTOS/Src/queue.c ****  * rationale: https://www.freertos.org/Embedded-RTOS-Queues.html
  96:FreeRTOS/Src/queue.c ****  */
  97:FreeRTOS/Src/queue.c **** typedef struct QueueDefinition /* The old naming convention is used to prevent breaking kernel awar
  98:FreeRTOS/Src/queue.c **** {
  99:FreeRTOS/Src/queue.c **** 	int8_t *pcHead;					/*< Points to the beginning of the queue storage area. */
 100:FreeRTOS/Src/queue.c **** 	int8_t *pcWriteTo;				/*< Points to the free next place in the storage area. */
 101:FreeRTOS/Src/queue.c **** 
 102:FreeRTOS/Src/queue.c **** 	union
 103:FreeRTOS/Src/queue.c **** 	{
 104:FreeRTOS/Src/queue.c **** 		QueuePointers_t xQueue;		/*< Data required exclusively when this structure is used as a queue. */
 105:FreeRTOS/Src/queue.c **** 		SemaphoreData_t xSemaphore; /*< Data required exclusively when this structure is used as a semaph
 106:FreeRTOS/Src/queue.c **** 	} u;
 107:FreeRTOS/Src/queue.c **** 
 108:FreeRTOS/Src/queue.c **** 	List_t xTasksWaitingToSend;		/*< List of tasks that are blocked waiting to post onto this queue.  
 109:FreeRTOS/Src/queue.c **** 	List_t xTasksWaitingToReceive;	/*< List of tasks that are blocked waiting to read from this queue.
 110:FreeRTOS/Src/queue.c **** 
 111:FreeRTOS/Src/queue.c **** 	volatile UBaseType_t uxMessagesWaiting;/*< The number of items currently in the queue. */
 112:FreeRTOS/Src/queue.c **** 	UBaseType_t uxLength;			/*< The length of the queue defined as the number of items it will hold, n
 113:FreeRTOS/Src/queue.c **** 	UBaseType_t uxItemSize;			/*< The size of each items that the queue will hold. */
 114:FreeRTOS/Src/queue.c **** 
 115:FreeRTOS/Src/queue.c **** 	volatile int8_t cRxLock;		/*< Stores the number of items received from the queue (removed from the
 116:FreeRTOS/Src/queue.c **** 	volatile int8_t cTxLock;		/*< Stores the number of items transmitted to the queue (added to the qu
 117:FreeRTOS/Src/queue.c **** 
 118:FreeRTOS/Src/queue.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 119:FreeRTOS/Src/queue.c **** 		uint8_t ucStaticallyAllocated;	/*< Set to pdTRUE if the memory used by the queue was statically a
 120:FreeRTOS/Src/queue.c **** 	#endif
 121:FreeRTOS/Src/queue.c **** 
 122:FreeRTOS/Src/queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 123:FreeRTOS/Src/queue.c **** 		struct QueueDefinition *pxQueueSetContainer;
 124:FreeRTOS/Src/queue.c **** 	#endif
 125:FreeRTOS/Src/queue.c **** 
 126:FreeRTOS/Src/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 127:FreeRTOS/Src/queue.c **** 		UBaseType_t uxQueueNumber;
 128:FreeRTOS/Src/queue.c **** 		uint8_t ucQueueType;
 129:FreeRTOS/Src/queue.c **** 	#endif
 130:FreeRTOS/Src/queue.c **** 
 131:FreeRTOS/Src/queue.c **** } xQUEUE;
 132:FreeRTOS/Src/queue.c **** 
 133:FreeRTOS/Src/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 134:FreeRTOS/Src/queue.c **** name below to enable the use of older kernel aware debuggers. */
 135:FreeRTOS/Src/queue.c **** typedef xQUEUE Queue_t;
 136:FreeRTOS/Src/queue.c **** 
 137:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 138:FreeRTOS/Src/queue.c **** 
 139:FreeRTOS/Src/queue.c **** /*
 140:FreeRTOS/Src/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 141:FreeRTOS/Src/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 142:FreeRTOS/Src/queue.c ****  */
 143:FreeRTOS/Src/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 144:FreeRTOS/Src/queue.c **** 
 145:FreeRTOS/Src/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 146:FreeRTOS/Src/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 4


 147:FreeRTOS/Src/queue.c **** 	more user friendly. */
 148:FreeRTOS/Src/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 149:FreeRTOS/Src/queue.c **** 	{
 150:FreeRTOS/Src/queue.c **** 		const char *pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and single c
 151:FreeRTOS/Src/queue.c **** 		QueueHandle_t xHandle;
 152:FreeRTOS/Src/queue.c **** 	} xQueueRegistryItem;
 153:FreeRTOS/Src/queue.c **** 
 154:FreeRTOS/Src/queue.c **** 	/* The old xQueueRegistryItem name is maintained above then typedefed to the
 155:FreeRTOS/Src/queue.c **** 	new xQueueRegistryItem name below to enable the use of older kernel aware
 156:FreeRTOS/Src/queue.c **** 	debuggers. */
 157:FreeRTOS/Src/queue.c **** 	typedef xQueueRegistryItem QueueRegistryItem_t;
 158:FreeRTOS/Src/queue.c **** 
 159:FreeRTOS/Src/queue.c **** 	/* The queue registry is simply an array of QueueRegistryItem_t structures.
 160:FreeRTOS/Src/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 161:FreeRTOS/Src/queue.c **** 	array position being vacant. */
 162:FreeRTOS/Src/queue.c **** 	PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 163:FreeRTOS/Src/queue.c **** 
 164:FreeRTOS/Src/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 165:FreeRTOS/Src/queue.c **** 
 166:FreeRTOS/Src/queue.c **** /*
 167:FreeRTOS/Src/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 168:FreeRTOS/Src/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 169:FreeRTOS/Src/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 170:FreeRTOS/Src/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 171:FreeRTOS/Src/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 172:FreeRTOS/Src/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 173:FreeRTOS/Src/queue.c ****  */
 174:FreeRTOS/Src/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 175:FreeRTOS/Src/queue.c **** 
 176:FreeRTOS/Src/queue.c **** /*
 177:FreeRTOS/Src/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 178:FreeRTOS/Src/queue.c ****  *
 179:FreeRTOS/Src/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 180:FreeRTOS/Src/queue.c ****  */
 181:FreeRTOS/Src/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 182:FreeRTOS/Src/queue.c **** 
 183:FreeRTOS/Src/queue.c **** /*
 184:FreeRTOS/Src/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 185:FreeRTOS/Src/queue.c ****  *
 186:FreeRTOS/Src/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 187:FreeRTOS/Src/queue.c ****  */
 188:FreeRTOS/Src/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 189:FreeRTOS/Src/queue.c **** 
 190:FreeRTOS/Src/queue.c **** /*
 191:FreeRTOS/Src/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 192:FreeRTOS/Src/queue.c ****  * back of the queue.
 193:FreeRTOS/Src/queue.c ****  */
 194:FreeRTOS/Src/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
 195:FreeRTOS/Src/queue.c **** 
 196:FreeRTOS/Src/queue.c **** /*
 197:FreeRTOS/Src/queue.c ****  * Copies an item out of a queue.
 198:FreeRTOS/Src/queue.c ****  */
 199:FreeRTOS/Src/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer ) PRIVILEGED_FUNCT
 200:FreeRTOS/Src/queue.c **** 
 201:FreeRTOS/Src/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 202:FreeRTOS/Src/queue.c **** 	/*
 203:FreeRTOS/Src/queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 5


 204:FreeRTOS/Src/queue.c **** 	 * the queue set that the queue contains data.
 205:FreeRTOS/Src/queue.c **** 	 */
 206:FreeRTOS/Src/queue.c **** 	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCop
 207:FreeRTOS/Src/queue.c **** #endif
 208:FreeRTOS/Src/queue.c **** 
 209:FreeRTOS/Src/queue.c **** /*
 210:FreeRTOS/Src/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 211:FreeRTOS/Src/queue.c ****  * dynamically to fill in the structure's members.
 212:FreeRTOS/Src/queue.c ****  */
 213:FreeRTOS/Src/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 214:FreeRTOS/Src/queue.c **** 
 215:FreeRTOS/Src/queue.c **** /*
 216:FreeRTOS/Src/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 217:FreeRTOS/Src/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 218:FreeRTOS/Src/queue.c ****  * as a mutex.
 219:FreeRTOS/Src/queue.c ****  */
 220:FreeRTOS/Src/queue.c **** #if( configUSE_MUTEXES == 1 )
 221:FreeRTOS/Src/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue ) PRIVILEGED_FUNCTION;
 222:FreeRTOS/Src/queue.c **** #endif
 223:FreeRTOS/Src/queue.c **** 
 224:FreeRTOS/Src/queue.c **** #if( configUSE_MUTEXES == 1 )
 225:FreeRTOS/Src/queue.c **** 	/*
 226:FreeRTOS/Src/queue.c **** 	 * If a task waiting for a mutex causes the mutex holder to inherit a
 227:FreeRTOS/Src/queue.c **** 	 * priority, but the waiting task times out, then the holder should
 228:FreeRTOS/Src/queue.c **** 	 * disinherit the priority - but only down to the highest priority of any
 229:FreeRTOS/Src/queue.c **** 	 * other tasks that are waiting for the same mutex.  This function returns
 230:FreeRTOS/Src/queue.c **** 	 * that priority.
 231:FreeRTOS/Src/queue.c **** 	 */
 232:FreeRTOS/Src/queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue ) PRIVILEGE
 233:FreeRTOS/Src/queue.c **** #endif
 234:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 235:FreeRTOS/Src/queue.c **** 
 236:FreeRTOS/Src/queue.c **** /*
 237:FreeRTOS/Src/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 238:FreeRTOS/Src/queue.c ****  * accessing the queue event lists.
 239:FreeRTOS/Src/queue.c ****  */
 240:FreeRTOS/Src/queue.c **** #define prvLockQueue( pxQueue )								\
 241:FreeRTOS/Src/queue.c **** 	taskENTER_CRITICAL();									\
 242:FreeRTOS/Src/queue.c **** 	{														\
 243:FreeRTOS/Src/queue.c **** 		if( ( pxQueue )->cRxLock == queueUNLOCKED )			\
 244:FreeRTOS/Src/queue.c **** 		{													\
 245:FreeRTOS/Src/queue.c **** 			( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED;	\
 246:FreeRTOS/Src/queue.c **** 		}													\
 247:FreeRTOS/Src/queue.c **** 		if( ( pxQueue )->cTxLock == queueUNLOCKED )			\
 248:FreeRTOS/Src/queue.c **** 		{													\
 249:FreeRTOS/Src/queue.c **** 			( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED;	\
 250:FreeRTOS/Src/queue.c **** 		}													\
 251:FreeRTOS/Src/queue.c **** 	}														\
 252:FreeRTOS/Src/queue.c **** 	taskEXIT_CRITICAL()
 253:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 254:FreeRTOS/Src/queue.c **** 
 255:FreeRTOS/Src/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
 256:FreeRTOS/Src/queue.c **** {
 257:FreeRTOS/Src/queue.c **** Queue_t * const pxQueue = xQueue;
 258:FreeRTOS/Src/queue.c **** 
 259:FreeRTOS/Src/queue.c **** 	configASSERT( pxQueue );
 260:FreeRTOS/Src/queue.c **** 
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 6


 261:FreeRTOS/Src/queue.c **** 	taskENTER_CRITICAL();
 262:FreeRTOS/Src/queue.c **** 	{
 263:FreeRTOS/Src/queue.c **** 		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint 
 264:FreeRTOS/Src/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 265:FreeRTOS/Src/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 266:FreeRTOS/Src/queue.c **** 		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSi
 267:FreeRTOS/Src/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 268:FreeRTOS/Src/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 269:FreeRTOS/Src/queue.c **** 
 270:FreeRTOS/Src/queue.c **** 		if( xNewQueue == pdFALSE )
 271:FreeRTOS/Src/queue.c **** 		{
 272:FreeRTOS/Src/queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 273:FreeRTOS/Src/queue.c **** 			the tasks will remain blocked as after this function exits the queue
 274:FreeRTOS/Src/queue.c **** 			will still be empty.  If there are tasks blocked waiting to write to
 275:FreeRTOS/Src/queue.c **** 			the queue, then one should be unblocked as after this function exits
 276:FreeRTOS/Src/queue.c **** 			it will be possible to write to it. */
 277:FreeRTOS/Src/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 278:FreeRTOS/Src/queue.c **** 			{
 279:FreeRTOS/Src/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 280:FreeRTOS/Src/queue.c **** 				{
 281:FreeRTOS/Src/queue.c **** 					queueYIELD_IF_USING_PREEMPTION();
 282:FreeRTOS/Src/queue.c **** 				}
 283:FreeRTOS/Src/queue.c **** 				else
 284:FreeRTOS/Src/queue.c **** 				{
 285:FreeRTOS/Src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 286:FreeRTOS/Src/queue.c **** 				}
 287:FreeRTOS/Src/queue.c **** 			}
 288:FreeRTOS/Src/queue.c **** 			else
 289:FreeRTOS/Src/queue.c **** 			{
 290:FreeRTOS/Src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 291:FreeRTOS/Src/queue.c **** 			}
 292:FreeRTOS/Src/queue.c **** 		}
 293:FreeRTOS/Src/queue.c **** 		else
 294:FreeRTOS/Src/queue.c **** 		{
 295:FreeRTOS/Src/queue.c **** 			/* Ensure the event queues start in the correct state. */
 296:FreeRTOS/Src/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 297:FreeRTOS/Src/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 298:FreeRTOS/Src/queue.c **** 		}
 299:FreeRTOS/Src/queue.c **** 	}
 300:FreeRTOS/Src/queue.c **** 	taskEXIT_CRITICAL();
 301:FreeRTOS/Src/queue.c **** 
 302:FreeRTOS/Src/queue.c **** 	/* A value is returned for calling semantic consistency with previous
 303:FreeRTOS/Src/queue.c **** 	versions. */
 304:FreeRTOS/Src/queue.c **** 	return pdPASS;
 305:FreeRTOS/Src/queue.c **** }
 306:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 307:FreeRTOS/Src/queue.c **** 
 308:FreeRTOS/Src/queue.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 309:FreeRTOS/Src/queue.c **** 
 310:FreeRTOS/Src/queue.c **** 	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItem
 311:FreeRTOS/Src/queue.c **** 	{
 312:FreeRTOS/Src/queue.c **** 	Queue_t *pxNewQueue;
 313:FreeRTOS/Src/queue.c **** 
 314:FreeRTOS/Src/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 315:FreeRTOS/Src/queue.c **** 
 316:FreeRTOS/Src/queue.c **** 		/* The StaticQueue_t structure and the queue storage area must be
 317:FreeRTOS/Src/queue.c **** 		supplied. */
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 7


 318:FreeRTOS/Src/queue.c **** 		configASSERT( pxStaticQueue != NULL );
 319:FreeRTOS/Src/queue.c **** 
 320:FreeRTOS/Src/queue.c **** 		/* A queue storage area should be provided if the item size is not 0, and
 321:FreeRTOS/Src/queue.c **** 		should not be provided if the item size is 0. */
 322:FreeRTOS/Src/queue.c **** 		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 323:FreeRTOS/Src/queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 324:FreeRTOS/Src/queue.c **** 
 325:FreeRTOS/Src/queue.c **** 		#if( configASSERT_DEFINED == 1 )
 326:FreeRTOS/Src/queue.c **** 		{
 327:FreeRTOS/Src/queue.c **** 			/* Sanity check that the size of the structure used to declare a
 328:FreeRTOS/Src/queue.c **** 			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 329:FreeRTOS/Src/queue.c **** 			the real queue and semaphore structures. */
 330:FreeRTOS/Src/queue.c **** 			volatile size_t xSize = sizeof( StaticQueue_t );
 331:FreeRTOS/Src/queue.c **** 			configASSERT( xSize == sizeof( Queue_t ) );
 332:FreeRTOS/Src/queue.c **** 			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 333:FreeRTOS/Src/queue.c **** 		}
 334:FreeRTOS/Src/queue.c **** 		#endif /* configASSERT_DEFINED */
 335:FreeRTOS/Src/queue.c **** 
 336:FreeRTOS/Src/queue.c **** 		/* The address of a statically allocated queue was passed in, use it.
 337:FreeRTOS/Src/queue.c **** 		The address of a statically allocated storage area was also passed in
 338:FreeRTOS/Src/queue.c **** 		but is already set. */
 339:FreeRTOS/Src/queue.c **** 		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structure
 340:FreeRTOS/Src/queue.c **** 
 341:FreeRTOS/Src/queue.c **** 		if( pxNewQueue != NULL )
 342:FreeRTOS/Src/queue.c **** 		{
 343:FreeRTOS/Src/queue.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 344:FreeRTOS/Src/queue.c **** 			{
 345:FreeRTOS/Src/queue.c **** 				/* Queues can be allocated wither statically or dynamically, so
 346:FreeRTOS/Src/queue.c **** 				note this queue was allocated statically in case the queue is
 347:FreeRTOS/Src/queue.c **** 				later deleted. */
 348:FreeRTOS/Src/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 349:FreeRTOS/Src/queue.c **** 			}
 350:FreeRTOS/Src/queue.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 351:FreeRTOS/Src/queue.c **** 
 352:FreeRTOS/Src/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 353:FreeRTOS/Src/queue.c **** 		}
 354:FreeRTOS/Src/queue.c **** 		else
 355:FreeRTOS/Src/queue.c **** 		{
 356:FreeRTOS/Src/queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 357:FreeRTOS/Src/queue.c **** 			mtCOVERAGE_TEST_MARKER();
 358:FreeRTOS/Src/queue.c **** 		}
 359:FreeRTOS/Src/queue.c **** 
 360:FreeRTOS/Src/queue.c **** 		return pxNewQueue;
 361:FreeRTOS/Src/queue.c **** 	}
 362:FreeRTOS/Src/queue.c **** 
 363:FreeRTOS/Src/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 364:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 365:FreeRTOS/Src/queue.c **** 
 366:FreeRTOS/Src/queue.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 367:FreeRTOS/Src/queue.c **** 
 368:FreeRTOS/Src/queue.c **** 	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, 
 369:FreeRTOS/Src/queue.c **** 	{
 370:FreeRTOS/Src/queue.c **** 	Queue_t *pxNewQueue;
 371:FreeRTOS/Src/queue.c **** 	size_t xQueueSizeInBytes;
 372:FreeRTOS/Src/queue.c **** 	uint8_t *pucQueueStorage;
 373:FreeRTOS/Src/queue.c **** 
 374:FreeRTOS/Src/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 8


 375:FreeRTOS/Src/queue.c **** 
 376:FreeRTOS/Src/queue.c **** 		if( uxItemSize == ( UBaseType_t ) 0 )
 377:FreeRTOS/Src/queue.c **** 		{
 378:FreeRTOS/Src/queue.c **** 			/* There is not going to be a queue storage area. */
 379:FreeRTOS/Src/queue.c **** 			xQueueSizeInBytes = ( size_t ) 0;
 380:FreeRTOS/Src/queue.c **** 		}
 381:FreeRTOS/Src/queue.c **** 		else
 382:FreeRTOS/Src/queue.c **** 		{
 383:FreeRTOS/Src/queue.c **** 			/* Allocate enough space to hold the maximum number of items that
 384:FreeRTOS/Src/queue.c **** 			can be in the queue at any time. */
 385:FreeRTOS/Src/queue.c **** 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as t
 386:FreeRTOS/Src/queue.c **** 		}
 387:FreeRTOS/Src/queue.c **** 
 388:FreeRTOS/Src/queue.c **** 		/* Allocate the queue and storage area.  Justification for MISRA
 389:FreeRTOS/Src/queue.c **** 		deviation as follows:  pvPortMalloc() always ensures returned memory
 390:FreeRTOS/Src/queue.c **** 		blocks are aligned per the requirements of the MCU stack.  In this case
 391:FreeRTOS/Src/queue.c **** 		pvPortMalloc() must return a pointer that is guaranteed to meet the
 392:FreeRTOS/Src/queue.c **** 		alignment requirements of the Queue_t structure - which in this case
 393:FreeRTOS/Src/queue.c **** 		is an int8_t *.  Therefore, whenever the stack alignment requirements
 394:FreeRTOS/Src/queue.c **** 		are greater than or equal to the pointer to char requirements the cast
 395:FreeRTOS/Src/queue.c **** 		is safe.  In other cases alignment requirements are not strict (one or
 396:FreeRTOS/Src/queue.c **** 		two bytes). */
 397:FreeRTOS/Src/queue.c **** 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !
 398:FreeRTOS/Src/queue.c **** 
 399:FreeRTOS/Src/queue.c **** 		if( pxNewQueue != NULL )
 400:FreeRTOS/Src/queue.c **** 		{
 401:FreeRTOS/Src/queue.c **** 			/* Jump past the queue structure to find the location of the queue
 402:FreeRTOS/Src/queue.c **** 			storage area. */
 403:FreeRTOS/Src/queue.c **** 			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 404:FreeRTOS/Src/queue.c **** 			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, es
 405:FreeRTOS/Src/queue.c **** 
 406:FreeRTOS/Src/queue.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 407:FreeRTOS/Src/queue.c **** 			{
 408:FreeRTOS/Src/queue.c **** 				/* Queues can be created either statically or dynamically, so
 409:FreeRTOS/Src/queue.c **** 				note this task was created dynamically in case it is later
 410:FreeRTOS/Src/queue.c **** 				deleted. */
 411:FreeRTOS/Src/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 412:FreeRTOS/Src/queue.c **** 			}
 413:FreeRTOS/Src/queue.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 414:FreeRTOS/Src/queue.c **** 
 415:FreeRTOS/Src/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 416:FreeRTOS/Src/queue.c **** 		}
 417:FreeRTOS/Src/queue.c **** 		else
 418:FreeRTOS/Src/queue.c **** 		{
 419:FreeRTOS/Src/queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 420:FreeRTOS/Src/queue.c **** 			mtCOVERAGE_TEST_MARKER();
 421:FreeRTOS/Src/queue.c **** 		}
 422:FreeRTOS/Src/queue.c **** 
 423:FreeRTOS/Src/queue.c **** 		return pxNewQueue;
 424:FreeRTOS/Src/queue.c **** 	}
 425:FreeRTOS/Src/queue.c **** 
 426:FreeRTOS/Src/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 427:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 428:FreeRTOS/Src/queue.c **** 
 429:FreeRTOS/Src/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 430:FreeRTOS/Src/queue.c **** {
 431:FreeRTOS/Src/queue.c **** 	/* Remove compiler warnings about unused parameters should
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 9


 432:FreeRTOS/Src/queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 433:FreeRTOS/Src/queue.c **** 	( void ) ucQueueType;
 434:FreeRTOS/Src/queue.c **** 
 435:FreeRTOS/Src/queue.c **** 	if( uxItemSize == ( UBaseType_t ) 0 )
 436:FreeRTOS/Src/queue.c **** 	{
 437:FreeRTOS/Src/queue.c **** 		/* No RAM was allocated for the queue storage area, but PC head cannot
 438:FreeRTOS/Src/queue.c **** 		be set to NULL because NULL is used as a key to say the queue is used as
 439:FreeRTOS/Src/queue.c **** 		a mutex.  Therefore just set pcHead to point to the queue as a benign
 440:FreeRTOS/Src/queue.c **** 		value that is known to be within the memory map. */
 441:FreeRTOS/Src/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 442:FreeRTOS/Src/queue.c **** 	}
 443:FreeRTOS/Src/queue.c **** 	else
 444:FreeRTOS/Src/queue.c **** 	{
 445:FreeRTOS/Src/queue.c **** 		/* Set the head to the start of the queue storage area. */
 446:FreeRTOS/Src/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 447:FreeRTOS/Src/queue.c **** 	}
 448:FreeRTOS/Src/queue.c **** 
 449:FreeRTOS/Src/queue.c **** 	/* Initialise the queue members as described where the queue type is
 450:FreeRTOS/Src/queue.c **** 	defined. */
 451:FreeRTOS/Src/queue.c **** 	pxNewQueue->uxLength = uxQueueLength;
 452:FreeRTOS/Src/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 453:FreeRTOS/Src/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 454:FreeRTOS/Src/queue.c **** 
 455:FreeRTOS/Src/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 456:FreeRTOS/Src/queue.c **** 	{
 457:FreeRTOS/Src/queue.c **** 		pxNewQueue->ucQueueType = ucQueueType;
 458:FreeRTOS/Src/queue.c **** 	}
 459:FreeRTOS/Src/queue.c **** 	#endif /* configUSE_TRACE_FACILITY */
 460:FreeRTOS/Src/queue.c **** 
 461:FreeRTOS/Src/queue.c **** 	#if( configUSE_QUEUE_SETS == 1 )
 462:FreeRTOS/Src/queue.c **** 	{
 463:FreeRTOS/Src/queue.c **** 		pxNewQueue->pxQueueSetContainer = NULL;
 464:FreeRTOS/Src/queue.c **** 	}
 465:FreeRTOS/Src/queue.c **** 	#endif /* configUSE_QUEUE_SETS */
 466:FreeRTOS/Src/queue.c **** 
 467:FreeRTOS/Src/queue.c **** 	traceQUEUE_CREATE( pxNewQueue );
 468:FreeRTOS/Src/queue.c **** }
 469:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 470:FreeRTOS/Src/queue.c **** 
 471:FreeRTOS/Src/queue.c **** #if( configUSE_MUTEXES == 1 )
 472:FreeRTOS/Src/queue.c **** 
 473:FreeRTOS/Src/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue )
 474:FreeRTOS/Src/queue.c **** 	{
 475:FreeRTOS/Src/queue.c **** 		if( pxNewQueue != NULL )
 476:FreeRTOS/Src/queue.c **** 		{
 477:FreeRTOS/Src/queue.c **** 			/* The queue create function will set all the queue structure members
 478:FreeRTOS/Src/queue.c **** 			correctly for a generic queue, but this function is creating a
 479:FreeRTOS/Src/queue.c **** 			mutex.  Overwrite those members that need to be set differently -
 480:FreeRTOS/Src/queue.c **** 			in particular the information required for priority inheritance. */
 481:FreeRTOS/Src/queue.c **** 			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 482:FreeRTOS/Src/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 483:FreeRTOS/Src/queue.c **** 
 484:FreeRTOS/Src/queue.c **** 			/* In case this is a recursive mutex. */
 485:FreeRTOS/Src/queue.c **** 			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 486:FreeRTOS/Src/queue.c **** 
 487:FreeRTOS/Src/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 488:FreeRTOS/Src/queue.c **** 
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 10


 489:FreeRTOS/Src/queue.c **** 			/* Start with the semaphore in the expected state. */
 490:FreeRTOS/Src/queue.c **** 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 491:FreeRTOS/Src/queue.c **** 		}
 492:FreeRTOS/Src/queue.c **** 		else
 493:FreeRTOS/Src/queue.c **** 		{
 494:FreeRTOS/Src/queue.c **** 			traceCREATE_MUTEX_FAILED();
 495:FreeRTOS/Src/queue.c **** 		}
 496:FreeRTOS/Src/queue.c **** 	}
 497:FreeRTOS/Src/queue.c **** 
 498:FreeRTOS/Src/queue.c **** #endif /* configUSE_MUTEXES */
 499:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 500:FreeRTOS/Src/queue.c **** 
 501:FreeRTOS/Src/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 502:FreeRTOS/Src/queue.c **** 
 503:FreeRTOS/Src/queue.c **** 	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 504:FreeRTOS/Src/queue.c **** 	{
 505:FreeRTOS/Src/queue.c **** 	QueueHandle_t xNewQueue;
 506:FreeRTOS/Src/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 507:FreeRTOS/Src/queue.c **** 
 508:FreeRTOS/Src/queue.c **** 		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 509:FreeRTOS/Src/queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 510:FreeRTOS/Src/queue.c **** 
 511:FreeRTOS/Src/queue.c **** 		return xNewQueue;
 512:FreeRTOS/Src/queue.c **** 	}
 513:FreeRTOS/Src/queue.c **** 
 514:FreeRTOS/Src/queue.c **** #endif /* configUSE_MUTEXES */
 515:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 516:FreeRTOS/Src/queue.c **** 
 517:FreeRTOS/Src/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 518:FreeRTOS/Src/queue.c **** 
 519:FreeRTOS/Src/queue.c **** 	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
 520:FreeRTOS/Src/queue.c **** 	{
 521:FreeRTOS/Src/queue.c **** 	QueueHandle_t xNewQueue;
 522:FreeRTOS/Src/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 523:FreeRTOS/Src/queue.c **** 
 524:FreeRTOS/Src/queue.c **** 		/* Prevent compiler warnings about unused parameters if
 525:FreeRTOS/Src/queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 526:FreeRTOS/Src/queue.c **** 		( void ) ucQueueType;
 527:FreeRTOS/Src/queue.c **** 
 528:FreeRTOS/Src/queue.c **** 		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueTy
 529:FreeRTOS/Src/queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 530:FreeRTOS/Src/queue.c **** 
 531:FreeRTOS/Src/queue.c **** 		return xNewQueue;
 532:FreeRTOS/Src/queue.c **** 	}
 533:FreeRTOS/Src/queue.c **** 
 534:FreeRTOS/Src/queue.c **** #endif /* configUSE_MUTEXES */
 535:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 536:FreeRTOS/Src/queue.c **** 
 537:FreeRTOS/Src/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 538:FreeRTOS/Src/queue.c **** 
 539:FreeRTOS/Src/queue.c **** 	TaskHandle_t xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 540:FreeRTOS/Src/queue.c **** 	{
 541:FreeRTOS/Src/queue.c **** 	TaskHandle_t pxReturn;
 542:FreeRTOS/Src/queue.c **** 	Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 543:FreeRTOS/Src/queue.c **** 
 544:FreeRTOS/Src/queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
 545:FreeRTOS/Src/queue.c **** 		be called directly.  Note:  This is a good way of determining if the
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 11


 546:FreeRTOS/Src/queue.c **** 		calling task is the mutex holder, but not a good way of determining the
 547:FreeRTOS/Src/queue.c **** 		identity of the mutex holder, as the holder may change between the
 548:FreeRTOS/Src/queue.c **** 		following critical section exiting and the function returning. */
 549:FreeRTOS/Src/queue.c **** 		taskENTER_CRITICAL();
 550:FreeRTOS/Src/queue.c **** 		{
 551:FreeRTOS/Src/queue.c **** 			if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 552:FreeRTOS/Src/queue.c **** 			{
 553:FreeRTOS/Src/queue.c **** 				pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 554:FreeRTOS/Src/queue.c **** 			}
 555:FreeRTOS/Src/queue.c **** 			else
 556:FreeRTOS/Src/queue.c **** 			{
 557:FreeRTOS/Src/queue.c **** 				pxReturn = NULL;
 558:FreeRTOS/Src/queue.c **** 			}
 559:FreeRTOS/Src/queue.c **** 		}
 560:FreeRTOS/Src/queue.c **** 		taskEXIT_CRITICAL();
 561:FreeRTOS/Src/queue.c **** 
 562:FreeRTOS/Src/queue.c **** 		return pxReturn;
 563:FreeRTOS/Src/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 564:FreeRTOS/Src/queue.c **** 
 565:FreeRTOS/Src/queue.c **** #endif
 566:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 567:FreeRTOS/Src/queue.c **** 
 568:FreeRTOS/Src/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 569:FreeRTOS/Src/queue.c **** 
 570:FreeRTOS/Src/queue.c **** 	TaskHandle_t xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore )
 571:FreeRTOS/Src/queue.c **** 	{
 572:FreeRTOS/Src/queue.c **** 	TaskHandle_t pxReturn;
 573:FreeRTOS/Src/queue.c **** 
 574:FreeRTOS/Src/queue.c **** 		configASSERT( xSemaphore );
 575:FreeRTOS/Src/queue.c **** 
 576:FreeRTOS/Src/queue.c **** 		/* Mutexes cannot be used in interrupt service routines, so the mutex
 577:FreeRTOS/Src/queue.c **** 		holder should not change in an ISR, and therefore a critical section is
 578:FreeRTOS/Src/queue.c **** 		not required here. */
 579:FreeRTOS/Src/queue.c **** 		if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 580:FreeRTOS/Src/queue.c **** 		{
 581:FreeRTOS/Src/queue.c **** 			pxReturn = ( ( Queue_t * ) xSemaphore )->u.xSemaphore.xMutexHolder;
 582:FreeRTOS/Src/queue.c **** 		}
 583:FreeRTOS/Src/queue.c **** 		else
 584:FreeRTOS/Src/queue.c **** 		{
 585:FreeRTOS/Src/queue.c **** 			pxReturn = NULL;
 586:FreeRTOS/Src/queue.c **** 		}
 587:FreeRTOS/Src/queue.c **** 
 588:FreeRTOS/Src/queue.c **** 		return pxReturn;
 589:FreeRTOS/Src/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 590:FreeRTOS/Src/queue.c **** 
 591:FreeRTOS/Src/queue.c **** #endif
 592:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 593:FreeRTOS/Src/queue.c **** 
 594:FreeRTOS/Src/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 595:FreeRTOS/Src/queue.c **** 
 596:FreeRTOS/Src/queue.c **** 	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 597:FreeRTOS/Src/queue.c **** 	{
 598:FreeRTOS/Src/queue.c **** 	BaseType_t xReturn;
 599:FreeRTOS/Src/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 600:FreeRTOS/Src/queue.c **** 
 601:FreeRTOS/Src/queue.c **** 		configASSERT( pxMutex );
 602:FreeRTOS/Src/queue.c **** 
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 12


 603:FreeRTOS/Src/queue.c **** 		/* If this is the task that holds the mutex then xMutexHolder will not
 604:FreeRTOS/Src/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 605:FreeRTOS/Src/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 606:FreeRTOS/Src/queue.c **** 		this is the only condition we are interested in it does not matter if
 607:FreeRTOS/Src/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 608:FreeRTOS/Src/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 609:FreeRTOS/Src/queue.c **** 		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 610:FreeRTOS/Src/queue.c **** 		{
 611:FreeRTOS/Src/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 612:FreeRTOS/Src/queue.c **** 
 613:FreeRTOS/Src/queue.c **** 			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
 614:FreeRTOS/Src/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 615:FreeRTOS/Src/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 616:FreeRTOS/Src/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 617:FreeRTOS/Src/queue.c **** 			uxRecursiveCallCount member. */
 618:FreeRTOS/Src/queue.c **** 			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 619:FreeRTOS/Src/queue.c **** 
 620:FreeRTOS/Src/queue.c **** 			/* Has the recursive call count unwound to 0? */
 621:FreeRTOS/Src/queue.c **** 			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 622:FreeRTOS/Src/queue.c **** 			{
 623:FreeRTOS/Src/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 624:FreeRTOS/Src/queue.c **** 				task that might be waiting to access the mutex. */
 625:FreeRTOS/Src/queue.c **** 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 626:FreeRTOS/Src/queue.c **** 			}
 627:FreeRTOS/Src/queue.c **** 			else
 628:FreeRTOS/Src/queue.c **** 			{
 629:FreeRTOS/Src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 630:FreeRTOS/Src/queue.c **** 			}
 631:FreeRTOS/Src/queue.c **** 
 632:FreeRTOS/Src/queue.c **** 			xReturn = pdPASS;
 633:FreeRTOS/Src/queue.c **** 		}
 634:FreeRTOS/Src/queue.c **** 		else
 635:FreeRTOS/Src/queue.c **** 		{
 636:FreeRTOS/Src/queue.c **** 			/* The mutex cannot be given because the calling task is not the
 637:FreeRTOS/Src/queue.c **** 			holder. */
 638:FreeRTOS/Src/queue.c **** 			xReturn = pdFAIL;
 639:FreeRTOS/Src/queue.c **** 
 640:FreeRTOS/Src/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 641:FreeRTOS/Src/queue.c **** 		}
 642:FreeRTOS/Src/queue.c **** 
 643:FreeRTOS/Src/queue.c **** 		return xReturn;
 644:FreeRTOS/Src/queue.c **** 	}
 645:FreeRTOS/Src/queue.c **** 
 646:FreeRTOS/Src/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 647:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 648:FreeRTOS/Src/queue.c **** 
 649:FreeRTOS/Src/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 650:FreeRTOS/Src/queue.c **** 
 651:FreeRTOS/Src/queue.c **** 	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
 652:FreeRTOS/Src/queue.c **** 	{
 653:FreeRTOS/Src/queue.c **** 	BaseType_t xReturn;
 654:FreeRTOS/Src/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 655:FreeRTOS/Src/queue.c **** 
 656:FreeRTOS/Src/queue.c **** 		configASSERT( pxMutex );
 657:FreeRTOS/Src/queue.c **** 
 658:FreeRTOS/Src/queue.c **** 		/* Comments regarding mutual exclusion as per those within
 659:FreeRTOS/Src/queue.c **** 		xQueueGiveMutexRecursive(). */
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 13


 660:FreeRTOS/Src/queue.c **** 
 661:FreeRTOS/Src/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 662:FreeRTOS/Src/queue.c **** 
 663:FreeRTOS/Src/queue.c **** 		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 664:FreeRTOS/Src/queue.c **** 		{
 665:FreeRTOS/Src/queue.c **** 			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 666:FreeRTOS/Src/queue.c **** 			xReturn = pdPASS;
 667:FreeRTOS/Src/queue.c **** 		}
 668:FreeRTOS/Src/queue.c **** 		else
 669:FreeRTOS/Src/queue.c **** 		{
 670:FreeRTOS/Src/queue.c **** 			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 671:FreeRTOS/Src/queue.c **** 
 672:FreeRTOS/Src/queue.c **** 			/* pdPASS will only be returned if the mutex was successfully
 673:FreeRTOS/Src/queue.c **** 			obtained.  The calling task may have entered the Blocked state
 674:FreeRTOS/Src/queue.c **** 			before reaching here. */
 675:FreeRTOS/Src/queue.c **** 			if( xReturn != pdFAIL )
 676:FreeRTOS/Src/queue.c **** 			{
 677:FreeRTOS/Src/queue.c **** 				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 678:FreeRTOS/Src/queue.c **** 			}
 679:FreeRTOS/Src/queue.c **** 			else
 680:FreeRTOS/Src/queue.c **** 			{
 681:FreeRTOS/Src/queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 682:FreeRTOS/Src/queue.c **** 			}
 683:FreeRTOS/Src/queue.c **** 		}
 684:FreeRTOS/Src/queue.c **** 
 685:FreeRTOS/Src/queue.c **** 		return xReturn;
 686:FreeRTOS/Src/queue.c **** 	}
 687:FreeRTOS/Src/queue.c **** 
 688:FreeRTOS/Src/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 689:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 690:FreeRTOS/Src/queue.c **** 
 691:FreeRTOS/Src/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 692:FreeRTOS/Src/queue.c **** 
 693:FreeRTOS/Src/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t
 694:FreeRTOS/Src/queue.c **** 	{
 695:FreeRTOS/Src/queue.c **** 	QueueHandle_t xHandle;
 696:FreeRTOS/Src/queue.c **** 
 697:FreeRTOS/Src/queue.c **** 		configASSERT( uxMaxCount != 0 );
 698:FreeRTOS/Src/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 699:FreeRTOS/Src/queue.c **** 
 700:FreeRTOS/Src/queue.c **** 		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStatic
 701:FreeRTOS/Src/queue.c **** 
 702:FreeRTOS/Src/queue.c **** 		if( xHandle != NULL )
 703:FreeRTOS/Src/queue.c **** 		{
 704:FreeRTOS/Src/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 705:FreeRTOS/Src/queue.c **** 
 706:FreeRTOS/Src/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 707:FreeRTOS/Src/queue.c **** 		}
 708:FreeRTOS/Src/queue.c **** 		else
 709:FreeRTOS/Src/queue.c **** 		{
 710:FreeRTOS/Src/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 711:FreeRTOS/Src/queue.c **** 		}
 712:FreeRTOS/Src/queue.c **** 
 713:FreeRTOS/Src/queue.c **** 		return xHandle;
 714:FreeRTOS/Src/queue.c **** 	}
 715:FreeRTOS/Src/queue.c **** 
 716:FreeRTOS/Src/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 14


 717:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 718:FreeRTOS/Src/queue.c **** 
 719:FreeRTOS/Src/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 720:FreeRTOS/Src/queue.c **** 
 721:FreeRTOS/Src/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxIni
 722:FreeRTOS/Src/queue.c **** 	{
 723:FreeRTOS/Src/queue.c **** 	QueueHandle_t xHandle;
 724:FreeRTOS/Src/queue.c **** 
 725:FreeRTOS/Src/queue.c **** 		configASSERT( uxMaxCount != 0 );
 726:FreeRTOS/Src/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 727:FreeRTOS/Src/queue.c **** 
 728:FreeRTOS/Src/queue.c **** 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUN
 729:FreeRTOS/Src/queue.c **** 
 730:FreeRTOS/Src/queue.c **** 		if( xHandle != NULL )
 731:FreeRTOS/Src/queue.c **** 		{
 732:FreeRTOS/Src/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 733:FreeRTOS/Src/queue.c **** 
 734:FreeRTOS/Src/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 735:FreeRTOS/Src/queue.c **** 		}
 736:FreeRTOS/Src/queue.c **** 		else
 737:FreeRTOS/Src/queue.c **** 		{
 738:FreeRTOS/Src/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 739:FreeRTOS/Src/queue.c **** 		}
 740:FreeRTOS/Src/queue.c **** 
 741:FreeRTOS/Src/queue.c **** 		return xHandle;
 742:FreeRTOS/Src/queue.c **** 	}
 743:FreeRTOS/Src/queue.c **** 
 744:FreeRTOS/Src/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 745:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 746:FreeRTOS/Src/queue.c **** 
 747:FreeRTOS/Src/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xT
 748:FreeRTOS/Src/queue.c **** {
 749:FreeRTOS/Src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 750:FreeRTOS/Src/queue.c **** TimeOut_t xTimeOut;
 751:FreeRTOS/Src/queue.c **** Queue_t * const pxQueue = xQueue;
 752:FreeRTOS/Src/queue.c **** 
 753:FreeRTOS/Src/queue.c **** 	configASSERT( pxQueue );
 754:FreeRTOS/Src/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 755:FreeRTOS/Src/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 756:FreeRTOS/Src/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 757:FreeRTOS/Src/queue.c **** 	{
 758:FreeRTOS/Src/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 759:FreeRTOS/Src/queue.c **** 	}
 760:FreeRTOS/Src/queue.c **** 	#endif
 761:FreeRTOS/Src/queue.c **** 
 762:FreeRTOS/Src/queue.c **** 
 763:FreeRTOS/Src/queue.c **** 	/*lint -save -e904 This function relaxes the coding standard somewhat to
 764:FreeRTOS/Src/queue.c **** 	allow return statements within the function itself.  This is done in the
 765:FreeRTOS/Src/queue.c **** 	interest of execution time efficiency. */
 766:FreeRTOS/Src/queue.c **** 	for( ;; )
 767:FreeRTOS/Src/queue.c **** 	{
 768:FreeRTOS/Src/queue.c **** 		taskENTER_CRITICAL();
 769:FreeRTOS/Src/queue.c **** 		{
 770:FreeRTOS/Src/queue.c **** 			/* Is there room on the queue now?  The running task must be the
 771:FreeRTOS/Src/queue.c **** 			highest priority task wanting to access the queue.  If the head item
 772:FreeRTOS/Src/queue.c **** 			in the queue is to be overwritten then it does not matter if the
 773:FreeRTOS/Src/queue.c **** 			queue is full. */
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 15


 774:FreeRTOS/Src/queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 775:FreeRTOS/Src/queue.c **** 			{
 776:FreeRTOS/Src/queue.c **** 				traceQUEUE_SEND( pxQueue );
 777:FreeRTOS/Src/queue.c **** 
 778:FreeRTOS/Src/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 779:FreeRTOS/Src/queue.c **** 				{
 780:FreeRTOS/Src/queue.c **** 				UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 781:FreeRTOS/Src/queue.c **** 
 782:FreeRTOS/Src/queue.c **** 					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 783:FreeRTOS/Src/queue.c **** 
 784:FreeRTOS/Src/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 785:FreeRTOS/Src/queue.c **** 					{
 786:FreeRTOS/Src/queue.c **** 						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 )
 787:FreeRTOS/Src/queue.c **** 						{
 788:FreeRTOS/Src/queue.c **** 							/* Do not notify the queue set as an existing item
 789:FreeRTOS/Src/queue.c **** 							was overwritten in the queue so the number of items
 790:FreeRTOS/Src/queue.c **** 							in the queue has not changed. */
 791:FreeRTOS/Src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 792:FreeRTOS/Src/queue.c **** 						}
 793:FreeRTOS/Src/queue.c **** 						else if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 794:FreeRTOS/Src/queue.c **** 						{
 795:FreeRTOS/Src/queue.c **** 							/* The queue is a member of a queue set, and posting
 796:FreeRTOS/Src/queue.c **** 							to the queue set caused a higher priority task to
 797:FreeRTOS/Src/queue.c **** 							unblock. A context switch is required. */
 798:FreeRTOS/Src/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 799:FreeRTOS/Src/queue.c **** 						}
 800:FreeRTOS/Src/queue.c **** 						else
 801:FreeRTOS/Src/queue.c **** 						{
 802:FreeRTOS/Src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 803:FreeRTOS/Src/queue.c **** 						}
 804:FreeRTOS/Src/queue.c **** 					}
 805:FreeRTOS/Src/queue.c **** 					else
 806:FreeRTOS/Src/queue.c **** 					{
 807:FreeRTOS/Src/queue.c **** 						/* If there was a task waiting for data to arrive on the
 808:FreeRTOS/Src/queue.c **** 						queue then unblock it now. */
 809:FreeRTOS/Src/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810:FreeRTOS/Src/queue.c **** 						{
 811:FreeRTOS/Src/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 812:FreeRTOS/Src/queue.c **** 							{
 813:FreeRTOS/Src/queue.c **** 								/* The unblocked task has a priority higher than
 814:FreeRTOS/Src/queue.c **** 								our own so yield immediately.  Yes it is ok to
 815:FreeRTOS/Src/queue.c **** 								do this from within the critical section - the
 816:FreeRTOS/Src/queue.c **** 								kernel takes care of that. */
 817:FreeRTOS/Src/queue.c **** 								queueYIELD_IF_USING_PREEMPTION();
 818:FreeRTOS/Src/queue.c **** 							}
 819:FreeRTOS/Src/queue.c **** 							else
 820:FreeRTOS/Src/queue.c **** 							{
 821:FreeRTOS/Src/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 822:FreeRTOS/Src/queue.c **** 							}
 823:FreeRTOS/Src/queue.c **** 						}
 824:FreeRTOS/Src/queue.c **** 						else if( xYieldRequired != pdFALSE )
 825:FreeRTOS/Src/queue.c **** 						{
 826:FreeRTOS/Src/queue.c **** 							/* This path is a special case that will only get
 827:FreeRTOS/Src/queue.c **** 							executed if the task was holding multiple mutexes
 828:FreeRTOS/Src/queue.c **** 							and the mutexes were given back in an order that is
 829:FreeRTOS/Src/queue.c **** 							different to that in which they were taken. */
 830:FreeRTOS/Src/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 16


 831:FreeRTOS/Src/queue.c **** 						}
 832:FreeRTOS/Src/queue.c **** 						else
 833:FreeRTOS/Src/queue.c **** 						{
 834:FreeRTOS/Src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 835:FreeRTOS/Src/queue.c **** 						}
 836:FreeRTOS/Src/queue.c **** 					}
 837:FreeRTOS/Src/queue.c **** 				}
 838:FreeRTOS/Src/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 839:FreeRTOS/Src/queue.c **** 				{
 840:FreeRTOS/Src/queue.c **** 					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 841:FreeRTOS/Src/queue.c **** 
 842:FreeRTOS/Src/queue.c **** 					/* If there was a task waiting for data to arrive on the
 843:FreeRTOS/Src/queue.c **** 					queue then unblock it now. */
 844:FreeRTOS/Src/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 845:FreeRTOS/Src/queue.c **** 					{
 846:FreeRTOS/Src/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 847:FreeRTOS/Src/queue.c **** 						{
 848:FreeRTOS/Src/queue.c **** 							/* The unblocked task has a priority higher than
 849:FreeRTOS/Src/queue.c **** 							our own so yield immediately.  Yes it is ok to do
 850:FreeRTOS/Src/queue.c **** 							this from within the critical section - the kernel
 851:FreeRTOS/Src/queue.c **** 							takes care of that. */
 852:FreeRTOS/Src/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 853:FreeRTOS/Src/queue.c **** 						}
 854:FreeRTOS/Src/queue.c **** 						else
 855:FreeRTOS/Src/queue.c **** 						{
 856:FreeRTOS/Src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 857:FreeRTOS/Src/queue.c **** 						}
 858:FreeRTOS/Src/queue.c **** 					}
 859:FreeRTOS/Src/queue.c **** 					else if( xYieldRequired != pdFALSE )
 860:FreeRTOS/Src/queue.c **** 					{
 861:FreeRTOS/Src/queue.c **** 						/* This path is a special case that will only get
 862:FreeRTOS/Src/queue.c **** 						executed if the task was holding multiple mutexes and
 863:FreeRTOS/Src/queue.c **** 						the mutexes were given back in an order that is
 864:FreeRTOS/Src/queue.c **** 						different to that in which they were taken. */
 865:FreeRTOS/Src/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 866:FreeRTOS/Src/queue.c **** 					}
 867:FreeRTOS/Src/queue.c **** 					else
 868:FreeRTOS/Src/queue.c **** 					{
 869:FreeRTOS/Src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 870:FreeRTOS/Src/queue.c **** 					}
 871:FreeRTOS/Src/queue.c **** 				}
 872:FreeRTOS/Src/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 873:FreeRTOS/Src/queue.c **** 
 874:FreeRTOS/Src/queue.c **** 				taskEXIT_CRITICAL();
 875:FreeRTOS/Src/queue.c **** 				return pdPASS;
 876:FreeRTOS/Src/queue.c **** 			}
 877:FreeRTOS/Src/queue.c **** 			else
 878:FreeRTOS/Src/queue.c **** 			{
 879:FreeRTOS/Src/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 880:FreeRTOS/Src/queue.c **** 				{
 881:FreeRTOS/Src/queue.c **** 					/* The queue was full and no block time is specified (or
 882:FreeRTOS/Src/queue.c **** 					the block time has expired) so leave now. */
 883:FreeRTOS/Src/queue.c **** 					taskEXIT_CRITICAL();
 884:FreeRTOS/Src/queue.c **** 
 885:FreeRTOS/Src/queue.c **** 					/* Return to the original privilege level before exiting
 886:FreeRTOS/Src/queue.c **** 					the function. */
 887:FreeRTOS/Src/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 17


 888:FreeRTOS/Src/queue.c **** 					return errQUEUE_FULL;
 889:FreeRTOS/Src/queue.c **** 				}
 890:FreeRTOS/Src/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 891:FreeRTOS/Src/queue.c **** 				{
 892:FreeRTOS/Src/queue.c **** 					/* The queue was full and a block time was specified so
 893:FreeRTOS/Src/queue.c **** 					configure the timeout structure. */
 894:FreeRTOS/Src/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
 895:FreeRTOS/Src/queue.c **** 					xEntryTimeSet = pdTRUE;
 896:FreeRTOS/Src/queue.c **** 				}
 897:FreeRTOS/Src/queue.c **** 				else
 898:FreeRTOS/Src/queue.c **** 				{
 899:FreeRTOS/Src/queue.c **** 					/* Entry time was already set. */
 900:FreeRTOS/Src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 901:FreeRTOS/Src/queue.c **** 				}
 902:FreeRTOS/Src/queue.c **** 			}
 903:FreeRTOS/Src/queue.c **** 		}
 904:FreeRTOS/Src/queue.c **** 		taskEXIT_CRITICAL();
 905:FreeRTOS/Src/queue.c **** 
 906:FreeRTOS/Src/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 907:FreeRTOS/Src/queue.c **** 		now the critical section has been exited. */
 908:FreeRTOS/Src/queue.c **** 
 909:FreeRTOS/Src/queue.c **** 		vTaskSuspendAll();
 910:FreeRTOS/Src/queue.c **** 		prvLockQueue( pxQueue );
 911:FreeRTOS/Src/queue.c **** 
 912:FreeRTOS/Src/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 913:FreeRTOS/Src/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 914:FreeRTOS/Src/queue.c **** 		{
 915:FreeRTOS/Src/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 916:FreeRTOS/Src/queue.c **** 			{
 917:FreeRTOS/Src/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 918:FreeRTOS/Src/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 919:FreeRTOS/Src/queue.c **** 
 920:FreeRTOS/Src/queue.c **** 				/* Unlocking the queue means queue events can effect the
 921:FreeRTOS/Src/queue.c **** 				event list.  It is possible that interrupts occurring now
 922:FreeRTOS/Src/queue.c **** 				remove this task from the event list again - but as the
 923:FreeRTOS/Src/queue.c **** 				scheduler is suspended the task will go onto the pending
 924:FreeRTOS/Src/queue.c **** 				ready last instead of the actual ready list. */
 925:FreeRTOS/Src/queue.c **** 				prvUnlockQueue( pxQueue );
 926:FreeRTOS/Src/queue.c **** 
 927:FreeRTOS/Src/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 928:FreeRTOS/Src/queue.c **** 				ready list into the ready list - so it is feasible that this
 929:FreeRTOS/Src/queue.c **** 				task is already in a ready list before it yields - in which
 930:FreeRTOS/Src/queue.c **** 				case the yield will not cause a context switch unless there
 931:FreeRTOS/Src/queue.c **** 				is also a higher priority task in the pending ready list. */
 932:FreeRTOS/Src/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 933:FreeRTOS/Src/queue.c **** 				{
 934:FreeRTOS/Src/queue.c **** 					portYIELD_WITHIN_API();
 935:FreeRTOS/Src/queue.c **** 				}
 936:FreeRTOS/Src/queue.c **** 			}
 937:FreeRTOS/Src/queue.c **** 			else
 938:FreeRTOS/Src/queue.c **** 			{
 939:FreeRTOS/Src/queue.c **** 				/* Try again. */
 940:FreeRTOS/Src/queue.c **** 				prvUnlockQueue( pxQueue );
 941:FreeRTOS/Src/queue.c **** 				( void ) xTaskResumeAll();
 942:FreeRTOS/Src/queue.c **** 			}
 943:FreeRTOS/Src/queue.c **** 		}
 944:FreeRTOS/Src/queue.c **** 		else
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 18


 945:FreeRTOS/Src/queue.c **** 		{
 946:FreeRTOS/Src/queue.c **** 			/* The timeout has expired. */
 947:FreeRTOS/Src/queue.c **** 			prvUnlockQueue( pxQueue );
 948:FreeRTOS/Src/queue.c **** 			( void ) xTaskResumeAll();
 949:FreeRTOS/Src/queue.c **** 
 950:FreeRTOS/Src/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 951:FreeRTOS/Src/queue.c **** 			return errQUEUE_FULL;
 952:FreeRTOS/Src/queue.c **** 		}
 953:FreeRTOS/Src/queue.c **** 	} /*lint -restore */
 954:FreeRTOS/Src/queue.c **** }
 955:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 956:FreeRTOS/Src/queue.c **** 
 957:FreeRTOS/Src/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseTy
 958:FreeRTOS/Src/queue.c **** {
 959:FreeRTOS/Src/queue.c **** BaseType_t xReturn;
 960:FreeRTOS/Src/queue.c **** UBaseType_t uxSavedInterruptStatus;
 961:FreeRTOS/Src/queue.c **** Queue_t * const pxQueue = xQueue;
 962:FreeRTOS/Src/queue.c **** 
 963:FreeRTOS/Src/queue.c **** 	configASSERT( pxQueue );
 964:FreeRTOS/Src/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 965:FreeRTOS/Src/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 966:FreeRTOS/Src/queue.c **** 
 967:FreeRTOS/Src/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
 968:FreeRTOS/Src/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
 969:FreeRTOS/Src/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
 970:FreeRTOS/Src/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
 971:FreeRTOS/Src/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
 972:FreeRTOS/Src/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
 973:FreeRTOS/Src/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
 974:FreeRTOS/Src/queue.c **** 	assigned a priority above the configured maximum system call priority.
 975:FreeRTOS/Src/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
 976:FreeRTOS/Src/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
 977:FreeRTOS/Src/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
 978:FreeRTOS/Src/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
 979:FreeRTOS/Src/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
 980:FreeRTOS/Src/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
 981:FreeRTOS/Src/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 982:FreeRTOS/Src/queue.c **** 
 983:FreeRTOS/Src/queue.c **** 	/* Similar to xQueueGenericSend, except without blocking if there is no room
 984:FreeRTOS/Src/queue.c **** 	in the queue.  Also don't directly wake a task that was blocked on a queue
 985:FreeRTOS/Src/queue.c **** 	read, instead return a flag to say whether a context switch is required or
 986:FreeRTOS/Src/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
 987:FreeRTOS/Src/queue.c **** 	post). */
 988:FreeRTOS/Src/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 989:FreeRTOS/Src/queue.c **** 	{
 990:FreeRTOS/Src/queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 991:FreeRTOS/Src/queue.c **** 		{
 992:FreeRTOS/Src/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 993:FreeRTOS/Src/queue.c **** 
 994:FreeRTOS/Src/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 995:FreeRTOS/Src/queue.c **** 
 996:FreeRTOS/Src/queue.c **** 			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
 997:FreeRTOS/Src/queue.c **** 			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
 998:FreeRTOS/Src/queue.c **** 			in a task disinheriting a priority and prvCopyDataToQueue() can be
 999:FreeRTOS/Src/queue.c **** 			called here even though the disinherit function does not check if
1000:FreeRTOS/Src/queue.c **** 			the scheduler is suspended before accessing the ready lists. */
1001:FreeRTOS/Src/queue.c **** 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 19


1002:FreeRTOS/Src/queue.c **** 
1003:FreeRTOS/Src/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1004:FreeRTOS/Src/queue.c **** 			be done when the queue is unlocked later. */
1005:FreeRTOS/Src/queue.c **** 			if( cTxLock == queueUNLOCKED )
1006:FreeRTOS/Src/queue.c **** 			{
1007:FreeRTOS/Src/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1008:FreeRTOS/Src/queue.c **** 				{
1009:FreeRTOS/Src/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1010:FreeRTOS/Src/queue.c **** 					{
1011:FreeRTOS/Src/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
1012:FreeRTOS/Src/queue.c **** 						{
1013:FreeRTOS/Src/queue.c **** 							/* The queue is a member of a queue set, and posting
1014:FreeRTOS/Src/queue.c **** 							to the queue set caused a higher priority task to
1015:FreeRTOS/Src/queue.c **** 							unblock.  A context switch is required. */
1016:FreeRTOS/Src/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1017:FreeRTOS/Src/queue.c **** 							{
1018:FreeRTOS/Src/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1019:FreeRTOS/Src/queue.c **** 							}
1020:FreeRTOS/Src/queue.c **** 							else
1021:FreeRTOS/Src/queue.c **** 							{
1022:FreeRTOS/Src/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1023:FreeRTOS/Src/queue.c **** 							}
1024:FreeRTOS/Src/queue.c **** 						}
1025:FreeRTOS/Src/queue.c **** 						else
1026:FreeRTOS/Src/queue.c **** 						{
1027:FreeRTOS/Src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1028:FreeRTOS/Src/queue.c **** 						}
1029:FreeRTOS/Src/queue.c **** 					}
1030:FreeRTOS/Src/queue.c **** 					else
1031:FreeRTOS/Src/queue.c **** 					{
1032:FreeRTOS/Src/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1033:FreeRTOS/Src/queue.c **** 						{
1034:FreeRTOS/Src/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1035:FreeRTOS/Src/queue.c **** 							{
1036:FreeRTOS/Src/queue.c **** 								/* The task waiting has a higher priority so
1037:FreeRTOS/Src/queue.c **** 								record that a context switch is required. */
1038:FreeRTOS/Src/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1039:FreeRTOS/Src/queue.c **** 								{
1040:FreeRTOS/Src/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1041:FreeRTOS/Src/queue.c **** 								}
1042:FreeRTOS/Src/queue.c **** 								else
1043:FreeRTOS/Src/queue.c **** 								{
1044:FreeRTOS/Src/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1045:FreeRTOS/Src/queue.c **** 								}
1046:FreeRTOS/Src/queue.c **** 							}
1047:FreeRTOS/Src/queue.c **** 							else
1048:FreeRTOS/Src/queue.c **** 							{
1049:FreeRTOS/Src/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1050:FreeRTOS/Src/queue.c **** 							}
1051:FreeRTOS/Src/queue.c **** 						}
1052:FreeRTOS/Src/queue.c **** 						else
1053:FreeRTOS/Src/queue.c **** 						{
1054:FreeRTOS/Src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1055:FreeRTOS/Src/queue.c **** 						}
1056:FreeRTOS/Src/queue.c **** 					}
1057:FreeRTOS/Src/queue.c **** 				}
1058:FreeRTOS/Src/queue.c **** 				#else /* configUSE_QUEUE_SETS */
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 20


1059:FreeRTOS/Src/queue.c **** 				{
1060:FreeRTOS/Src/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1061:FreeRTOS/Src/queue.c **** 					{
1062:FreeRTOS/Src/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1063:FreeRTOS/Src/queue.c **** 						{
1064:FreeRTOS/Src/queue.c **** 							/* The task waiting has a higher priority so record that a
1065:FreeRTOS/Src/queue.c **** 							context	switch is required. */
1066:FreeRTOS/Src/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1067:FreeRTOS/Src/queue.c **** 							{
1068:FreeRTOS/Src/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1069:FreeRTOS/Src/queue.c **** 							}
1070:FreeRTOS/Src/queue.c **** 							else
1071:FreeRTOS/Src/queue.c **** 							{
1072:FreeRTOS/Src/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1073:FreeRTOS/Src/queue.c **** 							}
1074:FreeRTOS/Src/queue.c **** 						}
1075:FreeRTOS/Src/queue.c **** 						else
1076:FreeRTOS/Src/queue.c **** 						{
1077:FreeRTOS/Src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1078:FreeRTOS/Src/queue.c **** 						}
1079:FreeRTOS/Src/queue.c **** 					}
1080:FreeRTOS/Src/queue.c **** 					else
1081:FreeRTOS/Src/queue.c **** 					{
1082:FreeRTOS/Src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1083:FreeRTOS/Src/queue.c **** 					}
1084:FreeRTOS/Src/queue.c **** 				}
1085:FreeRTOS/Src/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1086:FreeRTOS/Src/queue.c **** 			}
1087:FreeRTOS/Src/queue.c **** 			else
1088:FreeRTOS/Src/queue.c **** 			{
1089:FreeRTOS/Src/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1090:FreeRTOS/Src/queue.c **** 				knows that data was posted while it was locked. */
1091:FreeRTOS/Src/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1092:FreeRTOS/Src/queue.c **** 			}
1093:FreeRTOS/Src/queue.c **** 
1094:FreeRTOS/Src/queue.c **** 			xReturn = pdPASS;
1095:FreeRTOS/Src/queue.c **** 		}
1096:FreeRTOS/Src/queue.c **** 		else
1097:FreeRTOS/Src/queue.c **** 		{
1098:FreeRTOS/Src/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1099:FreeRTOS/Src/queue.c **** 			xReturn = errQUEUE_FULL;
1100:FreeRTOS/Src/queue.c **** 		}
1101:FreeRTOS/Src/queue.c **** 	}
1102:FreeRTOS/Src/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1103:FreeRTOS/Src/queue.c **** 
1104:FreeRTOS/Src/queue.c **** 	return xReturn;
1105:FreeRTOS/Src/queue.c **** }
1106:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
1107:FreeRTOS/Src/queue.c **** 
1108:FreeRTOS/Src/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
1109:FreeRTOS/Src/queue.c **** {
1110:FreeRTOS/Src/queue.c **** BaseType_t xReturn;
1111:FreeRTOS/Src/queue.c **** UBaseType_t uxSavedInterruptStatus;
1112:FreeRTOS/Src/queue.c **** Queue_t * const pxQueue = xQueue;
1113:FreeRTOS/Src/queue.c **** 
1114:FreeRTOS/Src/queue.c **** 	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1115:FreeRTOS/Src/queue.c **** 	item size is 0.  Don't directly wake a task that was blocked on a queue
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 21


1116:FreeRTOS/Src/queue.c **** 	read, instead return a flag to say whether a context switch is required or
1117:FreeRTOS/Src/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
1118:FreeRTOS/Src/queue.c **** 	post). */
1119:FreeRTOS/Src/queue.c **** 
1120:FreeRTOS/Src/queue.c **** 	configASSERT( pxQueue );
1121:FreeRTOS/Src/queue.c **** 
1122:FreeRTOS/Src/queue.c **** 	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1123:FreeRTOS/Src/queue.c **** 	if the item size is not 0. */
1124:FreeRTOS/Src/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1125:FreeRTOS/Src/queue.c **** 
1126:FreeRTOS/Src/queue.c **** 	/* Normally a mutex would not be given from an interrupt, especially if
1127:FreeRTOS/Src/queue.c **** 	there is a mutex holder, as priority inheritance makes no sense for an
1128:FreeRTOS/Src/queue.c **** 	interrupts, only tasks. */
1129:FreeRTOS/Src/queue.c **** 	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutex
1130:FreeRTOS/Src/queue.c **** 
1131:FreeRTOS/Src/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1132:FreeRTOS/Src/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1133:FreeRTOS/Src/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1134:FreeRTOS/Src/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1135:FreeRTOS/Src/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1136:FreeRTOS/Src/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1137:FreeRTOS/Src/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1138:FreeRTOS/Src/queue.c **** 	assigned a priority above the configured maximum system call priority.
1139:FreeRTOS/Src/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1140:FreeRTOS/Src/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1141:FreeRTOS/Src/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1142:FreeRTOS/Src/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1143:FreeRTOS/Src/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1144:FreeRTOS/Src/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1145:FreeRTOS/Src/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1146:FreeRTOS/Src/queue.c **** 
1147:FreeRTOS/Src/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1148:FreeRTOS/Src/queue.c **** 	{
1149:FreeRTOS/Src/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1150:FreeRTOS/Src/queue.c **** 
1151:FreeRTOS/Src/queue.c **** 		/* When the queue is used to implement a semaphore no data is ever
1152:FreeRTOS/Src/queue.c **** 		moved through the queue but it is still valid to see if the queue 'has
1153:FreeRTOS/Src/queue.c **** 		space'. */
1154:FreeRTOS/Src/queue.c **** 		if( uxMessagesWaiting < pxQueue->uxLength )
1155:FreeRTOS/Src/queue.c **** 		{
1156:FreeRTOS/Src/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
1157:FreeRTOS/Src/queue.c **** 
1158:FreeRTOS/Src/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
1159:FreeRTOS/Src/queue.c **** 
1160:FreeRTOS/Src/queue.c **** 			/* A task can only have an inherited priority if it is a mutex
1161:FreeRTOS/Src/queue.c **** 			holder - and if there is a mutex holder then the mutex cannot be
1162:FreeRTOS/Src/queue.c **** 			given from an ISR.  As this is the ISR version of the function it
1163:FreeRTOS/Src/queue.c **** 			can be assumed there is no mutex holder and no need to determine if
1164:FreeRTOS/Src/queue.c **** 			priority disinheritance is needed.  Simply increase the count of
1165:FreeRTOS/Src/queue.c **** 			messages (semaphores) available. */
1166:FreeRTOS/Src/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1167:FreeRTOS/Src/queue.c **** 
1168:FreeRTOS/Src/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1169:FreeRTOS/Src/queue.c **** 			be done when the queue is unlocked later. */
1170:FreeRTOS/Src/queue.c **** 			if( cTxLock == queueUNLOCKED )
1171:FreeRTOS/Src/queue.c **** 			{
1172:FreeRTOS/Src/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 22


1173:FreeRTOS/Src/queue.c **** 				{
1174:FreeRTOS/Src/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1175:FreeRTOS/Src/queue.c **** 					{
1176:FreeRTOS/Src/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1177:FreeRTOS/Src/queue.c **** 						{
1178:FreeRTOS/Src/queue.c **** 							/* The semaphore is a member of a queue set, and
1179:FreeRTOS/Src/queue.c **** 							posting	to the queue set caused a higher priority
1180:FreeRTOS/Src/queue.c **** 							task to	unblock.  A context switch is required. */
1181:FreeRTOS/Src/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1182:FreeRTOS/Src/queue.c **** 							{
1183:FreeRTOS/Src/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1184:FreeRTOS/Src/queue.c **** 							}
1185:FreeRTOS/Src/queue.c **** 							else
1186:FreeRTOS/Src/queue.c **** 							{
1187:FreeRTOS/Src/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1188:FreeRTOS/Src/queue.c **** 							}
1189:FreeRTOS/Src/queue.c **** 						}
1190:FreeRTOS/Src/queue.c **** 						else
1191:FreeRTOS/Src/queue.c **** 						{
1192:FreeRTOS/Src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1193:FreeRTOS/Src/queue.c **** 						}
1194:FreeRTOS/Src/queue.c **** 					}
1195:FreeRTOS/Src/queue.c **** 					else
1196:FreeRTOS/Src/queue.c **** 					{
1197:FreeRTOS/Src/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1198:FreeRTOS/Src/queue.c **** 						{
1199:FreeRTOS/Src/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1200:FreeRTOS/Src/queue.c **** 							{
1201:FreeRTOS/Src/queue.c **** 								/* The task waiting has a higher priority so
1202:FreeRTOS/Src/queue.c **** 								record that a context switch is required. */
1203:FreeRTOS/Src/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1204:FreeRTOS/Src/queue.c **** 								{
1205:FreeRTOS/Src/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1206:FreeRTOS/Src/queue.c **** 								}
1207:FreeRTOS/Src/queue.c **** 								else
1208:FreeRTOS/Src/queue.c **** 								{
1209:FreeRTOS/Src/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1210:FreeRTOS/Src/queue.c **** 								}
1211:FreeRTOS/Src/queue.c **** 							}
1212:FreeRTOS/Src/queue.c **** 							else
1213:FreeRTOS/Src/queue.c **** 							{
1214:FreeRTOS/Src/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1215:FreeRTOS/Src/queue.c **** 							}
1216:FreeRTOS/Src/queue.c **** 						}
1217:FreeRTOS/Src/queue.c **** 						else
1218:FreeRTOS/Src/queue.c **** 						{
1219:FreeRTOS/Src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1220:FreeRTOS/Src/queue.c **** 						}
1221:FreeRTOS/Src/queue.c **** 					}
1222:FreeRTOS/Src/queue.c **** 				}
1223:FreeRTOS/Src/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1224:FreeRTOS/Src/queue.c **** 				{
1225:FreeRTOS/Src/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1226:FreeRTOS/Src/queue.c **** 					{
1227:FreeRTOS/Src/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1228:FreeRTOS/Src/queue.c **** 						{
1229:FreeRTOS/Src/queue.c **** 							/* The task waiting has a higher priority so record that a
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 23


1230:FreeRTOS/Src/queue.c **** 							context	switch is required. */
1231:FreeRTOS/Src/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1232:FreeRTOS/Src/queue.c **** 							{
1233:FreeRTOS/Src/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1234:FreeRTOS/Src/queue.c **** 							}
1235:FreeRTOS/Src/queue.c **** 							else
1236:FreeRTOS/Src/queue.c **** 							{
1237:FreeRTOS/Src/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1238:FreeRTOS/Src/queue.c **** 							}
1239:FreeRTOS/Src/queue.c **** 						}
1240:FreeRTOS/Src/queue.c **** 						else
1241:FreeRTOS/Src/queue.c **** 						{
1242:FreeRTOS/Src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1243:FreeRTOS/Src/queue.c **** 						}
1244:FreeRTOS/Src/queue.c **** 					}
1245:FreeRTOS/Src/queue.c **** 					else
1246:FreeRTOS/Src/queue.c **** 					{
1247:FreeRTOS/Src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1248:FreeRTOS/Src/queue.c **** 					}
1249:FreeRTOS/Src/queue.c **** 				}
1250:FreeRTOS/Src/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1251:FreeRTOS/Src/queue.c **** 			}
1252:FreeRTOS/Src/queue.c **** 			else
1253:FreeRTOS/Src/queue.c **** 			{
1254:FreeRTOS/Src/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1255:FreeRTOS/Src/queue.c **** 				knows that data was posted while it was locked. */
1256:FreeRTOS/Src/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1257:FreeRTOS/Src/queue.c **** 			}
1258:FreeRTOS/Src/queue.c **** 
1259:FreeRTOS/Src/queue.c **** 			xReturn = pdPASS;
1260:FreeRTOS/Src/queue.c **** 		}
1261:FreeRTOS/Src/queue.c **** 		else
1262:FreeRTOS/Src/queue.c **** 		{
1263:FreeRTOS/Src/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1264:FreeRTOS/Src/queue.c **** 			xReturn = errQUEUE_FULL;
1265:FreeRTOS/Src/queue.c **** 		}
1266:FreeRTOS/Src/queue.c **** 	}
1267:FreeRTOS/Src/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1268:FreeRTOS/Src/queue.c **** 
1269:FreeRTOS/Src/queue.c **** 	return xReturn;
1270:FreeRTOS/Src/queue.c **** }
1271:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
1272:FreeRTOS/Src/queue.c **** 
1273:FreeRTOS/Src/queue.c **** BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1274:FreeRTOS/Src/queue.c **** {
1275:FreeRTOS/Src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1276:FreeRTOS/Src/queue.c **** TimeOut_t xTimeOut;
1277:FreeRTOS/Src/queue.c **** Queue_t * const pxQueue = xQueue;
1278:FreeRTOS/Src/queue.c **** 
1279:FreeRTOS/Src/queue.c **** 	/* Check the pointer is not NULL. */
1280:FreeRTOS/Src/queue.c **** 	configASSERT( ( pxQueue ) );
1281:FreeRTOS/Src/queue.c **** 
1282:FreeRTOS/Src/queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
1283:FreeRTOS/Src/queue.c **** 	is zero (so no data is copied into the buffer. */
1284:FreeRTOS/Src/queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
1285:FreeRTOS/Src/queue.c **** 
1286:FreeRTOS/Src/queue.c **** 	/* Cannot block if the scheduler is suspended. */
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 24


1287:FreeRTOS/Src/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1288:FreeRTOS/Src/queue.c **** 	{
1289:FreeRTOS/Src/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1290:FreeRTOS/Src/queue.c **** 	}
1291:FreeRTOS/Src/queue.c **** 	#endif
1292:FreeRTOS/Src/queue.c **** 
1293:FreeRTOS/Src/queue.c **** 
1294:FreeRTOS/Src/queue.c **** 	/*lint -save -e904  This function relaxes the coding standard somewhat to
1295:FreeRTOS/Src/queue.c **** 	allow return statements within the function itself.  This is done in the
1296:FreeRTOS/Src/queue.c **** 	interest of execution time efficiency. */
1297:FreeRTOS/Src/queue.c **** 	for( ;; )
1298:FreeRTOS/Src/queue.c **** 	{
1299:FreeRTOS/Src/queue.c **** 		taskENTER_CRITICAL();
1300:FreeRTOS/Src/queue.c **** 		{
1301:FreeRTOS/Src/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1302:FreeRTOS/Src/queue.c **** 
1303:FreeRTOS/Src/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1304:FreeRTOS/Src/queue.c **** 			must be the highest priority task wanting to access the queue. */
1305:FreeRTOS/Src/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1306:FreeRTOS/Src/queue.c **** 			{
1307:FreeRTOS/Src/queue.c **** 				/* Data available, remove one item. */
1308:FreeRTOS/Src/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1309:FreeRTOS/Src/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
1310:FreeRTOS/Src/queue.c **** 				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1311:FreeRTOS/Src/queue.c **** 
1312:FreeRTOS/Src/queue.c **** 				/* There is now space in the queue, were any tasks waiting to
1313:FreeRTOS/Src/queue.c **** 				post to the queue?  If so, unblock the highest priority waiting
1314:FreeRTOS/Src/queue.c **** 				task. */
1315:FreeRTOS/Src/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1316:FreeRTOS/Src/queue.c **** 				{
1317:FreeRTOS/Src/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1318:FreeRTOS/Src/queue.c **** 					{
1319:FreeRTOS/Src/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1320:FreeRTOS/Src/queue.c **** 					}
1321:FreeRTOS/Src/queue.c **** 					else
1322:FreeRTOS/Src/queue.c **** 					{
1323:FreeRTOS/Src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1324:FreeRTOS/Src/queue.c **** 					}
1325:FreeRTOS/Src/queue.c **** 				}
1326:FreeRTOS/Src/queue.c **** 				else
1327:FreeRTOS/Src/queue.c **** 				{
1328:FreeRTOS/Src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1329:FreeRTOS/Src/queue.c **** 				}
1330:FreeRTOS/Src/queue.c **** 
1331:FreeRTOS/Src/queue.c **** 				taskEXIT_CRITICAL();
1332:FreeRTOS/Src/queue.c **** 				return pdPASS;
1333:FreeRTOS/Src/queue.c **** 			}
1334:FreeRTOS/Src/queue.c **** 			else
1335:FreeRTOS/Src/queue.c **** 			{
1336:FreeRTOS/Src/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1337:FreeRTOS/Src/queue.c **** 				{
1338:FreeRTOS/Src/queue.c **** 					/* The queue was empty and no block time is specified (or
1339:FreeRTOS/Src/queue.c **** 					the block time has expired) so leave now. */
1340:FreeRTOS/Src/queue.c **** 					taskEXIT_CRITICAL();
1341:FreeRTOS/Src/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1342:FreeRTOS/Src/queue.c **** 					return errQUEUE_EMPTY;
1343:FreeRTOS/Src/queue.c **** 				}
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 25


1344:FreeRTOS/Src/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1345:FreeRTOS/Src/queue.c **** 				{
1346:FreeRTOS/Src/queue.c **** 					/* The queue was empty and a block time was specified so
1347:FreeRTOS/Src/queue.c **** 					configure the timeout structure. */
1348:FreeRTOS/Src/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1349:FreeRTOS/Src/queue.c **** 					xEntryTimeSet = pdTRUE;
1350:FreeRTOS/Src/queue.c **** 				}
1351:FreeRTOS/Src/queue.c **** 				else
1352:FreeRTOS/Src/queue.c **** 				{
1353:FreeRTOS/Src/queue.c **** 					/* Entry time was already set. */
1354:FreeRTOS/Src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1355:FreeRTOS/Src/queue.c **** 				}
1356:FreeRTOS/Src/queue.c **** 			}
1357:FreeRTOS/Src/queue.c **** 		}
1358:FreeRTOS/Src/queue.c **** 		taskEXIT_CRITICAL();
1359:FreeRTOS/Src/queue.c **** 
1360:FreeRTOS/Src/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1361:FreeRTOS/Src/queue.c **** 		now the critical section has been exited. */
1362:FreeRTOS/Src/queue.c **** 
1363:FreeRTOS/Src/queue.c **** 		vTaskSuspendAll();
1364:FreeRTOS/Src/queue.c **** 		prvLockQueue( pxQueue );
1365:FreeRTOS/Src/queue.c **** 
1366:FreeRTOS/Src/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1367:FreeRTOS/Src/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1368:FreeRTOS/Src/queue.c **** 		{
1369:FreeRTOS/Src/queue.c **** 			/* The timeout has not expired.  If the queue is still empty place
1370:FreeRTOS/Src/queue.c **** 			the task on the list of tasks waiting to receive from the queue. */
1371:FreeRTOS/Src/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1372:FreeRTOS/Src/queue.c **** 			{
1373:FreeRTOS/Src/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1374:FreeRTOS/Src/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1375:FreeRTOS/Src/queue.c **** 				prvUnlockQueue( pxQueue );
1376:FreeRTOS/Src/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1377:FreeRTOS/Src/queue.c **** 				{
1378:FreeRTOS/Src/queue.c **** 					portYIELD_WITHIN_API();
1379:FreeRTOS/Src/queue.c **** 				}
1380:FreeRTOS/Src/queue.c **** 				else
1381:FreeRTOS/Src/queue.c **** 				{
1382:FreeRTOS/Src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1383:FreeRTOS/Src/queue.c **** 				}
1384:FreeRTOS/Src/queue.c **** 			}
1385:FreeRTOS/Src/queue.c **** 			else
1386:FreeRTOS/Src/queue.c **** 			{
1387:FreeRTOS/Src/queue.c **** 				/* The queue contains data again.  Loop back to try and read the
1388:FreeRTOS/Src/queue.c **** 				data. */
1389:FreeRTOS/Src/queue.c **** 				prvUnlockQueue( pxQueue );
1390:FreeRTOS/Src/queue.c **** 				( void ) xTaskResumeAll();
1391:FreeRTOS/Src/queue.c **** 			}
1392:FreeRTOS/Src/queue.c **** 		}
1393:FreeRTOS/Src/queue.c **** 		else
1394:FreeRTOS/Src/queue.c **** 		{
1395:FreeRTOS/Src/queue.c **** 			/* Timed out.  If there is no data in the queue exit, otherwise loop
1396:FreeRTOS/Src/queue.c **** 			back and attempt to read the data. */
1397:FreeRTOS/Src/queue.c **** 			prvUnlockQueue( pxQueue );
1398:FreeRTOS/Src/queue.c **** 			( void ) xTaskResumeAll();
1399:FreeRTOS/Src/queue.c **** 
1400:FreeRTOS/Src/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 26


1401:FreeRTOS/Src/queue.c **** 			{
1402:FreeRTOS/Src/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1403:FreeRTOS/Src/queue.c **** 				return errQUEUE_EMPTY;
1404:FreeRTOS/Src/queue.c **** 			}
1405:FreeRTOS/Src/queue.c **** 			else
1406:FreeRTOS/Src/queue.c **** 			{
1407:FreeRTOS/Src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1408:FreeRTOS/Src/queue.c **** 			}
1409:FreeRTOS/Src/queue.c **** 		}
1410:FreeRTOS/Src/queue.c **** 	} /*lint -restore */
1411:FreeRTOS/Src/queue.c **** }
1412:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
1413:FreeRTOS/Src/queue.c **** 
1414:FreeRTOS/Src/queue.c **** BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
1415:FreeRTOS/Src/queue.c **** {
1416:FreeRTOS/Src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1417:FreeRTOS/Src/queue.c **** TimeOut_t xTimeOut;
1418:FreeRTOS/Src/queue.c **** Queue_t * const pxQueue = xQueue;
1419:FreeRTOS/Src/queue.c **** 
1420:FreeRTOS/Src/queue.c **** #if( configUSE_MUTEXES == 1 )
1421:FreeRTOS/Src/queue.c **** 	BaseType_t xInheritanceOccurred = pdFALSE;
1422:FreeRTOS/Src/queue.c **** #endif
1423:FreeRTOS/Src/queue.c **** 
1424:FreeRTOS/Src/queue.c **** 	/* Check the queue pointer is not NULL. */
1425:FreeRTOS/Src/queue.c **** 	configASSERT( ( pxQueue ) );
1426:FreeRTOS/Src/queue.c **** 
1427:FreeRTOS/Src/queue.c **** 	/* Check this really is a semaphore, in which case the item size will be
1428:FreeRTOS/Src/queue.c **** 	0. */
1429:FreeRTOS/Src/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1430:FreeRTOS/Src/queue.c **** 
1431:FreeRTOS/Src/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1432:FreeRTOS/Src/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1433:FreeRTOS/Src/queue.c **** 	{
1434:FreeRTOS/Src/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1435:FreeRTOS/Src/queue.c **** 	}
1436:FreeRTOS/Src/queue.c **** 	#endif
1437:FreeRTOS/Src/queue.c **** 
1438:FreeRTOS/Src/queue.c **** 
1439:FreeRTOS/Src/queue.c **** 	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
1440:FreeRTOS/Src/queue.c **** 	statements within the function itself.  This is done in the interest
1441:FreeRTOS/Src/queue.c **** 	of execution time efficiency. */
1442:FreeRTOS/Src/queue.c **** 	for( ;; )
1443:FreeRTOS/Src/queue.c **** 	{
1444:FreeRTOS/Src/queue.c **** 		taskENTER_CRITICAL();
1445:FreeRTOS/Src/queue.c **** 		{
1446:FreeRTOS/Src/queue.c **** 			/* Semaphores are queues with an item size of 0, and where the
1447:FreeRTOS/Src/queue.c **** 			number of messages in the queue is the semaphore's count value. */
1448:FreeRTOS/Src/queue.c **** 			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1449:FreeRTOS/Src/queue.c **** 
1450:FreeRTOS/Src/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1451:FreeRTOS/Src/queue.c **** 			must be the highest priority task wanting to access the queue. */
1452:FreeRTOS/Src/queue.c **** 			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1453:FreeRTOS/Src/queue.c **** 			{
1454:FreeRTOS/Src/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
1455:FreeRTOS/Src/queue.c **** 
1456:FreeRTOS/Src/queue.c **** 				/* Semaphores are queues with a data size of zero and where the
1457:FreeRTOS/Src/queue.c **** 				messages waiting is the semaphore's count.  Reduce the count. */
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 27


1458:FreeRTOS/Src/queue.c **** 				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1459:FreeRTOS/Src/queue.c **** 
1460:FreeRTOS/Src/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1461:FreeRTOS/Src/queue.c **** 				{
1462:FreeRTOS/Src/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1463:FreeRTOS/Src/queue.c **** 					{
1464:FreeRTOS/Src/queue.c **** 						/* Record the information required to implement
1465:FreeRTOS/Src/queue.c **** 						priority inheritance should it become necessary. */
1466:FreeRTOS/Src/queue.c **** 						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
1467:FreeRTOS/Src/queue.c **** 					}
1468:FreeRTOS/Src/queue.c **** 					else
1469:FreeRTOS/Src/queue.c **** 					{
1470:FreeRTOS/Src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1471:FreeRTOS/Src/queue.c **** 					}
1472:FreeRTOS/Src/queue.c **** 				}
1473:FreeRTOS/Src/queue.c **** 				#endif /* configUSE_MUTEXES */
1474:FreeRTOS/Src/queue.c **** 
1475:FreeRTOS/Src/queue.c **** 				/* Check to see if other tasks are blocked waiting to give the
1476:FreeRTOS/Src/queue.c **** 				semaphore, and if so, unblock the highest priority such task. */
1477:FreeRTOS/Src/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1478:FreeRTOS/Src/queue.c **** 				{
1479:FreeRTOS/Src/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1480:FreeRTOS/Src/queue.c **** 					{
1481:FreeRTOS/Src/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1482:FreeRTOS/Src/queue.c **** 					}
1483:FreeRTOS/Src/queue.c **** 					else
1484:FreeRTOS/Src/queue.c **** 					{
1485:FreeRTOS/Src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1486:FreeRTOS/Src/queue.c **** 					}
1487:FreeRTOS/Src/queue.c **** 				}
1488:FreeRTOS/Src/queue.c **** 				else
1489:FreeRTOS/Src/queue.c **** 				{
1490:FreeRTOS/Src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1491:FreeRTOS/Src/queue.c **** 				}
1492:FreeRTOS/Src/queue.c **** 
1493:FreeRTOS/Src/queue.c **** 				taskEXIT_CRITICAL();
1494:FreeRTOS/Src/queue.c **** 				return pdPASS;
1495:FreeRTOS/Src/queue.c **** 			}
1496:FreeRTOS/Src/queue.c **** 			else
1497:FreeRTOS/Src/queue.c **** 			{
1498:FreeRTOS/Src/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1499:FreeRTOS/Src/queue.c **** 				{
1500:FreeRTOS/Src/queue.c **** 					/* For inheritance to have occurred there must have been an
1501:FreeRTOS/Src/queue.c **** 					initial timeout, and an adjusted timeout cannot become 0, as
1502:FreeRTOS/Src/queue.c **** 					if it were 0 the function would have exited. */
1503:FreeRTOS/Src/queue.c **** 					#if( configUSE_MUTEXES == 1 )
1504:FreeRTOS/Src/queue.c **** 					{
1505:FreeRTOS/Src/queue.c **** 						configASSERT( xInheritanceOccurred == pdFALSE );
1506:FreeRTOS/Src/queue.c **** 					}
1507:FreeRTOS/Src/queue.c **** 					#endif /* configUSE_MUTEXES */
1508:FreeRTOS/Src/queue.c **** 
1509:FreeRTOS/Src/queue.c **** 					/* The semaphore count was 0 and no block time is specified
1510:FreeRTOS/Src/queue.c **** 					(or the block time has expired) so exit now. */
1511:FreeRTOS/Src/queue.c **** 					taskEXIT_CRITICAL();
1512:FreeRTOS/Src/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1513:FreeRTOS/Src/queue.c **** 					return errQUEUE_EMPTY;
1514:FreeRTOS/Src/queue.c **** 				}
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 28


1515:FreeRTOS/Src/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1516:FreeRTOS/Src/queue.c **** 				{
1517:FreeRTOS/Src/queue.c **** 					/* The semaphore count was 0 and a block time was specified
1518:FreeRTOS/Src/queue.c **** 					so configure the timeout structure ready to block. */
1519:FreeRTOS/Src/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1520:FreeRTOS/Src/queue.c **** 					xEntryTimeSet = pdTRUE;
1521:FreeRTOS/Src/queue.c **** 				}
1522:FreeRTOS/Src/queue.c **** 				else
1523:FreeRTOS/Src/queue.c **** 				{
1524:FreeRTOS/Src/queue.c **** 					/* Entry time was already set. */
1525:FreeRTOS/Src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1526:FreeRTOS/Src/queue.c **** 				}
1527:FreeRTOS/Src/queue.c **** 			}
1528:FreeRTOS/Src/queue.c **** 		}
1529:FreeRTOS/Src/queue.c **** 		taskEXIT_CRITICAL();
1530:FreeRTOS/Src/queue.c **** 
1531:FreeRTOS/Src/queue.c **** 		/* Interrupts and other tasks can give to and take from the semaphore
1532:FreeRTOS/Src/queue.c **** 		now the critical section has been exited. */
1533:FreeRTOS/Src/queue.c **** 
1534:FreeRTOS/Src/queue.c **** 		vTaskSuspendAll();
1535:FreeRTOS/Src/queue.c **** 		prvLockQueue( pxQueue );
1536:FreeRTOS/Src/queue.c **** 
1537:FreeRTOS/Src/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1538:FreeRTOS/Src/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1539:FreeRTOS/Src/queue.c **** 		{
1540:FreeRTOS/Src/queue.c **** 			/* A block time is specified and not expired.  If the semaphore
1541:FreeRTOS/Src/queue.c **** 			count is 0 then enter the Blocked state to wait for a semaphore to
1542:FreeRTOS/Src/queue.c **** 			become available.  As semaphores are implemented with queues the
1543:FreeRTOS/Src/queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1544:FreeRTOS/Src/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1545:FreeRTOS/Src/queue.c **** 			{
1546:FreeRTOS/Src/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1547:FreeRTOS/Src/queue.c **** 
1548:FreeRTOS/Src/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1549:FreeRTOS/Src/queue.c **** 				{
1550:FreeRTOS/Src/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1551:FreeRTOS/Src/queue.c **** 					{
1552:FreeRTOS/Src/queue.c **** 						taskENTER_CRITICAL();
1553:FreeRTOS/Src/queue.c **** 						{
1554:FreeRTOS/Src/queue.c **** 							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
1555:FreeRTOS/Src/queue.c **** 						}
1556:FreeRTOS/Src/queue.c **** 						taskEXIT_CRITICAL();
1557:FreeRTOS/Src/queue.c **** 					}
1558:FreeRTOS/Src/queue.c **** 					else
1559:FreeRTOS/Src/queue.c **** 					{
1560:FreeRTOS/Src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1561:FreeRTOS/Src/queue.c **** 					}
1562:FreeRTOS/Src/queue.c **** 				}
1563:FreeRTOS/Src/queue.c **** 				#endif
1564:FreeRTOS/Src/queue.c **** 
1565:FreeRTOS/Src/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1566:FreeRTOS/Src/queue.c **** 				prvUnlockQueue( pxQueue );
1567:FreeRTOS/Src/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1568:FreeRTOS/Src/queue.c **** 				{
1569:FreeRTOS/Src/queue.c **** 					portYIELD_WITHIN_API();
1570:FreeRTOS/Src/queue.c **** 				}
1571:FreeRTOS/Src/queue.c **** 				else
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 29


1572:FreeRTOS/Src/queue.c **** 				{
1573:FreeRTOS/Src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1574:FreeRTOS/Src/queue.c **** 				}
1575:FreeRTOS/Src/queue.c **** 			}
1576:FreeRTOS/Src/queue.c **** 			else
1577:FreeRTOS/Src/queue.c **** 			{
1578:FreeRTOS/Src/queue.c **** 				/* There was no timeout and the semaphore count was not 0, so
1579:FreeRTOS/Src/queue.c **** 				attempt to take the semaphore again. */
1580:FreeRTOS/Src/queue.c **** 				prvUnlockQueue( pxQueue );
1581:FreeRTOS/Src/queue.c **** 				( void ) xTaskResumeAll();
1582:FreeRTOS/Src/queue.c **** 			}
1583:FreeRTOS/Src/queue.c **** 		}
1584:FreeRTOS/Src/queue.c **** 		else
1585:FreeRTOS/Src/queue.c **** 		{
1586:FreeRTOS/Src/queue.c **** 			/* Timed out. */
1587:FreeRTOS/Src/queue.c **** 			prvUnlockQueue( pxQueue );
1588:FreeRTOS/Src/queue.c **** 			( void ) xTaskResumeAll();
1589:FreeRTOS/Src/queue.c **** 
1590:FreeRTOS/Src/queue.c **** 			/* If the semaphore count is 0 exit now as the timeout has
1591:FreeRTOS/Src/queue.c **** 			expired.  Otherwise return to attempt to take the semaphore that is
1592:FreeRTOS/Src/queue.c **** 			known to be available.  As semaphores are implemented by queues the
1593:FreeRTOS/Src/queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1594:FreeRTOS/Src/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1595:FreeRTOS/Src/queue.c **** 			{
1596:FreeRTOS/Src/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1597:FreeRTOS/Src/queue.c **** 				{
1598:FreeRTOS/Src/queue.c **** 					/* xInheritanceOccurred could only have be set if
1599:FreeRTOS/Src/queue.c **** 					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
1600:FreeRTOS/Src/queue.c **** 					test the mutex type again to check it is actually a mutex. */
1601:FreeRTOS/Src/queue.c **** 					if( xInheritanceOccurred != pdFALSE )
1602:FreeRTOS/Src/queue.c **** 					{
1603:FreeRTOS/Src/queue.c **** 						taskENTER_CRITICAL();
1604:FreeRTOS/Src/queue.c **** 						{
1605:FreeRTOS/Src/queue.c **** 							UBaseType_t uxHighestWaitingPriority;
1606:FreeRTOS/Src/queue.c **** 
1607:FreeRTOS/Src/queue.c **** 							/* This task blocking on the mutex caused another
1608:FreeRTOS/Src/queue.c **** 							task to inherit this task's priority.  Now this task
1609:FreeRTOS/Src/queue.c **** 							has timed out the priority should be disinherited
1610:FreeRTOS/Src/queue.c **** 							again, but only as low as the next highest priority
1611:FreeRTOS/Src/queue.c **** 							task that is waiting for the same mutex. */
1612:FreeRTOS/Src/queue.c **** 							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1613:FreeRTOS/Src/queue.c **** 							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPri
1614:FreeRTOS/Src/queue.c **** 						}
1615:FreeRTOS/Src/queue.c **** 						taskEXIT_CRITICAL();
1616:FreeRTOS/Src/queue.c **** 					}
1617:FreeRTOS/Src/queue.c **** 				}
1618:FreeRTOS/Src/queue.c **** 				#endif /* configUSE_MUTEXES */
1619:FreeRTOS/Src/queue.c **** 
1620:FreeRTOS/Src/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1621:FreeRTOS/Src/queue.c **** 				return errQUEUE_EMPTY;
1622:FreeRTOS/Src/queue.c **** 			}
1623:FreeRTOS/Src/queue.c **** 			else
1624:FreeRTOS/Src/queue.c **** 			{
1625:FreeRTOS/Src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1626:FreeRTOS/Src/queue.c **** 			}
1627:FreeRTOS/Src/queue.c **** 		}
1628:FreeRTOS/Src/queue.c **** 	} /*lint -restore */
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 30


1629:FreeRTOS/Src/queue.c **** }
1630:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
1631:FreeRTOS/Src/queue.c **** 
1632:FreeRTOS/Src/queue.c **** BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1633:FreeRTOS/Src/queue.c **** {
1634:FreeRTOS/Src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1635:FreeRTOS/Src/queue.c **** TimeOut_t xTimeOut;
1636:FreeRTOS/Src/queue.c **** int8_t *pcOriginalReadPosition;
1637:FreeRTOS/Src/queue.c **** Queue_t * const pxQueue = xQueue;
1638:FreeRTOS/Src/queue.c **** 
1639:FreeRTOS/Src/queue.c **** 	/* Check the pointer is not NULL. */
1640:FreeRTOS/Src/queue.c **** 	configASSERT( ( pxQueue ) );
1641:FreeRTOS/Src/queue.c **** 
1642:FreeRTOS/Src/queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
1643:FreeRTOS/Src/queue.c **** 	is zero (so no data is copied into the buffer. */
1644:FreeRTOS/Src/queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
1645:FreeRTOS/Src/queue.c **** 
1646:FreeRTOS/Src/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1647:FreeRTOS/Src/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1648:FreeRTOS/Src/queue.c **** 	{
1649:FreeRTOS/Src/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1650:FreeRTOS/Src/queue.c **** 	}
1651:FreeRTOS/Src/queue.c **** 	#endif
1652:FreeRTOS/Src/queue.c **** 
1653:FreeRTOS/Src/queue.c **** 
1654:FreeRTOS/Src/queue.c **** 	/*lint -save -e904  This function relaxes the coding standard somewhat to
1655:FreeRTOS/Src/queue.c **** 	allow return statements within the function itself.  This is done in the
1656:FreeRTOS/Src/queue.c **** 	interest of execution time efficiency. */
1657:FreeRTOS/Src/queue.c **** 	for( ;; )
1658:FreeRTOS/Src/queue.c **** 	{
1659:FreeRTOS/Src/queue.c **** 		taskENTER_CRITICAL();
1660:FreeRTOS/Src/queue.c **** 		{
1661:FreeRTOS/Src/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1662:FreeRTOS/Src/queue.c **** 
1663:FreeRTOS/Src/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1664:FreeRTOS/Src/queue.c **** 			must be the highest priority task wanting to access the queue. */
1665:FreeRTOS/Src/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1666:FreeRTOS/Src/queue.c **** 			{
1667:FreeRTOS/Src/queue.c **** 				/* Remember the read position so it can be reset after the data
1668:FreeRTOS/Src/queue.c **** 				is read from the queue as this function is only peeking the
1669:FreeRTOS/Src/queue.c **** 				data, not removing it. */
1670:FreeRTOS/Src/queue.c **** 				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
1671:FreeRTOS/Src/queue.c **** 
1672:FreeRTOS/Src/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1673:FreeRTOS/Src/queue.c **** 				traceQUEUE_PEEK( pxQueue );
1674:FreeRTOS/Src/queue.c **** 
1675:FreeRTOS/Src/queue.c **** 				/* The data is not being removed, so reset the read pointer. */
1676:FreeRTOS/Src/queue.c **** 				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
1677:FreeRTOS/Src/queue.c **** 
1678:FreeRTOS/Src/queue.c **** 				/* The data is being left in the queue, so see if there are
1679:FreeRTOS/Src/queue.c **** 				any other tasks waiting for the data. */
1680:FreeRTOS/Src/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1681:FreeRTOS/Src/queue.c **** 				{
1682:FreeRTOS/Src/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1683:FreeRTOS/Src/queue.c **** 					{
1684:FreeRTOS/Src/queue.c **** 						/* The task waiting has a higher priority than this task. */
1685:FreeRTOS/Src/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 31


1686:FreeRTOS/Src/queue.c **** 					}
1687:FreeRTOS/Src/queue.c **** 					else
1688:FreeRTOS/Src/queue.c **** 					{
1689:FreeRTOS/Src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1690:FreeRTOS/Src/queue.c **** 					}
1691:FreeRTOS/Src/queue.c **** 				}
1692:FreeRTOS/Src/queue.c **** 				else
1693:FreeRTOS/Src/queue.c **** 				{
1694:FreeRTOS/Src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1695:FreeRTOS/Src/queue.c **** 				}
1696:FreeRTOS/Src/queue.c **** 
1697:FreeRTOS/Src/queue.c **** 				taskEXIT_CRITICAL();
1698:FreeRTOS/Src/queue.c **** 				return pdPASS;
1699:FreeRTOS/Src/queue.c **** 			}
1700:FreeRTOS/Src/queue.c **** 			else
1701:FreeRTOS/Src/queue.c **** 			{
1702:FreeRTOS/Src/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1703:FreeRTOS/Src/queue.c **** 				{
1704:FreeRTOS/Src/queue.c **** 					/* The queue was empty and no block time is specified (or
1705:FreeRTOS/Src/queue.c **** 					the block time has expired) so leave now. */
1706:FreeRTOS/Src/queue.c **** 					taskEXIT_CRITICAL();
1707:FreeRTOS/Src/queue.c **** 					traceQUEUE_PEEK_FAILED( pxQueue );
1708:FreeRTOS/Src/queue.c **** 					return errQUEUE_EMPTY;
1709:FreeRTOS/Src/queue.c **** 				}
1710:FreeRTOS/Src/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1711:FreeRTOS/Src/queue.c **** 				{
1712:FreeRTOS/Src/queue.c **** 					/* The queue was empty and a block time was specified so
1713:FreeRTOS/Src/queue.c **** 					configure the timeout structure ready to enter the blocked
1714:FreeRTOS/Src/queue.c **** 					state. */
1715:FreeRTOS/Src/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1716:FreeRTOS/Src/queue.c **** 					xEntryTimeSet = pdTRUE;
1717:FreeRTOS/Src/queue.c **** 				}
1718:FreeRTOS/Src/queue.c **** 				else
1719:FreeRTOS/Src/queue.c **** 				{
1720:FreeRTOS/Src/queue.c **** 					/* Entry time was already set. */
1721:FreeRTOS/Src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1722:FreeRTOS/Src/queue.c **** 				}
1723:FreeRTOS/Src/queue.c **** 			}
1724:FreeRTOS/Src/queue.c **** 		}
1725:FreeRTOS/Src/queue.c **** 		taskEXIT_CRITICAL();
1726:FreeRTOS/Src/queue.c **** 
1727:FreeRTOS/Src/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1728:FreeRTOS/Src/queue.c **** 		now the critical section has been exited. */
1729:FreeRTOS/Src/queue.c **** 
1730:FreeRTOS/Src/queue.c **** 		vTaskSuspendAll();
1731:FreeRTOS/Src/queue.c **** 		prvLockQueue( pxQueue );
1732:FreeRTOS/Src/queue.c **** 
1733:FreeRTOS/Src/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1734:FreeRTOS/Src/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1735:FreeRTOS/Src/queue.c **** 		{
1736:FreeRTOS/Src/queue.c **** 			/* Timeout has not expired yet, check to see if there is data in the
1737:FreeRTOS/Src/queue.c **** 			queue now, and if not enter the Blocked state to wait for data. */
1738:FreeRTOS/Src/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1739:FreeRTOS/Src/queue.c **** 			{
1740:FreeRTOS/Src/queue.c **** 				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
1741:FreeRTOS/Src/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1742:FreeRTOS/Src/queue.c **** 				prvUnlockQueue( pxQueue );
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 32


1743:FreeRTOS/Src/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1744:FreeRTOS/Src/queue.c **** 				{
1745:FreeRTOS/Src/queue.c **** 					portYIELD_WITHIN_API();
1746:FreeRTOS/Src/queue.c **** 				}
1747:FreeRTOS/Src/queue.c **** 				else
1748:FreeRTOS/Src/queue.c **** 				{
1749:FreeRTOS/Src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1750:FreeRTOS/Src/queue.c **** 				}
1751:FreeRTOS/Src/queue.c **** 			}
1752:FreeRTOS/Src/queue.c **** 			else
1753:FreeRTOS/Src/queue.c **** 			{
1754:FreeRTOS/Src/queue.c **** 				/* There is data in the queue now, so don't enter the blocked
1755:FreeRTOS/Src/queue.c **** 				state, instead return to try and obtain the data. */
1756:FreeRTOS/Src/queue.c **** 				prvUnlockQueue( pxQueue );
1757:FreeRTOS/Src/queue.c **** 				( void ) xTaskResumeAll();
1758:FreeRTOS/Src/queue.c **** 			}
1759:FreeRTOS/Src/queue.c **** 		}
1760:FreeRTOS/Src/queue.c **** 		else
1761:FreeRTOS/Src/queue.c **** 		{
1762:FreeRTOS/Src/queue.c **** 			/* The timeout has expired.  If there is still no data in the queue
1763:FreeRTOS/Src/queue.c **** 			exit, otherwise go back and try to read the data again. */
1764:FreeRTOS/Src/queue.c **** 			prvUnlockQueue( pxQueue );
1765:FreeRTOS/Src/queue.c **** 			( void ) xTaskResumeAll();
1766:FreeRTOS/Src/queue.c **** 
1767:FreeRTOS/Src/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1768:FreeRTOS/Src/queue.c **** 			{
1769:FreeRTOS/Src/queue.c **** 				traceQUEUE_PEEK_FAILED( pxQueue );
1770:FreeRTOS/Src/queue.c **** 				return errQUEUE_EMPTY;
1771:FreeRTOS/Src/queue.c **** 			}
1772:FreeRTOS/Src/queue.c **** 			else
1773:FreeRTOS/Src/queue.c **** 			{
1774:FreeRTOS/Src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1775:FreeRTOS/Src/queue.c **** 			}
1776:FreeRTOS/Src/queue.c **** 		}
1777:FreeRTOS/Src/queue.c **** 	} /*lint -restore */
1778:FreeRTOS/Src/queue.c **** }
1779:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
1780:FreeRTOS/Src/queue.c **** 
1781:FreeRTOS/Src/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const px
1782:FreeRTOS/Src/queue.c **** {
1783:FreeRTOS/Src/queue.c **** BaseType_t xReturn;
1784:FreeRTOS/Src/queue.c **** UBaseType_t uxSavedInterruptStatus;
1785:FreeRTOS/Src/queue.c **** Queue_t * const pxQueue = xQueue;
1786:FreeRTOS/Src/queue.c **** 
1787:FreeRTOS/Src/queue.c **** 	configASSERT( pxQueue );
1788:FreeRTOS/Src/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1789:FreeRTOS/Src/queue.c **** 
1790:FreeRTOS/Src/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1791:FreeRTOS/Src/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1792:FreeRTOS/Src/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1793:FreeRTOS/Src/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1794:FreeRTOS/Src/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1795:FreeRTOS/Src/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1796:FreeRTOS/Src/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1797:FreeRTOS/Src/queue.c **** 	assigned a priority above the configured maximum system call priority.
1798:FreeRTOS/Src/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1799:FreeRTOS/Src/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 33


1800:FreeRTOS/Src/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1801:FreeRTOS/Src/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1802:FreeRTOS/Src/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1803:FreeRTOS/Src/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1804:FreeRTOS/Src/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1805:FreeRTOS/Src/queue.c **** 
1806:FreeRTOS/Src/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1807:FreeRTOS/Src/queue.c **** 	{
1808:FreeRTOS/Src/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1809:FreeRTOS/Src/queue.c **** 
1810:FreeRTOS/Src/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1811:FreeRTOS/Src/queue.c **** 		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1812:FreeRTOS/Src/queue.c **** 		{
1813:FreeRTOS/Src/queue.c **** 			const int8_t cRxLock = pxQueue->cRxLock;
1814:FreeRTOS/Src/queue.c **** 
1815:FreeRTOS/Src/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1816:FreeRTOS/Src/queue.c **** 
1817:FreeRTOS/Src/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1818:FreeRTOS/Src/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1819:FreeRTOS/Src/queue.c **** 
1820:FreeRTOS/Src/queue.c **** 			/* If the queue is locked the event list will not be modified.
1821:FreeRTOS/Src/queue.c **** 			Instead update the lock count so the task that unlocks the queue
1822:FreeRTOS/Src/queue.c **** 			will know that an ISR has removed data while the queue was
1823:FreeRTOS/Src/queue.c **** 			locked. */
1824:FreeRTOS/Src/queue.c **** 			if( cRxLock == queueUNLOCKED )
1825:FreeRTOS/Src/queue.c **** 			{
1826:FreeRTOS/Src/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1827:FreeRTOS/Src/queue.c **** 				{
1828:FreeRTOS/Src/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1829:FreeRTOS/Src/queue.c **** 					{
1830:FreeRTOS/Src/queue.c **** 						/* The task waiting has a higher priority than us so
1831:FreeRTOS/Src/queue.c **** 						force a context switch. */
1832:FreeRTOS/Src/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
1833:FreeRTOS/Src/queue.c **** 						{
1834:FreeRTOS/Src/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
1835:FreeRTOS/Src/queue.c **** 						}
1836:FreeRTOS/Src/queue.c **** 						else
1837:FreeRTOS/Src/queue.c **** 						{
1838:FreeRTOS/Src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1839:FreeRTOS/Src/queue.c **** 						}
1840:FreeRTOS/Src/queue.c **** 					}
1841:FreeRTOS/Src/queue.c **** 					else
1842:FreeRTOS/Src/queue.c **** 					{
1843:FreeRTOS/Src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1844:FreeRTOS/Src/queue.c **** 					}
1845:FreeRTOS/Src/queue.c **** 				}
1846:FreeRTOS/Src/queue.c **** 				else
1847:FreeRTOS/Src/queue.c **** 				{
1848:FreeRTOS/Src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1849:FreeRTOS/Src/queue.c **** 				}
1850:FreeRTOS/Src/queue.c **** 			}
1851:FreeRTOS/Src/queue.c **** 			else
1852:FreeRTOS/Src/queue.c **** 			{
1853:FreeRTOS/Src/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1854:FreeRTOS/Src/queue.c **** 				knows that data was removed while it was locked. */
1855:FreeRTOS/Src/queue.c **** 				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1856:FreeRTOS/Src/queue.c **** 			}
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 34


1857:FreeRTOS/Src/queue.c **** 
1858:FreeRTOS/Src/queue.c **** 			xReturn = pdPASS;
1859:FreeRTOS/Src/queue.c **** 		}
1860:FreeRTOS/Src/queue.c **** 		else
1861:FreeRTOS/Src/queue.c **** 		{
1862:FreeRTOS/Src/queue.c **** 			xReturn = pdFAIL;
1863:FreeRTOS/Src/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1864:FreeRTOS/Src/queue.c **** 		}
1865:FreeRTOS/Src/queue.c **** 	}
1866:FreeRTOS/Src/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1867:FreeRTOS/Src/queue.c **** 
1868:FreeRTOS/Src/queue.c **** 	return xReturn;
1869:FreeRTOS/Src/queue.c **** }
1870:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
1871:FreeRTOS/Src/queue.c **** 
1872:FreeRTOS/Src/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
1873:FreeRTOS/Src/queue.c **** {
1874:FreeRTOS/Src/queue.c **** BaseType_t xReturn;
1875:FreeRTOS/Src/queue.c **** UBaseType_t uxSavedInterruptStatus;
1876:FreeRTOS/Src/queue.c **** int8_t *pcOriginalReadPosition;
1877:FreeRTOS/Src/queue.c **** Queue_t * const pxQueue = xQueue;
1878:FreeRTOS/Src/queue.c **** 
1879:FreeRTOS/Src/queue.c **** 	configASSERT( pxQueue );
1880:FreeRTOS/Src/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1881:FreeRTOS/Src/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
1882:FreeRTOS/Src/queue.c **** 
1883:FreeRTOS/Src/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1884:FreeRTOS/Src/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1885:FreeRTOS/Src/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1886:FreeRTOS/Src/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1887:FreeRTOS/Src/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1888:FreeRTOS/Src/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1889:FreeRTOS/Src/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1890:FreeRTOS/Src/queue.c **** 	assigned a priority above the configured maximum system call priority.
1891:FreeRTOS/Src/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1892:FreeRTOS/Src/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1893:FreeRTOS/Src/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1894:FreeRTOS/Src/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1895:FreeRTOS/Src/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1896:FreeRTOS/Src/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1897:FreeRTOS/Src/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1898:FreeRTOS/Src/queue.c **** 
1899:FreeRTOS/Src/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1900:FreeRTOS/Src/queue.c **** 	{
1901:FreeRTOS/Src/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1902:FreeRTOS/Src/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1903:FreeRTOS/Src/queue.c **** 		{
1904:FreeRTOS/Src/queue.c **** 			traceQUEUE_PEEK_FROM_ISR( pxQueue );
1905:FreeRTOS/Src/queue.c **** 
1906:FreeRTOS/Src/queue.c **** 			/* Remember the read position so it can be reset as nothing is
1907:FreeRTOS/Src/queue.c **** 			actually being removed from the queue. */
1908:FreeRTOS/Src/queue.c **** 			pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
1909:FreeRTOS/Src/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1910:FreeRTOS/Src/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
1911:FreeRTOS/Src/queue.c **** 
1912:FreeRTOS/Src/queue.c **** 			xReturn = pdPASS;
1913:FreeRTOS/Src/queue.c **** 		}
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 35


1914:FreeRTOS/Src/queue.c **** 		else
1915:FreeRTOS/Src/queue.c **** 		{
1916:FreeRTOS/Src/queue.c **** 			xReturn = pdFAIL;
1917:FreeRTOS/Src/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
1918:FreeRTOS/Src/queue.c **** 		}
1919:FreeRTOS/Src/queue.c **** 	}
1920:FreeRTOS/Src/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1921:FreeRTOS/Src/queue.c **** 
1922:FreeRTOS/Src/queue.c **** 	return xReturn;
1923:FreeRTOS/Src/queue.c **** }
1924:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
1925:FreeRTOS/Src/queue.c **** 
1926:FreeRTOS/Src/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1927:FreeRTOS/Src/queue.c **** {
1928:FreeRTOS/Src/queue.c **** UBaseType_t uxReturn;
1929:FreeRTOS/Src/queue.c **** 
1930:FreeRTOS/Src/queue.c **** 	configASSERT( xQueue );
1931:FreeRTOS/Src/queue.c **** 
1932:FreeRTOS/Src/queue.c **** 	taskENTER_CRITICAL();
1933:FreeRTOS/Src/queue.c **** 	{
1934:FreeRTOS/Src/queue.c **** 		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1935:FreeRTOS/Src/queue.c **** 	}
1936:FreeRTOS/Src/queue.c **** 	taskEXIT_CRITICAL();
1937:FreeRTOS/Src/queue.c **** 
1938:FreeRTOS/Src/queue.c **** 	return uxReturn;
1939:FreeRTOS/Src/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1940:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
1941:FreeRTOS/Src/queue.c **** 
1942:FreeRTOS/Src/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1943:FreeRTOS/Src/queue.c **** {
1944:FreeRTOS/Src/queue.c **** UBaseType_t uxReturn;
1945:FreeRTOS/Src/queue.c **** Queue_t * const pxQueue = xQueue;
1946:FreeRTOS/Src/queue.c **** 
1947:FreeRTOS/Src/queue.c **** 	configASSERT( pxQueue );
1948:FreeRTOS/Src/queue.c **** 
1949:FreeRTOS/Src/queue.c **** 	taskENTER_CRITICAL();
1950:FreeRTOS/Src/queue.c **** 	{
1951:FreeRTOS/Src/queue.c **** 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
1952:FreeRTOS/Src/queue.c **** 	}
1953:FreeRTOS/Src/queue.c **** 	taskEXIT_CRITICAL();
1954:FreeRTOS/Src/queue.c **** 
1955:FreeRTOS/Src/queue.c **** 	return uxReturn;
1956:FreeRTOS/Src/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1957:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
1958:FreeRTOS/Src/queue.c **** 
1959:FreeRTOS/Src/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
1960:FreeRTOS/Src/queue.c **** {
1961:FreeRTOS/Src/queue.c **** UBaseType_t uxReturn;
1962:FreeRTOS/Src/queue.c **** Queue_t * const pxQueue = xQueue;
1963:FreeRTOS/Src/queue.c **** 
1964:FreeRTOS/Src/queue.c **** 	configASSERT( pxQueue );
1965:FreeRTOS/Src/queue.c **** 	uxReturn = pxQueue->uxMessagesWaiting;
1966:FreeRTOS/Src/queue.c **** 
1967:FreeRTOS/Src/queue.c **** 	return uxReturn;
1968:FreeRTOS/Src/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1969:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
1970:FreeRTOS/Src/queue.c **** 
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 36


1971:FreeRTOS/Src/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
1972:FreeRTOS/Src/queue.c **** {
1973:FreeRTOS/Src/queue.c **** Queue_t * const pxQueue = xQueue;
1974:FreeRTOS/Src/queue.c **** 
1975:FreeRTOS/Src/queue.c **** 	configASSERT( pxQueue );
1976:FreeRTOS/Src/queue.c **** 	traceQUEUE_DELETE( pxQueue );
1977:FreeRTOS/Src/queue.c **** 
1978:FreeRTOS/Src/queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1979:FreeRTOS/Src/queue.c **** 	{
1980:FreeRTOS/Src/queue.c **** 		vQueueUnregisterQueue( pxQueue );
1981:FreeRTOS/Src/queue.c **** 	}
1982:FreeRTOS/Src/queue.c **** 	#endif
1983:FreeRTOS/Src/queue.c **** 
1984:FreeRTOS/Src/queue.c **** 	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
1985:FreeRTOS/Src/queue.c **** 	{
1986:FreeRTOS/Src/queue.c **** 		/* The queue can only have been allocated dynamically - free it
1987:FreeRTOS/Src/queue.c **** 		again. */
1988:FreeRTOS/Src/queue.c **** 		vPortFree( pxQueue );
1989:FreeRTOS/Src/queue.c **** 	}
1990:FreeRTOS/Src/queue.c **** 	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
1991:FreeRTOS/Src/queue.c **** 	{
1992:FreeRTOS/Src/queue.c **** 		/* The queue could have been allocated statically or dynamically, so
1993:FreeRTOS/Src/queue.c **** 		check before attempting to free the memory. */
1994:FreeRTOS/Src/queue.c **** 		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1995:FreeRTOS/Src/queue.c **** 		{
1996:FreeRTOS/Src/queue.c **** 			vPortFree( pxQueue );
1997:FreeRTOS/Src/queue.c **** 		}
1998:FreeRTOS/Src/queue.c **** 		else
1999:FreeRTOS/Src/queue.c **** 		{
2000:FreeRTOS/Src/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2001:FreeRTOS/Src/queue.c **** 		}
2002:FreeRTOS/Src/queue.c **** 	}
2003:FreeRTOS/Src/queue.c **** 	#else
2004:FreeRTOS/Src/queue.c **** 	{
2005:FreeRTOS/Src/queue.c **** 		/* The queue must have been statically allocated, so is not going to be
2006:FreeRTOS/Src/queue.c **** 		deleted.  Avoid compiler warnings about the unused parameter. */
2007:FreeRTOS/Src/queue.c **** 		( void ) pxQueue;
2008:FreeRTOS/Src/queue.c **** 	}
2009:FreeRTOS/Src/queue.c **** 	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
2010:FreeRTOS/Src/queue.c **** }
2011:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
2012:FreeRTOS/Src/queue.c **** 
2013:FreeRTOS/Src/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2014:FreeRTOS/Src/queue.c **** 
2015:FreeRTOS/Src/queue.c **** 	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
2016:FreeRTOS/Src/queue.c **** 	{
2017:FreeRTOS/Src/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
2018:FreeRTOS/Src/queue.c **** 	}
2019:FreeRTOS/Src/queue.c **** 
2020:FreeRTOS/Src/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2021:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
2022:FreeRTOS/Src/queue.c **** 
2023:FreeRTOS/Src/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2024:FreeRTOS/Src/queue.c **** 
2025:FreeRTOS/Src/queue.c **** 	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
2026:FreeRTOS/Src/queue.c **** 	{
2027:FreeRTOS/Src/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 37


2028:FreeRTOS/Src/queue.c **** 	}
2029:FreeRTOS/Src/queue.c **** 
2030:FreeRTOS/Src/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2031:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
2032:FreeRTOS/Src/queue.c **** 
2033:FreeRTOS/Src/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2034:FreeRTOS/Src/queue.c **** 
2035:FreeRTOS/Src/queue.c **** 	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
2036:FreeRTOS/Src/queue.c **** 	{
2037:FreeRTOS/Src/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
2038:FreeRTOS/Src/queue.c **** 	}
2039:FreeRTOS/Src/queue.c **** 
2040:FreeRTOS/Src/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2041:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
2042:FreeRTOS/Src/queue.c **** 
2043:FreeRTOS/Src/queue.c **** #if( configUSE_MUTEXES == 1 )
2044:FreeRTOS/Src/queue.c **** 
2045:FreeRTOS/Src/queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
2046:FreeRTOS/Src/queue.c **** 	{
2047:FreeRTOS/Src/queue.c **** 	UBaseType_t uxHighestPriorityOfWaitingTasks;
2048:FreeRTOS/Src/queue.c **** 
2049:FreeRTOS/Src/queue.c **** 		/* If a task waiting for a mutex causes the mutex holder to inherit a
2050:FreeRTOS/Src/queue.c **** 		priority, but the waiting task times out, then the holder should
2051:FreeRTOS/Src/queue.c **** 		disinherit the priority - but only down to the highest priority of any
2052:FreeRTOS/Src/queue.c **** 		other tasks that are waiting for the same mutex.  For this purpose,
2053:FreeRTOS/Src/queue.c **** 		return the priority of the highest priority task that is waiting for the
2054:FreeRTOS/Src/queue.c **** 		mutex. */
2055:FreeRTOS/Src/queue.c **** 		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
2056:FreeRTOS/Src/queue.c **** 		{
2057:FreeRTOS/Src/queue.c **** 			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET
2058:FreeRTOS/Src/queue.c **** 		}
2059:FreeRTOS/Src/queue.c **** 		else
2060:FreeRTOS/Src/queue.c **** 		{
2061:FreeRTOS/Src/queue.c **** 			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
2062:FreeRTOS/Src/queue.c **** 		}
2063:FreeRTOS/Src/queue.c **** 
2064:FreeRTOS/Src/queue.c **** 		return uxHighestPriorityOfWaitingTasks;
2065:FreeRTOS/Src/queue.c **** 	}
2066:FreeRTOS/Src/queue.c **** 
2067:FreeRTOS/Src/queue.c **** #endif /* configUSE_MUTEXES */
2068:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
2069:FreeRTOS/Src/queue.c **** 
2070:FreeRTOS/Src/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
2071:FreeRTOS/Src/queue.c **** {
2072:FreeRTOS/Src/queue.c **** BaseType_t xReturn = pdFALSE;
2073:FreeRTOS/Src/queue.c **** UBaseType_t uxMessagesWaiting;
2074:FreeRTOS/Src/queue.c **** 
2075:FreeRTOS/Src/queue.c **** 	/* This function is called from a critical section. */
2076:FreeRTOS/Src/queue.c **** 
2077:FreeRTOS/Src/queue.c **** 	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
2078:FreeRTOS/Src/queue.c **** 
2079:FreeRTOS/Src/queue.c **** 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
2080:FreeRTOS/Src/queue.c **** 	{
2081:FreeRTOS/Src/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
2082:FreeRTOS/Src/queue.c **** 		{
2083:FreeRTOS/Src/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
2084:FreeRTOS/Src/queue.c **** 			{
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 38


2085:FreeRTOS/Src/queue.c **** 				/* The mutex is no longer being held. */
2086:FreeRTOS/Src/queue.c **** 				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
2087:FreeRTOS/Src/queue.c **** 				pxQueue->u.xSemaphore.xMutexHolder = NULL;
2088:FreeRTOS/Src/queue.c **** 			}
2089:FreeRTOS/Src/queue.c **** 			else
2090:FreeRTOS/Src/queue.c **** 			{
2091:FreeRTOS/Src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2092:FreeRTOS/Src/queue.c **** 			}
2093:FreeRTOS/Src/queue.c **** 		}
2094:FreeRTOS/Src/queue.c **** 		#endif /* configUSE_MUTEXES */
2095:FreeRTOS/Src/queue.c **** 	}
2096:FreeRTOS/Src/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
2097:FreeRTOS/Src/queue.c **** 	{
2098:FreeRTOS/Src/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); 
2099:FreeRTOS/Src/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, esp
2100:FreeRTOS/Src/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as co
2101:FreeRTOS/Src/queue.c **** 		{
2102:FreeRTOS/Src/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
2103:FreeRTOS/Src/queue.c **** 		}
2104:FreeRTOS/Src/queue.c **** 		else
2105:FreeRTOS/Src/queue.c **** 		{
2106:FreeRTOS/Src/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2107:FreeRTOS/Src/queue.c **** 		}
2108:FreeRTOS/Src/queue.c **** 	}
2109:FreeRTOS/Src/queue.c **** 	else
2110:FreeRTOS/Src/queue.c **** 	{
2111:FreeRTOS/Src/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxIt
2112:FreeRTOS/Src/queue.c **** 		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
2113:FreeRTOS/Src/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as co
2114:FreeRTOS/Src/queue.c **** 		{
2115:FreeRTOS/Src/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
2116:FreeRTOS/Src/queue.c **** 		}
2117:FreeRTOS/Src/queue.c **** 		else
2118:FreeRTOS/Src/queue.c **** 		{
2119:FreeRTOS/Src/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2120:FreeRTOS/Src/queue.c **** 		}
2121:FreeRTOS/Src/queue.c **** 
2122:FreeRTOS/Src/queue.c **** 		if( xPosition == queueOVERWRITE )
2123:FreeRTOS/Src/queue.c **** 		{
2124:FreeRTOS/Src/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
2125:FreeRTOS/Src/queue.c **** 			{
2126:FreeRTOS/Src/queue.c **** 				/* An item is not being added but overwritten, so subtract
2127:FreeRTOS/Src/queue.c **** 				one from the recorded number of items in the queue so when
2128:FreeRTOS/Src/queue.c **** 				one is added again below the number of recorded items remains
2129:FreeRTOS/Src/queue.c **** 				correct. */
2130:FreeRTOS/Src/queue.c **** 				--uxMessagesWaiting;
2131:FreeRTOS/Src/queue.c **** 			}
2132:FreeRTOS/Src/queue.c **** 			else
2133:FreeRTOS/Src/queue.c **** 			{
2134:FreeRTOS/Src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2135:FreeRTOS/Src/queue.c **** 			}
2136:FreeRTOS/Src/queue.c **** 		}
2137:FreeRTOS/Src/queue.c **** 		else
2138:FreeRTOS/Src/queue.c **** 		{
2139:FreeRTOS/Src/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2140:FreeRTOS/Src/queue.c **** 		}
2141:FreeRTOS/Src/queue.c **** 	}
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 39


2142:FreeRTOS/Src/queue.c **** 
2143:FreeRTOS/Src/queue.c **** 	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
2144:FreeRTOS/Src/queue.c **** 
2145:FreeRTOS/Src/queue.c **** 	return xReturn;
2146:FreeRTOS/Src/queue.c **** }
2147:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
2148:FreeRTOS/Src/queue.c **** 
2149:FreeRTOS/Src/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
2150:FreeRTOS/Src/queue.c **** {
2151:FreeRTOS/Src/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
2152:FreeRTOS/Src/queue.c **** 	{
2153:FreeRTOS/Src/queue.c **** 		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char typ
2154:FreeRTOS/Src/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justi
2155:FreeRTOS/Src/queue.c **** 		{
2156:FreeRTOS/Src/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2157:FreeRTOS/Src/queue.c **** 		}
2158:FreeRTOS/Src/queue.c **** 		else
2159:FreeRTOS/Src/queue.c **** 		{
2160:FreeRTOS/Src/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2161:FreeRTOS/Src/queue.c **** 		}
2162:FreeRTOS/Src/queue.c **** 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue
2163:FreeRTOS/Src/queue.c **** 	}
2164:FreeRTOS/Src/queue.c **** }
2165:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
2166:FreeRTOS/Src/queue.c **** 
2167:FreeRTOS/Src/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
2168:FreeRTOS/Src/queue.c **** {
2169:FreeRTOS/Src/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
2170:FreeRTOS/Src/queue.c **** 
2171:FreeRTOS/Src/queue.c **** 	/* The lock counts contains the number of extra data items placed or
2172:FreeRTOS/Src/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
2173:FreeRTOS/Src/queue.c **** 	locked items can be added or removed, but the event lists cannot be
2174:FreeRTOS/Src/queue.c **** 	updated. */
2175:FreeRTOS/Src/queue.c **** 	taskENTER_CRITICAL();
2176:FreeRTOS/Src/queue.c **** 	{
2177:FreeRTOS/Src/queue.c **** 		int8_t cTxLock = pxQueue->cTxLock;
2178:FreeRTOS/Src/queue.c **** 
2179:FreeRTOS/Src/queue.c **** 		/* See if data was added to the queue while it was locked. */
2180:FreeRTOS/Src/queue.c **** 		while( cTxLock > queueLOCKED_UNMODIFIED )
2181:FreeRTOS/Src/queue.c **** 		{
2182:FreeRTOS/Src/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
2183:FreeRTOS/Src/queue.c **** 			blocked waiting for data to become available? */
2184:FreeRTOS/Src/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
2185:FreeRTOS/Src/queue.c **** 			{
2186:FreeRTOS/Src/queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
2187:FreeRTOS/Src/queue.c **** 				{
2188:FreeRTOS/Src/queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
2189:FreeRTOS/Src/queue.c **** 					{
2190:FreeRTOS/Src/queue.c **** 						/* The queue is a member of a queue set, and posting to
2191:FreeRTOS/Src/queue.c **** 						the queue set caused a higher priority task to unblock.
2192:FreeRTOS/Src/queue.c **** 						A context switch is required. */
2193:FreeRTOS/Src/queue.c **** 						vTaskMissedYield();
2194:FreeRTOS/Src/queue.c **** 					}
2195:FreeRTOS/Src/queue.c **** 					else
2196:FreeRTOS/Src/queue.c **** 					{
2197:FreeRTOS/Src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2198:FreeRTOS/Src/queue.c **** 					}
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 40


2199:FreeRTOS/Src/queue.c **** 				}
2200:FreeRTOS/Src/queue.c **** 				else
2201:FreeRTOS/Src/queue.c **** 				{
2202:FreeRTOS/Src/queue.c **** 					/* Tasks that are removed from the event list will get
2203:FreeRTOS/Src/queue.c **** 					added to the pending ready list as the scheduler is still
2204:FreeRTOS/Src/queue.c **** 					suspended. */
2205:FreeRTOS/Src/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2206:FreeRTOS/Src/queue.c **** 					{
2207:FreeRTOS/Src/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2208:FreeRTOS/Src/queue.c **** 						{
2209:FreeRTOS/Src/queue.c **** 							/* The task waiting has a higher priority so record that a
2210:FreeRTOS/Src/queue.c **** 							context	switch is required. */
2211:FreeRTOS/Src/queue.c **** 							vTaskMissedYield();
2212:FreeRTOS/Src/queue.c **** 						}
2213:FreeRTOS/Src/queue.c **** 						else
2214:FreeRTOS/Src/queue.c **** 						{
2215:FreeRTOS/Src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
2216:FreeRTOS/Src/queue.c **** 						}
2217:FreeRTOS/Src/queue.c **** 					}
2218:FreeRTOS/Src/queue.c **** 					else
2219:FreeRTOS/Src/queue.c **** 					{
2220:FreeRTOS/Src/queue.c **** 						break;
2221:FreeRTOS/Src/queue.c **** 					}
2222:FreeRTOS/Src/queue.c **** 				}
2223:FreeRTOS/Src/queue.c **** 			}
2224:FreeRTOS/Src/queue.c **** 			#else /* configUSE_QUEUE_SETS */
2225:FreeRTOS/Src/queue.c **** 			{
2226:FreeRTOS/Src/queue.c **** 				/* Tasks that are removed from the event list will get added to
2227:FreeRTOS/Src/queue.c **** 				the pending ready list as the scheduler is still suspended. */
2228:FreeRTOS/Src/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2229:FreeRTOS/Src/queue.c **** 				{
2230:FreeRTOS/Src/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2231:FreeRTOS/Src/queue.c **** 					{
2232:FreeRTOS/Src/queue.c **** 						/* The task waiting has a higher priority so record that
2233:FreeRTOS/Src/queue.c **** 						a context switch is required. */
2234:FreeRTOS/Src/queue.c **** 						vTaskMissedYield();
2235:FreeRTOS/Src/queue.c **** 					}
2236:FreeRTOS/Src/queue.c **** 					else
2237:FreeRTOS/Src/queue.c **** 					{
2238:FreeRTOS/Src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2239:FreeRTOS/Src/queue.c **** 					}
2240:FreeRTOS/Src/queue.c **** 				}
2241:FreeRTOS/Src/queue.c **** 				else
2242:FreeRTOS/Src/queue.c **** 				{
2243:FreeRTOS/Src/queue.c **** 					break;
2244:FreeRTOS/Src/queue.c **** 				}
2245:FreeRTOS/Src/queue.c **** 			}
2246:FreeRTOS/Src/queue.c **** 			#endif /* configUSE_QUEUE_SETS */
2247:FreeRTOS/Src/queue.c **** 
2248:FreeRTOS/Src/queue.c **** 			--cTxLock;
2249:FreeRTOS/Src/queue.c **** 		}
2250:FreeRTOS/Src/queue.c **** 
2251:FreeRTOS/Src/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
2252:FreeRTOS/Src/queue.c **** 	}
2253:FreeRTOS/Src/queue.c **** 	taskEXIT_CRITICAL();
2254:FreeRTOS/Src/queue.c **** 
2255:FreeRTOS/Src/queue.c **** 	/* Do the same for the Rx lock. */
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 41


2256:FreeRTOS/Src/queue.c **** 	taskENTER_CRITICAL();
2257:FreeRTOS/Src/queue.c **** 	{
2258:FreeRTOS/Src/queue.c **** 		int8_t cRxLock = pxQueue->cRxLock;
2259:FreeRTOS/Src/queue.c **** 
2260:FreeRTOS/Src/queue.c **** 		while( cRxLock > queueLOCKED_UNMODIFIED )
2261:FreeRTOS/Src/queue.c **** 		{
2262:FreeRTOS/Src/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2263:FreeRTOS/Src/queue.c **** 			{
2264:FreeRTOS/Src/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2265:FreeRTOS/Src/queue.c **** 				{
2266:FreeRTOS/Src/queue.c **** 					vTaskMissedYield();
2267:FreeRTOS/Src/queue.c **** 				}
2268:FreeRTOS/Src/queue.c **** 				else
2269:FreeRTOS/Src/queue.c **** 				{
2270:FreeRTOS/Src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2271:FreeRTOS/Src/queue.c **** 				}
2272:FreeRTOS/Src/queue.c **** 
2273:FreeRTOS/Src/queue.c **** 				--cRxLock;
2274:FreeRTOS/Src/queue.c **** 			}
2275:FreeRTOS/Src/queue.c **** 			else
2276:FreeRTOS/Src/queue.c **** 			{
2277:FreeRTOS/Src/queue.c **** 				break;
2278:FreeRTOS/Src/queue.c **** 			}
2279:FreeRTOS/Src/queue.c **** 		}
2280:FreeRTOS/Src/queue.c **** 
2281:FreeRTOS/Src/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
2282:FreeRTOS/Src/queue.c **** 	}
2283:FreeRTOS/Src/queue.c **** 	taskEXIT_CRITICAL();
2284:FreeRTOS/Src/queue.c **** }
2285:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
2286:FreeRTOS/Src/queue.c **** 
2287:FreeRTOS/Src/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
2288:FreeRTOS/Src/queue.c **** {
2289:FreeRTOS/Src/queue.c **** BaseType_t xReturn;
2290:FreeRTOS/Src/queue.c **** 
2291:FreeRTOS/Src/queue.c **** 	taskENTER_CRITICAL();
2292:FreeRTOS/Src/queue.c **** 	{
2293:FreeRTOS/Src/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
2294:FreeRTOS/Src/queue.c **** 		{
2295:FreeRTOS/Src/queue.c **** 			xReturn = pdTRUE;
2296:FreeRTOS/Src/queue.c **** 		}
2297:FreeRTOS/Src/queue.c **** 		else
2298:FreeRTOS/Src/queue.c **** 		{
2299:FreeRTOS/Src/queue.c **** 			xReturn = pdFALSE;
2300:FreeRTOS/Src/queue.c **** 		}
2301:FreeRTOS/Src/queue.c **** 	}
2302:FreeRTOS/Src/queue.c **** 	taskEXIT_CRITICAL();
2303:FreeRTOS/Src/queue.c **** 
2304:FreeRTOS/Src/queue.c **** 	return xReturn;
2305:FreeRTOS/Src/queue.c **** }
2306:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
2307:FreeRTOS/Src/queue.c **** 
2308:FreeRTOS/Src/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
2309:FreeRTOS/Src/queue.c **** {
2310:FreeRTOS/Src/queue.c **** BaseType_t xReturn;
2311:FreeRTOS/Src/queue.c **** Queue_t * const pxQueue = xQueue;
2312:FreeRTOS/Src/queue.c **** 
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 42


2313:FreeRTOS/Src/queue.c **** 	configASSERT( pxQueue );
2314:FreeRTOS/Src/queue.c **** 	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2315:FreeRTOS/Src/queue.c **** 	{
2316:FreeRTOS/Src/queue.c **** 		xReturn = pdTRUE;
2317:FreeRTOS/Src/queue.c **** 	}
2318:FreeRTOS/Src/queue.c **** 	else
2319:FreeRTOS/Src/queue.c **** 	{
2320:FreeRTOS/Src/queue.c **** 		xReturn = pdFALSE;
2321:FreeRTOS/Src/queue.c **** 	}
2322:FreeRTOS/Src/queue.c **** 
2323:FreeRTOS/Src/queue.c **** 	return xReturn;
2324:FreeRTOS/Src/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
2325:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
2326:FreeRTOS/Src/queue.c **** 
2327:FreeRTOS/Src/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
2328:FreeRTOS/Src/queue.c **** {
  27              		.loc 1 2328 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 10B5     		push	{r4, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 4, -8
  36              		.cfi_offset 14, -4
  37 0002 0446     		mov	r4, r0
2329:FreeRTOS/Src/queue.c **** BaseType_t xReturn;
2330:FreeRTOS/Src/queue.c **** 
2331:FreeRTOS/Src/queue.c **** 	taskENTER_CRITICAL();
  38              		.loc 1 2331 0
  39 0004 FFF7FEFF 		bl	vPortEnterCritical
  40              	.LVL1:
2332:FreeRTOS/Src/queue.c **** 	{
2333:FreeRTOS/Src/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  41              		.loc 1 2333 0
  42 0008 A26B     		ldr	r2, [r4, #56]
  43 000a E36B     		ldr	r3, [r4, #60]
  44 000c 9A42     		cmp	r2, r3
  45 000e 01D1     		bne	.L3
2334:FreeRTOS/Src/queue.c **** 		{
2335:FreeRTOS/Src/queue.c **** 			xReturn = pdTRUE;
  46              		.loc 1 2335 0
  47 0010 0124     		movs	r4, #1
  48              	.LVL2:
  49 0012 00E0     		b	.L2
  50              	.LVL3:
  51              	.L3:
2336:FreeRTOS/Src/queue.c **** 		}
2337:FreeRTOS/Src/queue.c **** 		else
2338:FreeRTOS/Src/queue.c **** 		{
2339:FreeRTOS/Src/queue.c **** 			xReturn = pdFALSE;
  52              		.loc 1 2339 0
  53 0014 0024     		movs	r4, #0
  54              	.LVL4:
  55              	.L2:
2340:FreeRTOS/Src/queue.c **** 		}
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 43


2341:FreeRTOS/Src/queue.c **** 	}
2342:FreeRTOS/Src/queue.c **** 	taskEXIT_CRITICAL();
  56              		.loc 1 2342 0
  57 0016 FFF7FEFF 		bl	vPortExitCritical
  58              	.LVL5:
2343:FreeRTOS/Src/queue.c **** 
2344:FreeRTOS/Src/queue.c **** 	return xReturn;
2345:FreeRTOS/Src/queue.c **** }
  59              		.loc 1 2345 0
  60 001a 2046     		mov	r0, r4
  61 001c 10BD     		pop	{r4, pc}
  62              		.cfi_endproc
  63              	.LFE52:
  65 001e 00BF     		.section	.text.prvIsQueueEmpty,"ax",%progbits
  66              		.align	2
  67              		.thumb
  68              		.thumb_func
  70              	prvIsQueueEmpty:
  71              	.LFB50:
2288:FreeRTOS/Src/queue.c **** BaseType_t xReturn;
  72              		.loc 1 2288 0
  73              		.cfi_startproc
  74              		@ args = 0, pretend = 0, frame = 0
  75              		@ frame_needed = 0, uses_anonymous_args = 0
  76              	.LVL6:
  77 0000 10B5     		push	{r4, lr}
  78              	.LCFI1:
  79              		.cfi_def_cfa_offset 8
  80              		.cfi_offset 4, -8
  81              		.cfi_offset 14, -4
  82 0002 0446     		mov	r4, r0
2291:FreeRTOS/Src/queue.c **** 	{
  83              		.loc 1 2291 0
  84 0004 FFF7FEFF 		bl	vPortEnterCritical
  85              	.LVL7:
2293:FreeRTOS/Src/queue.c **** 		{
  86              		.loc 1 2293 0
  87 0008 A36B     		ldr	r3, [r4, #56]
  88 000a 0BB9     		cbnz	r3, .L7
2295:FreeRTOS/Src/queue.c **** 		}
  89              		.loc 1 2295 0
  90 000c 0124     		movs	r4, #1
  91              	.LVL8:
  92 000e 00E0     		b	.L6
  93              	.LVL9:
  94              	.L7:
2299:FreeRTOS/Src/queue.c **** 		}
  95              		.loc 1 2299 0
  96 0010 0024     		movs	r4, #0
  97              	.LVL10:
  98              	.L6:
2302:FreeRTOS/Src/queue.c **** 
  99              		.loc 1 2302 0
 100 0012 FFF7FEFF 		bl	vPortExitCritical
 101              	.LVL11:
2305:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 102              		.loc 1 2305 0
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 44


 103 0016 2046     		mov	r0, r4
 104 0018 10BD     		pop	{r4, pc}
 105              		.cfi_endproc
 106              	.LFE50:
 108 001a 00BF     		.section	.text.prvCopyDataToQueue,"ax",%progbits
 109              		.align	2
 110              		.thumb
 111              		.thumb_func
 113              	prvCopyDataToQueue:
 114              	.LFB47:
2071:FreeRTOS/Src/queue.c **** BaseType_t xReturn = pdFALSE;
 115              		.loc 1 2071 0
 116              		.cfi_startproc
 117              		@ args = 0, pretend = 0, frame = 0
 118              		@ frame_needed = 0, uses_anonymous_args = 0
 119              	.LVL12:
 120 0000 70B5     		push	{r4, r5, r6, lr}
 121              	.LCFI2:
 122              		.cfi_def_cfa_offset 16
 123              		.cfi_offset 4, -16
 124              		.cfi_offset 5, -12
 125              		.cfi_offset 6, -8
 126              		.cfi_offset 14, -4
 127 0002 0446     		mov	r4, r0
 128 0004 1646     		mov	r6, r2
 129              	.LVL13:
2077:FreeRTOS/Src/queue.c **** 
 130              		.loc 1 2077 0
 131 0006 856B     		ldr	r5, [r0, #56]
 132              	.LVL14:
2079:FreeRTOS/Src/queue.c **** 	{
 133              		.loc 1 2079 0
 134 0008 026C     		ldr	r2, [r0, #64]
 135              	.LVL15:
 136 000a FAB1     		cbz	r2, .L10
2096:FreeRTOS/Src/queue.c **** 	{
 137              		.loc 1 2096 0
 138 000c 66B9     		cbnz	r6, .L11
2098:FreeRTOS/Src/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, esp
 139              		.loc 1 2098 0
 140 000e 4068     		ldr	r0, [r0, #4]
 141              	.LVL16:
 142 0010 FFF7FEFF 		bl	memcpy
 143              	.LVL17:
2099:FreeRTOS/Src/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as co
 144              		.loc 1 2099 0
 145 0014 6268     		ldr	r2, [r4, #4]
 146 0016 236C     		ldr	r3, [r4, #64]
 147 0018 1344     		add	r3, r3, r2
 148 001a 6360     		str	r3, [r4, #4]
2100:FreeRTOS/Src/queue.c **** 		{
 149              		.loc 1 2100 0
 150 001c A268     		ldr	r2, [r4, #8]
 151 001e 9342     		cmp	r3, r2
 152 0020 14D3     		bcc	.L10
2102:FreeRTOS/Src/queue.c **** 		}
 153              		.loc 1 2102 0
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 45


 154 0022 2368     		ldr	r3, [r4]
 155 0024 6360     		str	r3, [r4, #4]
 156 0026 11E0     		b	.L10
 157              	.LVL18:
 158              	.L11:
2111:FreeRTOS/Src/queue.c **** 		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 159              		.loc 1 2111 0
 160 0028 C068     		ldr	r0, [r0, #12]
 161              	.LVL19:
 162 002a FFF7FEFF 		bl	memcpy
 163              	.LVL20:
2112:FreeRTOS/Src/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as co
 164              		.loc 1 2112 0
 165 002e 236C     		ldr	r3, [r4, #64]
 166 0030 5B42     		negs	r3, r3
 167 0032 E268     		ldr	r2, [r4, #12]
 168 0034 1A44     		add	r2, r2, r3
 169 0036 E260     		str	r2, [r4, #12]
2113:FreeRTOS/Src/queue.c **** 		{
 170              		.loc 1 2113 0
 171 0038 2168     		ldr	r1, [r4]
 172 003a 8A42     		cmp	r2, r1
 173 003c 02D2     		bcs	.L12
2115:FreeRTOS/Src/queue.c **** 		}
 174              		.loc 1 2115 0
 175 003e A268     		ldr	r2, [r4, #8]
 176 0040 1344     		add	r3, r3, r2
 177 0042 E360     		str	r3, [r4, #12]
 178              	.L12:
2122:FreeRTOS/Src/queue.c **** 		{
 179              		.loc 1 2122 0
 180 0044 022E     		cmp	r6, #2
 181 0046 01D1     		bne	.L10
2124:FreeRTOS/Src/queue.c **** 			{
 182              		.loc 1 2124 0
 183 0048 05B1     		cbz	r5, .L10
2130:FreeRTOS/Src/queue.c **** 			}
 184              		.loc 1 2130 0
 185 004a 013D     		subs	r5, r5, #1
 186              	.LVL21:
 187              	.L10:
2143:FreeRTOS/Src/queue.c **** 
 188              		.loc 1 2143 0
 189 004c 0135     		adds	r5, r5, #1
 190              	.LVL22:
 191 004e A563     		str	r5, [r4, #56]
2146:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 192              		.loc 1 2146 0
 193 0050 0020     		movs	r0, #0
 194 0052 70BD     		pop	{r4, r5, r6, pc}
 195              		.cfi_endproc
 196              	.LFE47:
 198              		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 199              		.align	2
 200              		.thumb
 201              		.thumb_func
 203              	prvCopyDataFromQueue:
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 46


 204              	.LFB48:
2150:FreeRTOS/Src/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 205              		.loc 1 2150 0
 206              		.cfi_startproc
 207              		@ args = 0, pretend = 0, frame = 0
 208              		@ frame_needed = 0, uses_anonymous_args = 0
 209              	.LVL23:
2151:FreeRTOS/Src/queue.c **** 	{
 210              		.loc 1 2151 0
 211 0000 026C     		ldr	r2, [r0, #64]
 212 0002 72B1     		cbz	r2, .L18
2150:FreeRTOS/Src/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 213              		.loc 1 2150 0
 214 0004 10B5     		push	{r4, lr}
 215              	.LCFI3:
 216              		.cfi_def_cfa_offset 8
 217              		.cfi_offset 4, -8
 218              		.cfi_offset 14, -4
2153:FreeRTOS/Src/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justi
 219              		.loc 1 2153 0
 220 0006 C368     		ldr	r3, [r0, #12]
 221 0008 1344     		add	r3, r3, r2
 222 000a C360     		str	r3, [r0, #12]
2154:FreeRTOS/Src/queue.c **** 		{
 223              		.loc 1 2154 0
 224 000c 8468     		ldr	r4, [r0, #8]
 225 000e A342     		cmp	r3, r4
 226 0010 01D3     		bcc	.L16
2156:FreeRTOS/Src/queue.c **** 		}
 227              		.loc 1 2156 0
 228 0012 0368     		ldr	r3, [r0]
 229 0014 C360     		str	r3, [r0, #12]
 230              	.L16:
 231 0016 0C46     		mov	r4, r1
2162:FreeRTOS/Src/queue.c **** 	}
 232              		.loc 1 2162 0
 233 0018 C168     		ldr	r1, [r0, #12]
 234              	.LVL24:
 235 001a 2046     		mov	r0, r4
 236              	.LVL25:
 237 001c FFF7FEFF 		bl	memcpy
 238              	.LVL26:
 239 0020 10BD     		pop	{r4, pc}
 240              	.LVL27:
 241              	.L18:
 242              	.LCFI4:
 243              		.cfi_def_cfa_offset 0
 244              		.cfi_restore 4
 245              		.cfi_restore 14
 246 0022 7047     		bx	lr
 247              		.cfi_endproc
 248              	.LFE48:
 250              		.section	.text.prvUnlockQueue,"ax",%progbits
 251              		.align	2
 252              		.thumb
 253              		.thumb_func
 255              	prvUnlockQueue:
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 47


 256              	.LFB49:
2168:FreeRTOS/Src/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 257              		.loc 1 2168 0
 258              		.cfi_startproc
 259              		@ args = 0, pretend = 0, frame = 0
 260              		@ frame_needed = 0, uses_anonymous_args = 0
 261              	.LVL28:
 262 0000 38B5     		push	{r3, r4, r5, lr}
 263              	.LCFI5:
 264              		.cfi_def_cfa_offset 16
 265              		.cfi_offset 3, -16
 266              		.cfi_offset 4, -12
 267              		.cfi_offset 5, -8
 268              		.cfi_offset 14, -4
 269 0002 0546     		mov	r5, r0
2175:FreeRTOS/Src/queue.c **** 	{
 270              		.loc 1 2175 0
 271 0004 FFF7FEFF 		bl	vPortEnterCritical
 272              	.LVL29:
 273              	.LBB23:
2177:FreeRTOS/Src/queue.c **** 
 274              		.loc 1 2177 0
 275 0008 95F84540 		ldrb	r4, [r5, #69]	@ zero_extendqisi2
 276 000c 64B2     		sxtb	r4, r4
 277              	.LVL30:
2180:FreeRTOS/Src/queue.c **** 		{
 278              		.loc 1 2180 0
 279 000e 0AE0     		b	.L20
 280              	.L23:
2228:FreeRTOS/Src/queue.c **** 				{
 281              		.loc 1 2228 0
 282 0010 6B6A     		ldr	r3, [r5, #36]
 283 0012 53B1     		cbz	r3, .L21
2230:FreeRTOS/Src/queue.c **** 					{
 284              		.loc 1 2230 0
 285 0014 05F12400 		add	r0, r5, #36
 286 0018 FFF7FEFF 		bl	xTaskRemoveFromEventList
 287              	.LVL31:
 288 001c 08B1     		cbz	r0, .L22
2234:FreeRTOS/Src/queue.c **** 					}
 289              		.loc 1 2234 0
 290 001e FFF7FEFF 		bl	vTaskMissedYield
 291              	.LVL32:
 292              	.L22:
2248:FreeRTOS/Src/queue.c **** 		}
 293              		.loc 1 2248 0
 294 0022 013C     		subs	r4, r4, #1
 295              	.LVL33:
 296 0024 64B2     		sxtb	r4, r4
 297              	.LVL34:
 298              	.L20:
2180:FreeRTOS/Src/queue.c **** 		{
 299              		.loc 1 2180 0
 300 0026 002C     		cmp	r4, #0
 301 0028 F2DC     		bgt	.L23
 302              	.L21:
2251:FreeRTOS/Src/queue.c **** 	}
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 48


 303              		.loc 1 2251 0
 304 002a FF23     		movs	r3, #255
 305 002c 85F84530 		strb	r3, [r5, #69]
 306              	.LBE23:
2253:FreeRTOS/Src/queue.c **** 
 307              		.loc 1 2253 0
 308 0030 FFF7FEFF 		bl	vPortExitCritical
 309              	.LVL35:
2256:FreeRTOS/Src/queue.c **** 	{
 310              		.loc 1 2256 0
 311 0034 FFF7FEFF 		bl	vPortEnterCritical
 312              	.LVL36:
 313              	.LBB24:
2258:FreeRTOS/Src/queue.c **** 
 314              		.loc 1 2258 0
 315 0038 95F84440 		ldrb	r4, [r5, #68]	@ zero_extendqisi2
 316              	.LVL37:
 317 003c 64B2     		sxtb	r4, r4
 318              	.LVL38:
2260:FreeRTOS/Src/queue.c **** 		{
 319              		.loc 1 2260 0
 320 003e 0AE0     		b	.L24
 321              	.L27:
2262:FreeRTOS/Src/queue.c **** 			{
 322              		.loc 1 2262 0
 323 0040 2B69     		ldr	r3, [r5, #16]
 324 0042 53B1     		cbz	r3, .L25
2264:FreeRTOS/Src/queue.c **** 				{
 325              		.loc 1 2264 0
 326 0044 05F11000 		add	r0, r5, #16
 327 0048 FFF7FEFF 		bl	xTaskRemoveFromEventList
 328              	.LVL39:
 329 004c 08B1     		cbz	r0, .L26
2266:FreeRTOS/Src/queue.c **** 				}
 330              		.loc 1 2266 0
 331 004e FFF7FEFF 		bl	vTaskMissedYield
 332              	.LVL40:
 333              	.L26:
2273:FreeRTOS/Src/queue.c **** 			}
 334              		.loc 1 2273 0
 335 0052 013C     		subs	r4, r4, #1
 336              	.LVL41:
 337 0054 64B2     		sxtb	r4, r4
 338              	.LVL42:
 339              	.L24:
2260:FreeRTOS/Src/queue.c **** 		{
 340              		.loc 1 2260 0
 341 0056 002C     		cmp	r4, #0
 342 0058 F2DC     		bgt	.L27
 343              	.L25:
2281:FreeRTOS/Src/queue.c **** 	}
 344              		.loc 1 2281 0
 345 005a FF23     		movs	r3, #255
 346 005c 85F84430 		strb	r3, [r5, #68]
 347              	.LBE24:
2283:FreeRTOS/Src/queue.c **** }
 348              		.loc 1 2283 0
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 49


 349 0060 FFF7FEFF 		bl	vPortExitCritical
 350              	.LVL43:
 351 0064 38BD     		pop	{r3, r4, r5, pc}
 352              		.cfi_endproc
 353              	.LFE49:
 355 0066 00BF     		.section	.text.xQueueGenericReset,"ax",%progbits
 356              		.align	2
 357              		.global	xQueueGenericReset
 358              		.thumb
 359              		.thumb_func
 361              	xQueueGenericReset:
 362              	.LFB32:
 256:FreeRTOS/Src/queue.c **** Queue_t * const pxQueue = xQueue;
 363              		.loc 1 256 0
 364              		.cfi_startproc
 365              		@ args = 0, pretend = 0, frame = 0
 366              		@ frame_needed = 0, uses_anonymous_args = 0
 367              	.LVL44:
 368 0000 38B5     		push	{r3, r4, r5, lr}
 369              	.LCFI6:
 370              		.cfi_def_cfa_offset 16
 371              		.cfi_offset 3, -16
 372              		.cfi_offset 4, -12
 373              		.cfi_offset 5, -8
 374              		.cfi_offset 14, -4
 375 0002 0446     		mov	r4, r0
 376 0004 0D46     		mov	r5, r1
 377              	.LVL45:
 261:FreeRTOS/Src/queue.c **** 	{
 378              		.loc 1 261 0
 379 0006 FFF7FEFF 		bl	vPortEnterCritical
 380              	.LVL46:
 263:FreeRTOS/Src/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 381              		.loc 1 263 0
 382 000a 2168     		ldr	r1, [r4]
 383 000c E26B     		ldr	r2, [r4, #60]
 384 000e 236C     		ldr	r3, [r4, #64]
 385 0010 03FB0210 		mla	r0, r3, r2, r1
 386 0014 A060     		str	r0, [r4, #8]
 264:FreeRTOS/Src/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 387              		.loc 1 264 0
 388 0016 0020     		movs	r0, #0
 389 0018 A063     		str	r0, [r4, #56]
 265:FreeRTOS/Src/queue.c **** 		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSi
 390              		.loc 1 265 0
 391 001a 6160     		str	r1, [r4, #4]
 266:FreeRTOS/Src/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 392              		.loc 1 266 0
 393 001c 013A     		subs	r2, r2, #1
 394 001e 02FB0313 		mla	r3, r2, r3, r1
 395 0022 E360     		str	r3, [r4, #12]
 267:FreeRTOS/Src/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 396              		.loc 1 267 0
 397 0024 FF23     		movs	r3, #255
 398 0026 84F84430 		strb	r3, [r4, #68]
 268:FreeRTOS/Src/queue.c **** 
 399              		.loc 1 268 0
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 50


 400 002a 84F84530 		strb	r3, [r4, #69]
 270:FreeRTOS/Src/queue.c **** 		{
 401              		.loc 1 270 0
 402 002e 7DB9     		cbnz	r5, .L30
 277:FreeRTOS/Src/queue.c **** 			{
 403              		.loc 1 277 0
 404 0030 2369     		ldr	r3, [r4, #16]
 405 0032 ABB1     		cbz	r3, .L31
 279:FreeRTOS/Src/queue.c **** 				{
 406              		.loc 1 279 0
 407 0034 04F11000 		add	r0, r4, #16
 408 0038 FFF7FEFF 		bl	xTaskRemoveFromEventList
 409              	.LVL47:
 410 003c 80B1     		cbz	r0, .L31
 281:FreeRTOS/Src/queue.c **** 				}
 411              		.loc 1 281 0
 412 003e 4FF08052 		mov	r2, #268435456
 413 0042 094B     		ldr	r3, .L33
 414 0044 1A60     		str	r2, [r3]
 415              		.syntax unified
 416              	@ 281 "FreeRTOS/Src/queue.c" 1
 417 0046 BFF34F8F 		dsb
 418              	@ 0 "" 2
 419              	@ 281 "FreeRTOS/Src/queue.c" 1
 420 004a BFF36F8F 		isb
 421              	@ 0 "" 2
 422              		.thumb
 423              		.syntax unified
 424 004e 07E0     		b	.L31
 425              	.L30:
 296:FreeRTOS/Src/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 426              		.loc 1 296 0
 427 0050 04F11000 		add	r0, r4, #16
 428 0054 FFF7FEFF 		bl	vListInitialise
 429              	.LVL48:
 297:FreeRTOS/Src/queue.c **** 		}
 430              		.loc 1 297 0
 431 0058 04F12400 		add	r0, r4, #36
 432 005c FFF7FEFF 		bl	vListInitialise
 433              	.LVL49:
 434              	.L31:
 300:FreeRTOS/Src/queue.c **** 
 435              		.loc 1 300 0
 436 0060 FFF7FEFF 		bl	vPortExitCritical
 437              	.LVL50:
 305:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 438              		.loc 1 305 0
 439 0064 0120     		movs	r0, #1
 440 0066 38BD     		pop	{r3, r4, r5, pc}
 441              	.LVL51:
 442              	.L34:
 443              		.align	2
 444              	.L33:
 445 0068 04ED00E0 		.word	-536810236
 446              		.cfi_endproc
 447              	.LFE32:
 449              		.section	.text.prvInitialiseNewQueue,"ax",%progbits
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 51


 450              		.align	2
 451              		.thumb
 452              		.thumb_func
 454              	prvInitialiseNewQueue:
 455              	.LFB34:
 430:FreeRTOS/Src/queue.c **** 	/* Remove compiler warnings about unused parameters should
 456              		.loc 1 430 0
 457              		.cfi_startproc
 458              		@ args = 4, pretend = 0, frame = 0
 459              		@ frame_needed = 0, uses_anonymous_args = 0
 460              	.LVL52:
 461 0000 10B5     		push	{r4, lr}
 462              	.LCFI7:
 463              		.cfi_def_cfa_offset 8
 464              		.cfi_offset 4, -8
 465              		.cfi_offset 14, -4
 466 0002 029B     		ldr	r3, [sp, #8]
 467              	.LVL53:
 435:FreeRTOS/Src/queue.c **** 	{
 468              		.loc 1 435 0
 469 0004 0C46     		mov	r4, r1
 470 0006 09B9     		cbnz	r1, .L36
 441:FreeRTOS/Src/queue.c **** 	}
 471              		.loc 1 441 0
 472 0008 1B60     		str	r3, [r3]
 473 000a 00E0     		b	.L37
 474              	.L36:
 446:FreeRTOS/Src/queue.c **** 	}
 475              		.loc 1 446 0
 476 000c 1A60     		str	r2, [r3]
 477              	.L37:
 451:FreeRTOS/Src/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 478              		.loc 1 451 0
 479 000e D863     		str	r0, [r3, #60]
 452:FreeRTOS/Src/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 480              		.loc 1 452 0
 481 0010 1C64     		str	r4, [r3, #64]
 453:FreeRTOS/Src/queue.c **** 
 482              		.loc 1 453 0
 483 0012 0121     		movs	r1, #1
 484              	.LVL54:
 485 0014 1846     		mov	r0, r3
 486              	.LVL55:
 487 0016 FFF7FEFF 		bl	xQueueGenericReset
 488              	.LVL56:
 489 001a 10BD     		pop	{r4, pc}
 490              		.cfi_endproc
 491              	.LFE34:
 493              		.section	.text.xQueueGenericCreate,"ax",%progbits
 494              		.align	2
 495              		.global	xQueueGenericCreate
 496              		.thumb
 497              		.thumb_func
 499              	xQueueGenericCreate:
 500              	.LFB33:
 369:FreeRTOS/Src/queue.c **** 	Queue_t *pxNewQueue;
 501              		.loc 1 369 0
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 52


 502              		.cfi_startproc
 503              		@ args = 0, pretend = 0, frame = 0
 504              		@ frame_needed = 0, uses_anonymous_args = 0
 505              	.LVL57:
 506 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 507              	.LCFI8:
 508              		.cfi_def_cfa_offset 20
 509              		.cfi_offset 4, -20
 510              		.cfi_offset 5, -16
 511              		.cfi_offset 6, -12
 512              		.cfi_offset 7, -8
 513              		.cfi_offset 14, -4
 514 0002 83B0     		sub	sp, sp, #12
 515              	.LCFI9:
 516              		.cfi_def_cfa_offset 32
 517 0004 0546     		mov	r5, r0
 518 0006 1746     		mov	r7, r2
 376:FreeRTOS/Src/queue.c **** 		{
 519              		.loc 1 376 0
 520 0008 0E46     		mov	r6, r1
 521 000a 11B1     		cbz	r1, .L42
 385:FreeRTOS/Src/queue.c **** 		}
 522              		.loc 1 385 0
 523 000c 00FB01F0 		mul	r0, r0, r1
 524              	.LVL58:
 525 0010 00E0     		b	.L40
 526              	.LVL59:
 527              	.L42:
 379:FreeRTOS/Src/queue.c **** 		}
 528              		.loc 1 379 0
 529 0012 0020     		movs	r0, #0
 530              	.LVL60:
 531              	.L40:
 397:FreeRTOS/Src/queue.c **** 
 532              		.loc 1 397 0
 533 0014 4830     		adds	r0, r0, #72
 534              	.LVL61:
 535 0016 FFF7FEFF 		bl	pvPortMalloc
 536              	.LVL62:
 399:FreeRTOS/Src/queue.c **** 		{
 537              		.loc 1 399 0
 538 001a 0446     		mov	r4, r0
 539 001c 38B1     		cbz	r0, .L41
 540              	.LVL63:
 415:FreeRTOS/Src/queue.c **** 		}
 541              		.loc 1 415 0
 542 001e 0090     		str	r0, [sp]
 543 0020 3B46     		mov	r3, r7
 544 0022 00F14802 		add	r2, r0, #72
 545              	.LVL64:
 546 0026 3146     		mov	r1, r6
 547 0028 2846     		mov	r0, r5
 548              	.LVL65:
 549 002a FFF7FEFF 		bl	prvInitialiseNewQueue
 550              	.LVL66:
 551              	.L41:
 424:FreeRTOS/Src/queue.c **** 
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 53


 552              		.loc 1 424 0
 553 002e 2046     		mov	r0, r4
 554 0030 03B0     		add	sp, sp, #12
 555              	.LCFI10:
 556              		.cfi_def_cfa_offset 20
 557              		@ sp needed
 558 0032 F0BD     		pop	{r4, r5, r6, r7, pc}
 559              		.cfi_endproc
 560              	.LFE33:
 562              		.section	.text.xQueueGenericSend,"ax",%progbits
 563              		.align	2
 564              		.global	xQueueGenericSend
 565              		.thumb
 566              		.thumb_func
 568              	xQueueGenericSend:
 569              	.LFB35:
 748:FreeRTOS/Src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 570              		.loc 1 748 0
 571              		.cfi_startproc
 572              		@ args = 0, pretend = 0, frame = 16
 573              		@ frame_needed = 0, uses_anonymous_args = 0
 574              	.LVL67:
 575 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 576              	.LCFI11:
 577              		.cfi_def_cfa_offset 20
 578              		.cfi_offset 4, -20
 579              		.cfi_offset 5, -16
 580              		.cfi_offset 6, -12
 581              		.cfi_offset 7, -8
 582              		.cfi_offset 14, -4
 583 0002 85B0     		sub	sp, sp, #20
 584              	.LCFI12:
 585              		.cfi_def_cfa_offset 40
 586 0004 0446     		mov	r4, r0
 587 0006 0F46     		mov	r7, r1
 588 0008 0192     		str	r2, [sp, #4]
 589 000a 1E46     		mov	r6, r3
 590              	.LVL68:
 749:FreeRTOS/Src/queue.c **** TimeOut_t xTimeOut;
 591              		.loc 1 749 0
 592 000c 0025     		movs	r5, #0
 593              	.LVL69:
 594              	.L45:
 768:FreeRTOS/Src/queue.c **** 		{
 595              		.loc 1 768 0
 596 000e FFF7FEFF 		bl	vPortEnterCritical
 597              	.LVL70:
 774:FreeRTOS/Src/queue.c **** 			{
 598              		.loc 1 774 0
 599 0012 A26B     		ldr	r2, [r4, #56]
 600 0014 E36B     		ldr	r3, [r4, #60]
 601 0016 9A42     		cmp	r2, r3
 602 0018 01D3     		bcc	.L46
 774:FreeRTOS/Src/queue.c **** 			{
 603              		.loc 1 774 0 is_stmt 0 discriminator 1
 604 001a 022E     		cmp	r6, #2
 605 001c 21D1     		bne	.L47
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 54


 606              	.L46:
 840:FreeRTOS/Src/queue.c **** 
 607              		.loc 1 840 0 is_stmt 1
 608 001e 3246     		mov	r2, r6
 609 0020 3946     		mov	r1, r7
 610 0022 2046     		mov	r0, r4
 611 0024 FFF7FEFF 		bl	prvCopyDataToQueue
 612              	.LVL71:
 844:FreeRTOS/Src/queue.c **** 					{
 613              		.loc 1 844 0
 614 0028 636A     		ldr	r3, [r4, #36]
 615 002a 6BB1     		cbz	r3, .L48
 846:FreeRTOS/Src/queue.c **** 						{
 616              		.loc 1 846 0
 617 002c 04F12400 		add	r0, r4, #36
 618              	.LVL72:
 619 0030 FFF7FEFF 		bl	xTaskRemoveFromEventList
 620              	.LVL73:
 621 0034 88B1     		cbz	r0, .L49
 852:FreeRTOS/Src/queue.c **** 						}
 622              		.loc 1 852 0
 623 0036 4FF08052 		mov	r2, #268435456
 624 003a 324B     		ldr	r3, .L59
 625 003c 1A60     		str	r2, [r3]
 626              		.syntax unified
 627              	@ 852 "FreeRTOS/Src/queue.c" 1
 628 003e BFF34F8F 		dsb
 629              	@ 0 "" 2
 630              	@ 852 "FreeRTOS/Src/queue.c" 1
 631 0042 BFF36F8F 		isb
 632              	@ 0 "" 2
 633              		.thumb
 634              		.syntax unified
 635 0046 08E0     		b	.L49
 636              	.LVL74:
 637              	.L48:
 859:FreeRTOS/Src/queue.c **** 					{
 638              		.loc 1 859 0
 639 0048 38B1     		cbz	r0, .L49
 865:FreeRTOS/Src/queue.c **** 					}
 640              		.loc 1 865 0
 641 004a 4FF08052 		mov	r2, #268435456
 642 004e 2D4B     		ldr	r3, .L59
 643 0050 1A60     		str	r2, [r3]
 644              		.syntax unified
 645              	@ 865 "FreeRTOS/Src/queue.c" 1
 646 0052 BFF34F8F 		dsb
 647              	@ 0 "" 2
 648              	@ 865 "FreeRTOS/Src/queue.c" 1
 649 0056 BFF36F8F 		isb
 650              	@ 0 "" 2
 651              	.LVL75:
 652              		.thumb
 653              		.syntax unified
 654              	.L49:
 874:FreeRTOS/Src/queue.c **** 				return pdPASS;
 655              		.loc 1 874 0
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 55


 656 005a FFF7FEFF 		bl	vPortExitCritical
 657              	.LVL76:
 875:FreeRTOS/Src/queue.c **** 			}
 658              		.loc 1 875 0
 659 005e 0120     		movs	r0, #1
 660 0060 4EE0     		b	.L50
 661              	.L47:
 879:FreeRTOS/Src/queue.c **** 				{
 662              		.loc 1 879 0
 663 0062 019B     		ldr	r3, [sp, #4]
 664 0064 1BB9     		cbnz	r3, .L51
 883:FreeRTOS/Src/queue.c **** 
 665              		.loc 1 883 0
 666 0066 FFF7FEFF 		bl	vPortExitCritical
 667              	.LVL77:
 888:FreeRTOS/Src/queue.c **** 				}
 668              		.loc 1 888 0
 669 006a 0020     		movs	r0, #0
 670 006c 48E0     		b	.L50
 671              	.L51:
 890:FreeRTOS/Src/queue.c **** 				{
 672              		.loc 1 890 0
 673 006e 1DB9     		cbnz	r5, .L52
 894:FreeRTOS/Src/queue.c **** 					xEntryTimeSet = pdTRUE;
 674              		.loc 1 894 0
 675 0070 02A8     		add	r0, sp, #8
 676 0072 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 677              	.LVL78:
 895:FreeRTOS/Src/queue.c **** 				}
 678              		.loc 1 895 0
 679 0076 0125     		movs	r5, #1
 680              	.LVL79:
 681              	.L52:
 904:FreeRTOS/Src/queue.c **** 
 682              		.loc 1 904 0
 683 0078 FFF7FEFF 		bl	vPortExitCritical
 684              	.LVL80:
 909:FreeRTOS/Src/queue.c **** 		prvLockQueue( pxQueue );
 685              		.loc 1 909 0
 686 007c FFF7FEFF 		bl	vTaskSuspendAll
 687              	.LVL81:
 910:FreeRTOS/Src/queue.c **** 
 688              		.loc 1 910 0
 689 0080 FFF7FEFF 		bl	vPortEnterCritical
 690              	.LVL82:
 691 0084 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 692 0088 5BB2     		sxtb	r3, r3
 693 008a B3F1FF3F 		cmp	r3, #-1
 694 008e 02D1     		bne	.L53
 910:FreeRTOS/Src/queue.c **** 
 695              		.loc 1 910 0 is_stmt 0 discriminator 1
 696 0090 0023     		movs	r3, #0
 697 0092 84F84430 		strb	r3, [r4, #68]
 698              	.L53:
 910:FreeRTOS/Src/queue.c **** 
 699              		.loc 1 910 0 discriminator 3
 700 0096 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 56


 701 009a 5BB2     		sxtb	r3, r3
 702 009c B3F1FF3F 		cmp	r3, #-1
 703 00a0 02D1     		bne	.L54
 910:FreeRTOS/Src/queue.c **** 
 704              		.loc 1 910 0 discriminator 4
 705 00a2 0023     		movs	r3, #0
 706 00a4 84F84530 		strb	r3, [r4, #69]
 707              	.L54:
 910:FreeRTOS/Src/queue.c **** 
 708              		.loc 1 910 0 discriminator 6
 709 00a8 FFF7FEFF 		bl	vPortExitCritical
 710              	.LVL83:
 913:FreeRTOS/Src/queue.c **** 		{
 711              		.loc 1 913 0 is_stmt 1 discriminator 6
 712 00ac 01A9     		add	r1, sp, #4
 713              	.LVL84:
 714 00ae 02A8     		add	r0, sp, #8
 715 00b0 FFF7FEFF 		bl	xTaskCheckForTimeOut
 716              	.LVL85:
 717 00b4 F0B9     		cbnz	r0, .L55
 915:FreeRTOS/Src/queue.c **** 			{
 718              		.loc 1 915 0
 719 00b6 2046     		mov	r0, r4
 720 00b8 FFF7FEFF 		bl	prvIsQueueFull
 721              	.LVL86:
 722 00bc A0B1     		cbz	r0, .L56
 918:FreeRTOS/Src/queue.c **** 
 723              		.loc 1 918 0
 724 00be 0199     		ldr	r1, [sp, #4]
 725 00c0 04F11000 		add	r0, r4, #16
 726 00c4 FFF7FEFF 		bl	vTaskPlaceOnEventList
 727              	.LVL87:
 925:FreeRTOS/Src/queue.c **** 
 728              		.loc 1 925 0
 729 00c8 2046     		mov	r0, r4
 730 00ca FFF7FEFF 		bl	prvUnlockQueue
 731              	.LVL88:
 932:FreeRTOS/Src/queue.c **** 				{
 732              		.loc 1 932 0
 733 00ce FFF7FEFF 		bl	xTaskResumeAll
 734              	.LVL89:
 735 00d2 0028     		cmp	r0, #0
 736 00d4 9BD1     		bne	.L45
 934:FreeRTOS/Src/queue.c **** 				}
 737              		.loc 1 934 0
 738 00d6 4FF08052 		mov	r2, #268435456
 739 00da 0A4B     		ldr	r3, .L59
 740 00dc 1A60     		str	r2, [r3]
 741              		.syntax unified
 742              	@ 934 "FreeRTOS/Src/queue.c" 1
 743 00de BFF34F8F 		dsb
 744              	@ 0 "" 2
 745              	@ 934 "FreeRTOS/Src/queue.c" 1
 746 00e2 BFF36F8F 		isb
 747              	@ 0 "" 2
 748              		.thumb
 749              		.syntax unified
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 57


 750 00e6 92E7     		b	.L45
 751              	.L56:
 940:FreeRTOS/Src/queue.c **** 				( void ) xTaskResumeAll();
 752              		.loc 1 940 0
 753 00e8 2046     		mov	r0, r4
 754 00ea FFF7FEFF 		bl	prvUnlockQueue
 755              	.LVL90:
 941:FreeRTOS/Src/queue.c **** 			}
 756              		.loc 1 941 0
 757 00ee FFF7FEFF 		bl	xTaskResumeAll
 758              	.LVL91:
 759 00f2 8CE7     		b	.L45
 760              	.L55:
 947:FreeRTOS/Src/queue.c **** 			( void ) xTaskResumeAll();
 761              		.loc 1 947 0
 762 00f4 2046     		mov	r0, r4
 763 00f6 FFF7FEFF 		bl	prvUnlockQueue
 764              	.LVL92:
 948:FreeRTOS/Src/queue.c **** 
 765              		.loc 1 948 0
 766 00fa FFF7FEFF 		bl	xTaskResumeAll
 767              	.LVL93:
 951:FreeRTOS/Src/queue.c **** 		}
 768              		.loc 1 951 0
 769 00fe 0020     		movs	r0, #0
 770              	.L50:
 954:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 771              		.loc 1 954 0
 772 0100 05B0     		add	sp, sp, #20
 773              	.LCFI13:
 774              		.cfi_def_cfa_offset 20
 775              		@ sp needed
 776 0102 F0BD     		pop	{r4, r5, r6, r7, pc}
 777              	.LVL94:
 778              	.L60:
 779              		.align	2
 780              	.L59:
 781 0104 04ED00E0 		.word	-536810236
 782              		.cfi_endproc
 783              	.LFE35:
 785              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 786              		.align	2
 787              		.global	xQueueGenericSendFromISR
 788              		.thumb
 789              		.thumb_func
 791              	xQueueGenericSendFromISR:
 792              	.LFB36:
 958:FreeRTOS/Src/queue.c **** BaseType_t xReturn;
 793              		.loc 1 958 0
 794              		.cfi_startproc
 795              		@ args = 0, pretend = 0, frame = 0
 796              		@ frame_needed = 0, uses_anonymous_args = 0
 797              	.LVL95:
 798 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 799              	.LCFI14:
 800              		.cfi_def_cfa_offset 24
 801              		.cfi_offset 3, -24
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 58


 802              		.cfi_offset 4, -20
 803              		.cfi_offset 5, -16
 804              		.cfi_offset 6, -12
 805              		.cfi_offset 7, -8
 806              		.cfi_offset 14, -4
 807              	.LVL96:
 808              	.LBB25:
 809              	.LBB26:
 810              		.file 2 "FreeRTOS/ARM_CM3/portmacro.h"
   1:FreeRTOS/ARM_CM3/portmacro.h **** /*
   2:FreeRTOS/ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.1.1
   3:FreeRTOS/ARM_CM3/portmacro.h ****  * Copyright (C) 2018 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/ARM_CM3/portmacro.h ****  *
   5:FreeRTOS/ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:FreeRTOS/ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:FreeRTOS/ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:FreeRTOS/ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:FreeRTOS/ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:FreeRTOS/ARM_CM3/portmacro.h ****  * subject to the following conditions:
  11:FreeRTOS/ARM_CM3/portmacro.h ****  *
  12:FreeRTOS/ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:FreeRTOS/ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  14:FreeRTOS/ARM_CM3/portmacro.h ****  *
  15:FreeRTOS/ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:FreeRTOS/ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:FreeRTOS/ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:FreeRTOS/ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:FreeRTOS/ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:FreeRTOS/ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:FreeRTOS/ARM_CM3/portmacro.h ****  *
  22:FreeRTOS/ARM_CM3/portmacro.h ****  * http://www.FreeRTOS.org
  23:FreeRTOS/ARM_CM3/portmacro.h ****  * http://aws.amazon.com/freertos
  24:FreeRTOS/ARM_CM3/portmacro.h ****  *
  25:FreeRTOS/ARM_CM3/portmacro.h ****  * 1 tab == 4 spaces!
  26:FreeRTOS/ARM_CM3/portmacro.h ****  */
  27:FreeRTOS/ARM_CM3/portmacro.h **** 
  28:FreeRTOS/ARM_CM3/portmacro.h **** 
  29:FreeRTOS/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  30:FreeRTOS/ARM_CM3/portmacro.h **** #define PORTMACRO_H
  31:FreeRTOS/ARM_CM3/portmacro.h **** 
  32:FreeRTOS/ARM_CM3/portmacro.h **** #ifdef __cplusplus
  33:FreeRTOS/ARM_CM3/portmacro.h **** extern "C" {
  34:FreeRTOS/ARM_CM3/portmacro.h **** #endif
  35:FreeRTOS/ARM_CM3/portmacro.h **** 
  36:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  37:FreeRTOS/ARM_CM3/portmacro.h ****  * Port specific definitions.
  38:FreeRTOS/ARM_CM3/portmacro.h ****  *
  39:FreeRTOS/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:FreeRTOS/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  41:FreeRTOS/ARM_CM3/portmacro.h ****  *
  42:FreeRTOS/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  43:FreeRTOS/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  44:FreeRTOS/ARM_CM3/portmacro.h ****  */
  45:FreeRTOS/ARM_CM3/portmacro.h **** 
  46:FreeRTOS/ARM_CM3/portmacro.h **** /* Type definitions. */
  47:FreeRTOS/ARM_CM3/portmacro.h **** #define portCHAR		char
  48:FreeRTOS/ARM_CM3/portmacro.h **** #define portFLOAT		float
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 59


  49:FreeRTOS/ARM_CM3/portmacro.h **** #define portDOUBLE		double
  50:FreeRTOS/ARM_CM3/portmacro.h **** #define portLONG		long
  51:FreeRTOS/ARM_CM3/portmacro.h **** #define portSHORT		short
  52:FreeRTOS/ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:FreeRTOS/ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  54:FreeRTOS/ARM_CM3/portmacro.h **** 
  55:FreeRTOS/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:FreeRTOS/ARM_CM3/portmacro.h **** typedef long BaseType_t;
  57:FreeRTOS/ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  58:FreeRTOS/ARM_CM3/portmacro.h **** 
  59:FreeRTOS/ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:FreeRTOS/ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
  61:FreeRTOS/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:FreeRTOS/ARM_CM3/portmacro.h **** #else
  63:FreeRTOS/ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
  64:FreeRTOS/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:FreeRTOS/ARM_CM3/portmacro.h **** 
  66:FreeRTOS/ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:FreeRTOS/ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
  68:FreeRTOS/ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:FreeRTOS/ARM_CM3/portmacro.h **** #endif
  70:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  71:FreeRTOS/ARM_CM3/portmacro.h **** 
  72:FreeRTOS/ARM_CM3/portmacro.h **** /* Architecture specifics. */
  73:FreeRTOS/ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:FreeRTOS/ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:FreeRTOS/ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  77:FreeRTOS/ARM_CM3/portmacro.h **** 
  78:FreeRTOS/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  79:FreeRTOS/ARM_CM3/portmacro.h **** #define portYIELD() 															\
  80:FreeRTOS/ARM_CM3/portmacro.h **** {																				\
  81:FreeRTOS/ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:FreeRTOS/ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:FreeRTOS/ARM_CM3/portmacro.h **** 																				\
  84:FreeRTOS/ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:FreeRTOS/ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:FreeRTOS/ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:FreeRTOS/ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
  88:FreeRTOS/ARM_CM3/portmacro.h **** }
  89:FreeRTOS/ARM_CM3/portmacro.h **** 
  90:FreeRTOS/ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:FreeRTOS/ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:FreeRTOS/ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:FreeRTOS/ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  95:FreeRTOS/ARM_CM3/portmacro.h **** 
  96:FreeRTOS/ARM_CM3/portmacro.h **** /* Critical section management. */
  97:FreeRTOS/ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
  98:FreeRTOS/ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
  99:FreeRTOS/ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:FreeRTOS/ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:FreeRTOS/ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:FreeRTOS/ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:FreeRTOS/ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:FreeRTOS/ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:FreeRTOS/ARM_CM3/portmacro.h **** 
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 60


 106:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 107:FreeRTOS/ARM_CM3/portmacro.h **** 
 108:FreeRTOS/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:FreeRTOS/ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:FreeRTOS/ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 111:FreeRTOS/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:FreeRTOS/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 114:FreeRTOS/ARM_CM3/portmacro.h **** 
 115:FreeRTOS/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 116:FreeRTOS/ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:FreeRTOS/ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:FreeRTOS/ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:FreeRTOS/ARM_CM3/portmacro.h **** #endif
 120:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 121:FreeRTOS/ARM_CM3/portmacro.h **** 
 122:FreeRTOS/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 123:FreeRTOS/ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:FreeRTOS/ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:FreeRTOS/ARM_CM3/portmacro.h **** #endif
 126:FreeRTOS/ARM_CM3/portmacro.h **** 
 127:FreeRTOS/ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:FreeRTOS/ARM_CM3/portmacro.h **** 
 129:FreeRTOS/ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 130:FreeRTOS/ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:FreeRTOS/ARM_CM3/portmacro.h **** 	{
 132:FreeRTOS/ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 133:FreeRTOS/ARM_CM3/portmacro.h **** 
 134:FreeRTOS/ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:FreeRTOS/ARM_CM3/portmacro.h **** 		return ucReturn;
 136:FreeRTOS/ARM_CM3/portmacro.h **** 	}
 137:FreeRTOS/ARM_CM3/portmacro.h **** 
 138:FreeRTOS/ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 139:FreeRTOS/ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:FreeRTOS/ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:FreeRTOS/ARM_CM3/portmacro.h **** 	#endif
 142:FreeRTOS/ARM_CM3/portmacro.h **** 
 143:FreeRTOS/ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:FreeRTOS/ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:FreeRTOS/ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:FreeRTOS/ARM_CM3/portmacro.h **** 
 147:FreeRTOS/ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:FreeRTOS/ARM_CM3/portmacro.h **** 
 149:FreeRTOS/ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:FreeRTOS/ARM_CM3/portmacro.h **** 
 151:FreeRTOS/ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:FreeRTOS/ARM_CM3/portmacro.h **** 
 153:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 154:FreeRTOS/ARM_CM3/portmacro.h **** 
 155:FreeRTOS/ARM_CM3/portmacro.h **** #ifdef configASSERT
 156:FreeRTOS/ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:FreeRTOS/ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:FreeRTOS/ARM_CM3/portmacro.h **** #endif
 159:FreeRTOS/ARM_CM3/portmacro.h **** 
 160:FreeRTOS/ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 161:FreeRTOS/ARM_CM3/portmacro.h **** #define portNOP()
 162:FreeRTOS/ARM_CM3/portmacro.h **** 
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 61


 163:FreeRTOS/ARM_CM3/portmacro.h **** #define portINLINE	__inline
 164:FreeRTOS/ARM_CM3/portmacro.h **** 
 165:FreeRTOS/ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 166:FreeRTOS/ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:FreeRTOS/ARM_CM3/portmacro.h **** #endif
 168:FreeRTOS/ARM_CM3/portmacro.h **** 
 169:FreeRTOS/ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:FreeRTOS/ARM_CM3/portmacro.h **** {
 171:FreeRTOS/ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:FreeRTOS/ARM_CM3/portmacro.h **** BaseType_t xReturn;
 173:FreeRTOS/ARM_CM3/portmacro.h **** 
 174:FreeRTOS/ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:FreeRTOS/ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:FreeRTOS/ARM_CM3/portmacro.h **** 
 177:FreeRTOS/ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:FreeRTOS/ARM_CM3/portmacro.h **** 	{
 179:FreeRTOS/ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 180:FreeRTOS/ARM_CM3/portmacro.h **** 	}
 181:FreeRTOS/ARM_CM3/portmacro.h **** 	else
 182:FreeRTOS/ARM_CM3/portmacro.h **** 	{
 183:FreeRTOS/ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 184:FreeRTOS/ARM_CM3/portmacro.h **** 	}
 185:FreeRTOS/ARM_CM3/portmacro.h **** 
 186:FreeRTOS/ARM_CM3/portmacro.h **** 	return xReturn;
 187:FreeRTOS/ARM_CM3/portmacro.h **** }
 188:FreeRTOS/ARM_CM3/portmacro.h **** 
 189:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 190:FreeRTOS/ARM_CM3/portmacro.h **** 
 191:FreeRTOS/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:FreeRTOS/ARM_CM3/portmacro.h **** {
 193:FreeRTOS/ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 194:FreeRTOS/ARM_CM3/portmacro.h **** 
 195:FreeRTOS/ARM_CM3/portmacro.h **** 	__asm volatile
 196:FreeRTOS/ARM_CM3/portmacro.h **** 	(
 197:FreeRTOS/ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n" \
 198:FreeRTOS/ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:FreeRTOS/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 200:FreeRTOS/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 201:FreeRTOS/ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:FreeRTOS/ARM_CM3/portmacro.h **** 	);
 203:FreeRTOS/ARM_CM3/portmacro.h **** }
 204:FreeRTOS/ARM_CM3/portmacro.h **** 
 205:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 206:FreeRTOS/ARM_CM3/portmacro.h **** 
 207:FreeRTOS/ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:FreeRTOS/ARM_CM3/portmacro.h **** {
 209:FreeRTOS/ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:FreeRTOS/ARM_CM3/portmacro.h **** 
 211:FreeRTOS/ARM_CM3/portmacro.h **** 	__asm volatile
 811              		.loc 2 211 0
 812              		.syntax unified
 813              	@ 211 "FreeRTOS/ARM_CM3/portmacro.h" 1
 814 0002 EFF31186 			mrs r6, basepri											
 815 0006 4FF0BF04 		mov r4, #191												
 816 000a 84F31188 		msr basepri, r4											
 817 000e BFF36F8F 		isb														
 818 0012 BFF34F8F 		dsb														
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 62


 819              	
 820              	@ 0 "" 2
 821              		.thumb
 822              		.syntax unified
 823              	.LBE26:
 824              	.LBE25:
 990:FreeRTOS/Src/queue.c **** 		{
 825              		.loc 1 990 0
 826 0016 856B     		ldr	r5, [r0, #56]
 827 0018 C46B     		ldr	r4, [r0, #60]
 828 001a A542     		cmp	r5, r4
 829 001c 01D3     		bcc	.L62
 990:FreeRTOS/Src/queue.c **** 		{
 830              		.loc 1 990 0 is_stmt 0 discriminator 1
 831 001e 022B     		cmp	r3, #2
 832 0020 1BD1     		bne	.L65
 833              	.L62:
 834 0022 1746     		mov	r7, r2
 835 0024 0546     		mov	r5, r0
 836              	.LBB27:
 992:FreeRTOS/Src/queue.c **** 
 837              		.loc 1 992 0 is_stmt 1
 838 0026 90F84540 		ldrb	r4, [r0, #69]	@ zero_extendqisi2
 839 002a 64B2     		sxtb	r4, r4
 840              	.LVL97:
1001:FreeRTOS/Src/queue.c **** 
 841              		.loc 1 1001 0
 842 002c 1A46     		mov	r2, r3
 843              	.LVL98:
 844 002e FFF7FEFF 		bl	prvCopyDataToQueue
 845              	.LVL99:
1005:FreeRTOS/Src/queue.c **** 			{
 846              		.loc 1 1005 0
 847 0032 B4F1FF3F 		cmp	r4, #-1
 848 0036 0AD1     		bne	.L64
1060:FreeRTOS/Src/queue.c **** 					{
 849              		.loc 1 1060 0
 850 0038 6B6A     		ldr	r3, [r5, #36]
 851 003a 83B1     		cbz	r3, .L66
1062:FreeRTOS/Src/queue.c **** 						{
 852              		.loc 1 1062 0
 853 003c 05F12400 		add	r0, r5, #36
 854 0040 FFF7FEFF 		bl	xTaskRemoveFromEventList
 855              	.LVL100:
 856 0044 68B1     		cbz	r0, .L67
1066:FreeRTOS/Src/queue.c **** 							{
 857              		.loc 1 1066 0
 858 0046 77B1     		cbz	r7, .L68
1068:FreeRTOS/Src/queue.c **** 							}
 859              		.loc 1 1068 0
 860 0048 0120     		movs	r0, #1
 861 004a 3860     		str	r0, [r7]
 862 004c 0CE0     		b	.L63
 863              	.L64:
1091:FreeRTOS/Src/queue.c **** 			}
 864              		.loc 1 1091 0
 865 004e 0134     		adds	r4, r4, #1
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 63


 866              	.LVL101:
 867 0050 64B2     		sxtb	r4, r4
 868              	.LVL102:
 869 0052 85F84540 		strb	r4, [r5, #69]
1094:FreeRTOS/Src/queue.c **** 		}
 870              		.loc 1 1094 0
 871 0056 0120     		movs	r0, #1
 872 0058 06E0     		b	.L63
 873              	.LVL103:
 874              	.L65:
 875              	.LBE27:
1099:FreeRTOS/Src/queue.c **** 		}
 876              		.loc 1 1099 0
 877 005a 0020     		movs	r0, #0
 878              	.LVL104:
 879 005c 04E0     		b	.L63
 880              	.LVL105:
 881              	.L66:
 882              	.LBB28:
1094:FreeRTOS/Src/queue.c **** 		}
 883              		.loc 1 1094 0
 884 005e 0120     		movs	r0, #1
 885 0060 02E0     		b	.L63
 886              	.L67:
 887 0062 0120     		movs	r0, #1
 888 0064 00E0     		b	.L63
 889              	.L68:
 890 0066 0120     		movs	r0, #1
 891              	.LVL106:
 892              	.L63:
 893              	.LBE28:
 894              	.LBB29:
 895              	.LBB30:
 212:FreeRTOS/ARM_CM3/portmacro.h **** 	(
 213:FreeRTOS/ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:FreeRTOS/ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n" \
 215:FreeRTOS/ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:FreeRTOS/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 217:FreeRTOS/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 218:FreeRTOS/ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:FreeRTOS/ARM_CM3/portmacro.h **** 	);
 220:FreeRTOS/ARM_CM3/portmacro.h **** 
 221:FreeRTOS/ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:FreeRTOS/ARM_CM3/portmacro.h **** 	warnings. */
 223:FreeRTOS/ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 224:FreeRTOS/ARM_CM3/portmacro.h **** }
 225:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 226:FreeRTOS/ARM_CM3/portmacro.h **** 
 227:FreeRTOS/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:FreeRTOS/ARM_CM3/portmacro.h **** {
 229:FreeRTOS/ARM_CM3/portmacro.h **** 	__asm volatile
 896              		.loc 2 229 0
 897              		.syntax unified
 898              	@ 229 "FreeRTOS/ARM_CM3/portmacro.h" 1
 899 0068 86F31188 			msr basepri, r6	
 900              	@ 0 "" 2
 901              	.LVL107:
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 64


 902              		.thumb
 903              		.syntax unified
 904              	.LBE30:
 905              	.LBE29:
1105:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 906              		.loc 1 1105 0
 907 006c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 908              		.cfi_endproc
 909              	.LFE36:
 911 006e 00BF     		.section	.text.xQueueGiveFromISR,"ax",%progbits
 912              		.align	2
 913              		.global	xQueueGiveFromISR
 914              		.thumb
 915              		.thumb_func
 917              	xQueueGiveFromISR:
 918              	.LFB37:
1109:FreeRTOS/Src/queue.c **** BaseType_t xReturn;
 919              		.loc 1 1109 0
 920              		.cfi_startproc
 921              		@ args = 0, pretend = 0, frame = 0
 922              		@ frame_needed = 0, uses_anonymous_args = 0
 923              	.LVL108:
 924 0000 38B5     		push	{r3, r4, r5, lr}
 925              	.LCFI15:
 926              		.cfi_def_cfa_offset 16
 927              		.cfi_offset 3, -16
 928              		.cfi_offset 4, -12
 929              		.cfi_offset 5, -8
 930              		.cfi_offset 14, -4
 931              	.LVL109:
 932              	.LBB31:
 933              	.LBB32:
 211:FreeRTOS/ARM_CM3/portmacro.h **** 	(
 934              		.loc 2 211 0
 935              		.syntax unified
 936              	@ 211 "FreeRTOS/ARM_CM3/portmacro.h" 1
 937 0002 EFF31184 			mrs r4, basepri											
 938 0006 4FF0BF03 		mov r3, #191												
 939 000a 83F31188 		msr basepri, r3											
 940 000e BFF36F8F 		isb														
 941 0012 BFF34F8F 		dsb														
 942              	
 943              	@ 0 "" 2
 944              		.thumb
 945              		.syntax unified
 946              	.LBE32:
 947              	.LBE31:
 948              	.LBB33:
1149:FreeRTOS/Src/queue.c **** 
 949              		.loc 1 1149 0
 950 0016 826B     		ldr	r2, [r0, #56]
 951              	.LVL110:
1154:FreeRTOS/Src/queue.c **** 		{
 952              		.loc 1 1154 0
 953 0018 C36B     		ldr	r3, [r0, #60]
 954 001a 9A42     		cmp	r2, r3
 955 001c 18D2     		bcs	.L73
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 65


 956              	.LBB34:
1156:FreeRTOS/Src/queue.c **** 
 957              		.loc 1 1156 0
 958 001e 90F84530 		ldrb	r3, [r0, #69]	@ zero_extendqisi2
 959 0022 5BB2     		sxtb	r3, r3
 960              	.LVL111:
1166:FreeRTOS/Src/queue.c **** 
 961              		.loc 1 1166 0
 962 0024 0132     		adds	r2, r2, #1
 963              	.LVL112:
 964 0026 8263     		str	r2, [r0, #56]
1170:FreeRTOS/Src/queue.c **** 			{
 965              		.loc 1 1170 0
 966 0028 B3F1FF3F 		cmp	r3, #-1
 967 002c 0AD1     		bne	.L72
1225:FreeRTOS/Src/queue.c **** 					{
 968              		.loc 1 1225 0
 969 002e 436A     		ldr	r3, [r0, #36]
 970              	.LVL113:
 971 0030 83B1     		cbz	r3, .L74
 972 0032 0D46     		mov	r5, r1
1227:FreeRTOS/Src/queue.c **** 						{
 973              		.loc 1 1227 0
 974 0034 2430     		adds	r0, r0, #36
 975              	.LVL114:
 976 0036 FFF7FEFF 		bl	xTaskRemoveFromEventList
 977              	.LVL115:
 978 003a 68B1     		cbz	r0, .L75
1231:FreeRTOS/Src/queue.c **** 							{
 979              		.loc 1 1231 0
 980 003c 75B1     		cbz	r5, .L76
1233:FreeRTOS/Src/queue.c **** 							}
 981              		.loc 1 1233 0
 982 003e 0120     		movs	r0, #1
 983 0040 2860     		str	r0, [r5]
 984 0042 0CE0     		b	.L71
 985              	.LVL116:
 986              	.L72:
1256:FreeRTOS/Src/queue.c **** 			}
 987              		.loc 1 1256 0
 988 0044 0133     		adds	r3, r3, #1
 989              	.LVL117:
 990 0046 5BB2     		sxtb	r3, r3
 991              	.LVL118:
 992 0048 80F84530 		strb	r3, [r0, #69]
1259:FreeRTOS/Src/queue.c **** 		}
 993              		.loc 1 1259 0
 994 004c 0120     		movs	r0, #1
 995              	.LVL119:
 996 004e 06E0     		b	.L71
 997              	.LVL120:
 998              	.L73:
 999              	.LBE34:
1264:FreeRTOS/Src/queue.c **** 		}
 1000              		.loc 1 1264 0
 1001 0050 0020     		movs	r0, #0
 1002              	.LVL121:
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 66


 1003 0052 04E0     		b	.L71
 1004              	.LVL122:
 1005              	.L74:
 1006              	.LBB35:
1259:FreeRTOS/Src/queue.c **** 		}
 1007              		.loc 1 1259 0
 1008 0054 0120     		movs	r0, #1
 1009              	.LVL123:
 1010 0056 02E0     		b	.L71
 1011              	.LVL124:
 1012              	.L75:
 1013 0058 0120     		movs	r0, #1
 1014 005a 00E0     		b	.L71
 1015              	.L76:
 1016 005c 0120     		movs	r0, #1
 1017              	.LVL125:
 1018              	.L71:
 1019              	.LBE35:
 1020              	.LBE33:
 1021              	.LBB36:
 1022              	.LBB37:
 1023              		.loc 2 229 0
 1024              		.syntax unified
 1025              	@ 229 "FreeRTOS/ARM_CM3/portmacro.h" 1
 1026 005e 84F31188 			msr basepri, r4	
 1027              	@ 0 "" 2
 1028              	.LVL126:
 1029              		.thumb
 1030              		.syntax unified
 1031              	.LBE37:
 1032              	.LBE36:
1270:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 1033              		.loc 1 1270 0
 1034 0062 38BD     		pop	{r3, r4, r5, pc}
 1035              		.cfi_endproc
 1036              	.LFE37:
 1038              		.section	.text.xQueueReceive,"ax",%progbits
 1039              		.align	2
 1040              		.global	xQueueReceive
 1041              		.thumb
 1042              		.thumb_func
 1044              	xQueueReceive:
 1045              	.LFB38:
1274:FreeRTOS/Src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1046              		.loc 1 1274 0
 1047              		.cfi_startproc
 1048              		@ args = 0, pretend = 0, frame = 16
 1049              		@ frame_needed = 0, uses_anonymous_args = 0
 1050              	.LVL127:
 1051 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1052              	.LCFI16:
 1053              		.cfi_def_cfa_offset 20
 1054              		.cfi_offset 4, -20
 1055              		.cfi_offset 5, -16
 1056              		.cfi_offset 6, -12
 1057              		.cfi_offset 7, -8
 1058              		.cfi_offset 14, -4
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 67


 1059 0002 85B0     		sub	sp, sp, #20
 1060              	.LCFI17:
 1061              		.cfi_def_cfa_offset 40
 1062 0004 0446     		mov	r4, r0
 1063 0006 0F46     		mov	r7, r1
 1064 0008 0192     		str	r2, [sp, #4]
 1065              	.LVL128:
1275:FreeRTOS/Src/queue.c **** TimeOut_t xTimeOut;
 1066              		.loc 1 1275 0
 1067 000a 0026     		movs	r6, #0
 1068              	.LVL129:
 1069              	.L79:
1299:FreeRTOS/Src/queue.c **** 		{
 1070              		.loc 1 1299 0
 1071 000c FFF7FEFF 		bl	vPortEnterCritical
 1072              	.LVL130:
 1073              	.LBB38:
1301:FreeRTOS/Src/queue.c **** 
 1074              		.loc 1 1301 0
 1075 0010 A56B     		ldr	r5, [r4, #56]
 1076              	.LVL131:
1305:FreeRTOS/Src/queue.c **** 			{
 1077              		.loc 1 1305 0
 1078 0012 C5B1     		cbz	r5, .L80
1308:FreeRTOS/Src/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
 1079              		.loc 1 1308 0
 1080 0014 3946     		mov	r1, r7
 1081 0016 2046     		mov	r0, r4
 1082 0018 FFF7FEFF 		bl	prvCopyDataFromQueue
 1083              	.LVL132:
1310:FreeRTOS/Src/queue.c **** 
 1084              		.loc 1 1310 0
 1085 001c 013D     		subs	r5, r5, #1
 1086              	.LVL133:
 1087 001e A563     		str	r5, [r4, #56]
1315:FreeRTOS/Src/queue.c **** 				{
 1088              		.loc 1 1315 0
 1089 0020 2369     		ldr	r3, [r4, #16]
 1090 0022 63B1     		cbz	r3, .L81
1317:FreeRTOS/Src/queue.c **** 					{
 1091              		.loc 1 1317 0
 1092 0024 04F11000 		add	r0, r4, #16
 1093 0028 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1094              	.LVL134:
 1095 002c 38B1     		cbz	r0, .L81
1319:FreeRTOS/Src/queue.c **** 					}
 1096              		.loc 1 1319 0
 1097 002e 4FF08052 		mov	r2, #268435456
 1098 0032 304B     		ldr	r3, .L91
 1099 0034 1A60     		str	r2, [r3]
 1100              		.syntax unified
 1101              	@ 1319 "FreeRTOS/Src/queue.c" 1
 1102 0036 BFF34F8F 		dsb
 1103              	@ 0 "" 2
 1104              	@ 1319 "FreeRTOS/Src/queue.c" 1
 1105 003a BFF36F8F 		isb
 1106              	@ 0 "" 2
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 68


 1107              		.thumb
 1108              		.syntax unified
 1109              	.L81:
1331:FreeRTOS/Src/queue.c **** 				return pdPASS;
 1110              		.loc 1 1331 0
 1111 003e FFF7FEFF 		bl	vPortExitCritical
 1112              	.LVL135:
1332:FreeRTOS/Src/queue.c **** 			}
 1113              		.loc 1 1332 0
 1114 0042 0120     		movs	r0, #1
 1115 0044 53E0     		b	.L82
 1116              	.LVL136:
 1117              	.L80:
1336:FreeRTOS/Src/queue.c **** 				{
 1118              		.loc 1 1336 0
 1119 0046 019B     		ldr	r3, [sp, #4]
 1120 0048 1BB9     		cbnz	r3, .L83
1340:FreeRTOS/Src/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 1121              		.loc 1 1340 0
 1122 004a FFF7FEFF 		bl	vPortExitCritical
 1123              	.LVL137:
1342:FreeRTOS/Src/queue.c **** 				}
 1124              		.loc 1 1342 0
 1125 004e 0020     		movs	r0, #0
 1126 0050 4DE0     		b	.L82
 1127              	.L83:
1344:FreeRTOS/Src/queue.c **** 				{
 1128              		.loc 1 1344 0
 1129 0052 1EB9     		cbnz	r6, .L84
1348:FreeRTOS/Src/queue.c **** 					xEntryTimeSet = pdTRUE;
 1130              		.loc 1 1348 0
 1131 0054 02A8     		add	r0, sp, #8
 1132 0056 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 1133              	.LVL138:
1349:FreeRTOS/Src/queue.c **** 				}
 1134              		.loc 1 1349 0
 1135 005a 0126     		movs	r6, #1
 1136              	.LVL139:
 1137              	.L84:
 1138              	.LBE38:
1358:FreeRTOS/Src/queue.c **** 
 1139              		.loc 1 1358 0
 1140 005c FFF7FEFF 		bl	vPortExitCritical
 1141              	.LVL140:
1363:FreeRTOS/Src/queue.c **** 		prvLockQueue( pxQueue );
 1142              		.loc 1 1363 0
 1143 0060 FFF7FEFF 		bl	vTaskSuspendAll
 1144              	.LVL141:
1364:FreeRTOS/Src/queue.c **** 
 1145              		.loc 1 1364 0
 1146 0064 FFF7FEFF 		bl	vPortEnterCritical
 1147              	.LVL142:
 1148 0068 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 1149 006c 5BB2     		sxtb	r3, r3
 1150 006e B3F1FF3F 		cmp	r3, #-1
 1151 0072 02D1     		bne	.L85
1364:FreeRTOS/Src/queue.c **** 
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 69


 1152              		.loc 1 1364 0 is_stmt 0 discriminator 1
 1153 0074 0023     		movs	r3, #0
 1154 0076 84F84430 		strb	r3, [r4, #68]
 1155              	.L85:
1364:FreeRTOS/Src/queue.c **** 
 1156              		.loc 1 1364 0 discriminator 3
 1157 007a 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1158 007e 5BB2     		sxtb	r3, r3
 1159 0080 B3F1FF3F 		cmp	r3, #-1
 1160 0084 02D1     		bne	.L86
1364:FreeRTOS/Src/queue.c **** 
 1161              		.loc 1 1364 0 discriminator 4
 1162 0086 0023     		movs	r3, #0
 1163 0088 84F84530 		strb	r3, [r4, #69]
 1164              	.L86:
1364:FreeRTOS/Src/queue.c **** 
 1165              		.loc 1 1364 0 discriminator 6
 1166 008c FFF7FEFF 		bl	vPortExitCritical
 1167              	.LVL143:
1367:FreeRTOS/Src/queue.c **** 		{
 1168              		.loc 1 1367 0 is_stmt 1 discriminator 6
 1169 0090 01A9     		add	r1, sp, #4
 1170              	.LVL144:
 1171 0092 02A8     		add	r0, sp, #8
 1172 0094 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1173              	.LVL145:
 1174 0098 F0B9     		cbnz	r0, .L87
1371:FreeRTOS/Src/queue.c **** 			{
 1175              		.loc 1 1371 0
 1176 009a 2046     		mov	r0, r4
 1177 009c FFF7FEFF 		bl	prvIsQueueEmpty
 1178              	.LVL146:
 1179 00a0 A0B1     		cbz	r0, .L88
1374:FreeRTOS/Src/queue.c **** 				prvUnlockQueue( pxQueue );
 1180              		.loc 1 1374 0
 1181 00a2 0199     		ldr	r1, [sp, #4]
 1182 00a4 04F12400 		add	r0, r4, #36
 1183 00a8 FFF7FEFF 		bl	vTaskPlaceOnEventList
 1184              	.LVL147:
1375:FreeRTOS/Src/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1185              		.loc 1 1375 0
 1186 00ac 2046     		mov	r0, r4
 1187 00ae FFF7FEFF 		bl	prvUnlockQueue
 1188              	.LVL148:
1376:FreeRTOS/Src/queue.c **** 				{
 1189              		.loc 1 1376 0
 1190 00b2 FFF7FEFF 		bl	xTaskResumeAll
 1191              	.LVL149:
 1192 00b6 0028     		cmp	r0, #0
 1193 00b8 A8D1     		bne	.L79
1378:FreeRTOS/Src/queue.c **** 				}
 1194              		.loc 1 1378 0
 1195 00ba 4FF08052 		mov	r2, #268435456
 1196 00be 0D4B     		ldr	r3, .L91
 1197 00c0 1A60     		str	r2, [r3]
 1198              		.syntax unified
 1199              	@ 1378 "FreeRTOS/Src/queue.c" 1
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 70


 1200 00c2 BFF34F8F 		dsb
 1201              	@ 0 "" 2
 1202              	@ 1378 "FreeRTOS/Src/queue.c" 1
 1203 00c6 BFF36F8F 		isb
 1204              	@ 0 "" 2
 1205              		.thumb
 1206              		.syntax unified
 1207 00ca 9FE7     		b	.L79
 1208              	.L88:
1389:FreeRTOS/Src/queue.c **** 				( void ) xTaskResumeAll();
 1209              		.loc 1 1389 0
 1210 00cc 2046     		mov	r0, r4
 1211 00ce FFF7FEFF 		bl	prvUnlockQueue
 1212              	.LVL150:
1390:FreeRTOS/Src/queue.c **** 			}
 1213              		.loc 1 1390 0
 1214 00d2 FFF7FEFF 		bl	xTaskResumeAll
 1215              	.LVL151:
 1216 00d6 99E7     		b	.L79
 1217              	.L87:
1397:FreeRTOS/Src/queue.c **** 			( void ) xTaskResumeAll();
 1218              		.loc 1 1397 0
 1219 00d8 2046     		mov	r0, r4
 1220 00da FFF7FEFF 		bl	prvUnlockQueue
 1221              	.LVL152:
1398:FreeRTOS/Src/queue.c **** 
 1222              		.loc 1 1398 0
 1223 00de FFF7FEFF 		bl	xTaskResumeAll
 1224              	.LVL153:
1400:FreeRTOS/Src/queue.c **** 			{
 1225              		.loc 1 1400 0
 1226 00e2 2046     		mov	r0, r4
 1227 00e4 FFF7FEFF 		bl	prvIsQueueEmpty
 1228              	.LVL154:
 1229 00e8 0028     		cmp	r0, #0
 1230 00ea 8FD0     		beq	.L79
1403:FreeRTOS/Src/queue.c **** 			}
 1231              		.loc 1 1403 0
 1232 00ec 0020     		movs	r0, #0
 1233              	.LVL155:
 1234              	.L82:
1411:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 1235              		.loc 1 1411 0
 1236 00ee 05B0     		add	sp, sp, #20
 1237              	.LCFI18:
 1238              		.cfi_def_cfa_offset 20
 1239              		@ sp needed
 1240 00f0 F0BD     		pop	{r4, r5, r6, r7, pc}
 1241              	.LVL156:
 1242              	.L92:
 1243 00f2 00BF     		.align	2
 1244              	.L91:
 1245 00f4 04ED00E0 		.word	-536810236
 1246              		.cfi_endproc
 1247              	.LFE38:
 1249              		.section	.text.xQueueSemaphoreTake,"ax",%progbits
 1250              		.align	2
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 71


 1251              		.global	xQueueSemaphoreTake
 1252              		.thumb
 1253              		.thumb_func
 1255              	xQueueSemaphoreTake:
 1256              	.LFB39:
1415:FreeRTOS/Src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1257              		.loc 1 1415 0
 1258              		.cfi_startproc
 1259              		@ args = 0, pretend = 0, frame = 16
 1260              		@ frame_needed = 0, uses_anonymous_args = 0
 1261              	.LVL157:
 1262 0000 30B5     		push	{r4, r5, lr}
 1263              	.LCFI19:
 1264              		.cfi_def_cfa_offset 12
 1265              		.cfi_offset 4, -12
 1266              		.cfi_offset 5, -8
 1267              		.cfi_offset 14, -4
 1268 0002 85B0     		sub	sp, sp, #20
 1269              	.LCFI20:
 1270              		.cfi_def_cfa_offset 32
 1271 0004 0446     		mov	r4, r0
 1272 0006 0191     		str	r1, [sp, #4]
 1273              	.LVL158:
1416:FreeRTOS/Src/queue.c **** TimeOut_t xTimeOut;
 1274              		.loc 1 1416 0
 1275 0008 0025     		movs	r5, #0
 1276              	.LVL159:
 1277              	.L94:
1444:FreeRTOS/Src/queue.c **** 		{
 1278              		.loc 1 1444 0
 1279 000a FFF7FEFF 		bl	vPortEnterCritical
 1280              	.LVL160:
 1281              	.LBB39:
1448:FreeRTOS/Src/queue.c **** 
 1282              		.loc 1 1448 0
 1283 000e A36B     		ldr	r3, [r4, #56]
 1284              	.LVL161:
1452:FreeRTOS/Src/queue.c **** 			{
 1285              		.loc 1 1452 0
 1286 0010 A3B1     		cbz	r3, .L95
1458:FreeRTOS/Src/queue.c **** 
 1287              		.loc 1 1458 0
 1288 0012 013B     		subs	r3, r3, #1
 1289              	.LVL162:
 1290 0014 A363     		str	r3, [r4, #56]
1477:FreeRTOS/Src/queue.c **** 				{
 1291              		.loc 1 1477 0
 1292 0016 2369     		ldr	r3, [r4, #16]
 1293              	.LVL163:
 1294 0018 63B1     		cbz	r3, .L96
1479:FreeRTOS/Src/queue.c **** 					{
 1295              		.loc 1 1479 0
 1296 001a 04F11000 		add	r0, r4, #16
 1297 001e FFF7FEFF 		bl	xTaskRemoveFromEventList
 1298              	.LVL164:
 1299 0022 38B1     		cbz	r0, .L96
1481:FreeRTOS/Src/queue.c **** 					}
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 72


 1300              		.loc 1 1481 0
 1301 0024 4FF08052 		mov	r2, #268435456
 1302 0028 2F4B     		ldr	r3, .L106
 1303 002a 1A60     		str	r2, [r3]
 1304              		.syntax unified
 1305              	@ 1481 "FreeRTOS/Src/queue.c" 1
 1306 002c BFF34F8F 		dsb
 1307              	@ 0 "" 2
 1308              	@ 1481 "FreeRTOS/Src/queue.c" 1
 1309 0030 BFF36F8F 		isb
 1310              	@ 0 "" 2
 1311              		.thumb
 1312              		.syntax unified
 1313              	.L96:
1493:FreeRTOS/Src/queue.c **** 				return pdPASS;
 1314              		.loc 1 1493 0
 1315 0034 FFF7FEFF 		bl	vPortExitCritical
 1316              	.LVL165:
1494:FreeRTOS/Src/queue.c **** 			}
 1317              		.loc 1 1494 0
 1318 0038 0120     		movs	r0, #1
 1319 003a 53E0     		b	.L97
 1320              	.LVL166:
 1321              	.L95:
1498:FreeRTOS/Src/queue.c **** 				{
 1322              		.loc 1 1498 0
 1323 003c 019B     		ldr	r3, [sp, #4]
 1324              	.LVL167:
 1325 003e 1BB9     		cbnz	r3, .L98
1511:FreeRTOS/Src/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 1326              		.loc 1 1511 0
 1327 0040 FFF7FEFF 		bl	vPortExitCritical
 1328              	.LVL168:
1513:FreeRTOS/Src/queue.c **** 				}
 1329              		.loc 1 1513 0
 1330 0044 0020     		movs	r0, #0
 1331 0046 4DE0     		b	.L97
 1332              	.L98:
1515:FreeRTOS/Src/queue.c **** 				{
 1333              		.loc 1 1515 0
 1334 0048 1DB9     		cbnz	r5, .L99
1519:FreeRTOS/Src/queue.c **** 					xEntryTimeSet = pdTRUE;
 1335              		.loc 1 1519 0
 1336 004a 02A8     		add	r0, sp, #8
 1337 004c FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 1338              	.LVL169:
1520:FreeRTOS/Src/queue.c **** 				}
 1339              		.loc 1 1520 0
 1340 0050 0125     		movs	r5, #1
 1341              	.LVL170:
 1342              	.L99:
 1343              	.LBE39:
1529:FreeRTOS/Src/queue.c **** 
 1344              		.loc 1 1529 0
 1345 0052 FFF7FEFF 		bl	vPortExitCritical
 1346              	.LVL171:
1534:FreeRTOS/Src/queue.c **** 		prvLockQueue( pxQueue );
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 73


 1347              		.loc 1 1534 0
 1348 0056 FFF7FEFF 		bl	vTaskSuspendAll
 1349              	.LVL172:
1535:FreeRTOS/Src/queue.c **** 
 1350              		.loc 1 1535 0
 1351 005a FFF7FEFF 		bl	vPortEnterCritical
 1352              	.LVL173:
 1353 005e 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 1354 0062 5BB2     		sxtb	r3, r3
 1355 0064 B3F1FF3F 		cmp	r3, #-1
 1356 0068 02D1     		bne	.L100
1535:FreeRTOS/Src/queue.c **** 
 1357              		.loc 1 1535 0 is_stmt 0 discriminator 1
 1358 006a 0023     		movs	r3, #0
 1359 006c 84F84430 		strb	r3, [r4, #68]
 1360              	.L100:
1535:FreeRTOS/Src/queue.c **** 
 1361              		.loc 1 1535 0 discriminator 3
 1362 0070 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1363 0074 5BB2     		sxtb	r3, r3
 1364 0076 B3F1FF3F 		cmp	r3, #-1
 1365 007a 02D1     		bne	.L101
1535:FreeRTOS/Src/queue.c **** 
 1366              		.loc 1 1535 0 discriminator 4
 1367 007c 0023     		movs	r3, #0
 1368 007e 84F84530 		strb	r3, [r4, #69]
 1369              	.L101:
1535:FreeRTOS/Src/queue.c **** 
 1370              		.loc 1 1535 0 discriminator 6
 1371 0082 FFF7FEFF 		bl	vPortExitCritical
 1372              	.LVL174:
1538:FreeRTOS/Src/queue.c **** 		{
 1373              		.loc 1 1538 0 is_stmt 1 discriminator 6
 1374 0086 01A9     		add	r1, sp, #4
 1375              	.LVL175:
 1376 0088 02A8     		add	r0, sp, #8
 1377 008a FFF7FEFF 		bl	xTaskCheckForTimeOut
 1378              	.LVL176:
 1379 008e F0B9     		cbnz	r0, .L102
1544:FreeRTOS/Src/queue.c **** 			{
 1380              		.loc 1 1544 0
 1381 0090 2046     		mov	r0, r4
 1382 0092 FFF7FEFF 		bl	prvIsQueueEmpty
 1383              	.LVL177:
 1384 0096 A0B1     		cbz	r0, .L103
1565:FreeRTOS/Src/queue.c **** 				prvUnlockQueue( pxQueue );
 1385              		.loc 1 1565 0
 1386 0098 0199     		ldr	r1, [sp, #4]
 1387 009a 04F12400 		add	r0, r4, #36
 1388 009e FFF7FEFF 		bl	vTaskPlaceOnEventList
 1389              	.LVL178:
1566:FreeRTOS/Src/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1390              		.loc 1 1566 0
 1391 00a2 2046     		mov	r0, r4
 1392 00a4 FFF7FEFF 		bl	prvUnlockQueue
 1393              	.LVL179:
1567:FreeRTOS/Src/queue.c **** 				{
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 74


 1394              		.loc 1 1567 0
 1395 00a8 FFF7FEFF 		bl	xTaskResumeAll
 1396              	.LVL180:
 1397 00ac 0028     		cmp	r0, #0
 1398 00ae ACD1     		bne	.L94
1569:FreeRTOS/Src/queue.c **** 				}
 1399              		.loc 1 1569 0
 1400 00b0 4FF08052 		mov	r2, #268435456
 1401 00b4 0C4B     		ldr	r3, .L106
 1402 00b6 1A60     		str	r2, [r3]
 1403              		.syntax unified
 1404              	@ 1569 "FreeRTOS/Src/queue.c" 1
 1405 00b8 BFF34F8F 		dsb
 1406              	@ 0 "" 2
 1407              	@ 1569 "FreeRTOS/Src/queue.c" 1
 1408 00bc BFF36F8F 		isb
 1409              	@ 0 "" 2
 1410              		.thumb
 1411              		.syntax unified
 1412 00c0 A3E7     		b	.L94
 1413              	.L103:
1580:FreeRTOS/Src/queue.c **** 				( void ) xTaskResumeAll();
 1414              		.loc 1 1580 0
 1415 00c2 2046     		mov	r0, r4
 1416 00c4 FFF7FEFF 		bl	prvUnlockQueue
 1417              	.LVL181:
1581:FreeRTOS/Src/queue.c **** 			}
 1418              		.loc 1 1581 0
 1419 00c8 FFF7FEFF 		bl	xTaskResumeAll
 1420              	.LVL182:
 1421 00cc 9DE7     		b	.L94
 1422              	.L102:
1587:FreeRTOS/Src/queue.c **** 			( void ) xTaskResumeAll();
 1423              		.loc 1 1587 0
 1424 00ce 2046     		mov	r0, r4
 1425 00d0 FFF7FEFF 		bl	prvUnlockQueue
 1426              	.LVL183:
1588:FreeRTOS/Src/queue.c **** 
 1427              		.loc 1 1588 0
 1428 00d4 FFF7FEFF 		bl	xTaskResumeAll
 1429              	.LVL184:
1594:FreeRTOS/Src/queue.c **** 			{
 1430              		.loc 1 1594 0
 1431 00d8 2046     		mov	r0, r4
 1432 00da FFF7FEFF 		bl	prvIsQueueEmpty
 1433              	.LVL185:
 1434 00de 0028     		cmp	r0, #0
 1435 00e0 93D0     		beq	.L94
1621:FreeRTOS/Src/queue.c **** 			}
 1436              		.loc 1 1621 0
 1437 00e2 0020     		movs	r0, #0
 1438              	.L97:
1629:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 1439              		.loc 1 1629 0
 1440 00e4 05B0     		add	sp, sp, #20
 1441              	.LCFI21:
 1442              		.cfi_def_cfa_offset 12
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 75


 1443              		@ sp needed
 1444 00e6 30BD     		pop	{r4, r5, pc}
 1445              	.LVL186:
 1446              	.L107:
 1447              		.align	2
 1448              	.L106:
 1449 00e8 04ED00E0 		.word	-536810236
 1450              		.cfi_endproc
 1451              	.LFE39:
 1453              		.section	.text.xQueuePeek,"ax",%progbits
 1454              		.align	2
 1455              		.global	xQueuePeek
 1456              		.thumb
 1457              		.thumb_func
 1459              	xQueuePeek:
 1460              	.LFB40:
1633:FreeRTOS/Src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1461              		.loc 1 1633 0
 1462              		.cfi_startproc
 1463              		@ args = 0, pretend = 0, frame = 16
 1464              		@ frame_needed = 0, uses_anonymous_args = 0
 1465              	.LVL187:
 1466 0000 70B5     		push	{r4, r5, r6, lr}
 1467              	.LCFI22:
 1468              		.cfi_def_cfa_offset 16
 1469              		.cfi_offset 4, -16
 1470              		.cfi_offset 5, -12
 1471              		.cfi_offset 6, -8
 1472              		.cfi_offset 14, -4
 1473 0002 84B0     		sub	sp, sp, #16
 1474              	.LCFI23:
 1475              		.cfi_def_cfa_offset 32
 1476 0004 0446     		mov	r4, r0
 1477 0006 0E46     		mov	r6, r1
 1478 0008 0192     		str	r2, [sp, #4]
 1479              	.LVL188:
1634:FreeRTOS/Src/queue.c **** TimeOut_t xTimeOut;
 1480              		.loc 1 1634 0
 1481 000a 0025     		movs	r5, #0
 1482              	.LVL189:
 1483              	.L109:
1659:FreeRTOS/Src/queue.c **** 		{
 1484              		.loc 1 1659 0
 1485 000c FFF7FEFF 		bl	vPortEnterCritical
 1486              	.LVL190:
 1487              	.LBB40:
1661:FreeRTOS/Src/queue.c **** 
 1488              		.loc 1 1661 0
 1489 0010 A36B     		ldr	r3, [r4, #56]
 1490              	.LVL191:
1665:FreeRTOS/Src/queue.c **** 			{
 1491              		.loc 1 1665 0
 1492 0012 C3B1     		cbz	r3, .L110
1670:FreeRTOS/Src/queue.c **** 
 1493              		.loc 1 1670 0
 1494 0014 E568     		ldr	r5, [r4, #12]
 1495              	.LVL192:
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 76


1672:FreeRTOS/Src/queue.c **** 				traceQUEUE_PEEK( pxQueue );
 1496              		.loc 1 1672 0
 1497 0016 3146     		mov	r1, r6
 1498 0018 2046     		mov	r0, r4
 1499 001a FFF7FEFF 		bl	prvCopyDataFromQueue
 1500              	.LVL193:
1676:FreeRTOS/Src/queue.c **** 
 1501              		.loc 1 1676 0
 1502 001e E560     		str	r5, [r4, #12]
1680:FreeRTOS/Src/queue.c **** 				{
 1503              		.loc 1 1680 0
 1504 0020 636A     		ldr	r3, [r4, #36]
 1505 0022 63B1     		cbz	r3, .L111
1682:FreeRTOS/Src/queue.c **** 					{
 1506              		.loc 1 1682 0
 1507 0024 04F12400 		add	r0, r4, #36
 1508 0028 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1509              	.LVL194:
 1510 002c 38B1     		cbz	r0, .L111
1685:FreeRTOS/Src/queue.c **** 					}
 1511              		.loc 1 1685 0
 1512 002e 4FF08052 		mov	r2, #268435456
 1513 0032 304B     		ldr	r3, .L121
 1514 0034 1A60     		str	r2, [r3]
 1515              		.syntax unified
 1516              	@ 1685 "FreeRTOS/Src/queue.c" 1
 1517 0036 BFF34F8F 		dsb
 1518              	@ 0 "" 2
 1519              	@ 1685 "FreeRTOS/Src/queue.c" 1
 1520 003a BFF36F8F 		isb
 1521              	@ 0 "" 2
 1522              		.thumb
 1523              		.syntax unified
 1524              	.L111:
1697:FreeRTOS/Src/queue.c **** 				return pdPASS;
 1525              		.loc 1 1697 0
 1526 003e FFF7FEFF 		bl	vPortExitCritical
 1527              	.LVL195:
1698:FreeRTOS/Src/queue.c **** 			}
 1528              		.loc 1 1698 0
 1529 0042 0120     		movs	r0, #1
 1530 0044 53E0     		b	.L112
 1531              	.LVL196:
 1532              	.L110:
1702:FreeRTOS/Src/queue.c **** 				{
 1533              		.loc 1 1702 0
 1534 0046 019B     		ldr	r3, [sp, #4]
 1535              	.LVL197:
 1536 0048 1BB9     		cbnz	r3, .L113
1706:FreeRTOS/Src/queue.c **** 					traceQUEUE_PEEK_FAILED( pxQueue );
 1537              		.loc 1 1706 0
 1538 004a FFF7FEFF 		bl	vPortExitCritical
 1539              	.LVL198:
1708:FreeRTOS/Src/queue.c **** 				}
 1540              		.loc 1 1708 0
 1541 004e 0020     		movs	r0, #0
 1542 0050 4DE0     		b	.L112
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 77


 1543              	.L113:
1710:FreeRTOS/Src/queue.c **** 				{
 1544              		.loc 1 1710 0
 1545 0052 1DB9     		cbnz	r5, .L114
1715:FreeRTOS/Src/queue.c **** 					xEntryTimeSet = pdTRUE;
 1546              		.loc 1 1715 0
 1547 0054 02A8     		add	r0, sp, #8
 1548 0056 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 1549              	.LVL199:
1716:FreeRTOS/Src/queue.c **** 				}
 1550              		.loc 1 1716 0
 1551 005a 0125     		movs	r5, #1
 1552              	.LVL200:
 1553              	.L114:
 1554              	.LBE40:
1725:FreeRTOS/Src/queue.c **** 
 1555              		.loc 1 1725 0
 1556 005c FFF7FEFF 		bl	vPortExitCritical
 1557              	.LVL201:
1730:FreeRTOS/Src/queue.c **** 		prvLockQueue( pxQueue );
 1558              		.loc 1 1730 0
 1559 0060 FFF7FEFF 		bl	vTaskSuspendAll
 1560              	.LVL202:
1731:FreeRTOS/Src/queue.c **** 
 1561              		.loc 1 1731 0
 1562 0064 FFF7FEFF 		bl	vPortEnterCritical
 1563              	.LVL203:
 1564 0068 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 1565 006c 5BB2     		sxtb	r3, r3
 1566 006e B3F1FF3F 		cmp	r3, #-1
 1567 0072 02D1     		bne	.L115
1731:FreeRTOS/Src/queue.c **** 
 1568              		.loc 1 1731 0 is_stmt 0 discriminator 1
 1569 0074 0023     		movs	r3, #0
 1570 0076 84F84430 		strb	r3, [r4, #68]
 1571              	.L115:
1731:FreeRTOS/Src/queue.c **** 
 1572              		.loc 1 1731 0 discriminator 3
 1573 007a 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1574 007e 5BB2     		sxtb	r3, r3
 1575 0080 B3F1FF3F 		cmp	r3, #-1
 1576 0084 02D1     		bne	.L116
1731:FreeRTOS/Src/queue.c **** 
 1577              		.loc 1 1731 0 discriminator 4
 1578 0086 0023     		movs	r3, #0
 1579 0088 84F84530 		strb	r3, [r4, #69]
 1580              	.L116:
1731:FreeRTOS/Src/queue.c **** 
 1581              		.loc 1 1731 0 discriminator 6
 1582 008c FFF7FEFF 		bl	vPortExitCritical
 1583              	.LVL204:
1734:FreeRTOS/Src/queue.c **** 		{
 1584              		.loc 1 1734 0 is_stmt 1 discriminator 6
 1585 0090 01A9     		add	r1, sp, #4
 1586              	.LVL205:
 1587 0092 02A8     		add	r0, sp, #8
 1588 0094 FFF7FEFF 		bl	xTaskCheckForTimeOut
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 78


 1589              	.LVL206:
 1590 0098 F0B9     		cbnz	r0, .L117
1738:FreeRTOS/Src/queue.c **** 			{
 1591              		.loc 1 1738 0
 1592 009a 2046     		mov	r0, r4
 1593 009c FFF7FEFF 		bl	prvIsQueueEmpty
 1594              	.LVL207:
 1595 00a0 A0B1     		cbz	r0, .L118
1741:FreeRTOS/Src/queue.c **** 				prvUnlockQueue( pxQueue );
 1596              		.loc 1 1741 0
 1597 00a2 0199     		ldr	r1, [sp, #4]
 1598 00a4 04F12400 		add	r0, r4, #36
 1599 00a8 FFF7FEFF 		bl	vTaskPlaceOnEventList
 1600              	.LVL208:
1742:FreeRTOS/Src/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1601              		.loc 1 1742 0
 1602 00ac 2046     		mov	r0, r4
 1603 00ae FFF7FEFF 		bl	prvUnlockQueue
 1604              	.LVL209:
1743:FreeRTOS/Src/queue.c **** 				{
 1605              		.loc 1 1743 0
 1606 00b2 FFF7FEFF 		bl	xTaskResumeAll
 1607              	.LVL210:
 1608 00b6 0028     		cmp	r0, #0
 1609 00b8 A8D1     		bne	.L109
1745:FreeRTOS/Src/queue.c **** 				}
 1610              		.loc 1 1745 0
 1611 00ba 4FF08052 		mov	r2, #268435456
 1612 00be 0D4B     		ldr	r3, .L121
 1613 00c0 1A60     		str	r2, [r3]
 1614              		.syntax unified
 1615              	@ 1745 "FreeRTOS/Src/queue.c" 1
 1616 00c2 BFF34F8F 		dsb
 1617              	@ 0 "" 2
 1618              	@ 1745 "FreeRTOS/Src/queue.c" 1
 1619 00c6 BFF36F8F 		isb
 1620              	@ 0 "" 2
 1621              		.thumb
 1622              		.syntax unified
 1623 00ca 9FE7     		b	.L109
 1624              	.L118:
1756:FreeRTOS/Src/queue.c **** 				( void ) xTaskResumeAll();
 1625              		.loc 1 1756 0
 1626 00cc 2046     		mov	r0, r4
 1627 00ce FFF7FEFF 		bl	prvUnlockQueue
 1628              	.LVL211:
1757:FreeRTOS/Src/queue.c **** 			}
 1629              		.loc 1 1757 0
 1630 00d2 FFF7FEFF 		bl	xTaskResumeAll
 1631              	.LVL212:
 1632 00d6 99E7     		b	.L109
 1633              	.L117:
1764:FreeRTOS/Src/queue.c **** 			( void ) xTaskResumeAll();
 1634              		.loc 1 1764 0
 1635 00d8 2046     		mov	r0, r4
 1636 00da FFF7FEFF 		bl	prvUnlockQueue
 1637              	.LVL213:
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 79


1765:FreeRTOS/Src/queue.c **** 
 1638              		.loc 1 1765 0
 1639 00de FFF7FEFF 		bl	xTaskResumeAll
 1640              	.LVL214:
1767:FreeRTOS/Src/queue.c **** 			{
 1641              		.loc 1 1767 0
 1642 00e2 2046     		mov	r0, r4
 1643 00e4 FFF7FEFF 		bl	prvIsQueueEmpty
 1644              	.LVL215:
 1645 00e8 0028     		cmp	r0, #0
 1646 00ea 8FD0     		beq	.L109
1770:FreeRTOS/Src/queue.c **** 			}
 1647              		.loc 1 1770 0
 1648 00ec 0020     		movs	r0, #0
 1649              	.LVL216:
 1650              	.L112:
1778:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 1651              		.loc 1 1778 0
 1652 00ee 04B0     		add	sp, sp, #16
 1653              	.LCFI24:
 1654              		.cfi_def_cfa_offset 16
 1655              		@ sp needed
 1656 00f0 70BD     		pop	{r4, r5, r6, pc}
 1657              	.LVL217:
 1658              	.L122:
 1659 00f2 00BF     		.align	2
 1660              	.L121:
 1661 00f4 04ED00E0 		.word	-536810236
 1662              		.cfi_endproc
 1663              	.LFE40:
 1665              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 1666              		.align	2
 1667              		.global	xQueueReceiveFromISR
 1668              		.thumb
 1669              		.thumb_func
 1671              	xQueueReceiveFromISR:
 1672              	.LFB41:
1782:FreeRTOS/Src/queue.c **** BaseType_t xReturn;
 1673              		.loc 1 1782 0
 1674              		.cfi_startproc
 1675              		@ args = 0, pretend = 0, frame = 0
 1676              		@ frame_needed = 0, uses_anonymous_args = 0
 1677              	.LVL218:
 1678 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1679              	.LCFI25:
 1680              		.cfi_def_cfa_offset 24
 1681              		.cfi_offset 4, -24
 1682              		.cfi_offset 5, -20
 1683              		.cfi_offset 6, -16
 1684              		.cfi_offset 7, -12
 1685              		.cfi_offset 8, -8
 1686              		.cfi_offset 14, -4
 1687              	.LVL219:
 1688              	.LBB41:
 1689              	.LBB42:
 211:FreeRTOS/ARM_CM3/portmacro.h **** 	(
 1690              		.loc 2 211 0
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 80


 1691              		.syntax unified
 1692              	@ 211 "FreeRTOS/ARM_CM3/portmacro.h" 1
 1693 0004 EFF31186 			mrs r6, basepri											
 1694 0008 4FF0BF03 		mov r3, #191												
 1695 000c 83F31188 		msr basepri, r3											
 1696 0010 BFF36F8F 		isb														
 1697 0014 BFF34F8F 		dsb														
 1698              	
 1699              	@ 0 "" 2
 1700              		.thumb
 1701              		.syntax unified
 1702              	.LBE42:
 1703              	.LBE41:
 1704              	.LBB43:
1808:FreeRTOS/Src/queue.c **** 
 1705              		.loc 1 1808 0
 1706 0018 846B     		ldr	r4, [r0, #56]
 1707              	.LVL220:
1811:FreeRTOS/Src/queue.c **** 		{
 1708              		.loc 1 1811 0
 1709 001a FCB1     		cbz	r4, .L126
 1710 001c 9046     		mov	r8, r2
 1711 001e 0746     		mov	r7, r0
 1712              	.LBB44:
1813:FreeRTOS/Src/queue.c **** 
 1713              		.loc 1 1813 0
 1714 0020 90F84450 		ldrb	r5, [r0, #68]	@ zero_extendqisi2
 1715 0024 6DB2     		sxtb	r5, r5
 1716              	.LVL221:
1817:FreeRTOS/Src/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 1717              		.loc 1 1817 0
 1718 0026 FFF7FEFF 		bl	prvCopyDataFromQueue
 1719              	.LVL222:
1818:FreeRTOS/Src/queue.c **** 
 1720              		.loc 1 1818 0
 1721 002a 013C     		subs	r4, r4, #1
 1722              	.LVL223:
 1723 002c BC63     		str	r4, [r7, #56]
1824:FreeRTOS/Src/queue.c **** 			{
 1724              		.loc 1 1824 0
 1725 002e B5F1FF3F 		cmp	r5, #-1
 1726 0032 0DD1     		bne	.L125
1826:FreeRTOS/Src/queue.c **** 				{
 1727              		.loc 1 1826 0
 1728 0034 3B69     		ldr	r3, [r7, #16]
 1729 0036 9BB1     		cbz	r3, .L127
1828:FreeRTOS/Src/queue.c **** 					{
 1730              		.loc 1 1828 0
 1731 0038 07F11000 		add	r0, r7, #16
 1732 003c FFF7FEFF 		bl	xTaskRemoveFromEventList
 1733              	.LVL224:
 1734 0040 80B1     		cbz	r0, .L128
1832:FreeRTOS/Src/queue.c **** 						{
 1735              		.loc 1 1832 0
 1736 0042 B8F1000F 		cmp	r8, #0
 1737 0046 0FD0     		beq	.L129
1834:FreeRTOS/Src/queue.c **** 						}
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 81


 1738              		.loc 1 1834 0
 1739 0048 0120     		movs	r0, #1
 1740 004a C8F80000 		str	r0, [r8]
 1741 004e 0CE0     		b	.L124
 1742              	.L125:
1855:FreeRTOS/Src/queue.c **** 			}
 1743              		.loc 1 1855 0
 1744 0050 0135     		adds	r5, r5, #1
 1745              	.LVL225:
 1746 0052 6DB2     		sxtb	r5, r5
 1747              	.LVL226:
 1748 0054 87F84450 		strb	r5, [r7, #68]
1858:FreeRTOS/Src/queue.c **** 		}
 1749              		.loc 1 1858 0
 1750 0058 0120     		movs	r0, #1
 1751 005a 06E0     		b	.L124
 1752              	.LVL227:
 1753              	.L126:
 1754              	.LBE44:
1862:FreeRTOS/Src/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 1755              		.loc 1 1862 0
 1756 005c 0020     		movs	r0, #0
 1757              	.LVL228:
 1758 005e 04E0     		b	.L124
 1759              	.LVL229:
 1760              	.L127:
 1761              	.LBB45:
1858:FreeRTOS/Src/queue.c **** 		}
 1762              		.loc 1 1858 0
 1763 0060 0120     		movs	r0, #1
 1764 0062 02E0     		b	.L124
 1765              	.L128:
 1766 0064 0120     		movs	r0, #1
 1767 0066 00E0     		b	.L124
 1768              	.L129:
 1769 0068 0120     		movs	r0, #1
 1770              	.LVL230:
 1771              	.L124:
 1772              	.LBE45:
 1773              	.LBE43:
 1774              	.LBB46:
 1775              	.LBB47:
 1776              		.loc 2 229 0
 1777              		.syntax unified
 1778              	@ 229 "FreeRTOS/ARM_CM3/portmacro.h" 1
 1779 006a 86F31188 			msr basepri, r6	
 1780              	@ 0 "" 2
 1781              	.LVL231:
 1782              		.thumb
 1783              		.syntax unified
 1784              	.LBE47:
 1785              	.LBE46:
1869:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 1786              		.loc 1 1869 0
 1787 006e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1788              		.cfi_endproc
 1789              	.LFE41:
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 82


 1791 0072 00BF     		.section	.text.xQueuePeekFromISR,"ax",%progbits
 1792              		.align	2
 1793              		.global	xQueuePeekFromISR
 1794              		.thumb
 1795              		.thumb_func
 1797              	xQueuePeekFromISR:
 1798              	.LFB42:
1873:FreeRTOS/Src/queue.c **** BaseType_t xReturn;
 1799              		.loc 1 1873 0
 1800              		.cfi_startproc
 1801              		@ args = 0, pretend = 0, frame = 0
 1802              		@ frame_needed = 0, uses_anonymous_args = 0
 1803              	.LVL232:
 1804 0000 70B5     		push	{r4, r5, r6, lr}
 1805              	.LCFI26:
 1806              		.cfi_def_cfa_offset 16
 1807              		.cfi_offset 4, -16
 1808              		.cfi_offset 5, -12
 1809              		.cfi_offset 6, -8
 1810              		.cfi_offset 14, -4
 1811              	.LVL233:
 1812              	.LBB48:
 1813              	.LBB49:
 211:FreeRTOS/ARM_CM3/portmacro.h **** 	(
 1814              		.loc 2 211 0
 1815              		.syntax unified
 1816              	@ 211 "FreeRTOS/ARM_CM3/portmacro.h" 1
 1817 0002 EFF31185 			mrs r5, basepri											
 1818 0006 4FF0BF03 		mov r3, #191												
 1819 000a 83F31188 		msr basepri, r3											
 1820 000e BFF36F8F 		isb														
 1821 0012 BFF34F8F 		dsb														
 1822              	
 1823              	@ 0 "" 2
 1824              		.thumb
 1825              		.syntax unified
 1826              	.LBE49:
 1827              	.LBE48:
1902:FreeRTOS/Src/queue.c **** 		{
 1828              		.loc 1 1902 0
 1829 0016 836B     		ldr	r3, [r0, #56]
 1830 0018 33B1     		cbz	r3, .L133
 1831 001a 0446     		mov	r4, r0
1908:FreeRTOS/Src/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 1832              		.loc 1 1908 0
 1833 001c C668     		ldr	r6, [r0, #12]
 1834              	.LVL234:
1909:FreeRTOS/Src/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 1835              		.loc 1 1909 0
 1836 001e FFF7FEFF 		bl	prvCopyDataFromQueue
 1837              	.LVL235:
1910:FreeRTOS/Src/queue.c **** 
 1838              		.loc 1 1910 0
 1839 0022 E660     		str	r6, [r4, #12]
 1840              	.LVL236:
1912:FreeRTOS/Src/queue.c **** 		}
 1841              		.loc 1 1912 0
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 83


 1842 0024 0120     		movs	r0, #1
 1843 0026 00E0     		b	.L132
 1844              	.LVL237:
 1845              	.L133:
1916:FreeRTOS/Src/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 1846              		.loc 1 1916 0
 1847 0028 0020     		movs	r0, #0
 1848              	.LVL238:
 1849              	.L132:
 1850              	.LBB50:
 1851              	.LBB51:
 1852              		.loc 2 229 0
 1853              		.syntax unified
 1854              	@ 229 "FreeRTOS/ARM_CM3/portmacro.h" 1
 1855 002a 85F31188 			msr basepri, r5	
 1856              	@ 0 "" 2
 1857              	.LVL239:
 1858              		.thumb
 1859              		.syntax unified
 1860              	.LBE51:
 1861              	.LBE50:
1923:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 1862              		.loc 1 1923 0
 1863 002e 70BD     		pop	{r4, r5, r6, pc}
 1864              		.cfi_endproc
 1865              	.LFE42:
 1867              		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 1868              		.align	2
 1869              		.global	uxQueueMessagesWaiting
 1870              		.thumb
 1871              		.thumb_func
 1873              	uxQueueMessagesWaiting:
 1874              	.LFB43:
1927:FreeRTOS/Src/queue.c **** UBaseType_t uxReturn;
 1875              		.loc 1 1927 0
 1876              		.cfi_startproc
 1877              		@ args = 0, pretend = 0, frame = 0
 1878              		@ frame_needed = 0, uses_anonymous_args = 0
 1879              	.LVL240:
 1880 0000 10B5     		push	{r4, lr}
 1881              	.LCFI27:
 1882              		.cfi_def_cfa_offset 8
 1883              		.cfi_offset 4, -8
 1884              		.cfi_offset 14, -4
 1885 0002 0446     		mov	r4, r0
1932:FreeRTOS/Src/queue.c **** 	{
 1886              		.loc 1 1932 0
 1887 0004 FFF7FEFF 		bl	vPortEnterCritical
 1888              	.LVL241:
1934:FreeRTOS/Src/queue.c **** 	}
 1889              		.loc 1 1934 0
 1890 0008 A46B     		ldr	r4, [r4, #56]
 1891              	.LVL242:
1936:FreeRTOS/Src/queue.c **** 
 1892              		.loc 1 1936 0
 1893 000a FFF7FEFF 		bl	vPortExitCritical
 1894              	.LVL243:
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 84


1939:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 1895              		.loc 1 1939 0
 1896 000e 2046     		mov	r0, r4
 1897 0010 10BD     		pop	{r4, pc}
 1898              		.cfi_endproc
 1899              	.LFE43:
 1901 0012 00BF     		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 1902              		.align	2
 1903              		.global	uxQueueSpacesAvailable
 1904              		.thumb
 1905              		.thumb_func
 1907              	uxQueueSpacesAvailable:
 1908              	.LFB44:
1943:FreeRTOS/Src/queue.c **** UBaseType_t uxReturn;
 1909              		.loc 1 1943 0
 1910              		.cfi_startproc
 1911              		@ args = 0, pretend = 0, frame = 0
 1912              		@ frame_needed = 0, uses_anonymous_args = 0
 1913              	.LVL244:
 1914 0000 10B5     		push	{r4, lr}
 1915              	.LCFI28:
 1916              		.cfi_def_cfa_offset 8
 1917              		.cfi_offset 4, -8
 1918              		.cfi_offset 14, -4
 1919 0002 0446     		mov	r4, r0
 1920              	.LVL245:
1949:FreeRTOS/Src/queue.c **** 	{
 1921              		.loc 1 1949 0
 1922 0004 FFF7FEFF 		bl	vPortEnterCritical
 1923              	.LVL246:
1951:FreeRTOS/Src/queue.c **** 	}
 1924              		.loc 1 1951 0
 1925 0008 E36B     		ldr	r3, [r4, #60]
 1926 000a A46B     		ldr	r4, [r4, #56]
 1927              	.LVL247:
 1928 000c 1C1B     		subs	r4, r3, r4
 1929              	.LVL248:
1953:FreeRTOS/Src/queue.c **** 
 1930              		.loc 1 1953 0
 1931 000e FFF7FEFF 		bl	vPortExitCritical
 1932              	.LVL249:
1956:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 1933              		.loc 1 1956 0
 1934 0012 2046     		mov	r0, r4
 1935 0014 10BD     		pop	{r4, pc}
 1936              		.cfi_endproc
 1937              	.LFE44:
 1939 0016 00BF     		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 1940              		.align	2
 1941              		.global	uxQueueMessagesWaitingFromISR
 1942              		.thumb
 1943              		.thumb_func
 1945              	uxQueueMessagesWaitingFromISR:
 1946              	.LFB45:
1960:FreeRTOS/Src/queue.c **** UBaseType_t uxReturn;
 1947              		.loc 1 1960 0
 1948              		.cfi_startproc
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 85


 1949              		@ args = 0, pretend = 0, frame = 0
 1950              		@ frame_needed = 0, uses_anonymous_args = 0
 1951              		@ link register save eliminated.
 1952              	.LVL250:
1965:FreeRTOS/Src/queue.c **** 
 1953              		.loc 1 1965 0
 1954 0000 806B     		ldr	r0, [r0, #56]
 1955              	.LVL251:
1968:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 1956              		.loc 1 1968 0
 1957 0002 7047     		bx	lr
 1958              		.cfi_endproc
 1959              	.LFE45:
 1961              		.section	.text.vQueueDelete,"ax",%progbits
 1962              		.align	2
 1963              		.global	vQueueDelete
 1964              		.thumb
 1965              		.thumb_func
 1967              	vQueueDelete:
 1968              	.LFB46:
1972:FreeRTOS/Src/queue.c **** Queue_t * const pxQueue = xQueue;
 1969              		.loc 1 1972 0
 1970              		.cfi_startproc
 1971              		@ args = 0, pretend = 0, frame = 0
 1972              		@ frame_needed = 0, uses_anonymous_args = 0
 1973              	.LVL252:
 1974 0000 08B5     		push	{r3, lr}
 1975              	.LCFI29:
 1976              		.cfi_def_cfa_offset 8
 1977              		.cfi_offset 3, -8
 1978              		.cfi_offset 14, -4
 1979              	.LVL253:
1988:FreeRTOS/Src/queue.c **** 	}
 1980              		.loc 1 1988 0
 1981 0002 FFF7FEFF 		bl	vPortFree
 1982              	.LVL254:
 1983 0006 08BD     		pop	{r3, pc}
 1984              		.cfi_endproc
 1985              	.LFE46:
 1987              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 1988              		.align	2
 1989              		.global	xQueueIsQueueEmptyFromISR
 1990              		.thumb
 1991              		.thumb_func
 1993              	xQueueIsQueueEmptyFromISR:
 1994              	.LFB51:
2309:FreeRTOS/Src/queue.c **** BaseType_t xReturn;
 1995              		.loc 1 2309 0
 1996              		.cfi_startproc
 1997              		@ args = 0, pretend = 0, frame = 0
 1998              		@ frame_needed = 0, uses_anonymous_args = 0
 1999              		@ link register save eliminated.
 2000              	.LVL255:
2314:FreeRTOS/Src/queue.c **** 	{
 2001              		.loc 1 2314 0
 2002 0000 836B     		ldr	r3, [r0, #56]
 2003 0002 0BB9     		cbnz	r3, .L144
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 86


2316:FreeRTOS/Src/queue.c **** 	}
 2004              		.loc 1 2316 0
 2005 0004 0120     		movs	r0, #1
 2006              	.LVL256:
 2007 0006 7047     		bx	lr
 2008              	.LVL257:
 2009              	.L144:
2320:FreeRTOS/Src/queue.c **** 	}
 2010              		.loc 1 2320 0
 2011 0008 0020     		movs	r0, #0
 2012              	.LVL258:
2324:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
 2013              		.loc 1 2324 0
 2014 000a 7047     		bx	lr
 2015              		.cfi_endproc
 2016              	.LFE51:
 2018              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 2019              		.align	2
 2020              		.global	xQueueIsQueueFullFromISR
 2021              		.thumb
 2022              		.thumb_func
 2024              	xQueueIsQueueFullFromISR:
 2025              	.LFB53:
2346:FreeRTOS/Src/queue.c **** /*-----------------------------------------------------------*/
2347:FreeRTOS/Src/queue.c **** 
2348:FreeRTOS/Src/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
2349:FreeRTOS/Src/queue.c **** {
 2026              		.loc 1 2349 0
 2027              		.cfi_startproc
 2028              		@ args = 0, pretend = 0, frame = 0
 2029              		@ frame_needed = 0, uses_anonymous_args = 0
 2030              		@ link register save eliminated.
 2031              	.LVL259:
2350:FreeRTOS/Src/queue.c **** BaseType_t xReturn;
2351:FreeRTOS/Src/queue.c **** Queue_t * const pxQueue = xQueue;
2352:FreeRTOS/Src/queue.c **** 
2353:FreeRTOS/Src/queue.c **** 	configASSERT( pxQueue );
2354:FreeRTOS/Src/queue.c **** 	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 2032              		.loc 1 2354 0
 2033 0000 826B     		ldr	r2, [r0, #56]
 2034 0002 C36B     		ldr	r3, [r0, #60]
 2035 0004 9A42     		cmp	r2, r3
 2036 0006 01D1     		bne	.L147
2355:FreeRTOS/Src/queue.c **** 	{
2356:FreeRTOS/Src/queue.c **** 		xReturn = pdTRUE;
 2037              		.loc 1 2356 0
 2038 0008 0120     		movs	r0, #1
 2039              	.LVL260:
 2040 000a 7047     		bx	lr
 2041              	.LVL261:
 2042              	.L147:
2357:FreeRTOS/Src/queue.c **** 	}
2358:FreeRTOS/Src/queue.c **** 	else
2359:FreeRTOS/Src/queue.c **** 	{
2360:FreeRTOS/Src/queue.c **** 		xReturn = pdFALSE;
 2043              		.loc 1 2360 0
 2044 000c 0020     		movs	r0, #0
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 87


 2045              	.LVL262:
2361:FreeRTOS/Src/queue.c **** 	}
2362:FreeRTOS/Src/queue.c **** 
2363:FreeRTOS/Src/queue.c **** 	return xReturn;
2364:FreeRTOS/Src/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 2046              		.loc 1 2364 0
 2047 000e 7047     		bx	lr
 2048              		.cfi_endproc
 2049              	.LFE53:
 2051              		.text
 2052              	.Letext0:
 2053              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20160926/lib/gcc/arm-none-eabi/5.4.1/include/stddef.h
 2054              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi/20160926/arm-none-eabi/include/machine/_default_types
 2055              		.file 5 "/usr/local/Cellar/gcc-arm-none-eabi/20160926/arm-none-eabi/include/sys/_stdint.h"
 2056              		.file 6 "FreeRTOS/Inc/list.h"
 2057              		.file 7 "FreeRTOS/Inc/task.h"
 2058              		.file 8 "FreeRTOS/Inc/queue.h"
 2059              		.file 9 "FreeRTOS/Inc/portable.h"
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 88


DEFINED SYMBOLS
                            *ABS*:0000000000000000 queue.c
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:20     .text.prvIsQueueFull:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:24     .text.prvIsQueueFull:0000000000000000 prvIsQueueFull
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:66     .text.prvIsQueueEmpty:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:70     .text.prvIsQueueEmpty:0000000000000000 prvIsQueueEmpty
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:109    .text.prvCopyDataToQueue:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:113    .text.prvCopyDataToQueue:0000000000000000 prvCopyDataToQueue
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:199    .text.prvCopyDataFromQueue:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:203    .text.prvCopyDataFromQueue:0000000000000000 prvCopyDataFromQueue
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:251    .text.prvUnlockQueue:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:255    .text.prvUnlockQueue:0000000000000000 prvUnlockQueue
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:356    .text.xQueueGenericReset:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:361    .text.xQueueGenericReset:0000000000000000 xQueueGenericReset
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:445    .text.xQueueGenericReset:0000000000000068 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:450    .text.prvInitialiseNewQueue:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:454    .text.prvInitialiseNewQueue:0000000000000000 prvInitialiseNewQueue
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:494    .text.xQueueGenericCreate:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:499    .text.xQueueGenericCreate:0000000000000000 xQueueGenericCreate
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:563    .text.xQueueGenericSend:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:568    .text.xQueueGenericSend:0000000000000000 xQueueGenericSend
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:781    .text.xQueueGenericSend:0000000000000104 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:786    .text.xQueueGenericSendFromISR:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:791    .text.xQueueGenericSendFromISR:0000000000000000 xQueueGenericSendFromISR
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:912    .text.xQueueGiveFromISR:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:917    .text.xQueueGiveFromISR:0000000000000000 xQueueGiveFromISR
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:1039   .text.xQueueReceive:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:1044   .text.xQueueReceive:0000000000000000 xQueueReceive
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:1245   .text.xQueueReceive:00000000000000f4 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:1250   .text.xQueueSemaphoreTake:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:1255   .text.xQueueSemaphoreTake:0000000000000000 xQueueSemaphoreTake
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:1449   .text.xQueueSemaphoreTake:00000000000000e8 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:1454   .text.xQueuePeek:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:1459   .text.xQueuePeek:0000000000000000 xQueuePeek
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:1661   .text.xQueuePeek:00000000000000f4 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:1666   .text.xQueueReceiveFromISR:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:1671   .text.xQueueReceiveFromISR:0000000000000000 xQueueReceiveFromISR
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:1792   .text.xQueuePeekFromISR:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:1797   .text.xQueuePeekFromISR:0000000000000000 xQueuePeekFromISR
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:1868   .text.uxQueueMessagesWaiting:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:1873   .text.uxQueueMessagesWaiting:0000000000000000 uxQueueMessagesWaiting
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:1902   .text.uxQueueSpacesAvailable:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:1907   .text.uxQueueSpacesAvailable:0000000000000000 uxQueueSpacesAvailable
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:1940   .text.uxQueueMessagesWaitingFromISR:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:1945   .text.uxQueueMessagesWaitingFromISR:0000000000000000 uxQueueMessagesWaitingFromISR
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:1962   .text.vQueueDelete:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:1967   .text.vQueueDelete:0000000000000000 vQueueDelete
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:1988   .text.xQueueIsQueueEmptyFromISR:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:1993   .text.xQueueIsQueueEmptyFromISR:0000000000000000 xQueueIsQueueEmptyFromISR
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:2019   .text.xQueueIsQueueFullFromISR:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s:2024   .text.xQueueIsQueueFullFromISR:0000000000000000 xQueueIsQueueFullFromISR
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
vPortEnterCritical
vPortExitCritical
memcpy
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpPW9dh.s 			page 89


xTaskRemoveFromEventList
vTaskMissedYield
vListInitialise
pvPortMalloc
vTaskInternalSetTimeOutState
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
xTaskResumeAll
vPortFree
