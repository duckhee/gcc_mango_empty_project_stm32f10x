ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccyj63AJ.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"heap_2.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvHeapInit,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	prvHeapInit:
  25              	.LFB36:
  26              		.file 1 "FreeRTOS/test_Src/heap_2.c"
   1:FreeRTOS/test_Src/heap_2.c **** /*
   2:FreeRTOS/test_Src/heap_2.c ****  * FreeRTOS Kernel V10.1.1
   3:FreeRTOS/test_Src/heap_2.c ****  * Copyright (C) 2018 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/test_Src/heap_2.c ****  *
   5:FreeRTOS/test_Src/heap_2.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:FreeRTOS/test_Src/heap_2.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:FreeRTOS/test_Src/heap_2.c ****  * the Software without restriction, including without limitation the rights to
   8:FreeRTOS/test_Src/heap_2.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:FreeRTOS/test_Src/heap_2.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:FreeRTOS/test_Src/heap_2.c ****  * subject to the following conditions:
  11:FreeRTOS/test_Src/heap_2.c ****  *
  12:FreeRTOS/test_Src/heap_2.c ****  * The above copyright notice and this permission notice shall be included in all
  13:FreeRTOS/test_Src/heap_2.c ****  * copies or substantial portions of the Software.
  14:FreeRTOS/test_Src/heap_2.c ****  *
  15:FreeRTOS/test_Src/heap_2.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:FreeRTOS/test_Src/heap_2.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:FreeRTOS/test_Src/heap_2.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:FreeRTOS/test_Src/heap_2.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:FreeRTOS/test_Src/heap_2.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:FreeRTOS/test_Src/heap_2.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:FreeRTOS/test_Src/heap_2.c ****  *
  22:FreeRTOS/test_Src/heap_2.c ****  * http://www.FreeRTOS.org
  23:FreeRTOS/test_Src/heap_2.c ****  * http://aws.amazon.com/freertos
  24:FreeRTOS/test_Src/heap_2.c ****  *
  25:FreeRTOS/test_Src/heap_2.c ****  * 1 tab == 4 spaces!
  26:FreeRTOS/test_Src/heap_2.c ****  */
  27:FreeRTOS/test_Src/heap_2.c **** 
  28:FreeRTOS/test_Src/heap_2.c **** /*
  29:FreeRTOS/test_Src/heap_2.c ****  * A sample implementation of pvPortMalloc() and vPortFree() that permits
  30:FreeRTOS/test_Src/heap_2.c ****  * allocated blocks to be freed, but does not combine adjacent free blocks
  31:FreeRTOS/test_Src/heap_2.c ****  * into a single larger block (and so will fragment memory).  See heap_4.c for
  32:FreeRTOS/test_Src/heap_2.c ****  * an equivalent that does combine adjacent blocks into single larger blocks.
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccyj63AJ.s 			page 2


  33:FreeRTOS/test_Src/heap_2.c ****  *
  34:FreeRTOS/test_Src/heap_2.c ****  * See heap_1.c, heap_3.c and heap_4.c for alternative implementations, and the
  35:FreeRTOS/test_Src/heap_2.c ****  * memory management pages of http://www.FreeRTOS.org for more information.
  36:FreeRTOS/test_Src/heap_2.c ****  */
  37:FreeRTOS/test_Src/heap_2.c **** #include <stdlib.h>
  38:FreeRTOS/test_Src/heap_2.c **** 
  39:FreeRTOS/test_Src/heap_2.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  40:FreeRTOS/test_Src/heap_2.c **** all the API functions to use the MPU wrappers.  That should only be done when
  41:FreeRTOS/test_Src/heap_2.c **** task.h is included from an application file. */
  42:FreeRTOS/test_Src/heap_2.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  43:FreeRTOS/test_Src/heap_2.c **** 
  44:FreeRTOS/test_Src/heap_2.c **** #include "FreeRTOS.h"
  45:FreeRTOS/test_Src/heap_2.c **** #include "task.h"
  46:FreeRTOS/test_Src/heap_2.c **** 
  47:FreeRTOS/test_Src/heap_2.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  48:FreeRTOS/test_Src/heap_2.c **** 
  49:FreeRTOS/test_Src/heap_2.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 0 )
  50:FreeRTOS/test_Src/heap_2.c **** 	#error This file must not be used if configSUPPORT_DYNAMIC_ALLOCATION is 0
  51:FreeRTOS/test_Src/heap_2.c **** #endif
  52:FreeRTOS/test_Src/heap_2.c **** 
  53:FreeRTOS/test_Src/heap_2.c **** /* A few bytes might be lost to byte aligning the heap start address. */
  54:FreeRTOS/test_Src/heap_2.c **** #define configADJUSTED_HEAP_SIZE	( configTOTAL_HEAP_SIZE - portBYTE_ALIGNMENT )
  55:FreeRTOS/test_Src/heap_2.c **** 
  56:FreeRTOS/test_Src/heap_2.c **** /*
  57:FreeRTOS/test_Src/heap_2.c ****  * Initialises the heap structures before their first use.
  58:FreeRTOS/test_Src/heap_2.c ****  */
  59:FreeRTOS/test_Src/heap_2.c **** static void prvHeapInit( void );
  60:FreeRTOS/test_Src/heap_2.c **** 
  61:FreeRTOS/test_Src/heap_2.c **** /* Allocate the memory for the heap. */
  62:FreeRTOS/test_Src/heap_2.c **** #if( configAPPLICATION_ALLOCATED_HEAP == 1 )
  63:FreeRTOS/test_Src/heap_2.c **** 	/* The application writer has already defined the array used for the RTOS
  64:FreeRTOS/test_Src/heap_2.c **** 	heap - probably so it can be placed in a special segment or address. */
  65:FreeRTOS/test_Src/heap_2.c **** 	extern uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
  66:FreeRTOS/test_Src/heap_2.c **** #else
  67:FreeRTOS/test_Src/heap_2.c **** 	static uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
  68:FreeRTOS/test_Src/heap_2.c **** #endif /* configAPPLICATION_ALLOCATED_HEAP */
  69:FreeRTOS/test_Src/heap_2.c **** 
  70:FreeRTOS/test_Src/heap_2.c **** 
  71:FreeRTOS/test_Src/heap_2.c **** /* Define the linked list structure.  This is used to link free blocks in order
  72:FreeRTOS/test_Src/heap_2.c **** of their size. */
  73:FreeRTOS/test_Src/heap_2.c **** typedef struct A_BLOCK_LINK
  74:FreeRTOS/test_Src/heap_2.c **** {
  75:FreeRTOS/test_Src/heap_2.c **** 	struct A_BLOCK_LINK *pxNextFreeBlock;	/*<< The next free block in the list. */
  76:FreeRTOS/test_Src/heap_2.c **** 	size_t xBlockSize;						/*<< The size of the free block. */
  77:FreeRTOS/test_Src/heap_2.c **** } BlockLink_t;
  78:FreeRTOS/test_Src/heap_2.c **** 
  79:FreeRTOS/test_Src/heap_2.c **** 
  80:FreeRTOS/test_Src/heap_2.c **** static const uint16_t heapSTRUCT_SIZE	= ( ( sizeof ( BlockLink_t ) + ( portBYTE_ALIGNMENT - 1 ) ) &
  81:FreeRTOS/test_Src/heap_2.c **** #define heapMINIMUM_BLOCK_SIZE	( ( size_t ) ( heapSTRUCT_SIZE * 2 ) )
  82:FreeRTOS/test_Src/heap_2.c **** 
  83:FreeRTOS/test_Src/heap_2.c **** /* Create a couple of list links to mark the start and end of the list. */
  84:FreeRTOS/test_Src/heap_2.c **** static BlockLink_t xStart, xEnd;
  85:FreeRTOS/test_Src/heap_2.c **** 
  86:FreeRTOS/test_Src/heap_2.c **** /* Keeps track of the number of free bytes remaining, but says nothing about
  87:FreeRTOS/test_Src/heap_2.c **** fragmentation. */
  88:FreeRTOS/test_Src/heap_2.c **** static size_t xFreeBytesRemaining = configADJUSTED_HEAP_SIZE;
  89:FreeRTOS/test_Src/heap_2.c **** 
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccyj63AJ.s 			page 3


  90:FreeRTOS/test_Src/heap_2.c **** /* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */
  91:FreeRTOS/test_Src/heap_2.c **** 
  92:FreeRTOS/test_Src/heap_2.c **** /*
  93:FreeRTOS/test_Src/heap_2.c ****  * Insert a block into the list of free blocks - which is ordered by size of
  94:FreeRTOS/test_Src/heap_2.c ****  * the block.  Small blocks at the start of the list and large blocks at the end
  95:FreeRTOS/test_Src/heap_2.c ****  * of the list.
  96:FreeRTOS/test_Src/heap_2.c ****  */
  97:FreeRTOS/test_Src/heap_2.c **** #define prvInsertBlockIntoFreeList( pxBlockToInsert )								\
  98:FreeRTOS/test_Src/heap_2.c **** {																					\
  99:FreeRTOS/test_Src/heap_2.c **** BlockLink_t *pxIterator;															\
 100:FreeRTOS/test_Src/heap_2.c **** size_t xBlockSize;																	\
 101:FreeRTOS/test_Src/heap_2.c **** 																					\
 102:FreeRTOS/test_Src/heap_2.c **** 	xBlockSize = pxBlockToInsert->xBlockSize;										\
 103:FreeRTOS/test_Src/heap_2.c **** 																					\
 104:FreeRTOS/test_Src/heap_2.c **** 	/* Iterate through the list until a block is found that has a larger size */	\
 105:FreeRTOS/test_Src/heap_2.c **** 	/* than the block we are inserting. */											\
 106:FreeRTOS/test_Src/heap_2.c **** 	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock->xBlockSize < xBlockSize; pxIterator = pxIt
 107:FreeRTOS/test_Src/heap_2.c **** 	{																				\
 108:FreeRTOS/test_Src/heap_2.c **** 		/* There is nothing to do here - just iterate to the correct position. */	\
 109:FreeRTOS/test_Src/heap_2.c **** 	}																				\
 110:FreeRTOS/test_Src/heap_2.c **** 																					\
 111:FreeRTOS/test_Src/heap_2.c **** 	/* Update the list to include the block being inserted in the correct */		\
 112:FreeRTOS/test_Src/heap_2.c **** 	/* position. */																	\
 113:FreeRTOS/test_Src/heap_2.c **** 	pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;					\
 114:FreeRTOS/test_Src/heap_2.c **** 	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
 115:FreeRTOS/test_Src/heap_2.c **** }
 116:FreeRTOS/test_Src/heap_2.c **** /*-----------------------------------------------------------*/
 117:FreeRTOS/test_Src/heap_2.c **** 
 118:FreeRTOS/test_Src/heap_2.c **** void *pvPortMalloc( size_t xWantedSize )
 119:FreeRTOS/test_Src/heap_2.c **** {
 120:FreeRTOS/test_Src/heap_2.c **** BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
 121:FreeRTOS/test_Src/heap_2.c **** static BaseType_t xHeapHasBeenInitialised = pdFALSE;
 122:FreeRTOS/test_Src/heap_2.c **** void *pvReturn = NULL;
 123:FreeRTOS/test_Src/heap_2.c **** 
 124:FreeRTOS/test_Src/heap_2.c **** 	vTaskSuspendAll();
 125:FreeRTOS/test_Src/heap_2.c **** 	{
 126:FreeRTOS/test_Src/heap_2.c **** 		/* If this is the first call to malloc then the heap will require
 127:FreeRTOS/test_Src/heap_2.c **** 		initialisation to setup the list of free blocks. */
 128:FreeRTOS/test_Src/heap_2.c **** 		if( xHeapHasBeenInitialised == pdFALSE )
 129:FreeRTOS/test_Src/heap_2.c **** 		{
 130:FreeRTOS/test_Src/heap_2.c **** 			prvHeapInit();
 131:FreeRTOS/test_Src/heap_2.c **** 			xHeapHasBeenInitialised = pdTRUE;
 132:FreeRTOS/test_Src/heap_2.c **** 		}
 133:FreeRTOS/test_Src/heap_2.c **** 
 134:FreeRTOS/test_Src/heap_2.c **** 		/* The wanted size is increased so it can contain a BlockLink_t
 135:FreeRTOS/test_Src/heap_2.c **** 		structure in addition to the requested amount of bytes. */
 136:FreeRTOS/test_Src/heap_2.c **** 		if( xWantedSize > 0 )
 137:FreeRTOS/test_Src/heap_2.c **** 		{
 138:FreeRTOS/test_Src/heap_2.c **** 			xWantedSize += heapSTRUCT_SIZE;
 139:FreeRTOS/test_Src/heap_2.c **** 
 140:FreeRTOS/test_Src/heap_2.c **** 			/* Ensure that blocks are always aligned to the required number of bytes. */
 141:FreeRTOS/test_Src/heap_2.c **** 			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 142:FreeRTOS/test_Src/heap_2.c **** 			{
 143:FreeRTOS/test_Src/heap_2.c **** 				/* Byte alignment required. */
 144:FreeRTOS/test_Src/heap_2.c **** 				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 145:FreeRTOS/test_Src/heap_2.c **** 			}
 146:FreeRTOS/test_Src/heap_2.c **** 		}
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccyj63AJ.s 			page 4


 147:FreeRTOS/test_Src/heap_2.c **** 
 148:FreeRTOS/test_Src/heap_2.c **** 		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 149:FreeRTOS/test_Src/heap_2.c **** 		{
 150:FreeRTOS/test_Src/heap_2.c **** 			/* Blocks are stored in byte order - traverse the list from the start
 151:FreeRTOS/test_Src/heap_2.c **** 			(smallest) block until one of adequate size is found. */
 152:FreeRTOS/test_Src/heap_2.c **** 			pxPreviousBlock = &xStart;
 153:FreeRTOS/test_Src/heap_2.c **** 			pxBlock = xStart.pxNextFreeBlock;
 154:FreeRTOS/test_Src/heap_2.c **** 			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 155:FreeRTOS/test_Src/heap_2.c **** 			{
 156:FreeRTOS/test_Src/heap_2.c **** 				pxPreviousBlock = pxBlock;
 157:FreeRTOS/test_Src/heap_2.c **** 				pxBlock = pxBlock->pxNextFreeBlock;
 158:FreeRTOS/test_Src/heap_2.c **** 			}
 159:FreeRTOS/test_Src/heap_2.c **** 
 160:FreeRTOS/test_Src/heap_2.c **** 			/* If we found the end marker then a block of adequate size was not found. */
 161:FreeRTOS/test_Src/heap_2.c **** 			if( pxBlock != &xEnd )
 162:FreeRTOS/test_Src/heap_2.c **** 			{
 163:FreeRTOS/test_Src/heap_2.c **** 				/* Return the memory space - jumping over the BlockLink_t structure
 164:FreeRTOS/test_Src/heap_2.c **** 				at its start. */
 165:FreeRTOS/test_Src/heap_2.c **** 				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 166:FreeRTOS/test_Src/heap_2.c **** 
 167:FreeRTOS/test_Src/heap_2.c **** 				/* This block is being returned for use so must be taken out of the
 168:FreeRTOS/test_Src/heap_2.c **** 				list of free blocks. */
 169:FreeRTOS/test_Src/heap_2.c **** 				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 170:FreeRTOS/test_Src/heap_2.c **** 
 171:FreeRTOS/test_Src/heap_2.c **** 				/* If the block is larger than required it can be split into two. */
 172:FreeRTOS/test_Src/heap_2.c **** 				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 173:FreeRTOS/test_Src/heap_2.c **** 				{
 174:FreeRTOS/test_Src/heap_2.c **** 					/* This block is to be split into two.  Create a new block
 175:FreeRTOS/test_Src/heap_2.c **** 					following the number of bytes requested. The void cast is
 176:FreeRTOS/test_Src/heap_2.c **** 					used to prevent byte alignment warnings from the compiler. */
 177:FreeRTOS/test_Src/heap_2.c **** 					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 178:FreeRTOS/test_Src/heap_2.c **** 
 179:FreeRTOS/test_Src/heap_2.c **** 					/* Calculate the sizes of two blocks split from the single
 180:FreeRTOS/test_Src/heap_2.c **** 					block. */
 181:FreeRTOS/test_Src/heap_2.c **** 					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 182:FreeRTOS/test_Src/heap_2.c **** 					pxBlock->xBlockSize = xWantedSize;
 183:FreeRTOS/test_Src/heap_2.c **** 
 184:FreeRTOS/test_Src/heap_2.c **** 					/* Insert the new block into the list of free blocks. */
 185:FreeRTOS/test_Src/heap_2.c **** 					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 186:FreeRTOS/test_Src/heap_2.c **** 				}
 187:FreeRTOS/test_Src/heap_2.c **** 
 188:FreeRTOS/test_Src/heap_2.c **** 				xFreeBytesRemaining -= pxBlock->xBlockSize;
 189:FreeRTOS/test_Src/heap_2.c **** 			}
 190:FreeRTOS/test_Src/heap_2.c **** 		}
 191:FreeRTOS/test_Src/heap_2.c **** 
 192:FreeRTOS/test_Src/heap_2.c **** 		traceMALLOC( pvReturn, xWantedSize );
 193:FreeRTOS/test_Src/heap_2.c **** 	}
 194:FreeRTOS/test_Src/heap_2.c **** 	( void ) xTaskResumeAll();
 195:FreeRTOS/test_Src/heap_2.c **** 
 196:FreeRTOS/test_Src/heap_2.c **** 	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
 197:FreeRTOS/test_Src/heap_2.c **** 	{
 198:FreeRTOS/test_Src/heap_2.c **** 		if( pvReturn == NULL )
 199:FreeRTOS/test_Src/heap_2.c **** 		{
 200:FreeRTOS/test_Src/heap_2.c **** 			extern void vApplicationMallocFailedHook( void );
 201:FreeRTOS/test_Src/heap_2.c **** 			vApplicationMallocFailedHook();
 202:FreeRTOS/test_Src/heap_2.c **** 		}
 203:FreeRTOS/test_Src/heap_2.c **** 	}
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccyj63AJ.s 			page 5


 204:FreeRTOS/test_Src/heap_2.c **** 	#endif
 205:FreeRTOS/test_Src/heap_2.c **** 
 206:FreeRTOS/test_Src/heap_2.c **** 	return pvReturn;
 207:FreeRTOS/test_Src/heap_2.c **** }
 208:FreeRTOS/test_Src/heap_2.c **** /*-----------------------------------------------------------*/
 209:FreeRTOS/test_Src/heap_2.c **** 
 210:FreeRTOS/test_Src/heap_2.c **** void vPortFree( void *pv )
 211:FreeRTOS/test_Src/heap_2.c **** {
 212:FreeRTOS/test_Src/heap_2.c **** uint8_t *puc = ( uint8_t * ) pv;
 213:FreeRTOS/test_Src/heap_2.c **** BlockLink_t *pxLink;
 214:FreeRTOS/test_Src/heap_2.c **** 
 215:FreeRTOS/test_Src/heap_2.c **** 	if( pv != NULL )
 216:FreeRTOS/test_Src/heap_2.c **** 	{
 217:FreeRTOS/test_Src/heap_2.c **** 		/* The memory being freed will have an BlockLink_t structure immediately
 218:FreeRTOS/test_Src/heap_2.c **** 		before it. */
 219:FreeRTOS/test_Src/heap_2.c **** 		puc -= heapSTRUCT_SIZE;
 220:FreeRTOS/test_Src/heap_2.c **** 
 221:FreeRTOS/test_Src/heap_2.c **** 		/* This unexpected casting is to keep some compilers from issuing
 222:FreeRTOS/test_Src/heap_2.c **** 		byte alignment warnings. */
 223:FreeRTOS/test_Src/heap_2.c **** 		pxLink = ( void * ) puc;
 224:FreeRTOS/test_Src/heap_2.c **** 
 225:FreeRTOS/test_Src/heap_2.c **** 		vTaskSuspendAll();
 226:FreeRTOS/test_Src/heap_2.c **** 		{
 227:FreeRTOS/test_Src/heap_2.c **** 			/* Add this block to the list of free blocks. */
 228:FreeRTOS/test_Src/heap_2.c **** 			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 229:FreeRTOS/test_Src/heap_2.c **** 			xFreeBytesRemaining += pxLink->xBlockSize;
 230:FreeRTOS/test_Src/heap_2.c **** 			traceFREE( pv, pxLink->xBlockSize );
 231:FreeRTOS/test_Src/heap_2.c **** 		}
 232:FreeRTOS/test_Src/heap_2.c **** 		( void ) xTaskResumeAll();
 233:FreeRTOS/test_Src/heap_2.c **** 	}
 234:FreeRTOS/test_Src/heap_2.c **** }
 235:FreeRTOS/test_Src/heap_2.c **** /*-----------------------------------------------------------*/
 236:FreeRTOS/test_Src/heap_2.c **** 
 237:FreeRTOS/test_Src/heap_2.c **** size_t xPortGetFreeHeapSize( void )
 238:FreeRTOS/test_Src/heap_2.c **** {
 239:FreeRTOS/test_Src/heap_2.c **** 	return xFreeBytesRemaining;
 240:FreeRTOS/test_Src/heap_2.c **** }
 241:FreeRTOS/test_Src/heap_2.c **** /*-----------------------------------------------------------*/
 242:FreeRTOS/test_Src/heap_2.c **** 
 243:FreeRTOS/test_Src/heap_2.c **** void vPortInitialiseBlocks( void )
 244:FreeRTOS/test_Src/heap_2.c **** {
 245:FreeRTOS/test_Src/heap_2.c **** 	/* This just exists to keep the linker quiet. */
 246:FreeRTOS/test_Src/heap_2.c **** }
 247:FreeRTOS/test_Src/heap_2.c **** /*-----------------------------------------------------------*/
 248:FreeRTOS/test_Src/heap_2.c **** 
 249:FreeRTOS/test_Src/heap_2.c **** static void prvHeapInit( void )
 250:FreeRTOS/test_Src/heap_2.c **** {
  27              		.loc 1 250 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 251:FreeRTOS/test_Src/heap_2.c **** BlockLink_t *pxFirstFreeBlock;
 252:FreeRTOS/test_Src/heap_2.c **** uint8_t *pucAlignedHeap;
 253:FreeRTOS/test_Src/heap_2.c **** 
 254:FreeRTOS/test_Src/heap_2.c **** 	/* Ensure the heap starts on a correctly aligned boundary. */
 255:FreeRTOS/test_Src/heap_2.c **** 	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccyj63AJ.s 			page 6


  32              		.loc 1 255 0
  33 0000 074B     		ldr	r3, .L2
  34 0002 23F00703 		bic	r3, r3, #7
  35              	.LVL0:
 256:FreeRTOS/test_Src/heap_2.c **** 
 257:FreeRTOS/test_Src/heap_2.c **** 	/* xStart is used to hold a pointer to the first item in the list of free
 258:FreeRTOS/test_Src/heap_2.c **** 	blocks.  The void cast is used to prevent compiler warnings. */
 259:FreeRTOS/test_Src/heap_2.c **** 	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
  36              		.loc 1 259 0
  37 0006 074A     		ldr	r2, .L2+4
  38 0008 1360     		str	r3, [r2]
 260:FreeRTOS/test_Src/heap_2.c **** 	xStart.xBlockSize = ( size_t ) 0;
  39              		.loc 1 260 0
  40 000a 0020     		movs	r0, #0
  41 000c 5060     		str	r0, [r2, #4]
 261:FreeRTOS/test_Src/heap_2.c **** 
 262:FreeRTOS/test_Src/heap_2.c **** 	/* xEnd is used to mark the end of the list of free blocks. */
 263:FreeRTOS/test_Src/heap_2.c **** 	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
  42              		.loc 1 263 0
  43 000e 064A     		ldr	r2, .L2+8
  44 0010 44F2F831 		movw	r1, #17400
  45 0014 5160     		str	r1, [r2, #4]
 264:FreeRTOS/test_Src/heap_2.c **** 	xEnd.pxNextFreeBlock = NULL;
  46              		.loc 1 264 0
  47 0016 1060     		str	r0, [r2]
  48              	.LVL1:
 265:FreeRTOS/test_Src/heap_2.c **** 
 266:FreeRTOS/test_Src/heap_2.c **** 	/* To start with there is a single free block that is sized to take up the
 267:FreeRTOS/test_Src/heap_2.c **** 	entire heap space. */
 268:FreeRTOS/test_Src/heap_2.c **** 	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 269:FreeRTOS/test_Src/heap_2.c **** 	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
  49              		.loc 1 269 0
  50 0018 5960     		str	r1, [r3, #4]
 270:FreeRTOS/test_Src/heap_2.c **** 	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
  51              		.loc 1 270 0
  52 001a 1A60     		str	r2, [r3]
  53 001c 7047     		bx	lr
  54              	.L3:
  55 001e 00BF     		.align	2
  56              	.L2:
  57 0020 08000000 		.word	.LANCHOR0+8
  58 0024 00000000 		.word	.LANCHOR1
  59 0028 00000000 		.word	.LANCHOR2
  60              		.cfi_endproc
  61              	.LFE36:
  63              		.section	.text.pvPortMalloc,"ax",%progbits
  64              		.align	2
  65              		.global	pvPortMalloc
  66              		.thumb
  67              		.thumb_func
  69              	pvPortMalloc:
  70              	.LFB32:
 119:FreeRTOS/test_Src/heap_2.c **** BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
  71              		.loc 1 119 0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 0
  74              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccyj63AJ.s 			page 7


  75              	.LVL2:
  76 0000 70B5     		push	{r4, r5, r6, lr}
  77              	.LCFI0:
  78              		.cfi_def_cfa_offset 16
  79              		.cfi_offset 4, -16
  80              		.cfi_offset 5, -12
  81              		.cfi_offset 6, -8
  82              		.cfi_offset 14, -4
  83 0002 0446     		mov	r4, r0
  84              	.LVL3:
 124:FreeRTOS/test_Src/heap_2.c **** 	{
  85              		.loc 1 124 0
  86 0004 FFF7FEFF 		bl	vTaskSuspendAll
  87              	.LVL4:
 128:FreeRTOS/test_Src/heap_2.c **** 		{
  88              		.loc 1 128 0
  89 0008 224B     		ldr	r3, .L17
  90 000a 1B68     		ldr	r3, [r3]
  91 000c 23B9     		cbnz	r3, .L5
 130:FreeRTOS/test_Src/heap_2.c **** 			xHeapHasBeenInitialised = pdTRUE;
  92              		.loc 1 130 0
  93 000e FFF7FEFF 		bl	prvHeapInit
  94              	.LVL5:
 131:FreeRTOS/test_Src/heap_2.c **** 		}
  95              		.loc 1 131 0
  96 0012 0122     		movs	r2, #1
  97 0014 1F4B     		ldr	r3, .L17
  98 0016 1A60     		str	r2, [r3]
  99              	.L5:
 136:FreeRTOS/test_Src/heap_2.c **** 		{
 100              		.loc 1 136 0
 101 0018 34B1     		cbz	r4, .L6
 138:FreeRTOS/test_Src/heap_2.c **** 
 102              		.loc 1 138 0
 103 001a 0834     		adds	r4, r4, #8
 104              	.LVL6:
 141:FreeRTOS/test_Src/heap_2.c **** 			{
 105              		.loc 1 141 0
 106 001c 14F0070F 		tst	r4, #7
 107 0020 02D0     		beq	.L6
 144:FreeRTOS/test_Src/heap_2.c **** 			}
 108              		.loc 1 144 0
 109 0022 24F00704 		bic	r4, r4, #7
 110              	.LVL7:
 111 0026 0834     		adds	r4, r4, #8
 112              	.LVL8:
 113              	.L6:
 148:FreeRTOS/test_Src/heap_2.c **** 		{
 114              		.loc 1 148 0
 115 0028 621E     		subs	r2, r4, #1
 116 002a 44F2F633 		movw	r3, #17398
 117 002e 9A42     		cmp	r2, r3
 118 0030 28D8     		bhi	.L12
 119              	.LVL9:
 153:FreeRTOS/test_Src/heap_2.c **** 			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 120              		.loc 1 153 0
 121 0032 1949     		ldr	r1, .L17+4
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccyj63AJ.s 			page 8


 122 0034 0B68     		ldr	r3, [r1]
 123              	.LVL10:
 154:FreeRTOS/test_Src/heap_2.c **** 			{
 124              		.loc 1 154 0
 125 0036 01E0     		b	.L9
 126              	.LVL11:
 127              	.L13:
 156:FreeRTOS/test_Src/heap_2.c **** 				pxBlock = pxBlock->pxNextFreeBlock;
 128              		.loc 1 156 0
 129 0038 1946     		mov	r1, r3
 130              	.LVL12:
 157:FreeRTOS/test_Src/heap_2.c **** 			}
 131              		.loc 1 157 0
 132 003a 1346     		mov	r3, r2
 133              	.LVL13:
 134              	.L9:
 154:FreeRTOS/test_Src/heap_2.c **** 			{
 135              		.loc 1 154 0
 136 003c 5A68     		ldr	r2, [r3, #4]
 137 003e 9442     		cmp	r4, r2
 138 0040 02D9     		bls	.L8
 154:FreeRTOS/test_Src/heap_2.c **** 			{
 139              		.loc 1 154 0 is_stmt 0 discriminator 1
 140 0042 1A68     		ldr	r2, [r3]
 141 0044 002A     		cmp	r2, #0
 142 0046 F7D1     		bne	.L13
 143              	.L8:
 161:FreeRTOS/test_Src/heap_2.c **** 			{
 144              		.loc 1 161 0 is_stmt 1
 145 0048 144A     		ldr	r2, .L17+8
 146 004a 9342     		cmp	r3, r2
 147 004c 1CD0     		beq	.L14
 165:FreeRTOS/test_Src/heap_2.c **** 
 148              		.loc 1 165 0
 149 004e 0D68     		ldr	r5, [r1]
 150 0050 0835     		adds	r5, r5, #8
 151              	.LVL14:
 169:FreeRTOS/test_Src/heap_2.c **** 
 152              		.loc 1 169 0
 153 0052 1A68     		ldr	r2, [r3]
 154 0054 0A60     		str	r2, [r1]
 172:FreeRTOS/test_Src/heap_2.c **** 				{
 155              		.loc 1 172 0
 156 0056 5A68     		ldr	r2, [r3, #4]
 157 0058 121B     		subs	r2, r2, r4
 158 005a 102A     		cmp	r2, #16
 159 005c 0CD9     		bls	.L10
 177:FreeRTOS/test_Src/heap_2.c **** 
 160              		.loc 1 177 0
 161 005e 1E19     		adds	r6, r3, r4
 162              	.LVL15:
 181:FreeRTOS/test_Src/heap_2.c **** 					pxBlock->xBlockSize = xWantedSize;
 163              		.loc 1 181 0
 164 0060 7260     		str	r2, [r6, #4]
 182:FreeRTOS/test_Src/heap_2.c **** 
 165              		.loc 1 182 0
 166 0062 5C60     		str	r4, [r3, #4]
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccyj63AJ.s 			page 9


 167              	.LBB2:
 185:FreeRTOS/test_Src/heap_2.c **** 				}
 168              		.loc 1 185 0
 169 0064 7468     		ldr	r4, [r6, #4]
 170              	.LVL16:
 171 0066 0C49     		ldr	r1, .L17+4
 172              	.LVL17:
 173 0068 00E0     		b	.L11
 174              	.LVL18:
 175              	.L15:
 176 006a 1146     		mov	r1, r2
 177              	.LVL19:
 178              	.L11:
 185:FreeRTOS/test_Src/heap_2.c **** 				}
 179              		.loc 1 185 0 is_stmt 0 discriminator 1
 180 006c 0A68     		ldr	r2, [r1]
 181 006e 5068     		ldr	r0, [r2, #4]
 182 0070 8442     		cmp	r4, r0
 183 0072 FAD8     		bhi	.L15
 185:FreeRTOS/test_Src/heap_2.c **** 				}
 184              		.loc 1 185 0 discriminator 4
 185 0074 3260     		str	r2, [r6]
 186              	.LVL20:
 187 0076 0E60     		str	r6, [r1]
 188              	.LVL21:
 189              	.L10:
 190              	.LBE2:
 188:FreeRTOS/test_Src/heap_2.c **** 			}
 191              		.loc 1 188 0 is_stmt 1
 192 0078 5968     		ldr	r1, [r3, #4]
 193 007a 094A     		ldr	r2, .L17+12
 194 007c 1368     		ldr	r3, [r2]
 195              	.LVL22:
 196 007e 5B1A     		subs	r3, r3, r1
 197 0080 1360     		str	r3, [r2]
 198 0082 02E0     		b	.L7
 199              	.LVL23:
 200              	.L12:
 122:FreeRTOS/test_Src/heap_2.c **** 
 201              		.loc 1 122 0
 202 0084 0025     		movs	r5, #0
 203 0086 00E0     		b	.L7
 204              	.LVL24:
 205              	.L14:
 206 0088 0025     		movs	r5, #0
 207              	.LVL25:
 208              	.L7:
 194:FreeRTOS/test_Src/heap_2.c **** 
 209              		.loc 1 194 0
 210 008a FFF7FEFF 		bl	xTaskResumeAll
 211              	.LVL26:
 207:FreeRTOS/test_Src/heap_2.c **** /*-----------------------------------------------------------*/
 212              		.loc 1 207 0
 213 008e 2846     		mov	r0, r5
 214 0090 70BD     		pop	{r4, r5, r6, pc}
 215              	.LVL27:
 216              	.L18:
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccyj63AJ.s 			page 10


 217 0092 00BF     		.align	2
 218              	.L17:
 219 0094 00000000 		.word	.LANCHOR3
 220 0098 00000000 		.word	.LANCHOR1
 221 009c 00000000 		.word	.LANCHOR2
 222 00a0 00000000 		.word	.LANCHOR4
 223              		.cfi_endproc
 224              	.LFE32:
 226              		.section	.text.vPortFree,"ax",%progbits
 227              		.align	2
 228              		.global	vPortFree
 229              		.thumb
 230              		.thumb_func
 232              	vPortFree:
 233              	.LFB33:
 211:FreeRTOS/test_Src/heap_2.c **** uint8_t *puc = ( uint8_t * ) pv;
 234              		.loc 1 211 0
 235              		.cfi_startproc
 236              		@ args = 0, pretend = 0, frame = 0
 237              		@ frame_needed = 0, uses_anonymous_args = 0
 238              	.LVL28:
 215:FreeRTOS/test_Src/heap_2.c **** 	{
 239              		.loc 1 215 0
 240 0000 D0B1     		cbz	r0, .L24
 211:FreeRTOS/test_Src/heap_2.c **** uint8_t *puc = ( uint8_t * ) pv;
 241              		.loc 1 211 0
 242 0002 70B5     		push	{r4, r5, r6, lr}
 243              	.LCFI1:
 244              		.cfi_def_cfa_offset 16
 245              		.cfi_offset 4, -16
 246              		.cfi_offset 5, -12
 247              		.cfi_offset 6, -8
 248              		.cfi_offset 14, -4
 249 0004 0546     		mov	r5, r0
 219:FreeRTOS/test_Src/heap_2.c **** 
 250              		.loc 1 219 0
 251 0006 A0F10806 		sub	r6, r0, #8
 252              	.LVL29:
 225:FreeRTOS/test_Src/heap_2.c **** 		{
 253              		.loc 1 225 0
 254 000a FFF7FEFF 		bl	vTaskSuspendAll
 255              	.LVL30:
 256              	.LBB3:
 228:FreeRTOS/test_Src/heap_2.c **** 			xFreeBytesRemaining += pxLink->xBlockSize;
 257              		.loc 1 228 0
 258 000e 55F8044C 		ldr	r4, [r5, #-4]
 259              	.LVL31:
 260 0012 0A4A     		ldr	r2, .L25
 261 0014 00E0     		b	.L21
 262              	.LVL32:
 263              	.L22:
 264 0016 1A46     		mov	r2, r3
 265              	.LVL33:
 266              	.L21:
 228:FreeRTOS/test_Src/heap_2.c **** 			xFreeBytesRemaining += pxLink->xBlockSize;
 267              		.loc 1 228 0 is_stmt 0 discriminator 1
 268 0018 1368     		ldr	r3, [r2]
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccyj63AJ.s 			page 11


 269 001a 5968     		ldr	r1, [r3, #4]
 270 001c 8C42     		cmp	r4, r1
 271 001e FAD8     		bhi	.L22
 228:FreeRTOS/test_Src/heap_2.c **** 			xFreeBytesRemaining += pxLink->xBlockSize;
 272              		.loc 1 228 0 discriminator 4
 273 0020 45F8083C 		str	r3, [r5, #-8]
 274 0024 1660     		str	r6, [r2]
 275              	.LBE3:
 229:FreeRTOS/test_Src/heap_2.c **** 			traceFREE( pv, pxLink->xBlockSize );
 276              		.loc 1 229 0 is_stmt 1 discriminator 4
 277 0026 55F8043C 		ldr	r3, [r5, #-4]
 278 002a 054A     		ldr	r2, .L25+4
 279              	.LVL34:
 280 002c 1168     		ldr	r1, [r2]
 281 002e 0B44     		add	r3, r3, r1
 282 0030 1360     		str	r3, [r2]
 232:FreeRTOS/test_Src/heap_2.c **** 	}
 283              		.loc 1 232 0 discriminator 4
 284 0032 FFF7FEFF 		bl	xTaskResumeAll
 285              	.LVL35:
 286 0036 70BD     		pop	{r4, r5, r6, pc}
 287              	.LVL36:
 288              	.L24:
 289              	.LCFI2:
 290              		.cfi_def_cfa_offset 0
 291              		.cfi_restore 4
 292              		.cfi_restore 5
 293              		.cfi_restore 6
 294              		.cfi_restore 14
 295 0038 7047     		bx	lr
 296              	.L26:
 297 003a 00BF     		.align	2
 298              	.L25:
 299 003c 00000000 		.word	.LANCHOR1
 300 0040 00000000 		.word	.LANCHOR4
 301              		.cfi_endproc
 302              	.LFE33:
 304              		.section	.text.xPortGetFreeHeapSize,"ax",%progbits
 305              		.align	2
 306              		.global	xPortGetFreeHeapSize
 307              		.thumb
 308              		.thumb_func
 310              	xPortGetFreeHeapSize:
 311              	.LFB34:
 238:FreeRTOS/test_Src/heap_2.c **** 	return xFreeBytesRemaining;
 312              		.loc 1 238 0
 313              		.cfi_startproc
 314              		@ args = 0, pretend = 0, frame = 0
 315              		@ frame_needed = 0, uses_anonymous_args = 0
 316              		@ link register save eliminated.
 240:FreeRTOS/test_Src/heap_2.c **** /*-----------------------------------------------------------*/
 317              		.loc 1 240 0
 318 0000 014B     		ldr	r3, .L28
 319 0002 1868     		ldr	r0, [r3]
 320 0004 7047     		bx	lr
 321              	.L29:
 322 0006 00BF     		.align	2
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccyj63AJ.s 			page 12


 323              	.L28:
 324 0008 00000000 		.word	.LANCHOR4
 325              		.cfi_endproc
 326              	.LFE34:
 328              		.section	.text.vPortInitialiseBlocks,"ax",%progbits
 329              		.align	2
 330              		.global	vPortInitialiseBlocks
 331              		.thumb
 332              		.thumb_func
 334              	vPortInitialiseBlocks:
 335              	.LFB35:
 244:FreeRTOS/test_Src/heap_2.c **** 	/* This just exists to keep the linker quiet. */
 336              		.loc 1 244 0
 337              		.cfi_startproc
 338              		@ args = 0, pretend = 0, frame = 0
 339              		@ frame_needed = 0, uses_anonymous_args = 0
 340              		@ link register save eliminated.
 341 0000 7047     		bx	lr
 342              		.cfi_endproc
 343              	.LFE35:
 345 0002 00BF     		.section	.bss.xStart,"aw",%nobits
 346              		.align	2
 347              		.set	.LANCHOR1,. + 0
 350              	xStart:
 351 0000 00000000 		.space	8
 351      00000000 
 352              		.section	.bss.ucHeap,"aw",%nobits
 353              		.align	2
 354              		.set	.LANCHOR0,. + 0
 357              	ucHeap:
 358 0000 00000000 		.space	17408
 358      00000000 
 358      00000000 
 358      00000000 
 358      00000000 
 359              		.section	.bss.xHeapHasBeenInitialised.7388,"aw",%nobits
 360              		.align	2
 361              		.set	.LANCHOR3,. + 0
 364              	xHeapHasBeenInitialised.7388:
 365 0000 00000000 		.space	4
 366              		.section	.data.xFreeBytesRemaining,"aw",%progbits
 367              		.align	2
 368              		.set	.LANCHOR4,. + 0
 371              	xFreeBytesRemaining:
 372 0000 F8430000 		.word	17400
 373              		.section	.bss.xEnd,"aw",%nobits
 374              		.align	2
 375              		.set	.LANCHOR2,. + 0
 378              	xEnd:
 379 0000 00000000 		.space	8
 379      00000000 
 380              		.text
 381              	.Letext0:
 382              		.file 2 "/usr/local/Cellar/gcc-arm-none-eabi/20160926/lib/gcc/arm-none-eabi/5.4.1/include/stddef.h
 383              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20160926/arm-none-eabi/include/machine/_default_types
 384              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi/20160926/arm-none-eabi/include/sys/_stdint.h"
 385              		.file 5 "FreeRTOS/ARM_CM3/portmacro.h"
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccyj63AJ.s 			page 13


 386              		.file 6 "FreeRTOS/Inc/task.h"
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccyj63AJ.s 			page 14


DEFINED SYMBOLS
                            *ABS*:0000000000000000 heap_2.c
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccyj63AJ.s:20     .text.prvHeapInit:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccyj63AJ.s:24     .text.prvHeapInit:0000000000000000 prvHeapInit
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccyj63AJ.s:57     .text.prvHeapInit:0000000000000020 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccyj63AJ.s:64     .text.pvPortMalloc:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccyj63AJ.s:69     .text.pvPortMalloc:0000000000000000 pvPortMalloc
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccyj63AJ.s:219    .text.pvPortMalloc:0000000000000094 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccyj63AJ.s:227    .text.vPortFree:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccyj63AJ.s:232    .text.vPortFree:0000000000000000 vPortFree
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccyj63AJ.s:299    .text.vPortFree:000000000000003c $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccyj63AJ.s:305    .text.xPortGetFreeHeapSize:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccyj63AJ.s:310    .text.xPortGetFreeHeapSize:0000000000000000 xPortGetFreeHeapSize
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccyj63AJ.s:324    .text.xPortGetFreeHeapSize:0000000000000008 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccyj63AJ.s:329    .text.vPortInitialiseBlocks:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccyj63AJ.s:334    .text.vPortInitialiseBlocks:0000000000000000 vPortInitialiseBlocks
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccyj63AJ.s:346    .bss.xStart:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccyj63AJ.s:350    .bss.xStart:0000000000000000 xStart
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccyj63AJ.s:353    .bss.ucHeap:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccyj63AJ.s:357    .bss.ucHeap:0000000000000000 ucHeap
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccyj63AJ.s:360    .bss.xHeapHasBeenInitialised.7388:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccyj63AJ.s:364    .bss.xHeapHasBeenInitialised.7388:0000000000000000 xHeapHasBeenInitialised.7388
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccyj63AJ.s:367    .data.xFreeBytesRemaining:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccyj63AJ.s:371    .data.xFreeBytesRemaining:0000000000000000 xFreeBytesRemaining
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccyj63AJ.s:374    .bss.xEnd:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccyj63AJ.s:378    .bss.xEnd:0000000000000000 xEnd
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
vTaskSuspendAll
xTaskResumeAll
