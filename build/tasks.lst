ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"tasks.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvDeleteTCB,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	prvDeleteTCB:
  25              	.LFB29:
  26              		.file 1 "FreeRTOS/Src/tasks.c"
   1:FreeRTOS/Src/tasks.c **** /*
   2:FreeRTOS/Src/tasks.c **** 	FreeRTOS V5.4.2 - Copyright (C) 2009 Real Time Engineers Ltd.
   3:FreeRTOS/Src/tasks.c **** 
   4:FreeRTOS/Src/tasks.c **** 	This file is part of the FreeRTOS distribution.
   5:FreeRTOS/Src/tasks.c **** 
   6:FreeRTOS/Src/tasks.c **** 	FreeRTOS is free software; you can redistribute it and/or modify it	under
   7:FreeRTOS/Src/tasks.c **** 	the terms of the GNU General Public License (version 2) as published by the
   8:FreeRTOS/Src/tasks.c **** 	Free Software Foundation and modified by the FreeRTOS exception.
   9:FreeRTOS/Src/tasks.c **** 	**NOTE** The exception to the GPL is included to allow you to distribute a
  10:FreeRTOS/Src/tasks.c **** 	combined work that includes FreeRTOS without being obliged to provide the
  11:FreeRTOS/Src/tasks.c **** 	source code for proprietary components outside of the FreeRTOS kernel.
  12:FreeRTOS/Src/tasks.c **** 	Alternative commercial license and support terms are also available upon
  13:FreeRTOS/Src/tasks.c **** 	request.  See the licensing section of http://www.FreeRTOS.org for full
  14:FreeRTOS/Src/tasks.c **** 	license details.
  15:FreeRTOS/Src/tasks.c **** 
  16:FreeRTOS/Src/tasks.c **** 	FreeRTOS is distributed in the hope that it will be useful,	but WITHOUT
  17:FreeRTOS/Src/tasks.c **** 	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  18:FreeRTOS/Src/tasks.c **** 	FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  19:FreeRTOS/Src/tasks.c **** 	more details.
  20:FreeRTOS/Src/tasks.c **** 
  21:FreeRTOS/Src/tasks.c **** 	You should have received a copy of the GNU General Public License along
  22:FreeRTOS/Src/tasks.c **** 	with FreeRTOS; if not, write to the Free Software Foundation, Inc., 59
  23:FreeRTOS/Src/tasks.c **** 	Temple Place, Suite 330, Boston, MA  02111-1307  USA.
  24:FreeRTOS/Src/tasks.c **** 
  25:FreeRTOS/Src/tasks.c **** 
  26:FreeRTOS/Src/tasks.c **** 	***************************************************************************
  27:FreeRTOS/Src/tasks.c **** 	*                                                                         *
  28:FreeRTOS/Src/tasks.c **** 	* Looking for a quick start?  Then check out the FreeRTOS eBook!          *
  29:FreeRTOS/Src/tasks.c **** 	* See http://www.FreeRTOS.org/Documentation for details                   *
  30:FreeRTOS/Src/tasks.c **** 	*                                                                         *
  31:FreeRTOS/Src/tasks.c **** 	***************************************************************************
  32:FreeRTOS/Src/tasks.c **** 
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 2


  33:FreeRTOS/Src/tasks.c **** 	1 tab == 4 spaces!
  34:FreeRTOS/Src/tasks.c **** 
  35:FreeRTOS/Src/tasks.c **** 	Please ensure to read the configuration and relevant port sections of the
  36:FreeRTOS/Src/tasks.c **** 	online documentation.
  37:FreeRTOS/Src/tasks.c **** 
  38:FreeRTOS/Src/tasks.c **** 	http://www.FreeRTOS.org - Documentation, latest information, license and
  39:FreeRTOS/Src/tasks.c **** 	contact details.
  40:FreeRTOS/Src/tasks.c **** 
  41:FreeRTOS/Src/tasks.c **** 	http://www.SafeRTOS.com - A version that is certified for use in safety
  42:FreeRTOS/Src/tasks.c **** 	critical systems.
  43:FreeRTOS/Src/tasks.c **** 
  44:FreeRTOS/Src/tasks.c **** 	http://www.OpenRTOS.com - Commercial support, development, porting,
  45:FreeRTOS/Src/tasks.c **** 	licensing and training services.
  46:FreeRTOS/Src/tasks.c **** */
  47:FreeRTOS/Src/tasks.c **** 
  48:FreeRTOS/Src/tasks.c **** 
  49:FreeRTOS/Src/tasks.c **** #include <stdio.h>
  50:FreeRTOS/Src/tasks.c **** #include <stdlib.h>
  51:FreeRTOS/Src/tasks.c **** #include <string.h>
  52:FreeRTOS/Src/tasks.c **** 
  53:FreeRTOS/Src/tasks.c **** #include "FreeRTOS.h"
  54:FreeRTOS/Src/tasks.c **** #include "task.h"
  55:FreeRTOS/Src/tasks.c **** #include "StackMacros.h"
  56:FreeRTOS/Src/tasks.c **** 
  57:FreeRTOS/Src/tasks.c **** /*
  58:FreeRTOS/Src/tasks.c ****  * Macro to define the amount of stack available to the idle task.
  59:FreeRTOS/Src/tasks.c ****  */
  60:FreeRTOS/Src/tasks.c **** #define tskIDLE_STACK_SIZE	configMINIMAL_STACK_SIZE
  61:FreeRTOS/Src/tasks.c **** 
  62:FreeRTOS/Src/tasks.c **** /*
  63:FreeRTOS/Src/tasks.c ****  * Task control block.  A task control block (TCB) is allocated to each task,
  64:FreeRTOS/Src/tasks.c ****  * and stores the context of the task.
  65:FreeRTOS/Src/tasks.c ****  */
  66:FreeRTOS/Src/tasks.c **** typedef struct tskTaskControlBlock
  67:FreeRTOS/Src/tasks.c **** {
  68:FreeRTOS/Src/tasks.c **** 	volatile portSTACK_TYPE	*pxTopOfStack;		/*< Points to the location of the last item placed on the 
  69:FreeRTOS/Src/tasks.c **** 	xListItem				xGenericListItem;	/*< List item used to place the TCB in ready and blocked queues. */
  70:FreeRTOS/Src/tasks.c **** 	xListItem				xEventListItem;		/*< List item used to place the TCB in event lists. */
  71:FreeRTOS/Src/tasks.c **** 	unsigned portBASE_TYPE	uxPriority;			/*< The priority of the task where 0 is the lowest priority. 
  72:FreeRTOS/Src/tasks.c **** 	portSTACK_TYPE			*pxStack;			/*< Points to the start of the stack. */
  73:FreeRTOS/Src/tasks.c **** 	signed portCHAR			pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task whe
  74:FreeRTOS/Src/tasks.c **** 
  75:FreeRTOS/Src/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
  76:FreeRTOS/Src/tasks.c **** 		portSTACK_TYPE *pxEndOfStack;			/*< Used for stack overflow checking on architectures where the s
  77:FreeRTOS/Src/tasks.c **** 	#endif
  78:FreeRTOS/Src/tasks.c **** 
  79:FreeRTOS/Src/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
  80:FreeRTOS/Src/tasks.c **** 		unsigned portBASE_TYPE uxCriticalNesting;
  81:FreeRTOS/Src/tasks.c **** 	#endif
  82:FreeRTOS/Src/tasks.c **** 
  83:FreeRTOS/Src/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
  84:FreeRTOS/Src/tasks.c **** 		unsigned portBASE_TYPE	uxTCBNumber;	/*< This is used for tracing the scheduler and making debuggi
  85:FreeRTOS/Src/tasks.c **** 	#endif
  86:FreeRTOS/Src/tasks.c **** 
  87:FreeRTOS/Src/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
  88:FreeRTOS/Src/tasks.c **** 		unsigned portBASE_TYPE uxBasePriority;	/*< The priority last assigned to the task - used by the p
  89:FreeRTOS/Src/tasks.c **** 	#endif
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 3


  90:FreeRTOS/Src/tasks.c **** 
  91:FreeRTOS/Src/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
  92:FreeRTOS/Src/tasks.c **** 		pdTASK_HOOK_CODE pxTaskTag;
  93:FreeRTOS/Src/tasks.c **** 	#endif
  94:FreeRTOS/Src/tasks.c **** 
  95:FreeRTOS/Src/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
  96:FreeRTOS/Src/tasks.c **** 		unsigned portLONG ulRunTimeCounter;	 		/*< Used for calculating how much CPU time each task is ut
  97:FreeRTOS/Src/tasks.c **** 	#endif
  98:FreeRTOS/Src/tasks.c **** 
  99:FreeRTOS/Src/tasks.c **** } tskTCB;
 100:FreeRTOS/Src/tasks.c **** 
 101:FreeRTOS/Src/tasks.c **** /*
 102:FreeRTOS/Src/tasks.c ****  * Some kernel aware debuggers require data to be viewed to be global, rather
 103:FreeRTOS/Src/tasks.c ****  * than file scope.
 104:FreeRTOS/Src/tasks.c ****  */
 105:FreeRTOS/Src/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 106:FreeRTOS/Src/tasks.c **** 	#define static
 107:FreeRTOS/Src/tasks.c **** #endif
 108:FreeRTOS/Src/tasks.c **** 
 109:FreeRTOS/Src/tasks.c **** /*lint -e956 */
 110:FreeRTOS/Src/tasks.c **** 
 111:FreeRTOS/Src/tasks.c **** tskTCB * volatile pxCurrentTCB = NULL;
 112:FreeRTOS/Src/tasks.c **** 
 113:FreeRTOS/Src/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 114:FreeRTOS/Src/tasks.c **** 
 115:FreeRTOS/Src/tasks.c **** static xList pxReadyTasksLists[ configMAX_PRIORITIES ];	/*< Prioritised ready tasks. */
 116:FreeRTOS/Src/tasks.c **** static xList xDelayedTaskList1;							/*< Delayed tasks. */
 117:FreeRTOS/Src/tasks.c **** static xList xDelayedTaskList2;							/*< Delayed tasks (two lists are used - one for delays that h
 118:FreeRTOS/Src/tasks.c **** static xList * volatile pxDelayedTaskList;				/*< Points to the delayed task list currently being u
 119:FreeRTOS/Src/tasks.c **** static xList * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task list currently b
 120:FreeRTOS/Src/tasks.c **** static xList xPendingReadyList;							/*< Tasks that have been readied while the scheduler was susp
 121:FreeRTOS/Src/tasks.c **** 
 122:FreeRTOS/Src/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 123:FreeRTOS/Src/tasks.c **** 
 124:FreeRTOS/Src/tasks.c **** 	static volatile xList xTasksWaitingTermination;		/*< Tasks that have been deleted - but the their 
 125:FreeRTOS/Src/tasks.c **** 	static volatile unsigned portBASE_TYPE uxTasksDeleted = ( unsigned portBASE_TYPE ) 0;
 126:FreeRTOS/Src/tasks.c **** 
 127:FreeRTOS/Src/tasks.c **** #endif
 128:FreeRTOS/Src/tasks.c **** 
 129:FreeRTOS/Src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 130:FreeRTOS/Src/tasks.c **** 
 131:FreeRTOS/Src/tasks.c **** 	static xList xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 132:FreeRTOS/Src/tasks.c **** 
 133:FreeRTOS/Src/tasks.c **** #endif
 134:FreeRTOS/Src/tasks.c **** 
 135:FreeRTOS/Src/tasks.c **** /* File private variables. --------------------------------*/
 136:FreeRTOS/Src/tasks.c **** static volatile unsigned portBASE_TYPE uxCurrentNumberOfTasks	= ( unsigned portBASE_TYPE ) 0;
 137:FreeRTOS/Src/tasks.c **** static volatile portTickType xTickCount							= ( portTickType ) 0;
 138:FreeRTOS/Src/tasks.c **** static unsigned portBASE_TYPE uxTopUsedPriority					= tskIDLE_PRIORITY;
 139:FreeRTOS/Src/tasks.c **** static volatile unsigned portBASE_TYPE uxTopReadyPriority		= tskIDLE_PRIORITY;
 140:FreeRTOS/Src/tasks.c **** static volatile signed portBASE_TYPE xSchedulerRunning			= pdFALSE;
 141:FreeRTOS/Src/tasks.c **** static volatile unsigned portBASE_TYPE uxSchedulerSuspended		= ( unsigned portBASE_TYPE ) pdFALSE;
 142:FreeRTOS/Src/tasks.c **** static volatile unsigned portBASE_TYPE uxMissedTicks			= ( unsigned portBASE_TYPE ) 0;
 143:FreeRTOS/Src/tasks.c **** static volatile portBASE_TYPE xMissedYield						= ( portBASE_TYPE ) pdFALSE;
 144:FreeRTOS/Src/tasks.c **** static volatile portBASE_TYPE xNumOfOverflows					= ( portBASE_TYPE ) 0;
 145:FreeRTOS/Src/tasks.c **** static unsigned portBASE_TYPE uxTaskNumber 						= ( unsigned portBASE_TYPE ) 0;
 146:FreeRTOS/Src/tasks.c **** 
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 4


 147:FreeRTOS/Src/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 148:FreeRTOS/Src/tasks.c **** 
 149:FreeRTOS/Src/tasks.c **** 	static portCHAR pcStatsString[ 50 ];
 150:FreeRTOS/Src/tasks.c **** 	static unsigned portLONG ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter the la
 151:FreeRTOS/Src/tasks.c **** 	static void prvGenerateRunTimeStatsForTasksInList( const signed portCHAR *pcWriteBuffer, xList *px
 152:FreeRTOS/Src/tasks.c **** 
 153:FreeRTOS/Src/tasks.c **** #endif
 154:FreeRTOS/Src/tasks.c **** 
 155:FreeRTOS/Src/tasks.c **** /* Debugging and trace facilities private variables and macros. ------------*/
 156:FreeRTOS/Src/tasks.c **** 
 157:FreeRTOS/Src/tasks.c **** /*
 158:FreeRTOS/Src/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 159:FreeRTOS/Src/tasks.c ****  * is used purely for checking the high water mark for tasks.
 160:FreeRTOS/Src/tasks.c ****  */
 161:FreeRTOS/Src/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5 )
 162:FreeRTOS/Src/tasks.c **** 
 163:FreeRTOS/Src/tasks.c **** /*
 164:FreeRTOS/Src/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 165:FreeRTOS/Src/tasks.c ****  */
 166:FreeRTOS/Src/tasks.c **** #define tskBLOCKED_CHAR		( ( signed portCHAR ) 'B' )
 167:FreeRTOS/Src/tasks.c **** #define tskREADY_CHAR		( ( signed portCHAR ) 'R' )
 168:FreeRTOS/Src/tasks.c **** #define tskDELETED_CHAR		( ( signed portCHAR ) 'D' )
 169:FreeRTOS/Src/tasks.c **** #define tskSUSPENDED_CHAR	( ( signed portCHAR ) 'S' )
 170:FreeRTOS/Src/tasks.c **** 
 171:FreeRTOS/Src/tasks.c **** /*
 172:FreeRTOS/Src/tasks.c ****  * Macros and private variables used by the trace facility.
 173:FreeRTOS/Src/tasks.c ****  */
 174:FreeRTOS/Src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 175:FreeRTOS/Src/tasks.c **** 
 176:FreeRTOS/Src/tasks.c **** 	#define tskSIZE_OF_EACH_TRACE_LINE			( ( unsigned portLONG ) ( sizeof( unsigned portLONG ) + sizeo
 177:FreeRTOS/Src/tasks.c **** 	static volatile signed portCHAR * volatile pcTraceBuffer;
 178:FreeRTOS/Src/tasks.c **** 	static signed portCHAR *pcTraceBufferStart;
 179:FreeRTOS/Src/tasks.c **** 	static signed portCHAR *pcTraceBufferEnd;
 180:FreeRTOS/Src/tasks.c **** 	static signed portBASE_TYPE xTracing = pdFALSE;
 181:FreeRTOS/Src/tasks.c **** 	static unsigned portBASE_TYPE uxPreviousTask = 255;
 182:FreeRTOS/Src/tasks.c **** 	static portCHAR pcStatusString[ 50 ];
 183:FreeRTOS/Src/tasks.c **** 
 184:FreeRTOS/Src/tasks.c **** #endif
 185:FreeRTOS/Src/tasks.c **** 
 186:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 187:FreeRTOS/Src/tasks.c **** 
 188:FreeRTOS/Src/tasks.c **** /*
 189:FreeRTOS/Src/tasks.c ****  * Macro that writes a trace of scheduler activity to a buffer.  This trace
 190:FreeRTOS/Src/tasks.c ****  * shows which task is running when and is very useful as a debugging tool.
 191:FreeRTOS/Src/tasks.c ****  * As this macro is called each context switch it is a good idea to undefine
 192:FreeRTOS/Src/tasks.c ****  * it if not using the facility.
 193:FreeRTOS/Src/tasks.c ****  */
 194:FreeRTOS/Src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 195:FreeRTOS/Src/tasks.c **** 
 196:FreeRTOS/Src/tasks.c **** 	#define vWriteTraceToBuffer()																	\
 197:FreeRTOS/Src/tasks.c **** 	{																								\
 198:FreeRTOS/Src/tasks.c **** 		if( xTracing )																				\
 199:FreeRTOS/Src/tasks.c **** 		{																							\
 200:FreeRTOS/Src/tasks.c **** 			if( uxPreviousTask != pxCurrentTCB->uxTCBNumber )										\
 201:FreeRTOS/Src/tasks.c **** 			{																						\
 202:FreeRTOS/Src/tasks.c **** 				if( ( pcTraceBuffer + tskSIZE_OF_EACH_TRACE_LINE ) < pcTraceBufferEnd )				\
 203:FreeRTOS/Src/tasks.c **** 				{																					\
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 5


 204:FreeRTOS/Src/tasks.c **** 					uxPreviousTask = pxCurrentTCB->uxTCBNumber;										\
 205:FreeRTOS/Src/tasks.c **** 					*( unsigned portLONG * ) pcTraceBuffer = ( unsigned portLONG ) xTickCount;		\
 206:FreeRTOS/Src/tasks.c **** 					pcTraceBuffer += sizeof( unsigned portLONG );									\
 207:FreeRTOS/Src/tasks.c **** 					*( unsigned portLONG * ) pcTraceBuffer = ( unsigned portLONG ) uxPreviousTask;	\
 208:FreeRTOS/Src/tasks.c **** 					pcTraceBuffer += sizeof( unsigned portLONG );									\
 209:FreeRTOS/Src/tasks.c **** 				}																					\
 210:FreeRTOS/Src/tasks.c **** 				else																				\
 211:FreeRTOS/Src/tasks.c **** 				{																					\
 212:FreeRTOS/Src/tasks.c **** 					xTracing = pdFALSE;																\
 213:FreeRTOS/Src/tasks.c **** 				}																					\
 214:FreeRTOS/Src/tasks.c **** 			}																						\
 215:FreeRTOS/Src/tasks.c **** 		}																							\
 216:FreeRTOS/Src/tasks.c **** 	}
 217:FreeRTOS/Src/tasks.c **** 
 218:FreeRTOS/Src/tasks.c **** #else
 219:FreeRTOS/Src/tasks.c **** 
 220:FreeRTOS/Src/tasks.c **** 	#define vWriteTraceToBuffer()
 221:FreeRTOS/Src/tasks.c **** 
 222:FreeRTOS/Src/tasks.c **** #endif
 223:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 224:FreeRTOS/Src/tasks.c **** 
 225:FreeRTOS/Src/tasks.c **** /*
 226:FreeRTOS/Src/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready queue for
 227:FreeRTOS/Src/tasks.c ****  * the task.  It is inserted at the end of the list.  One quirk of this is
 228:FreeRTOS/Src/tasks.c ****  * that if the task being inserted is at the same priority as the currently
 229:FreeRTOS/Src/tasks.c ****  * executing task, then it will only be rescheduled after the currently
 230:FreeRTOS/Src/tasks.c ****  * executing task has been rescheduled.
 231:FreeRTOS/Src/tasks.c ****  */
 232:FreeRTOS/Src/tasks.c **** #define prvAddTaskToReadyQueue( pxTCB )																			\
 233:FreeRTOS/Src/tasks.c **** {																												\
 234:FreeRTOS/Src/tasks.c **** 	if( pxTCB->uxPriority > uxTopReadyPriority )																\
 235:FreeRTOS/Src/tasks.c **** 	{																											\
 236:FreeRTOS/Src/tasks.c **** 		uxTopReadyPriority = pxTCB->uxPriority;																	\
 237:FreeRTOS/Src/tasks.c **** 	}																											\
 238:FreeRTOS/Src/tasks.c **** 	vListInsertEnd( ( xList * ) &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListIte
 239:FreeRTOS/Src/tasks.c **** }
 240:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 241:FreeRTOS/Src/tasks.c **** 
 242:FreeRTOS/Src/tasks.c **** /*
 243:FreeRTOS/Src/tasks.c ****  * Macro that looks at the list of tasks that are currently delayed to see if
 244:FreeRTOS/Src/tasks.c ****  * any require waking.
 245:FreeRTOS/Src/tasks.c ****  *
 246:FreeRTOS/Src/tasks.c ****  * Tasks are stored in the queue in the order of their wake time - meaning
 247:FreeRTOS/Src/tasks.c ****  * once one tasks has been found whose timer has not expired we need not look
 248:FreeRTOS/Src/tasks.c ****  * any further down the list.
 249:FreeRTOS/Src/tasks.c ****  */
 250:FreeRTOS/Src/tasks.c **** #define prvCheckDelayedTasks()																						\
 251:FreeRTOS/Src/tasks.c **** {																													\
 252:FreeRTOS/Src/tasks.c **** register tskTCB *pxTCB;																								\
 253:FreeRTOS/Src/tasks.c **** 																													\
 254:FreeRTOS/Src/tasks.c **** 	while( ( pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ) ) != NULL )						\
 255:FreeRTOS/Src/tasks.c **** 	{																												\
 256:FreeRTOS/Src/tasks.c **** 		if( xTickCount < listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) ) )									\
 257:FreeRTOS/Src/tasks.c **** 		{																											\
 258:FreeRTOS/Src/tasks.c **** 			break;																									\
 259:FreeRTOS/Src/tasks.c **** 		}																											\
 260:FreeRTOS/Src/tasks.c **** 		vListRemove( &( pxTCB->xGenericListItem ) );																\
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 6


 261:FreeRTOS/Src/tasks.c **** 		/* Is the task waiting on an event also? */																	\
 262:FreeRTOS/Src/tasks.c **** 		if( pxTCB->xEventListItem.pvContainer )																		\
 263:FreeRTOS/Src/tasks.c **** 		{																											\
 264:FreeRTOS/Src/tasks.c **** 			vListRemove( &( pxTCB->xEventListItem ) );																\
 265:FreeRTOS/Src/tasks.c **** 		}																											\
 266:FreeRTOS/Src/tasks.c **** 		prvAddTaskToReadyQueue( pxTCB );																			\
 267:FreeRTOS/Src/tasks.c **** 	}																												\
 268:FreeRTOS/Src/tasks.c **** }
 269:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 270:FreeRTOS/Src/tasks.c **** 
 271:FreeRTOS/Src/tasks.c **** /*
 272:FreeRTOS/Src/tasks.c ****  * Several functions take an xTaskHandle parameter that can optionally be NULL,
 273:FreeRTOS/Src/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 274:FreeRTOS/Src/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 275:FreeRTOS/Src/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 276:FreeRTOS/Src/tasks.c ****  */
 277:FreeRTOS/Src/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( pxHandle == NULL ) ? ( tskTCB * ) pxCurrentTCB : ( tskT
 278:FreeRTOS/Src/tasks.c **** 
 279:FreeRTOS/Src/tasks.c **** 
 280:FreeRTOS/Src/tasks.c **** /* File private functions. --------------------------------*/
 281:FreeRTOS/Src/tasks.c **** 
 282:FreeRTOS/Src/tasks.c **** /*
 283:FreeRTOS/Src/tasks.c ****  * Utility to ready a TCB for a given task.  Mainly just copies the parameters
 284:FreeRTOS/Src/tasks.c ****  * into the TCB structure.
 285:FreeRTOS/Src/tasks.c ****  */
 286:FreeRTOS/Src/tasks.c **** static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed portCHAR * const pcName, unsigne
 287:FreeRTOS/Src/tasks.c **** 
 288:FreeRTOS/Src/tasks.c **** /*
 289:FreeRTOS/Src/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 290:FreeRTOS/Src/tasks.c ****  * automatically upon the creation of the first task.
 291:FreeRTOS/Src/tasks.c ****  */
 292:FreeRTOS/Src/tasks.c **** static void prvInitialiseTaskLists( void );
 293:FreeRTOS/Src/tasks.c **** 
 294:FreeRTOS/Src/tasks.c **** /*
 295:FreeRTOS/Src/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 296:FreeRTOS/Src/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 297:FreeRTOS/Src/tasks.c ****  * creation of the first user task.
 298:FreeRTOS/Src/tasks.c ****  *
 299:FreeRTOS/Src/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 300:FreeRTOS/Src/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 301:FreeRTOS/Src/tasks.c ****  *
 302:FreeRTOS/Src/tasks.c ****  * void prvIdleTask( void *pvParameters );
 303:FreeRTOS/Src/tasks.c ****  *
 304:FreeRTOS/Src/tasks.c ****  */
 305:FreeRTOS/Src/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 306:FreeRTOS/Src/tasks.c **** 
 307:FreeRTOS/Src/tasks.c **** /*
 308:FreeRTOS/Src/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 309:FreeRTOS/Src/tasks.c ****  * including the stack pointed to by the TCB.
 310:FreeRTOS/Src/tasks.c ****  *
 311:FreeRTOS/Src/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 312:FreeRTOS/Src/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 313:FreeRTOS/Src/tasks.c ****  */
 314:FreeRTOS/Src/tasks.c **** #if ( ( INCLUDE_vTaskDelete == 1 ) || ( INCLUDE_vTaskCleanUpResources == 1 ) )
 315:FreeRTOS/Src/tasks.c **** 
 316:FreeRTOS/Src/tasks.c **** 	static void prvDeleteTCB( tskTCB *pxTCB );
 317:FreeRTOS/Src/tasks.c **** 
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 7


 318:FreeRTOS/Src/tasks.c **** #endif
 319:FreeRTOS/Src/tasks.c **** 
 320:FreeRTOS/Src/tasks.c **** /*
 321:FreeRTOS/Src/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 322:FreeRTOS/Src/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 323:FreeRTOS/Src/tasks.c ****  * and its TCB deleted.
 324:FreeRTOS/Src/tasks.c ****  */
 325:FreeRTOS/Src/tasks.c **** static void prvCheckTasksWaitingTermination( void );
 326:FreeRTOS/Src/tasks.c **** 
 327:FreeRTOS/Src/tasks.c **** /*
 328:FreeRTOS/Src/tasks.c ****  * Allocates memory from the heap for a TCB and associated stack.  Checks the
 329:FreeRTOS/Src/tasks.c ****  * allocation was successful.
 330:FreeRTOS/Src/tasks.c ****  */
 331:FreeRTOS/Src/tasks.c **** static tskTCB *prvAllocateTCBAndStack( unsigned portSHORT usStackDepth );
 332:FreeRTOS/Src/tasks.c **** 
 333:FreeRTOS/Src/tasks.c **** /*
 334:FreeRTOS/Src/tasks.c ****  * Called from vTaskList.  vListTasks details all the tasks currently under
 335:FreeRTOS/Src/tasks.c ****  * control of the scheduler.  The tasks may be in one of a number of lists.
 336:FreeRTOS/Src/tasks.c ****  * prvListTaskWithinSingleList accepts a list and details the tasks from
 337:FreeRTOS/Src/tasks.c ****  * within just that list.
 338:FreeRTOS/Src/tasks.c ****  *
 339:FreeRTOS/Src/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 340:FreeRTOS/Src/tasks.c ****  * NORMAL APPLICATION CODE.
 341:FreeRTOS/Src/tasks.c ****  */
 342:FreeRTOS/Src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 343:FreeRTOS/Src/tasks.c **** 
 344:FreeRTOS/Src/tasks.c **** 	static void prvListTaskWithinSingleList( const signed portCHAR *pcWriteBuffer, xList *pxList, sign
 345:FreeRTOS/Src/tasks.c **** 
 346:FreeRTOS/Src/tasks.c **** #endif
 347:FreeRTOS/Src/tasks.c **** 
 348:FreeRTOS/Src/tasks.c **** /*
 349:FreeRTOS/Src/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 350:FreeRTOS/Src/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 351:FreeRTOS/Src/tasks.c ****  * determining how much of the stack remains at the original preset value.
 352:FreeRTOS/Src/tasks.c ****  */
 353:FreeRTOS/Src/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 354:FreeRTOS/Src/tasks.c **** 
 355:FreeRTOS/Src/tasks.c **** 	unsigned portSHORT usTaskCheckFreeStackSpace( const unsigned portCHAR * pucStackByte );
 356:FreeRTOS/Src/tasks.c **** 
 357:FreeRTOS/Src/tasks.c **** #endif
 358:FreeRTOS/Src/tasks.c **** 
 359:FreeRTOS/Src/tasks.c **** 
 360:FreeRTOS/Src/tasks.c **** /*lint +e956 */
 361:FreeRTOS/Src/tasks.c **** 
 362:FreeRTOS/Src/tasks.c **** 
 363:FreeRTOS/Src/tasks.c **** 
 364:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------
 365:FreeRTOS/Src/tasks.c ****  * TASK CREATION API documented in task.h
 366:FreeRTOS/Src/tasks.c ****  *----------------------------------------------------------*/
 367:FreeRTOS/Src/tasks.c **** 
 368:FreeRTOS/Src/tasks.c **** signed portBASE_TYPE xTaskCreate( pdTASK_CODE pvTaskCode, const signed portCHAR * const pcName, uns
 369:FreeRTOS/Src/tasks.c **** {
 370:FreeRTOS/Src/tasks.c **** signed portBASE_TYPE xReturn;
 371:FreeRTOS/Src/tasks.c **** tskTCB * pxNewTCB;
 372:FreeRTOS/Src/tasks.c **** 
 373:FreeRTOS/Src/tasks.c **** 	/* Allocate the memory required by the TCB and stack for the new task.
 374:FreeRTOS/Src/tasks.c **** 	checking that the allocation was successful. */
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 8


 375:FreeRTOS/Src/tasks.c **** 	pxNewTCB = prvAllocateTCBAndStack( usStackDepth );
 376:FreeRTOS/Src/tasks.c **** 
 377:FreeRTOS/Src/tasks.c **** 	if( pxNewTCB != NULL )
 378:FreeRTOS/Src/tasks.c **** 	{
 379:FreeRTOS/Src/tasks.c **** 		portSTACK_TYPE *pxTopOfStack;
 380:FreeRTOS/Src/tasks.c **** 
 381:FreeRTOS/Src/tasks.c **** 		/* Setup the newly allocated TCB with the initial state of the task. */
 382:FreeRTOS/Src/tasks.c **** 		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority );
 383:FreeRTOS/Src/tasks.c **** 
 384:FreeRTOS/Src/tasks.c **** 		/* Calculate the top of stack address.  This depends on whether the
 385:FreeRTOS/Src/tasks.c **** 		stack grows from high memory to low (as per the 80x86) or visa versa.
 386:FreeRTOS/Src/tasks.c **** 		portSTACK_GROWTH is used to make the result positive or negative as
 387:FreeRTOS/Src/tasks.c **** 		required by the port. */
 388:FreeRTOS/Src/tasks.c **** 		#if portSTACK_GROWTH < 0
 389:FreeRTOS/Src/tasks.c **** 		{
 390:FreeRTOS/Src/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 ) - ( ( usStackDepth - 1 ) % portBYTE_ALIG
 391:FreeRTOS/Src/tasks.c **** 		}
 392:FreeRTOS/Src/tasks.c **** 		#else
 393:FreeRTOS/Src/tasks.c **** 		{
 394:FreeRTOS/Src/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack;
 395:FreeRTOS/Src/tasks.c **** 
 396:FreeRTOS/Src/tasks.c **** 			/* If we want to use stack checking on architectures that use
 397:FreeRTOS/Src/tasks.c **** 			a positive stack growth direction then we also need to store the
 398:FreeRTOS/Src/tasks.c **** 			other extreme of the stack space. */
 399:FreeRTOS/Src/tasks.c **** 			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
 400:FreeRTOS/Src/tasks.c **** 		}
 401:FreeRTOS/Src/tasks.c **** 		#endif
 402:FreeRTOS/Src/tasks.c **** 
 403:FreeRTOS/Src/tasks.c **** 		/* Initialize the TCB stack to look as if the task was already running,
 404:FreeRTOS/Src/tasks.c **** 		but had been interrupted by the scheduler.  The return address is set
 405:FreeRTOS/Src/tasks.c **** 		to the start of the task function. Once the stack has been initialised
 406:FreeRTOS/Src/tasks.c **** 		the	top of stack variable is updated. */
 407:FreeRTOS/Src/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pvTaskCode, pvParameters );
 408:FreeRTOS/Src/tasks.c **** 
 409:FreeRTOS/Src/tasks.c **** 		/* We are going to manipulate the task queues to add this task to a
 410:FreeRTOS/Src/tasks.c **** 		ready list, so must make sure no interrupts occur. */
 411:FreeRTOS/Src/tasks.c **** 		portENTER_CRITICAL();
 412:FreeRTOS/Src/tasks.c **** 		{
 413:FreeRTOS/Src/tasks.c **** 			uxCurrentNumberOfTasks++;
 414:FreeRTOS/Src/tasks.c **** 			if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 415:FreeRTOS/Src/tasks.c **** 			{
 416:FreeRTOS/Src/tasks.c **** 				/* As this is the first task it must also be the current task. */
 417:FreeRTOS/Src/tasks.c **** 				pxCurrentTCB =  pxNewTCB;
 418:FreeRTOS/Src/tasks.c **** 
 419:FreeRTOS/Src/tasks.c **** 				/* This is the first task to be created so do the preliminary
 420:FreeRTOS/Src/tasks.c **** 				initialisation required.  We will not recover if this call
 421:FreeRTOS/Src/tasks.c **** 				fails, but we will report the failure. */
 422:FreeRTOS/Src/tasks.c **** 				prvInitialiseTaskLists();
 423:FreeRTOS/Src/tasks.c **** 			}
 424:FreeRTOS/Src/tasks.c **** 			else
 425:FreeRTOS/Src/tasks.c **** 			{
 426:FreeRTOS/Src/tasks.c **** 				/* If the scheduler is not already running, make this task the
 427:FreeRTOS/Src/tasks.c **** 				current task if it is the highest priority task to be created
 428:FreeRTOS/Src/tasks.c **** 				so far. */
 429:FreeRTOS/Src/tasks.c **** 				if( xSchedulerRunning == pdFALSE )
 430:FreeRTOS/Src/tasks.c **** 				{
 431:FreeRTOS/Src/tasks.c **** 					if( pxCurrentTCB->uxPriority <= uxPriority )
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 9


 432:FreeRTOS/Src/tasks.c **** 					{
 433:FreeRTOS/Src/tasks.c **** 						pxCurrentTCB = pxNewTCB;
 434:FreeRTOS/Src/tasks.c **** 					}
 435:FreeRTOS/Src/tasks.c **** 				}
 436:FreeRTOS/Src/tasks.c **** 			}
 437:FreeRTOS/Src/tasks.c **** 
 438:FreeRTOS/Src/tasks.c **** 			/* Remember the top priority to make context switching faster.  Use
 439:FreeRTOS/Src/tasks.c **** 			the priority in pxNewTCB as this has been capped to a valid value. */
 440:FreeRTOS/Src/tasks.c **** 			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 441:FreeRTOS/Src/tasks.c **** 			{
 442:FreeRTOS/Src/tasks.c **** 				uxTopUsedPriority = pxNewTCB->uxPriority;
 443:FreeRTOS/Src/tasks.c **** 			}
 444:FreeRTOS/Src/tasks.c **** 
 445:FreeRTOS/Src/tasks.c **** 			#if ( configUSE_TRACE_FACILITY == 1 )
 446:FreeRTOS/Src/tasks.c **** 			{
 447:FreeRTOS/Src/tasks.c **** 				/* Add a counter into the TCB for tracing only. */
 448:FreeRTOS/Src/tasks.c **** 				pxNewTCB->uxTCBNumber = uxTaskNumber;
 449:FreeRTOS/Src/tasks.c **** 			}
 450:FreeRTOS/Src/tasks.c **** 			#endif
 451:FreeRTOS/Src/tasks.c **** 			uxTaskNumber++;
 452:FreeRTOS/Src/tasks.c **** 
 453:FreeRTOS/Src/tasks.c **** 			prvAddTaskToReadyQueue( pxNewTCB );
 454:FreeRTOS/Src/tasks.c **** 
 455:FreeRTOS/Src/tasks.c **** 			xReturn = pdPASS;
 456:FreeRTOS/Src/tasks.c **** 			traceTASK_CREATE( pxNewTCB );
 457:FreeRTOS/Src/tasks.c **** 		}
 458:FreeRTOS/Src/tasks.c **** 		portEXIT_CRITICAL();
 459:FreeRTOS/Src/tasks.c **** 	}
 460:FreeRTOS/Src/tasks.c **** 	else
 461:FreeRTOS/Src/tasks.c **** 	{
 462:FreeRTOS/Src/tasks.c **** 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 463:FreeRTOS/Src/tasks.c **** 		traceTASK_CREATE_FAILED( pxNewTCB );
 464:FreeRTOS/Src/tasks.c **** 	}
 465:FreeRTOS/Src/tasks.c **** 
 466:FreeRTOS/Src/tasks.c **** 	if( xReturn == pdPASS )
 467:FreeRTOS/Src/tasks.c **** 	{
 468:FreeRTOS/Src/tasks.c **** 		if( ( void * ) pxCreatedTask != NULL )
 469:FreeRTOS/Src/tasks.c **** 		{
 470:FreeRTOS/Src/tasks.c **** 			/* Pass the TCB out - in an anonymous way.  The calling function/
 471:FreeRTOS/Src/tasks.c **** 			task can use this as a handle to delete the task later if
 472:FreeRTOS/Src/tasks.c **** 			required.*/
 473:FreeRTOS/Src/tasks.c **** 			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 474:FreeRTOS/Src/tasks.c **** 		}
 475:FreeRTOS/Src/tasks.c **** 
 476:FreeRTOS/Src/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 477:FreeRTOS/Src/tasks.c **** 		{
 478:FreeRTOS/Src/tasks.c **** 			/* If the created task is of a higher priority than the current task
 479:FreeRTOS/Src/tasks.c **** 			then it should run now. */
 480:FreeRTOS/Src/tasks.c **** 			if( pxCurrentTCB->uxPriority < uxPriority )
 481:FreeRTOS/Src/tasks.c **** 			{
 482:FreeRTOS/Src/tasks.c **** 				taskYIELD();
 483:FreeRTOS/Src/tasks.c **** 			}
 484:FreeRTOS/Src/tasks.c **** 		}
 485:FreeRTOS/Src/tasks.c **** 	}
 486:FreeRTOS/Src/tasks.c **** 
 487:FreeRTOS/Src/tasks.c **** 	return xReturn;
 488:FreeRTOS/Src/tasks.c **** }
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 10


 489:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 490:FreeRTOS/Src/tasks.c **** 
 491:FreeRTOS/Src/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 492:FreeRTOS/Src/tasks.c **** 
 493:FreeRTOS/Src/tasks.c **** 	void vTaskDelete( xTaskHandle pxTaskToDelete )
 494:FreeRTOS/Src/tasks.c **** 	{
 495:FreeRTOS/Src/tasks.c **** 	tskTCB *pxTCB;
 496:FreeRTOS/Src/tasks.c **** 
 497:FreeRTOS/Src/tasks.c **** 		taskENTER_CRITICAL();
 498:FreeRTOS/Src/tasks.c **** 		{
 499:FreeRTOS/Src/tasks.c **** 			/* Ensure a yield is performed if the current task is being
 500:FreeRTOS/Src/tasks.c **** 			deleted. */
 501:FreeRTOS/Src/tasks.c **** 			if( pxTaskToDelete == pxCurrentTCB )
 502:FreeRTOS/Src/tasks.c **** 			{
 503:FreeRTOS/Src/tasks.c **** 				pxTaskToDelete = NULL;
 504:FreeRTOS/Src/tasks.c **** 			}
 505:FreeRTOS/Src/tasks.c **** 
 506:FreeRTOS/Src/tasks.c **** 			/* If null is passed in here then we are deleting ourselves. */
 507:FreeRTOS/Src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
 508:FreeRTOS/Src/tasks.c **** 
 509:FreeRTOS/Src/tasks.c **** 			/* Remove task from the ready list and place in the	termination list.
 510:FreeRTOS/Src/tasks.c **** 			This will stop the task from be scheduled.  The idle task will check
 511:FreeRTOS/Src/tasks.c **** 			the termination list and free up any memory allocated by the
 512:FreeRTOS/Src/tasks.c **** 			scheduler for the TCB and stack. */
 513:FreeRTOS/Src/tasks.c **** 			vListRemove( &( pxTCB->xGenericListItem ) );
 514:FreeRTOS/Src/tasks.c **** 
 515:FreeRTOS/Src/tasks.c **** 			/* Is the task waiting on an event also? */
 516:FreeRTOS/Src/tasks.c **** 			if( pxTCB->xEventListItem.pvContainer )
 517:FreeRTOS/Src/tasks.c **** 			{
 518:FreeRTOS/Src/tasks.c **** 				vListRemove( &( pxTCB->xEventListItem ) );
 519:FreeRTOS/Src/tasks.c **** 			}
 520:FreeRTOS/Src/tasks.c **** 
 521:FreeRTOS/Src/tasks.c **** 			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 522:FreeRTOS/Src/tasks.c **** 
 523:FreeRTOS/Src/tasks.c **** 			/* Increment the ucTasksDeleted variable so the idle task knows
 524:FreeRTOS/Src/tasks.c **** 			there is a task that has been deleted and that it should therefore
 525:FreeRTOS/Src/tasks.c **** 			check the xTasksWaitingTermination list. */
 526:FreeRTOS/Src/tasks.c **** 			++uxTasksDeleted;
 527:FreeRTOS/Src/tasks.c **** 
 528:FreeRTOS/Src/tasks.c **** 			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
 529:FreeRTOS/Src/tasks.c **** 			can detect that the task lists need re-generating. */
 530:FreeRTOS/Src/tasks.c **** 			uxTaskNumber++;
 531:FreeRTOS/Src/tasks.c **** 
 532:FreeRTOS/Src/tasks.c **** 			traceTASK_DELETE( pxTCB );
 533:FreeRTOS/Src/tasks.c **** 		}
 534:FreeRTOS/Src/tasks.c **** 		taskEXIT_CRITICAL();
 535:FreeRTOS/Src/tasks.c **** 
 536:FreeRTOS/Src/tasks.c **** 		/* Force a reschedule if we have just deleted the current task. */
 537:FreeRTOS/Src/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 538:FreeRTOS/Src/tasks.c **** 		{
 539:FreeRTOS/Src/tasks.c **** 			if( ( void * ) pxTaskToDelete == NULL )
 540:FreeRTOS/Src/tasks.c **** 			{
 541:FreeRTOS/Src/tasks.c **** 				taskYIELD();
 542:FreeRTOS/Src/tasks.c **** 			}
 543:FreeRTOS/Src/tasks.c **** 		}
 544:FreeRTOS/Src/tasks.c **** 	}
 545:FreeRTOS/Src/tasks.c **** 
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 11


 546:FreeRTOS/Src/tasks.c **** #endif
 547:FreeRTOS/Src/tasks.c **** 
 548:FreeRTOS/Src/tasks.c **** 
 549:FreeRTOS/Src/tasks.c **** 
 550:FreeRTOS/Src/tasks.c **** 
 551:FreeRTOS/Src/tasks.c **** 
 552:FreeRTOS/Src/tasks.c **** 
 553:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------
 554:FreeRTOS/Src/tasks.c ****  * TASK CONTROL API documented in task.h
 555:FreeRTOS/Src/tasks.c ****  *----------------------------------------------------------*/
 556:FreeRTOS/Src/tasks.c **** 
 557:FreeRTOS/Src/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
 558:FreeRTOS/Src/tasks.c **** 
 559:FreeRTOS/Src/tasks.c **** 	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
 560:FreeRTOS/Src/tasks.c **** 	{
 561:FreeRTOS/Src/tasks.c **** 	portTickType xTimeToWake;
 562:FreeRTOS/Src/tasks.c **** 	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
 563:FreeRTOS/Src/tasks.c **** 
 564:FreeRTOS/Src/tasks.c **** 		vTaskSuspendAll();
 565:FreeRTOS/Src/tasks.c **** 		{
 566:FreeRTOS/Src/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
 567:FreeRTOS/Src/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 568:FreeRTOS/Src/tasks.c **** 
 569:FreeRTOS/Src/tasks.c **** 			if( xTickCount < *pxPreviousWakeTime )
 570:FreeRTOS/Src/tasks.c **** 			{
 571:FreeRTOS/Src/tasks.c **** 				/* The tick count has overflowed since this function was
 572:FreeRTOS/Src/tasks.c **** 				lasted called.  In this case the only time we should ever
 573:FreeRTOS/Src/tasks.c **** 				actually delay is if the wake time has also	overflowed,
 574:FreeRTOS/Src/tasks.c **** 				and the wake time is greater than the tick time.  When this
 575:FreeRTOS/Src/tasks.c **** 				is the case it is as if neither time had overflowed. */
 576:FreeRTOS/Src/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
 577:FreeRTOS/Src/tasks.c **** 				{
 578:FreeRTOS/Src/tasks.c **** 					xShouldDelay = pdTRUE;
 579:FreeRTOS/Src/tasks.c **** 				}
 580:FreeRTOS/Src/tasks.c **** 			}
 581:FreeRTOS/Src/tasks.c **** 			else
 582:FreeRTOS/Src/tasks.c **** 			{
 583:FreeRTOS/Src/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
 584:FreeRTOS/Src/tasks.c **** 				delay if either the wake time has overflowed, and/or the
 585:FreeRTOS/Src/tasks.c **** 				tick time is less than the wake time. */
 586:FreeRTOS/Src/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
 587:FreeRTOS/Src/tasks.c **** 				{
 588:FreeRTOS/Src/tasks.c **** 					xShouldDelay = pdTRUE;
 589:FreeRTOS/Src/tasks.c **** 				}
 590:FreeRTOS/Src/tasks.c **** 			}
 591:FreeRTOS/Src/tasks.c **** 
 592:FreeRTOS/Src/tasks.c **** 			/* Update the wake time ready for the next call. */
 593:FreeRTOS/Src/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 594:FreeRTOS/Src/tasks.c **** 
 595:FreeRTOS/Src/tasks.c **** 			if( xShouldDelay )
 596:FreeRTOS/Src/tasks.c **** 			{
 597:FreeRTOS/Src/tasks.c **** 				traceTASK_DELAY_UNTIL();
 598:FreeRTOS/Src/tasks.c **** 
 599:FreeRTOS/Src/tasks.c **** 				/* We must remove ourselves from the ready list before adding
 600:FreeRTOS/Src/tasks.c **** 				ourselves to the blocked list as the same list item is used for
 601:FreeRTOS/Src/tasks.c **** 				both lists. */
 602:FreeRTOS/Src/tasks.c **** 				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 12


 603:FreeRTOS/Src/tasks.c **** 
 604:FreeRTOS/Src/tasks.c **** 				/* The list item will be inserted in wake time order. */
 605:FreeRTOS/Src/tasks.c **** 				listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 606:FreeRTOS/Src/tasks.c **** 
 607:FreeRTOS/Src/tasks.c **** 				if( xTimeToWake < xTickCount )
 608:FreeRTOS/Src/tasks.c **** 				{
 609:FreeRTOS/Src/tasks.c **** 					/* Wake time has overflowed.  Place this item in the
 610:FreeRTOS/Src/tasks.c **** 					overflow list. */
 611:FreeRTOS/Src/tasks.c **** 					vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericL
 612:FreeRTOS/Src/tasks.c **** 				}
 613:FreeRTOS/Src/tasks.c **** 				else
 614:FreeRTOS/Src/tasks.c **** 				{
 615:FreeRTOS/Src/tasks.c **** 					/* The wake time has not overflowed, so we can use the
 616:FreeRTOS/Src/tasks.c **** 					current block list. */
 617:FreeRTOS/Src/tasks.c **** 					vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem 
 618:FreeRTOS/Src/tasks.c **** 				}
 619:FreeRTOS/Src/tasks.c **** 			}
 620:FreeRTOS/Src/tasks.c **** 		}
 621:FreeRTOS/Src/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 622:FreeRTOS/Src/tasks.c **** 
 623:FreeRTOS/Src/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 624:FreeRTOS/Src/tasks.c **** 		have put ourselves to sleep. */
 625:FreeRTOS/Src/tasks.c **** 		if( !xAlreadyYielded )
 626:FreeRTOS/Src/tasks.c **** 		{
 627:FreeRTOS/Src/tasks.c **** 			taskYIELD();
 628:FreeRTOS/Src/tasks.c **** 		}
 629:FreeRTOS/Src/tasks.c **** 	}
 630:FreeRTOS/Src/tasks.c **** 
 631:FreeRTOS/Src/tasks.c **** #endif
 632:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 633:FreeRTOS/Src/tasks.c **** 
 634:FreeRTOS/Src/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
 635:FreeRTOS/Src/tasks.c **** 
 636:FreeRTOS/Src/tasks.c **** 	void vTaskDelay( portTickType xTicksToDelay )
 637:FreeRTOS/Src/tasks.c **** 	{
 638:FreeRTOS/Src/tasks.c **** 	portTickType xTimeToWake;
 639:FreeRTOS/Src/tasks.c **** 	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 640:FreeRTOS/Src/tasks.c **** 
 641:FreeRTOS/Src/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
 642:FreeRTOS/Src/tasks.c **** 		if( xTicksToDelay > ( portTickType ) 0 )
 643:FreeRTOS/Src/tasks.c **** 		{
 644:FreeRTOS/Src/tasks.c **** 			vTaskSuspendAll();
 645:FreeRTOS/Src/tasks.c **** 			{
 646:FreeRTOS/Src/tasks.c **** 				traceTASK_DELAY();
 647:FreeRTOS/Src/tasks.c **** 
 648:FreeRTOS/Src/tasks.c **** 				/* A task that is removed from the event list while the
 649:FreeRTOS/Src/tasks.c **** 				scheduler is suspended will not get placed in the ready
 650:FreeRTOS/Src/tasks.c **** 				list or removed from the blocked list until the scheduler
 651:FreeRTOS/Src/tasks.c **** 				is resumed.
 652:FreeRTOS/Src/tasks.c **** 
 653:FreeRTOS/Src/tasks.c **** 				This task cannot be in an event list as it is the currently
 654:FreeRTOS/Src/tasks.c **** 				executing task. */
 655:FreeRTOS/Src/tasks.c **** 
 656:FreeRTOS/Src/tasks.c **** 				/* Calculate the time to wake - this may overflow but this is
 657:FreeRTOS/Src/tasks.c **** 				not a problem. */
 658:FreeRTOS/Src/tasks.c **** 				xTimeToWake = xTickCount + xTicksToDelay;
 659:FreeRTOS/Src/tasks.c **** 
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 13


 660:FreeRTOS/Src/tasks.c **** 				/* We must remove ourselves from the ready list before adding
 661:FreeRTOS/Src/tasks.c **** 				ourselves to the blocked list as the same list item is used for
 662:FreeRTOS/Src/tasks.c **** 				both lists. */
 663:FreeRTOS/Src/tasks.c **** 				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 664:FreeRTOS/Src/tasks.c **** 
 665:FreeRTOS/Src/tasks.c **** 				/* The list item will be inserted in wake time order. */
 666:FreeRTOS/Src/tasks.c **** 				listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 667:FreeRTOS/Src/tasks.c **** 
 668:FreeRTOS/Src/tasks.c **** 				if( xTimeToWake < xTickCount )
 669:FreeRTOS/Src/tasks.c **** 				{
 670:FreeRTOS/Src/tasks.c **** 					/* Wake time has overflowed.  Place this item in the
 671:FreeRTOS/Src/tasks.c **** 					overflow list. */
 672:FreeRTOS/Src/tasks.c **** 					vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericL
 673:FreeRTOS/Src/tasks.c **** 				}
 674:FreeRTOS/Src/tasks.c **** 				else
 675:FreeRTOS/Src/tasks.c **** 				{
 676:FreeRTOS/Src/tasks.c **** 					/* The wake time has not overflowed, so we can use the
 677:FreeRTOS/Src/tasks.c **** 					current block list. */
 678:FreeRTOS/Src/tasks.c **** 					vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem 
 679:FreeRTOS/Src/tasks.c **** 				}
 680:FreeRTOS/Src/tasks.c **** 			}
 681:FreeRTOS/Src/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 682:FreeRTOS/Src/tasks.c **** 		}
 683:FreeRTOS/Src/tasks.c **** 
 684:FreeRTOS/Src/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 685:FreeRTOS/Src/tasks.c **** 		have put ourselves to sleep. */
 686:FreeRTOS/Src/tasks.c **** 		if( !xAlreadyYielded )
 687:FreeRTOS/Src/tasks.c **** 		{
 688:FreeRTOS/Src/tasks.c **** 			taskYIELD();
 689:FreeRTOS/Src/tasks.c **** 		}
 690:FreeRTOS/Src/tasks.c **** 	}
 691:FreeRTOS/Src/tasks.c **** 
 692:FreeRTOS/Src/tasks.c **** #endif
 693:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 694:FreeRTOS/Src/tasks.c **** 
 695:FreeRTOS/Src/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
 696:FreeRTOS/Src/tasks.c **** 
 697:FreeRTOS/Src/tasks.c **** 	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
 698:FreeRTOS/Src/tasks.c **** 	{
 699:FreeRTOS/Src/tasks.c **** 	tskTCB *pxTCB;
 700:FreeRTOS/Src/tasks.c **** 	unsigned portBASE_TYPE uxReturn;
 701:FreeRTOS/Src/tasks.c **** 
 702:FreeRTOS/Src/tasks.c **** 		taskENTER_CRITICAL();
 703:FreeRTOS/Src/tasks.c **** 		{
 704:FreeRTOS/Src/tasks.c **** 			/* If null is passed in here then we are changing the
 705:FreeRTOS/Src/tasks.c **** 			priority of the calling function. */
 706:FreeRTOS/Src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTask );
 707:FreeRTOS/Src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 708:FreeRTOS/Src/tasks.c **** 		}
 709:FreeRTOS/Src/tasks.c **** 		taskEXIT_CRITICAL();
 710:FreeRTOS/Src/tasks.c **** 
 711:FreeRTOS/Src/tasks.c **** 		return uxReturn;
 712:FreeRTOS/Src/tasks.c **** 	}
 713:FreeRTOS/Src/tasks.c **** 
 714:FreeRTOS/Src/tasks.c **** #endif
 715:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 716:FreeRTOS/Src/tasks.c **** 
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 14


 717:FreeRTOS/Src/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
 718:FreeRTOS/Src/tasks.c **** 
 719:FreeRTOS/Src/tasks.c **** 	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
 720:FreeRTOS/Src/tasks.c **** 	{
 721:FreeRTOS/Src/tasks.c **** 	tskTCB *pxTCB;
 722:FreeRTOS/Src/tasks.c **** 	unsigned portBASE_TYPE uxCurrentPriority, xYieldRequired = pdFALSE;
 723:FreeRTOS/Src/tasks.c **** 
 724:FreeRTOS/Src/tasks.c **** 		/* Ensure the new priority is valid. */
 725:FreeRTOS/Src/tasks.c **** 		if( uxNewPriority >= configMAX_PRIORITIES )
 726:FreeRTOS/Src/tasks.c **** 		{
 727:FreeRTOS/Src/tasks.c **** 			uxNewPriority = configMAX_PRIORITIES - 1;
 728:FreeRTOS/Src/tasks.c **** 		}
 729:FreeRTOS/Src/tasks.c **** 
 730:FreeRTOS/Src/tasks.c **** 		taskENTER_CRITICAL();
 731:FreeRTOS/Src/tasks.c **** 		{
 732:FreeRTOS/Src/tasks.c **** 			if( pxTask == pxCurrentTCB )
 733:FreeRTOS/Src/tasks.c **** 			{
 734:FreeRTOS/Src/tasks.c **** 				pxTask = NULL;
 735:FreeRTOS/Src/tasks.c **** 			}
 736:FreeRTOS/Src/tasks.c **** 
 737:FreeRTOS/Src/tasks.c **** 			/* If null is passed in here then we are changing the
 738:FreeRTOS/Src/tasks.c **** 			priority of the calling function. */
 739:FreeRTOS/Src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTask );
 740:FreeRTOS/Src/tasks.c **** 
 741:FreeRTOS/Src/tasks.c **** 			traceTASK_PRIORITY_SET( pxTask, uxNewPriority );
 742:FreeRTOS/Src/tasks.c **** 
 743:FreeRTOS/Src/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
 744:FreeRTOS/Src/tasks.c **** 			{
 745:FreeRTOS/Src/tasks.c **** 				uxCurrentPriority = pxTCB->uxBasePriority;
 746:FreeRTOS/Src/tasks.c **** 			}
 747:FreeRTOS/Src/tasks.c **** 			#else
 748:FreeRTOS/Src/tasks.c **** 			{
 749:FreeRTOS/Src/tasks.c **** 				uxCurrentPriority = pxTCB->uxPriority;
 750:FreeRTOS/Src/tasks.c **** 			}
 751:FreeRTOS/Src/tasks.c **** 			#endif
 752:FreeRTOS/Src/tasks.c **** 
 753:FreeRTOS/Src/tasks.c **** 			if( uxCurrentPriority != uxNewPriority )
 754:FreeRTOS/Src/tasks.c **** 			{
 755:FreeRTOS/Src/tasks.c **** 				/* The priority change may have readied a task of higher
 756:FreeRTOS/Src/tasks.c **** 				priority than the calling task. */
 757:FreeRTOS/Src/tasks.c **** 				if( uxNewPriority > uxCurrentPriority )
 758:FreeRTOS/Src/tasks.c **** 				{
 759:FreeRTOS/Src/tasks.c **** 					if( pxTask != NULL )
 760:FreeRTOS/Src/tasks.c **** 					{
 761:FreeRTOS/Src/tasks.c **** 						/* The priority of another task is being raised.  If we
 762:FreeRTOS/Src/tasks.c **** 						were raising the priority of the currently running task
 763:FreeRTOS/Src/tasks.c **** 						there would be no need to switch as it must have already
 764:FreeRTOS/Src/tasks.c **** 						been the highest priority task. */
 765:FreeRTOS/Src/tasks.c **** 						xYieldRequired = pdTRUE;
 766:FreeRTOS/Src/tasks.c **** 					}
 767:FreeRTOS/Src/tasks.c **** 				}
 768:FreeRTOS/Src/tasks.c **** 				else if( pxTask == NULL )
 769:FreeRTOS/Src/tasks.c **** 				{
 770:FreeRTOS/Src/tasks.c **** 					/* Setting our own priority down means there may now be another
 771:FreeRTOS/Src/tasks.c **** 					task of higher priority that is ready to execute. */
 772:FreeRTOS/Src/tasks.c **** 					xYieldRequired = pdTRUE;
 773:FreeRTOS/Src/tasks.c **** 				}
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 15


 774:FreeRTOS/Src/tasks.c **** 
 775:FreeRTOS/Src/tasks.c **** 
 776:FreeRTOS/Src/tasks.c **** 
 777:FreeRTOS/Src/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
 778:FreeRTOS/Src/tasks.c **** 				{
 779:FreeRTOS/Src/tasks.c **** 					/* Only change the priority being used if the task is not
 780:FreeRTOS/Src/tasks.c **** 					currently using an inherited priority. */
 781:FreeRTOS/Src/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 782:FreeRTOS/Src/tasks.c **** 					{
 783:FreeRTOS/Src/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 784:FreeRTOS/Src/tasks.c **** 					}
 785:FreeRTOS/Src/tasks.c **** 
 786:FreeRTOS/Src/tasks.c **** 					/* The base priority gets set whatever. */
 787:FreeRTOS/Src/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 788:FreeRTOS/Src/tasks.c **** 				}
 789:FreeRTOS/Src/tasks.c **** 				#else
 790:FreeRTOS/Src/tasks.c **** 				{
 791:FreeRTOS/Src/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
 792:FreeRTOS/Src/tasks.c **** 				}
 793:FreeRTOS/Src/tasks.c **** 				#endif
 794:FreeRTOS/Src/tasks.c **** 
 795:FreeRTOS/Src/tasks.c **** 				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) 
 796:FreeRTOS/Src/tasks.c **** 
 797:FreeRTOS/Src/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
 798:FreeRTOS/Src/tasks.c **** 				nothing more than change it's priority variable. However, if
 799:FreeRTOS/Src/tasks.c **** 				the task is in a ready list it needs to be removed and placed
 800:FreeRTOS/Src/tasks.c **** 				in the queue appropriate to its new priority. */
 801:FreeRTOS/Src/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericLis
 802:FreeRTOS/Src/tasks.c **** 				{
 803:FreeRTOS/Src/tasks.c **** 					/* The task is currently in its ready list - remove before adding
 804:FreeRTOS/Src/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
 805:FreeRTOS/Src/tasks.c **** 					can do this even if the scheduler is suspended. */
 806:FreeRTOS/Src/tasks.c **** 					vListRemove( &( pxTCB->xGenericListItem ) );
 807:FreeRTOS/Src/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 808:FreeRTOS/Src/tasks.c **** 				}
 809:FreeRTOS/Src/tasks.c **** 
 810:FreeRTOS/Src/tasks.c **** 				if( xYieldRequired == pdTRUE )
 811:FreeRTOS/Src/tasks.c **** 				{
 812:FreeRTOS/Src/tasks.c **** 					taskYIELD();
 813:FreeRTOS/Src/tasks.c **** 				}
 814:FreeRTOS/Src/tasks.c **** 			}
 815:FreeRTOS/Src/tasks.c **** 		}
 816:FreeRTOS/Src/tasks.c **** 		taskEXIT_CRITICAL();
 817:FreeRTOS/Src/tasks.c **** 	}
 818:FreeRTOS/Src/tasks.c **** 
 819:FreeRTOS/Src/tasks.c **** #endif
 820:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 821:FreeRTOS/Src/tasks.c **** 
 822:FreeRTOS/Src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 823:FreeRTOS/Src/tasks.c **** 
 824:FreeRTOS/Src/tasks.c **** 	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
 825:FreeRTOS/Src/tasks.c **** 	{
 826:FreeRTOS/Src/tasks.c **** 	tskTCB *pxTCB;
 827:FreeRTOS/Src/tasks.c **** 
 828:FreeRTOS/Src/tasks.c **** 		taskENTER_CRITICAL();
 829:FreeRTOS/Src/tasks.c **** 		{
 830:FreeRTOS/Src/tasks.c **** 			/* Ensure a yield is performed if the current task is being
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 16


 831:FreeRTOS/Src/tasks.c **** 			suspended. */
 832:FreeRTOS/Src/tasks.c **** 			if( pxTaskToSuspend == pxCurrentTCB )
 833:FreeRTOS/Src/tasks.c **** 			{
 834:FreeRTOS/Src/tasks.c **** 				pxTaskToSuspend = NULL;
 835:FreeRTOS/Src/tasks.c **** 			}
 836:FreeRTOS/Src/tasks.c **** 
 837:FreeRTOS/Src/tasks.c **** 			/* If null is passed in here then we are suspending ourselves. */
 838:FreeRTOS/Src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
 839:FreeRTOS/Src/tasks.c **** 
 840:FreeRTOS/Src/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
 841:FreeRTOS/Src/tasks.c **** 
 842:FreeRTOS/Src/tasks.c **** 			/* Remove task from the ready/delayed list and place in the	suspended list. */
 843:FreeRTOS/Src/tasks.c **** 			vListRemove( &( pxTCB->xGenericListItem ) );
 844:FreeRTOS/Src/tasks.c **** 
 845:FreeRTOS/Src/tasks.c **** 			/* Is the task waiting on an event also? */
 846:FreeRTOS/Src/tasks.c **** 			if( pxTCB->xEventListItem.pvContainer )
 847:FreeRTOS/Src/tasks.c **** 			{
 848:FreeRTOS/Src/tasks.c **** 				vListRemove( &( pxTCB->xEventListItem ) );
 849:FreeRTOS/Src/tasks.c **** 			}
 850:FreeRTOS/Src/tasks.c **** 
 851:FreeRTOS/Src/tasks.c **** 			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 852:FreeRTOS/Src/tasks.c **** 		}
 853:FreeRTOS/Src/tasks.c **** 		taskEXIT_CRITICAL();
 854:FreeRTOS/Src/tasks.c **** 
 855:FreeRTOS/Src/tasks.c **** 		/* We may have just suspended the current task. */
 856:FreeRTOS/Src/tasks.c **** 		if( ( void * ) pxTaskToSuspend == NULL )
 857:FreeRTOS/Src/tasks.c **** 		{
 858:FreeRTOS/Src/tasks.c **** 			taskYIELD();
 859:FreeRTOS/Src/tasks.c **** 		}
 860:FreeRTOS/Src/tasks.c **** 	}
 861:FreeRTOS/Src/tasks.c **** 
 862:FreeRTOS/Src/tasks.c **** #endif
 863:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 864:FreeRTOS/Src/tasks.c **** 
 865:FreeRTOS/Src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 866:FreeRTOS/Src/tasks.c **** 
 867:FreeRTOS/Src/tasks.c **** 	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
 868:FreeRTOS/Src/tasks.c **** 	{
 869:FreeRTOS/Src/tasks.c **** 	portBASE_TYPE xReturn = pdFALSE;
 870:FreeRTOS/Src/tasks.c **** 	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
 871:FreeRTOS/Src/tasks.c **** 
 872:FreeRTOS/Src/tasks.c **** 		/* Is the task we are attempting to resume actually in the
 873:FreeRTOS/Src/tasks.c **** 		suspended list? */
 874:FreeRTOS/Src/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 875:FreeRTOS/Src/tasks.c **** 		{
 876:FreeRTOS/Src/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
 877:FreeRTOS/Src/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
 878:FreeRTOS/Src/tasks.c **** 			{
 879:FreeRTOS/Src/tasks.c **** 				/* Is it in the suspended list because it is in the
 880:FreeRTOS/Src/tasks.c **** 				Suspended state?  It is possible to be in the suspended
 881:FreeRTOS/Src/tasks.c **** 				list because it is blocked on a task with no timeout
 882:FreeRTOS/Src/tasks.c **** 				specified. */
 883:FreeRTOS/Src/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
 884:FreeRTOS/Src/tasks.c **** 				{
 885:FreeRTOS/Src/tasks.c **** 					xReturn = pdTRUE;
 886:FreeRTOS/Src/tasks.c **** 				}
 887:FreeRTOS/Src/tasks.c **** 			}
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 17


 888:FreeRTOS/Src/tasks.c **** 		}
 889:FreeRTOS/Src/tasks.c **** 
 890:FreeRTOS/Src/tasks.c **** 		return xReturn;
 891:FreeRTOS/Src/tasks.c **** 	}
 892:FreeRTOS/Src/tasks.c **** 
 893:FreeRTOS/Src/tasks.c **** #endif
 894:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 895:FreeRTOS/Src/tasks.c **** 
 896:FreeRTOS/Src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 897:FreeRTOS/Src/tasks.c **** 
 898:FreeRTOS/Src/tasks.c **** 	void vTaskResume( xTaskHandle pxTaskToResume )
 899:FreeRTOS/Src/tasks.c **** 	{
 900:FreeRTOS/Src/tasks.c **** 	tskTCB *pxTCB;
 901:FreeRTOS/Src/tasks.c **** 
 902:FreeRTOS/Src/tasks.c **** 		/* Remove the task from whichever list it is currently in, and place
 903:FreeRTOS/Src/tasks.c **** 		it in the ready list. */
 904:FreeRTOS/Src/tasks.c **** 		pxTCB = ( tskTCB * ) pxTaskToResume;
 905:FreeRTOS/Src/tasks.c **** 
 906:FreeRTOS/Src/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
 907:FreeRTOS/Src/tasks.c **** 		currently executing task. */
 908:FreeRTOS/Src/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 909:FreeRTOS/Src/tasks.c **** 		{
 910:FreeRTOS/Src/tasks.c **** 			taskENTER_CRITICAL();
 911:FreeRTOS/Src/tasks.c **** 			{
 912:FreeRTOS/Src/tasks.c **** 				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 913:FreeRTOS/Src/tasks.c **** 				{
 914:FreeRTOS/Src/tasks.c **** 					traceTASK_RESUME( pxTCB );
 915:FreeRTOS/Src/tasks.c **** 
 916:FreeRTOS/Src/tasks.c **** 					/* As we are in a critical section we can access the ready
 917:FreeRTOS/Src/tasks.c **** 					lists even if the scheduler is suspended. */
 918:FreeRTOS/Src/tasks.c **** 					vListRemove(  &( pxTCB->xGenericListItem ) );
 919:FreeRTOS/Src/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 920:FreeRTOS/Src/tasks.c **** 
 921:FreeRTOS/Src/tasks.c **** 					/* We may have just resumed a higher priority task. */
 922:FreeRTOS/Src/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 923:FreeRTOS/Src/tasks.c **** 					{
 924:FreeRTOS/Src/tasks.c **** 						/* This yield may not cause the task just resumed to run, but
 925:FreeRTOS/Src/tasks.c **** 						will leave the lists in the correct state for the next yield. */
 926:FreeRTOS/Src/tasks.c **** 						taskYIELD();
 927:FreeRTOS/Src/tasks.c **** 					}
 928:FreeRTOS/Src/tasks.c **** 				}
 929:FreeRTOS/Src/tasks.c **** 			}
 930:FreeRTOS/Src/tasks.c **** 			taskEXIT_CRITICAL();
 931:FreeRTOS/Src/tasks.c **** 		}
 932:FreeRTOS/Src/tasks.c **** 	}
 933:FreeRTOS/Src/tasks.c **** 
 934:FreeRTOS/Src/tasks.c **** #endif
 935:FreeRTOS/Src/tasks.c **** 
 936:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 937:FreeRTOS/Src/tasks.c **** 
 938:FreeRTOS/Src/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
 939:FreeRTOS/Src/tasks.c **** 
 940:FreeRTOS/Src/tasks.c **** 	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
 941:FreeRTOS/Src/tasks.c **** 	{
 942:FreeRTOS/Src/tasks.c **** 	portBASE_TYPE xYieldRequired = pdFALSE;
 943:FreeRTOS/Src/tasks.c **** 	tskTCB *pxTCB;
 944:FreeRTOS/Src/tasks.c **** 
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 18


 945:FreeRTOS/Src/tasks.c **** 		pxTCB = ( tskTCB * ) pxTaskToResume;
 946:FreeRTOS/Src/tasks.c **** 
 947:FreeRTOS/Src/tasks.c **** 		if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 948:FreeRTOS/Src/tasks.c **** 		{
 949:FreeRTOS/Src/tasks.c **** 			traceTASK_RESUME_FROM_ISR( pxTCB );
 950:FreeRTOS/Src/tasks.c **** 
 951:FreeRTOS/Src/tasks.c **** 			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 952:FreeRTOS/Src/tasks.c **** 			{
 953:FreeRTOS/Src/tasks.c **** 				xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
 954:FreeRTOS/Src/tasks.c **** 				vListRemove(  &( pxTCB->xGenericListItem ) );
 955:FreeRTOS/Src/tasks.c **** 				prvAddTaskToReadyQueue( pxTCB );
 956:FreeRTOS/Src/tasks.c **** 			}
 957:FreeRTOS/Src/tasks.c **** 			else
 958:FreeRTOS/Src/tasks.c **** 			{
 959:FreeRTOS/Src/tasks.c **** 				/* We cannot access the delayed or ready lists, so will hold this
 960:FreeRTOS/Src/tasks.c **** 				task pending until the scheduler is resumed, at which point a
 961:FreeRTOS/Src/tasks.c **** 				yield will be performed if necessary. */
 962:FreeRTOS/Src/tasks.c **** 				vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 963:FreeRTOS/Src/tasks.c **** 			}
 964:FreeRTOS/Src/tasks.c **** 		}
 965:FreeRTOS/Src/tasks.c **** 
 966:FreeRTOS/Src/tasks.c **** 		return xYieldRequired;
 967:FreeRTOS/Src/tasks.c **** 	}
 968:FreeRTOS/Src/tasks.c **** 
 969:FreeRTOS/Src/tasks.c **** #endif
 970:FreeRTOS/Src/tasks.c **** 
 971:FreeRTOS/Src/tasks.c **** 
 972:FreeRTOS/Src/tasks.c **** 
 973:FreeRTOS/Src/tasks.c **** 
 974:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------
 975:FreeRTOS/Src/tasks.c ****  * PUBLIC SCHEDULER CONTROL documented in task.h
 976:FreeRTOS/Src/tasks.c ****  *----------------------------------------------------------*/
 977:FreeRTOS/Src/tasks.c **** 
 978:FreeRTOS/Src/tasks.c **** 
 979:FreeRTOS/Src/tasks.c **** void vTaskStartScheduler( void )
 980:FreeRTOS/Src/tasks.c **** {
 981:FreeRTOS/Src/tasks.c **** portBASE_TYPE xReturn;
 982:FreeRTOS/Src/tasks.c **** 
 983:FreeRTOS/Src/tasks.c **** 	/* Add the idle task at the lowest priority. */
 984:FreeRTOS/Src/tasks.c **** 	xReturn = xTaskCreate( prvIdleTask, ( signed portCHAR * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) N
 985:FreeRTOS/Src/tasks.c **** 
 986:FreeRTOS/Src/tasks.c **** 	if( xReturn == pdPASS )
 987:FreeRTOS/Src/tasks.c **** 	{
 988:FreeRTOS/Src/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
 989:FreeRTOS/Src/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
 990:FreeRTOS/Src/tasks.c **** 		the created tasks contain a status word with interrupts switched on
 991:FreeRTOS/Src/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
 992:FreeRTOS/Src/tasks.c **** 		starts to run.
 993:FreeRTOS/Src/tasks.c **** 
 994:FreeRTOS/Src/tasks.c **** 		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
 995:FreeRTOS/Src/tasks.c **** 		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
 996:FreeRTOS/Src/tasks.c **** 		portDISABLE_INTERRUPTS();
 997:FreeRTOS/Src/tasks.c **** 
 998:FreeRTOS/Src/tasks.c **** 		xSchedulerRunning = pdTRUE;
 999:FreeRTOS/Src/tasks.c **** 		xTickCount = ( portTickType ) 0;
1000:FreeRTOS/Src/tasks.c **** 
1001:FreeRTOS/Src/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 19


1002:FreeRTOS/Src/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1003:FreeRTOS/Src/tasks.c **** 		the run time counter time base. */
1004:FreeRTOS/Src/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1005:FreeRTOS/Src/tasks.c **** 
1006:FreeRTOS/Src/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1007:FreeRTOS/Src/tasks.c **** 		portable interface. */
1008:FreeRTOS/Src/tasks.c **** 		if( xPortStartScheduler() )
1009:FreeRTOS/Src/tasks.c **** 		{
1010:FreeRTOS/Src/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1011:FreeRTOS/Src/tasks.c **** 			function will not return. */
1012:FreeRTOS/Src/tasks.c **** 		}
1013:FreeRTOS/Src/tasks.c **** 		else
1014:FreeRTOS/Src/tasks.c **** 		{
1015:FreeRTOS/Src/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1016:FreeRTOS/Src/tasks.c **** 		}
1017:FreeRTOS/Src/tasks.c **** 	}
1018:FreeRTOS/Src/tasks.c **** }
1019:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
1020:FreeRTOS/Src/tasks.c **** 
1021:FreeRTOS/Src/tasks.c **** void vTaskEndScheduler( void )
1022:FreeRTOS/Src/tasks.c **** {
1023:FreeRTOS/Src/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1024:FreeRTOS/Src/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1025:FreeRTOS/Src/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1026:FreeRTOS/Src/tasks.c **** 	portDISABLE_INTERRUPTS();
1027:FreeRTOS/Src/tasks.c **** 	xSchedulerRunning = pdFALSE;
1028:FreeRTOS/Src/tasks.c **** 	vPortEndScheduler();
1029:FreeRTOS/Src/tasks.c **** }
1030:FreeRTOS/Src/tasks.c **** /*----------------------------------------------------------*/
1031:FreeRTOS/Src/tasks.c **** 
1032:FreeRTOS/Src/tasks.c **** void vTaskSuspendAll( void )
1033:FreeRTOS/Src/tasks.c **** {
1034:FreeRTOS/Src/tasks.c **** 	/* A critical section is not required as the variable is of type
1035:FreeRTOS/Src/tasks.c **** 	portBASE_TYPE. */
1036:FreeRTOS/Src/tasks.c **** 	++uxSchedulerSuspended;
1037:FreeRTOS/Src/tasks.c **** }
1038:FreeRTOS/Src/tasks.c **** /*----------------------------------------------------------*/
1039:FreeRTOS/Src/tasks.c **** 
1040:FreeRTOS/Src/tasks.c **** signed portBASE_TYPE xTaskResumeAll( void )
1041:FreeRTOS/Src/tasks.c **** {
1042:FreeRTOS/Src/tasks.c **** register tskTCB *pxTCB;
1043:FreeRTOS/Src/tasks.c **** signed portBASE_TYPE xAlreadyYielded = pdFALSE;
1044:FreeRTOS/Src/tasks.c **** 
1045:FreeRTOS/Src/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
1046:FreeRTOS/Src/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
1047:FreeRTOS/Src/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
1048:FreeRTOS/Src/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
1049:FreeRTOS/Src/tasks.c **** 	tasks from this list into their appropriate ready list. */
1050:FreeRTOS/Src/tasks.c **** 	portENTER_CRITICAL();
1051:FreeRTOS/Src/tasks.c **** 	{
1052:FreeRTOS/Src/tasks.c **** 		--uxSchedulerSuspended;
1053:FreeRTOS/Src/tasks.c **** 
1054:FreeRTOS/Src/tasks.c **** 		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
1055:FreeRTOS/Src/tasks.c **** 		{
1056:FreeRTOS/Src/tasks.c **** 			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0 )
1057:FreeRTOS/Src/tasks.c **** 			{
1058:FreeRTOS/Src/tasks.c **** 				portBASE_TYPE xYieldRequired = pdFALSE;
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 20


1059:FreeRTOS/Src/tasks.c **** 
1060:FreeRTOS/Src/tasks.c **** 				/* Move any readied tasks from the pending list into the
1061:FreeRTOS/Src/tasks.c **** 				appropriate ready list. */
1062:FreeRTOS/Src/tasks.c **** 				while( ( pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) 
1063:FreeRTOS/Src/tasks.c **** 				{
1064:FreeRTOS/Src/tasks.c **** 					vListRemove( &( pxTCB->xEventListItem ) );
1065:FreeRTOS/Src/tasks.c **** 					vListRemove( &( pxTCB->xGenericListItem ) );
1066:FreeRTOS/Src/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
1067:FreeRTOS/Src/tasks.c **** 
1068:FreeRTOS/Src/tasks.c **** 					/* If we have moved a task that has a priority higher than
1069:FreeRTOS/Src/tasks.c **** 					the current task then we should yield. */
1070:FreeRTOS/Src/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1071:FreeRTOS/Src/tasks.c **** 					{
1072:FreeRTOS/Src/tasks.c **** 						xYieldRequired = pdTRUE;
1073:FreeRTOS/Src/tasks.c **** 					}
1074:FreeRTOS/Src/tasks.c **** 				}
1075:FreeRTOS/Src/tasks.c **** 
1076:FreeRTOS/Src/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
1077:FreeRTOS/Src/tasks.c **** 				they should be processed now.  This ensures the tick count does not
1078:FreeRTOS/Src/tasks.c **** 				slip, and that any delayed tasks are resumed at the correct time. */
1079:FreeRTOS/Src/tasks.c **** 				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
1080:FreeRTOS/Src/tasks.c **** 				{
1081:FreeRTOS/Src/tasks.c **** 					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
1082:FreeRTOS/Src/tasks.c **** 					{
1083:FreeRTOS/Src/tasks.c **** 						vTaskIncrementTick();
1084:FreeRTOS/Src/tasks.c **** 						--uxMissedTicks;
1085:FreeRTOS/Src/tasks.c **** 					}
1086:FreeRTOS/Src/tasks.c **** 
1087:FreeRTOS/Src/tasks.c **** 					/* As we have processed some ticks it is appropriate to yield
1088:FreeRTOS/Src/tasks.c **** 					to ensure the highest priority task that is ready to run is
1089:FreeRTOS/Src/tasks.c **** 					the task actually running. */
1090:FreeRTOS/Src/tasks.c ****    					#if configUSE_PREEMPTION == 1
1091:FreeRTOS/Src/tasks.c **** 					{
1092:FreeRTOS/Src/tasks.c **** 						xYieldRequired = pdTRUE;
1093:FreeRTOS/Src/tasks.c **** 					}
1094:FreeRTOS/Src/tasks.c **** 					#endif
1095:FreeRTOS/Src/tasks.c **** 				}
1096:FreeRTOS/Src/tasks.c **** 
1097:FreeRTOS/Src/tasks.c **** 				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
1098:FreeRTOS/Src/tasks.c **** 				{
1099:FreeRTOS/Src/tasks.c **** 					xAlreadyYielded = pdTRUE;
1100:FreeRTOS/Src/tasks.c **** 					xMissedYield = pdFALSE;
1101:FreeRTOS/Src/tasks.c **** 					taskYIELD();
1102:FreeRTOS/Src/tasks.c **** 				}
1103:FreeRTOS/Src/tasks.c **** 			}
1104:FreeRTOS/Src/tasks.c **** 		}
1105:FreeRTOS/Src/tasks.c **** 	}
1106:FreeRTOS/Src/tasks.c **** 	portEXIT_CRITICAL();
1107:FreeRTOS/Src/tasks.c **** 
1108:FreeRTOS/Src/tasks.c **** 	return xAlreadyYielded;
1109:FreeRTOS/Src/tasks.c **** }
1110:FreeRTOS/Src/tasks.c **** 
1111:FreeRTOS/Src/tasks.c **** 
1112:FreeRTOS/Src/tasks.c **** 
1113:FreeRTOS/Src/tasks.c **** 
1114:FreeRTOS/Src/tasks.c **** 
1115:FreeRTOS/Src/tasks.c **** 
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 21


1116:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------
1117:FreeRTOS/Src/tasks.c ****  * PUBLIC TASK UTILITIES documented in task.h
1118:FreeRTOS/Src/tasks.c ****  *----------------------------------------------------------*/
1119:FreeRTOS/Src/tasks.c **** 
1120:FreeRTOS/Src/tasks.c **** 
1121:FreeRTOS/Src/tasks.c **** 
1122:FreeRTOS/Src/tasks.c **** portTickType xTaskGetTickCount( void )
1123:FreeRTOS/Src/tasks.c **** {
1124:FreeRTOS/Src/tasks.c **** portTickType xTicks;
1125:FreeRTOS/Src/tasks.c **** 
1126:FreeRTOS/Src/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
1127:FreeRTOS/Src/tasks.c **** 	taskENTER_CRITICAL();
1128:FreeRTOS/Src/tasks.c **** 	{
1129:FreeRTOS/Src/tasks.c **** 		xTicks = xTickCount;
1130:FreeRTOS/Src/tasks.c **** 	}
1131:FreeRTOS/Src/tasks.c **** 	taskEXIT_CRITICAL();
1132:FreeRTOS/Src/tasks.c **** 
1133:FreeRTOS/Src/tasks.c **** 	return xTicks;
1134:FreeRTOS/Src/tasks.c **** }
1135:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
1136:FreeRTOS/Src/tasks.c **** 
1137:FreeRTOS/Src/tasks.c **** unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
1138:FreeRTOS/Src/tasks.c **** {
1139:FreeRTOS/Src/tasks.c **** 	/* A critical section is not required because the variables are of type
1140:FreeRTOS/Src/tasks.c **** 	portBASE_TYPE. */
1141:FreeRTOS/Src/tasks.c **** 	return uxCurrentNumberOfTasks;
1142:FreeRTOS/Src/tasks.c **** }
1143:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
1144:FreeRTOS/Src/tasks.c **** 
1145:FreeRTOS/Src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1146:FreeRTOS/Src/tasks.c **** 
1147:FreeRTOS/Src/tasks.c **** 	void vTaskList( signed portCHAR *pcWriteBuffer )
1148:FreeRTOS/Src/tasks.c **** 	{
1149:FreeRTOS/Src/tasks.c **** 	unsigned portBASE_TYPE uxQueue;
1150:FreeRTOS/Src/tasks.c **** 
1151:FreeRTOS/Src/tasks.c **** 		/* This is a VERY costly function that should be used for debug only.
1152:FreeRTOS/Src/tasks.c **** 		It leaves interrupts disabled for a LONG time. */
1153:FreeRTOS/Src/tasks.c **** 
1154:FreeRTOS/Src/tasks.c ****         vTaskSuspendAll();
1155:FreeRTOS/Src/tasks.c **** 		{
1156:FreeRTOS/Src/tasks.c **** 			/* Run through all the lists that could potentially contain a TCB and
1157:FreeRTOS/Src/tasks.c **** 			report the task name, state and stack high water mark. */
1158:FreeRTOS/Src/tasks.c **** 
1159:FreeRTOS/Src/tasks.c **** 			pcWriteBuffer[ 0 ] = ( signed portCHAR ) 0x00;
1160:FreeRTOS/Src/tasks.c **** 			strcat( ( portCHAR * ) pcWriteBuffer, ( const portCHAR * ) "\r\n" );
1161:FreeRTOS/Src/tasks.c **** 
1162:FreeRTOS/Src/tasks.c **** 			uxQueue = uxTopUsedPriority + 1;
1163:FreeRTOS/Src/tasks.c **** 
1164:FreeRTOS/Src/tasks.c **** 			do
1165:FreeRTOS/Src/tasks.c **** 			{
1166:FreeRTOS/Src/tasks.c **** 				uxQueue--;
1167:FreeRTOS/Src/tasks.c **** 
1168:FreeRTOS/Src/tasks.c **** 				if( !listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) )
1169:FreeRTOS/Src/tasks.c **** 				{
1170:FreeRTOS/Src/tasks.c **** 					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), tsk
1171:FreeRTOS/Src/tasks.c **** 				}
1172:FreeRTOS/Src/tasks.c **** 			}while( uxQueue > ( unsigned portSHORT ) tskIDLE_PRIORITY );
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 22


1173:FreeRTOS/Src/tasks.c **** 
1174:FreeRTOS/Src/tasks.c **** 			if( !listLIST_IS_EMPTY( pxDelayedTaskList ) )
1175:FreeRTOS/Src/tasks.c **** 			{
1176:FreeRTOS/Src/tasks.c **** 				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, tskBLOCKED_CHAR );
1177:FreeRTOS/Src/tasks.c **** 			}
1178:FreeRTOS/Src/tasks.c **** 
1179:FreeRTOS/Src/tasks.c **** 			if( !listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) )
1180:FreeRTOS/Src/tasks.c **** 			{
1181:FreeRTOS/Src/tasks.c **** 				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, tskBLOCKED_C
1182:FreeRTOS/Src/tasks.c **** 			}
1183:FreeRTOS/Src/tasks.c **** 
1184:FreeRTOS/Src/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
1185:FreeRTOS/Src/tasks.c **** 			{
1186:FreeRTOS/Src/tasks.c **** 				if( !listLIST_IS_EMPTY( &xTasksWaitingTermination ) )
1187:FreeRTOS/Src/tasks.c **** 				{
1188:FreeRTOS/Src/tasks.c **** 					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &xTasksWaitingTermination, tskDELETED_
1189:FreeRTOS/Src/tasks.c **** 				}
1190:FreeRTOS/Src/tasks.c **** 			}
1191:FreeRTOS/Src/tasks.c **** 			#endif
1192:FreeRTOS/Src/tasks.c **** 
1193:FreeRTOS/Src/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1194:FreeRTOS/Src/tasks.c **** 			{
1195:FreeRTOS/Src/tasks.c **** 				if( !listLIST_IS_EMPTY( &xSuspendedTaskList ) )
1196:FreeRTOS/Src/tasks.c **** 				{
1197:FreeRTOS/Src/tasks.c **** 					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &xSuspendedTaskList, tskSUSPENDED_CHAR
1198:FreeRTOS/Src/tasks.c **** 				}
1199:FreeRTOS/Src/tasks.c **** 			}
1200:FreeRTOS/Src/tasks.c **** 			#endif
1201:FreeRTOS/Src/tasks.c **** 		}
1202:FreeRTOS/Src/tasks.c ****         xTaskResumeAll();
1203:FreeRTOS/Src/tasks.c **** 	}
1204:FreeRTOS/Src/tasks.c **** 
1205:FreeRTOS/Src/tasks.c **** #endif
1206:FreeRTOS/Src/tasks.c **** /*----------------------------------------------------------*/
1207:FreeRTOS/Src/tasks.c **** 
1208:FreeRTOS/Src/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
1209:FreeRTOS/Src/tasks.c **** 
1210:FreeRTOS/Src/tasks.c **** 	void vTaskGetRunTimeStats( signed portCHAR *pcWriteBuffer )
1211:FreeRTOS/Src/tasks.c **** 	{
1212:FreeRTOS/Src/tasks.c **** 	unsigned portBASE_TYPE uxQueue;
1213:FreeRTOS/Src/tasks.c **** 	unsigned portLONG ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
1214:FreeRTOS/Src/tasks.c **** 
1215:FreeRTOS/Src/tasks.c **** 		/* This is a VERY costly function that should be used for debug only.
1216:FreeRTOS/Src/tasks.c **** 		It leaves interrupts disabled for a LONG time. */
1217:FreeRTOS/Src/tasks.c **** 
1218:FreeRTOS/Src/tasks.c ****         vTaskSuspendAll();
1219:FreeRTOS/Src/tasks.c **** 		{
1220:FreeRTOS/Src/tasks.c **** 			/* Run through all the lists that could potentially contain a TCB,
1221:FreeRTOS/Src/tasks.c **** 			generating a table of run timer percentages in the provided
1222:FreeRTOS/Src/tasks.c **** 			buffer. */
1223:FreeRTOS/Src/tasks.c **** 
1224:FreeRTOS/Src/tasks.c **** 			pcWriteBuffer[ 0 ] = ( signed portCHAR ) 0x00;
1225:FreeRTOS/Src/tasks.c **** 			strcat( ( portCHAR * ) pcWriteBuffer, ( const portCHAR * ) "\r\n" );
1226:FreeRTOS/Src/tasks.c **** 
1227:FreeRTOS/Src/tasks.c **** 			uxQueue = uxTopUsedPriority + 1;
1228:FreeRTOS/Src/tasks.c **** 
1229:FreeRTOS/Src/tasks.c **** 			do
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 23


1230:FreeRTOS/Src/tasks.c **** 			{
1231:FreeRTOS/Src/tasks.c **** 				uxQueue--;
1232:FreeRTOS/Src/tasks.c **** 
1233:FreeRTOS/Src/tasks.c **** 				if( !listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) )
1234:FreeRTOS/Src/tasks.c **** 				{
1235:FreeRTOS/Src/tasks.c **** 					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueu
1236:FreeRTOS/Src/tasks.c **** 				}
1237:FreeRTOS/Src/tasks.c **** 			}while( uxQueue > ( unsigned portSHORT ) tskIDLE_PRIORITY );
1238:FreeRTOS/Src/tasks.c **** 
1239:FreeRTOS/Src/tasks.c **** 			if( !listLIST_IS_EMPTY( pxDelayedTaskList ) )
1240:FreeRTOS/Src/tasks.c **** 			{
1241:FreeRTOS/Src/tasks.c **** 				prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, ulTotalRun
1242:FreeRTOS/Src/tasks.c **** 			}
1243:FreeRTOS/Src/tasks.c **** 
1244:FreeRTOS/Src/tasks.c **** 			if( !listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) )
1245:FreeRTOS/Src/tasks.c **** 			{
1246:FreeRTOS/Src/tasks.c **** 				prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, ul
1247:FreeRTOS/Src/tasks.c **** 			}
1248:FreeRTOS/Src/tasks.c **** 
1249:FreeRTOS/Src/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1250:FreeRTOS/Src/tasks.c **** 			{
1251:FreeRTOS/Src/tasks.c **** 				if( !listLIST_IS_EMPTY( &xTasksWaitingTermination ) )
1252:FreeRTOS/Src/tasks.c **** 				{
1253:FreeRTOS/Src/tasks.c **** 					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) &xTasksWaitingTermination, u
1254:FreeRTOS/Src/tasks.c **** 				}
1255:FreeRTOS/Src/tasks.c **** 			}
1256:FreeRTOS/Src/tasks.c **** 			#endif
1257:FreeRTOS/Src/tasks.c **** 
1258:FreeRTOS/Src/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1259:FreeRTOS/Src/tasks.c **** 			{
1260:FreeRTOS/Src/tasks.c **** 				if( !listLIST_IS_EMPTY( &xSuspendedTaskList ) )
1261:FreeRTOS/Src/tasks.c **** 				{
1262:FreeRTOS/Src/tasks.c **** 					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) &xSuspendedTaskList, ulTotal
1263:FreeRTOS/Src/tasks.c **** 				}
1264:FreeRTOS/Src/tasks.c **** 			}
1265:FreeRTOS/Src/tasks.c **** 			#endif
1266:FreeRTOS/Src/tasks.c **** 		}
1267:FreeRTOS/Src/tasks.c ****         xTaskResumeAll();
1268:FreeRTOS/Src/tasks.c **** 	}
1269:FreeRTOS/Src/tasks.c **** 
1270:FreeRTOS/Src/tasks.c **** #endif
1271:FreeRTOS/Src/tasks.c **** /*----------------------------------------------------------*/
1272:FreeRTOS/Src/tasks.c **** 
1273:FreeRTOS/Src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1274:FreeRTOS/Src/tasks.c **** 
1275:FreeRTOS/Src/tasks.c **** 	void vTaskStartTrace( signed portCHAR * pcBuffer, unsigned portLONG ulBufferSize )
1276:FreeRTOS/Src/tasks.c **** 	{
1277:FreeRTOS/Src/tasks.c **** 		portENTER_CRITICAL();
1278:FreeRTOS/Src/tasks.c **** 		{
1279:FreeRTOS/Src/tasks.c **** 			pcTraceBuffer = ( signed portCHAR * )pcBuffer;
1280:FreeRTOS/Src/tasks.c **** 			pcTraceBufferStart = pcBuffer;
1281:FreeRTOS/Src/tasks.c **** 			pcTraceBufferEnd = pcBuffer + ( ulBufferSize - tskSIZE_OF_EACH_TRACE_LINE );
1282:FreeRTOS/Src/tasks.c **** 			xTracing = pdTRUE;
1283:FreeRTOS/Src/tasks.c **** 		}
1284:FreeRTOS/Src/tasks.c **** 		portEXIT_CRITICAL();
1285:FreeRTOS/Src/tasks.c **** 	}
1286:FreeRTOS/Src/tasks.c **** 
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 24


1287:FreeRTOS/Src/tasks.c **** #endif
1288:FreeRTOS/Src/tasks.c **** /*----------------------------------------------------------*/
1289:FreeRTOS/Src/tasks.c **** 
1290:FreeRTOS/Src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1291:FreeRTOS/Src/tasks.c **** 
1292:FreeRTOS/Src/tasks.c **** 	unsigned portLONG ulTaskEndTrace( void )
1293:FreeRTOS/Src/tasks.c **** 	{
1294:FreeRTOS/Src/tasks.c **** 	unsigned portLONG ulBufferLength;
1295:FreeRTOS/Src/tasks.c **** 
1296:FreeRTOS/Src/tasks.c **** 		portENTER_CRITICAL();
1297:FreeRTOS/Src/tasks.c **** 			xTracing = pdFALSE;
1298:FreeRTOS/Src/tasks.c **** 		portEXIT_CRITICAL();
1299:FreeRTOS/Src/tasks.c **** 
1300:FreeRTOS/Src/tasks.c **** 		ulBufferLength = ( unsigned portLONG ) ( pcTraceBuffer - pcTraceBufferStart );
1301:FreeRTOS/Src/tasks.c **** 
1302:FreeRTOS/Src/tasks.c **** 		return ulBufferLength;
1303:FreeRTOS/Src/tasks.c **** 	}
1304:FreeRTOS/Src/tasks.c **** 
1305:FreeRTOS/Src/tasks.c **** #endif
1306:FreeRTOS/Src/tasks.c **** 
1307:FreeRTOS/Src/tasks.c **** 
1308:FreeRTOS/Src/tasks.c **** 
1309:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------
1310:FreeRTOS/Src/tasks.c ****  * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
1311:FreeRTOS/Src/tasks.c ****  * documented in task.h
1312:FreeRTOS/Src/tasks.c ****  *----------------------------------------------------------*/
1313:FreeRTOS/Src/tasks.c **** 
1314:FreeRTOS/Src/tasks.c **** 
1315:FreeRTOS/Src/tasks.c **** void vTaskIncrementTick( void )
1316:FreeRTOS/Src/tasks.c **** {
1317:FreeRTOS/Src/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
1318:FreeRTOS/Src/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
1319:FreeRTOS/Src/tasks.c **** 	tasks to be unblocked. */
1320:FreeRTOS/Src/tasks.c **** 	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
1321:FreeRTOS/Src/tasks.c **** 	{
1322:FreeRTOS/Src/tasks.c **** 		++xTickCount;
1323:FreeRTOS/Src/tasks.c **** 		if( xTickCount == ( portTickType ) 0 )
1324:FreeRTOS/Src/tasks.c **** 		{
1325:FreeRTOS/Src/tasks.c **** 			xList *pxTemp;
1326:FreeRTOS/Src/tasks.c **** 
1327:FreeRTOS/Src/tasks.c **** 			/* Tick count has overflowed so we need to swap the delay lists.
1328:FreeRTOS/Src/tasks.c **** 			If there are any items in pxDelayedTaskList here then there is
1329:FreeRTOS/Src/tasks.c **** 			an error! */
1330:FreeRTOS/Src/tasks.c **** 			pxTemp = pxDelayedTaskList;
1331:FreeRTOS/Src/tasks.c **** 			pxDelayedTaskList = pxOverflowDelayedTaskList;
1332:FreeRTOS/Src/tasks.c **** 			pxOverflowDelayedTaskList = pxTemp;
1333:FreeRTOS/Src/tasks.c ****             xNumOfOverflows++;
1334:FreeRTOS/Src/tasks.c **** 		}
1335:FreeRTOS/Src/tasks.c **** 
1336:FreeRTOS/Src/tasks.c **** 		/* See if this tick has made a timeout expire. */
1337:FreeRTOS/Src/tasks.c **** 		prvCheckDelayedTasks();
1338:FreeRTOS/Src/tasks.c **** 	}
1339:FreeRTOS/Src/tasks.c **** 	else
1340:FreeRTOS/Src/tasks.c **** 	{
1341:FreeRTOS/Src/tasks.c **** 		++uxMissedTicks;
1342:FreeRTOS/Src/tasks.c **** 
1343:FreeRTOS/Src/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 25


1344:FreeRTOS/Src/tasks.c **** 		scheduler is locked. */
1345:FreeRTOS/Src/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
1346:FreeRTOS/Src/tasks.c **** 		{
1347:FreeRTOS/Src/tasks.c **** 			extern void vApplicationTickHook( void );
1348:FreeRTOS/Src/tasks.c **** 
1349:FreeRTOS/Src/tasks.c **** 			vApplicationTickHook();
1350:FreeRTOS/Src/tasks.c **** 		}
1351:FreeRTOS/Src/tasks.c **** 		#endif
1352:FreeRTOS/Src/tasks.c **** 	}
1353:FreeRTOS/Src/tasks.c **** 
1354:FreeRTOS/Src/tasks.c **** 	#if ( configUSE_TICK_HOOK == 1 )
1355:FreeRTOS/Src/tasks.c **** 	{
1356:FreeRTOS/Src/tasks.c **** 		extern void vApplicationTickHook( void );
1357:FreeRTOS/Src/tasks.c **** 
1358:FreeRTOS/Src/tasks.c **** 		/* Guard against the tick hook being called when the missed tick
1359:FreeRTOS/Src/tasks.c **** 		count is being unwound (when the scheduler is being unlocked. */
1360:FreeRTOS/Src/tasks.c **** 		if( uxMissedTicks == 0 )
1361:FreeRTOS/Src/tasks.c **** 		{
1362:FreeRTOS/Src/tasks.c **** 			vApplicationTickHook();
1363:FreeRTOS/Src/tasks.c **** 		}
1364:FreeRTOS/Src/tasks.c **** 	}
1365:FreeRTOS/Src/tasks.c **** 	#endif
1366:FreeRTOS/Src/tasks.c **** 
1367:FreeRTOS/Src/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
1368:FreeRTOS/Src/tasks.c **** }
1369:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
1370:FreeRTOS/Src/tasks.c **** 
1371:FreeRTOS/Src/tasks.c **** #if ( ( INCLUDE_vTaskCleanUpResources == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1372:FreeRTOS/Src/tasks.c **** 
1373:FreeRTOS/Src/tasks.c **** 	void vTaskCleanUpResources( void )
1374:FreeRTOS/Src/tasks.c **** 	{
1375:FreeRTOS/Src/tasks.c **** 	unsigned portSHORT usQueue;
1376:FreeRTOS/Src/tasks.c **** 	volatile tskTCB *pxTCB;
1377:FreeRTOS/Src/tasks.c **** 
1378:FreeRTOS/Src/tasks.c **** 		usQueue = ( unsigned portSHORT ) uxTopUsedPriority + ( unsigned portSHORT ) 1;
1379:FreeRTOS/Src/tasks.c **** 
1380:FreeRTOS/Src/tasks.c **** 		/* Remove any TCB's from the ready queues. */
1381:FreeRTOS/Src/tasks.c **** 		do
1382:FreeRTOS/Src/tasks.c **** 		{
1383:FreeRTOS/Src/tasks.c **** 			usQueue--;
1384:FreeRTOS/Src/tasks.c **** 
1385:FreeRTOS/Src/tasks.c **** 			while( !listLIST_IS_EMPTY( &( pxReadyTasksLists[ usQueue ] ) ) )
1386:FreeRTOS/Src/tasks.c **** 			{
1387:FreeRTOS/Src/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxTCB, &( pxReadyTasksLists[ usQueue ] ) );
1388:FreeRTOS/Src/tasks.c **** 				vListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) );
1389:FreeRTOS/Src/tasks.c **** 
1390:FreeRTOS/Src/tasks.c **** 				prvDeleteTCB( ( tskTCB * ) pxTCB );
1391:FreeRTOS/Src/tasks.c **** 			}
1392:FreeRTOS/Src/tasks.c **** 		}while( usQueue > ( unsigned portSHORT ) tskIDLE_PRIORITY );
1393:FreeRTOS/Src/tasks.c **** 
1394:FreeRTOS/Src/tasks.c **** 		/* Remove any TCB's from the delayed queue. */
1395:FreeRTOS/Src/tasks.c **** 		while( !listLIST_IS_EMPTY( &xDelayedTaskList1 ) )
1396:FreeRTOS/Src/tasks.c **** 		{
1397:FreeRTOS/Src/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxTCB, &xDelayedTaskList1 );
1398:FreeRTOS/Src/tasks.c **** 			vListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) );
1399:FreeRTOS/Src/tasks.c **** 
1400:FreeRTOS/Src/tasks.c **** 			prvDeleteTCB( ( tskTCB * ) pxTCB );
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 26


1401:FreeRTOS/Src/tasks.c **** 		}
1402:FreeRTOS/Src/tasks.c **** 
1403:FreeRTOS/Src/tasks.c **** 		/* Remove any TCB's from the overflow delayed queue. */
1404:FreeRTOS/Src/tasks.c **** 		while( !listLIST_IS_EMPTY( &xDelayedTaskList2 ) )
1405:FreeRTOS/Src/tasks.c **** 		{
1406:FreeRTOS/Src/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxTCB, &xDelayedTaskList2 );
1407:FreeRTOS/Src/tasks.c **** 			vListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) );
1408:FreeRTOS/Src/tasks.c **** 
1409:FreeRTOS/Src/tasks.c **** 			prvDeleteTCB( ( tskTCB * ) pxTCB );
1410:FreeRTOS/Src/tasks.c **** 		}
1411:FreeRTOS/Src/tasks.c **** 
1412:FreeRTOS/Src/tasks.c **** 		while( !listLIST_IS_EMPTY( &xSuspendedTaskList ) )
1413:FreeRTOS/Src/tasks.c **** 		{
1414:FreeRTOS/Src/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxTCB, &xSuspendedTaskList );
1415:FreeRTOS/Src/tasks.c **** 			vListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) );
1416:FreeRTOS/Src/tasks.c **** 
1417:FreeRTOS/Src/tasks.c **** 			prvDeleteTCB( ( tskTCB * ) pxTCB );
1418:FreeRTOS/Src/tasks.c **** 		}
1419:FreeRTOS/Src/tasks.c **** 	}
1420:FreeRTOS/Src/tasks.c **** 
1421:FreeRTOS/Src/tasks.c **** #endif
1422:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
1423:FreeRTOS/Src/tasks.c **** 
1424:FreeRTOS/Src/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
1425:FreeRTOS/Src/tasks.c **** 
1426:FreeRTOS/Src/tasks.c **** 	void vTaskSetApplicationTaskTag( xTaskHandle xTask, pdTASK_HOOK_CODE pxTagValue )
1427:FreeRTOS/Src/tasks.c **** 	{
1428:FreeRTOS/Src/tasks.c **** 	tskTCB *xTCB;
1429:FreeRTOS/Src/tasks.c **** 
1430:FreeRTOS/Src/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
1431:FreeRTOS/Src/tasks.c **** 		if( xTask == NULL )
1432:FreeRTOS/Src/tasks.c **** 		{
1433:FreeRTOS/Src/tasks.c **** 			xTCB = ( tskTCB * ) pxCurrentTCB;
1434:FreeRTOS/Src/tasks.c **** 		}
1435:FreeRTOS/Src/tasks.c **** 		else
1436:FreeRTOS/Src/tasks.c **** 		{
1437:FreeRTOS/Src/tasks.c **** 			xTCB = ( tskTCB * ) xTask;
1438:FreeRTOS/Src/tasks.c **** 		}
1439:FreeRTOS/Src/tasks.c **** 
1440:FreeRTOS/Src/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
1441:FreeRTOS/Src/tasks.c **** 		the value can be accessed from an interrupt. */
1442:FreeRTOS/Src/tasks.c **** 		portENTER_CRITICAL();
1443:FreeRTOS/Src/tasks.c **** 			xTCB->pxTaskTag = pxTagValue;
1444:FreeRTOS/Src/tasks.c **** 		portEXIT_CRITICAL();
1445:FreeRTOS/Src/tasks.c **** 	}
1446:FreeRTOS/Src/tasks.c **** 
1447:FreeRTOS/Src/tasks.c **** #endif
1448:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
1449:FreeRTOS/Src/tasks.c **** 
1450:FreeRTOS/Src/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
1451:FreeRTOS/Src/tasks.c **** 
1452:FreeRTOS/Src/tasks.c **** 	pdTASK_HOOK_CODE xTaskGetApplicationTaskTag( xTaskHandle xTask )
1453:FreeRTOS/Src/tasks.c **** 	{
1454:FreeRTOS/Src/tasks.c **** 	tskTCB *xTCB;
1455:FreeRTOS/Src/tasks.c **** 	pdTASK_HOOK_CODE xReturn;
1456:FreeRTOS/Src/tasks.c **** 
1457:FreeRTOS/Src/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 27


1458:FreeRTOS/Src/tasks.c **** 		if( xTask == NULL )
1459:FreeRTOS/Src/tasks.c **** 		{
1460:FreeRTOS/Src/tasks.c **** 			xTCB = ( tskTCB * ) pxCurrentTCB;
1461:FreeRTOS/Src/tasks.c **** 		}
1462:FreeRTOS/Src/tasks.c **** 		else
1463:FreeRTOS/Src/tasks.c **** 		{
1464:FreeRTOS/Src/tasks.c **** 			xTCB = ( tskTCB * ) xTask;
1465:FreeRTOS/Src/tasks.c **** 		}
1466:FreeRTOS/Src/tasks.c **** 
1467:FreeRTOS/Src/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
1468:FreeRTOS/Src/tasks.c **** 		the value can be accessed from an interrupt. */
1469:FreeRTOS/Src/tasks.c **** 		portENTER_CRITICAL();
1470:FreeRTOS/Src/tasks.c **** 			xReturn = xTCB->pxTaskTag;
1471:FreeRTOS/Src/tasks.c **** 		portEXIT_CRITICAL();
1472:FreeRTOS/Src/tasks.c **** 
1473:FreeRTOS/Src/tasks.c **** 		return xReturn;
1474:FreeRTOS/Src/tasks.c **** 	}
1475:FreeRTOS/Src/tasks.c **** 
1476:FreeRTOS/Src/tasks.c **** #endif
1477:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
1478:FreeRTOS/Src/tasks.c **** 
1479:FreeRTOS/Src/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
1480:FreeRTOS/Src/tasks.c **** 
1481:FreeRTOS/Src/tasks.c **** 	portBASE_TYPE xTaskCallApplicationTaskHook( xTaskHandle xTask, void *pvParameter )
1482:FreeRTOS/Src/tasks.c **** 	{
1483:FreeRTOS/Src/tasks.c **** 	tskTCB *xTCB;
1484:FreeRTOS/Src/tasks.c **** 	portBASE_TYPE xReturn;
1485:FreeRTOS/Src/tasks.c **** 
1486:FreeRTOS/Src/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
1487:FreeRTOS/Src/tasks.c **** 		if( xTask == NULL )
1488:FreeRTOS/Src/tasks.c **** 		{
1489:FreeRTOS/Src/tasks.c **** 			xTCB = ( tskTCB * ) pxCurrentTCB;
1490:FreeRTOS/Src/tasks.c **** 		}
1491:FreeRTOS/Src/tasks.c **** 		else
1492:FreeRTOS/Src/tasks.c **** 		{
1493:FreeRTOS/Src/tasks.c **** 			xTCB = ( tskTCB * ) xTask;
1494:FreeRTOS/Src/tasks.c **** 		}
1495:FreeRTOS/Src/tasks.c **** 
1496:FreeRTOS/Src/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
1497:FreeRTOS/Src/tasks.c **** 		{
1498:FreeRTOS/Src/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
1499:FreeRTOS/Src/tasks.c **** 		}
1500:FreeRTOS/Src/tasks.c **** 		else
1501:FreeRTOS/Src/tasks.c **** 		{
1502:FreeRTOS/Src/tasks.c **** 			xReturn = pdFAIL;
1503:FreeRTOS/Src/tasks.c **** 		}
1504:FreeRTOS/Src/tasks.c **** 
1505:FreeRTOS/Src/tasks.c **** 		return xReturn;
1506:FreeRTOS/Src/tasks.c **** 	}
1507:FreeRTOS/Src/tasks.c **** 
1508:FreeRTOS/Src/tasks.c **** #endif
1509:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
1510:FreeRTOS/Src/tasks.c **** 
1511:FreeRTOS/Src/tasks.c **** void vTaskSwitchContext( void )
1512:FreeRTOS/Src/tasks.c **** {
1513:FreeRTOS/Src/tasks.c **** 	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
1514:FreeRTOS/Src/tasks.c **** 	{
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 28


1515:FreeRTOS/Src/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
1516:FreeRTOS/Src/tasks.c **** 		switch. */
1517:FreeRTOS/Src/tasks.c **** 		xMissedYield = pdTRUE;
1518:FreeRTOS/Src/tasks.c **** 		return;
1519:FreeRTOS/Src/tasks.c **** 	}
1520:FreeRTOS/Src/tasks.c **** 
1521:FreeRTOS/Src/tasks.c **** 	traceTASK_SWITCHED_OUT();
1522:FreeRTOS/Src/tasks.c **** 
1523:FreeRTOS/Src/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
1524:FreeRTOS/Src/tasks.c **** 	{
1525:FreeRTOS/Src/tasks.c **** 		unsigned portLONG ulTempCounter = portGET_RUN_TIME_COUNTER_VALUE();
1526:FreeRTOS/Src/tasks.c **** 
1527:FreeRTOS/Src/tasks.c **** 			/* Add the amount of time the task has been running to the accumulated
1528:FreeRTOS/Src/tasks.c **** 			time so far.  The time the task started running was stored in
1529:FreeRTOS/Src/tasks.c **** 			ulTaskSwitchedInTime.  Note that there is no overflow protection here
1530:FreeRTOS/Src/tasks.c **** 			so count values are only valid until the timer overflows.  Generally
1531:FreeRTOS/Src/tasks.c **** 			this will be about 1 hour assuming a 1uS timer increment. */
1532:FreeRTOS/Src/tasks.c **** 			pxCurrentTCB->ulRunTimeCounter += ( ulTempCounter - ulTaskSwitchedInTime );
1533:FreeRTOS/Src/tasks.c **** 			ulTaskSwitchedInTime = ulTempCounter;
1534:FreeRTOS/Src/tasks.c **** 	}
1535:FreeRTOS/Src/tasks.c **** 	#endif
1536:FreeRTOS/Src/tasks.c **** 
1537:FreeRTOS/Src/tasks.c **** 	taskFIRST_CHECK_FOR_STACK_OVERFLOW();
1538:FreeRTOS/Src/tasks.c **** 	taskSECOND_CHECK_FOR_STACK_OVERFLOW();
1539:FreeRTOS/Src/tasks.c **** 
1540:FreeRTOS/Src/tasks.c **** 	/* Find the highest priority queue that contains ready tasks. */
1541:FreeRTOS/Src/tasks.c **** 	while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
1542:FreeRTOS/Src/tasks.c **** 	{
1543:FreeRTOS/Src/tasks.c **** 		--uxTopReadyPriority;
1544:FreeRTOS/Src/tasks.c **** 	}
1545:FreeRTOS/Src/tasks.c **** 
1546:FreeRTOS/Src/tasks.c **** 	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
1547:FreeRTOS/Src/tasks.c **** 	same priority get an equal share of the processor time. */
1548:FreeRTOS/Src/tasks.c **** 	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
1549:FreeRTOS/Src/tasks.c **** 
1550:FreeRTOS/Src/tasks.c **** 	traceTASK_SWITCHED_IN();
1551:FreeRTOS/Src/tasks.c **** 	vWriteTraceToBuffer();
1552:FreeRTOS/Src/tasks.c **** }
1553:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
1554:FreeRTOS/Src/tasks.c **** 
1555:FreeRTOS/Src/tasks.c **** void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
1556:FreeRTOS/Src/tasks.c **** {
1557:FreeRTOS/Src/tasks.c **** portTickType xTimeToWake;
1558:FreeRTOS/Src/tasks.c **** 
1559:FreeRTOS/Src/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED OR THE
1560:FreeRTOS/Src/tasks.c **** 	SCHEDULER SUSPENDED. */
1561:FreeRTOS/Src/tasks.c **** 
1562:FreeRTOS/Src/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
1563:FreeRTOS/Src/tasks.c **** 	This is placed in the list in priority order so the highest priority task
1564:FreeRTOS/Src/tasks.c **** 	is the first to be woken by the event. */
1565:FreeRTOS/Src/tasks.c **** 	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
1566:FreeRTOS/Src/tasks.c **** 
1567:FreeRTOS/Src/tasks.c **** 	/* We must remove ourselves from the ready list before adding ourselves
1568:FreeRTOS/Src/tasks.c **** 	to the blocked list as the same list item is used for both lists.  We have
1569:FreeRTOS/Src/tasks.c **** 	exclusive access to the ready lists as the scheduler is locked. */
1570:FreeRTOS/Src/tasks.c **** 	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
1571:FreeRTOS/Src/tasks.c **** 
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 29


1572:FreeRTOS/Src/tasks.c **** 
1573:FreeRTOS/Src/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
1574:FreeRTOS/Src/tasks.c **** 	{
1575:FreeRTOS/Src/tasks.c **** 		if( xTicksToWait == portMAX_DELAY )
1576:FreeRTOS/Src/tasks.c **** 		{
1577:FreeRTOS/Src/tasks.c **** 			/* Add ourselves to the suspended task list instead of a delayed task
1578:FreeRTOS/Src/tasks.c **** 			list to ensure we are not woken by a timing event.  We will block
1579:FreeRTOS/Src/tasks.c **** 			indefinitely. */
1580:FreeRTOS/Src/tasks.c **** 			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListIt
1581:FreeRTOS/Src/tasks.c **** 		}
1582:FreeRTOS/Src/tasks.c **** 		else
1583:FreeRTOS/Src/tasks.c **** 		{
1584:FreeRTOS/Src/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
1585:FreeRTOS/Src/tasks.c **** 			not occur.  This may overflow but this doesn't matter. */
1586:FreeRTOS/Src/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
1587:FreeRTOS/Src/tasks.c **** 
1588:FreeRTOS/Src/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
1589:FreeRTOS/Src/tasks.c **** 
1590:FreeRTOS/Src/tasks.c **** 			if( xTimeToWake < xTickCount )
1591:FreeRTOS/Src/tasks.c **** 			{
1592:FreeRTOS/Src/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow list. */
1593:FreeRTOS/Src/tasks.c **** 				vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericLi
1594:FreeRTOS/Src/tasks.c **** 			}
1595:FreeRTOS/Src/tasks.c **** 			else
1596:FreeRTOS/Src/tasks.c **** 			{
1597:FreeRTOS/Src/tasks.c **** 				/* The wake time has not overflowed, so we can use the current block list. */
1598:FreeRTOS/Src/tasks.c **** 				vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem )
1599:FreeRTOS/Src/tasks.c **** 			}
1600:FreeRTOS/Src/tasks.c **** 		}
1601:FreeRTOS/Src/tasks.c **** 	}
1602:FreeRTOS/Src/tasks.c **** 	#else
1603:FreeRTOS/Src/tasks.c **** 	{
1604:FreeRTOS/Src/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
1605:FreeRTOS/Src/tasks.c **** 			not occur.  This may overflow but this doesn't matter. */
1606:FreeRTOS/Src/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
1607:FreeRTOS/Src/tasks.c **** 
1608:FreeRTOS/Src/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
1609:FreeRTOS/Src/tasks.c **** 
1610:FreeRTOS/Src/tasks.c **** 			if( xTimeToWake < xTickCount )
1611:FreeRTOS/Src/tasks.c **** 			{
1612:FreeRTOS/Src/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow list. */
1613:FreeRTOS/Src/tasks.c **** 				vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericLi
1614:FreeRTOS/Src/tasks.c **** 			}
1615:FreeRTOS/Src/tasks.c **** 			else
1616:FreeRTOS/Src/tasks.c **** 			{
1617:FreeRTOS/Src/tasks.c **** 				/* The wake time has not overflowed, so we can use the current block list. */
1618:FreeRTOS/Src/tasks.c **** 				vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem )
1619:FreeRTOS/Src/tasks.c **** 			}
1620:FreeRTOS/Src/tasks.c **** 	}
1621:FreeRTOS/Src/tasks.c **** 	#endif
1622:FreeRTOS/Src/tasks.c **** }
1623:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
1624:FreeRTOS/Src/tasks.c **** 
1625:FreeRTOS/Src/tasks.c **** signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
1626:FreeRTOS/Src/tasks.c **** {
1627:FreeRTOS/Src/tasks.c **** tskTCB *pxUnblockedTCB;
1628:FreeRTOS/Src/tasks.c **** portBASE_TYPE xReturn;
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 30


1629:FreeRTOS/Src/tasks.c **** 
1630:FreeRTOS/Src/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED OR THE
1631:FreeRTOS/Src/tasks.c **** 	SCHEDULER SUSPENDED.  It can also be called from within an ISR. */
1632:FreeRTOS/Src/tasks.c **** 
1633:FreeRTOS/Src/tasks.c **** 	/* The event list is sorted in priority order, so we can remove the
1634:FreeRTOS/Src/tasks.c **** 	first in the list, remove the TCB from the delayed list, and add
1635:FreeRTOS/Src/tasks.c **** 	it to the ready list.
1636:FreeRTOS/Src/tasks.c **** 
1637:FreeRTOS/Src/tasks.c **** 	If an event is for a queue that is locked then this function will never
1638:FreeRTOS/Src/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
1639:FreeRTOS/Src/tasks.c **** 	means we can always expect exclusive access to the event list here. */
1640:FreeRTOS/Src/tasks.c **** 	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1641:FreeRTOS/Src/tasks.c **** 	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
1642:FreeRTOS/Src/tasks.c **** 
1643:FreeRTOS/Src/tasks.c **** 	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
1644:FreeRTOS/Src/tasks.c **** 	{
1645:FreeRTOS/Src/tasks.c **** 		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
1646:FreeRTOS/Src/tasks.c **** 		prvAddTaskToReadyQueue( pxUnblockedTCB );
1647:FreeRTOS/Src/tasks.c **** 	}
1648:FreeRTOS/Src/tasks.c **** 	else
1649:FreeRTOS/Src/tasks.c **** 	{
1650:FreeRTOS/Src/tasks.c **** 		/* We cannot access the delayed or ready lists, so will hold this
1651:FreeRTOS/Src/tasks.c **** 		task pending until the scheduler is resumed. */
1652:FreeRTOS/Src/tasks.c **** 		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1653:FreeRTOS/Src/tasks.c **** 	}
1654:FreeRTOS/Src/tasks.c **** 
1655:FreeRTOS/Src/tasks.c **** 	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
1656:FreeRTOS/Src/tasks.c **** 	{
1657:FreeRTOS/Src/tasks.c **** 		/* Return true if the task removed from the event list has
1658:FreeRTOS/Src/tasks.c **** 		a higher priority than the calling task.  This allows
1659:FreeRTOS/Src/tasks.c **** 		the calling task to know if it should force a context
1660:FreeRTOS/Src/tasks.c **** 		switch now. */
1661:FreeRTOS/Src/tasks.c **** 		xReturn = pdTRUE;
1662:FreeRTOS/Src/tasks.c **** 	}
1663:FreeRTOS/Src/tasks.c **** 	else
1664:FreeRTOS/Src/tasks.c **** 	{
1665:FreeRTOS/Src/tasks.c **** 		xReturn = pdFALSE;
1666:FreeRTOS/Src/tasks.c **** 	}
1667:FreeRTOS/Src/tasks.c **** 
1668:FreeRTOS/Src/tasks.c **** 	return xReturn;
1669:FreeRTOS/Src/tasks.c **** }
1670:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
1671:FreeRTOS/Src/tasks.c **** 
1672:FreeRTOS/Src/tasks.c **** void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
1673:FreeRTOS/Src/tasks.c **** {
1674:FreeRTOS/Src/tasks.c ****     pxTimeOut->xOverflowCount = xNumOfOverflows;
1675:FreeRTOS/Src/tasks.c ****     pxTimeOut->xTimeOnEntering = xTickCount;
1676:FreeRTOS/Src/tasks.c **** }
1677:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
1678:FreeRTOS/Src/tasks.c **** 
1679:FreeRTOS/Src/tasks.c **** portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToW
1680:FreeRTOS/Src/tasks.c **** {
1681:FreeRTOS/Src/tasks.c **** portBASE_TYPE xReturn;
1682:FreeRTOS/Src/tasks.c **** 
1683:FreeRTOS/Src/tasks.c **** 	portENTER_CRITICAL();
1684:FreeRTOS/Src/tasks.c **** 	{
1685:FreeRTOS/Src/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 31


1686:FreeRTOS/Src/tasks.c **** 			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
1687:FreeRTOS/Src/tasks.c **** 			the maximum block time then the task should block indefinitely, and
1688:FreeRTOS/Src/tasks.c **** 			therefore never time out. */
1689:FreeRTOS/Src/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
1690:FreeRTOS/Src/tasks.c **** 			{
1691:FreeRTOS/Src/tasks.c **** 				xReturn = pdFALSE;
1692:FreeRTOS/Src/tasks.c **** 			}
1693:FreeRTOS/Src/tasks.c **** 			else /* We are not blocking indefinitely, perform the checks below. */
1694:FreeRTOS/Src/tasks.c **** 		#endif
1695:FreeRTOS/Src/tasks.c **** 
1696:FreeRTOS/Src/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTi
1697:FreeRTOS/Src/tasks.c **** 		{
1698:FreeRTOS/Src/tasks.c **** 			/* The tick count is greater than the time at which vTaskSetTimeout()
1699:FreeRTOS/Src/tasks.c **** 			was called, but has also overflowed since vTaskSetTimeOut() was called.
1700:FreeRTOS/Src/tasks.c **** 			It must have wrapped all the way around and gone past us again. This
1701:FreeRTOS/Src/tasks.c **** 			passed since vTaskSetTimeout() was called. */
1702:FreeRTOS/Src/tasks.c **** 			xReturn = pdTRUE;
1703:FreeRTOS/Src/tasks.c **** 		}
1704:FreeRTOS/Src/tasks.c **** 		else if( ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) < ( portTi
1705:FreeRTOS/Src/tasks.c **** 		{
1706:FreeRTOS/Src/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
1707:FreeRTOS/Src/tasks.c **** 			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
1708:FreeRTOS/Src/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
1709:FreeRTOS/Src/tasks.c **** 			xReturn = pdFALSE;
1710:FreeRTOS/Src/tasks.c **** 		}
1711:FreeRTOS/Src/tasks.c **** 		else
1712:FreeRTOS/Src/tasks.c **** 		{
1713:FreeRTOS/Src/tasks.c **** 			xReturn = pdTRUE;
1714:FreeRTOS/Src/tasks.c **** 		}
1715:FreeRTOS/Src/tasks.c **** 	}
1716:FreeRTOS/Src/tasks.c **** 	portEXIT_CRITICAL();
1717:FreeRTOS/Src/tasks.c **** 
1718:FreeRTOS/Src/tasks.c ****     return xReturn;
1719:FreeRTOS/Src/tasks.c **** }
1720:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
1721:FreeRTOS/Src/tasks.c **** 
1722:FreeRTOS/Src/tasks.c **** void vTaskMissedYield( void )
1723:FreeRTOS/Src/tasks.c **** {
1724:FreeRTOS/Src/tasks.c **** 	xMissedYield = pdTRUE;
1725:FreeRTOS/Src/tasks.c **** }
1726:FreeRTOS/Src/tasks.c **** 
1727:FreeRTOS/Src/tasks.c **** /*
1728:FreeRTOS/Src/tasks.c ****  * -----------------------------------------------------------
1729:FreeRTOS/Src/tasks.c ****  * The Idle task.
1730:FreeRTOS/Src/tasks.c ****  * ----------------------------------------------------------
1731:FreeRTOS/Src/tasks.c ****  *
1732:FreeRTOS/Src/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
1733:FreeRTOS/Src/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
1734:FreeRTOS/Src/tasks.c ****  *
1735:FreeRTOS/Src/tasks.c ****  * void prvIdleTask( void *pvParameters );
1736:FreeRTOS/Src/tasks.c ****  *
1737:FreeRTOS/Src/tasks.c ****  */
1738:FreeRTOS/Src/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
1739:FreeRTOS/Src/tasks.c **** {
1740:FreeRTOS/Src/tasks.c **** 	/* Stop warnings. */
1741:FreeRTOS/Src/tasks.c **** 	( void ) pvParameters;
1742:FreeRTOS/Src/tasks.c **** 
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 32


1743:FreeRTOS/Src/tasks.c **** 	for( ;; )
1744:FreeRTOS/Src/tasks.c **** 	{
1745:FreeRTOS/Src/tasks.c **** 		/* See if any tasks have been deleted. */
1746:FreeRTOS/Src/tasks.c **** 		prvCheckTasksWaitingTermination();
1747:FreeRTOS/Src/tasks.c **** 
1748:FreeRTOS/Src/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
1749:FreeRTOS/Src/tasks.c **** 		{
1750:FreeRTOS/Src/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
1751:FreeRTOS/Src/tasks.c **** 			see if any other task has become available.  If we are using
1752:FreeRTOS/Src/tasks.c **** 			preemption we don't need to do this as any task becoming available
1753:FreeRTOS/Src/tasks.c **** 			will automatically get the processor anyway. */
1754:FreeRTOS/Src/tasks.c **** 			taskYIELD();
1755:FreeRTOS/Src/tasks.c **** 		}
1756:FreeRTOS/Src/tasks.c **** 		#endif
1757:FreeRTOS/Src/tasks.c **** 
1758:FreeRTOS/Src/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
1759:FreeRTOS/Src/tasks.c **** 		{
1760:FreeRTOS/Src/tasks.c **** 			/* When using preemption tasks of equal priority will be
1761:FreeRTOS/Src/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
1762:FreeRTOS/Src/tasks.c **** 			to run then the idle task should yield before the end of the
1763:FreeRTOS/Src/tasks.c **** 			timeslice.
1764:FreeRTOS/Src/tasks.c **** 
1765:FreeRTOS/Src/tasks.c **** 			A critical region is not required here as we are just reading from
1766:FreeRTOS/Src/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
1767:FreeRTOS/Src/tasks.c **** 			the ready list at the idle priority contains more than one task
1768:FreeRTOS/Src/tasks.c **** 			then a task other than the idle task is ready to execute. */
1769:FreeRTOS/Src/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_
1770:FreeRTOS/Src/tasks.c **** 			{
1771:FreeRTOS/Src/tasks.c **** 				taskYIELD();
1772:FreeRTOS/Src/tasks.c **** 			}
1773:FreeRTOS/Src/tasks.c **** 		}
1774:FreeRTOS/Src/tasks.c **** 		#endif
1775:FreeRTOS/Src/tasks.c **** 
1776:FreeRTOS/Src/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
1777:FreeRTOS/Src/tasks.c **** 		{
1778:FreeRTOS/Src/tasks.c **** 			extern void vApplicationIdleHook( void );
1779:FreeRTOS/Src/tasks.c **** 
1780:FreeRTOS/Src/tasks.c **** 			/* Call the user defined function from within the idle task.  This
1781:FreeRTOS/Src/tasks.c **** 			allows the application designer to add background functionality
1782:FreeRTOS/Src/tasks.c **** 			without the overhead of a separate task.
1783:FreeRTOS/Src/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
1784:FreeRTOS/Src/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
1785:FreeRTOS/Src/tasks.c **** 			vApplicationIdleHook();
1786:FreeRTOS/Src/tasks.c **** 		}
1787:FreeRTOS/Src/tasks.c **** 		#endif
1788:FreeRTOS/Src/tasks.c **** 	}
1789:FreeRTOS/Src/tasks.c **** } /*lint !e715 pvParameters is not accessed but all task functions require the same prototype. */
1790:FreeRTOS/Src/tasks.c **** 
1791:FreeRTOS/Src/tasks.c **** 
1792:FreeRTOS/Src/tasks.c **** 
1793:FreeRTOS/Src/tasks.c **** 
1794:FreeRTOS/Src/tasks.c **** 
1795:FreeRTOS/Src/tasks.c **** 
1796:FreeRTOS/Src/tasks.c **** 
1797:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------
1798:FreeRTOS/Src/tasks.c ****  * File private functions documented at the top of the file.
1799:FreeRTOS/Src/tasks.c ****  *----------------------------------------------------------*/
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 33


1800:FreeRTOS/Src/tasks.c **** 
1801:FreeRTOS/Src/tasks.c **** 
1802:FreeRTOS/Src/tasks.c **** 
1803:FreeRTOS/Src/tasks.c **** static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed portCHAR * const pcName, unsigne
1804:FreeRTOS/Src/tasks.c **** {
1805:FreeRTOS/Src/tasks.c **** 	/* Store the function name in the TCB. */
1806:FreeRTOS/Src/tasks.c **** 	#if configMAX_TASK_NAME_LEN > 1
1807:FreeRTOS/Src/tasks.c **** 	{
1808:FreeRTOS/Src/tasks.c **** 		/* Don't bring strncpy into the build unnecessarily. */
1809:FreeRTOS/Src/tasks.c **** 		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned portSHORT ) configMAX_
1810:FreeRTOS/Src/tasks.c **** 	}
1811:FreeRTOS/Src/tasks.c **** 	#endif
1812:FreeRTOS/Src/tasks.c **** 	pxTCB->pcTaskName[ ( unsigned portSHORT ) configMAX_TASK_NAME_LEN - ( unsigned portSHORT ) 1 ] = '
1813:FreeRTOS/Src/tasks.c **** 
1814:FreeRTOS/Src/tasks.c **** 	/* This is used as an array index so must ensure it's not too large. */
1815:FreeRTOS/Src/tasks.c **** 	if( uxPriority >= configMAX_PRIORITIES )
1816:FreeRTOS/Src/tasks.c **** 	{
1817:FreeRTOS/Src/tasks.c **** 		uxPriority = configMAX_PRIORITIES - 1;
1818:FreeRTOS/Src/tasks.c **** 	}
1819:FreeRTOS/Src/tasks.c **** 
1820:FreeRTOS/Src/tasks.c **** 	pxTCB->uxPriority = uxPriority;
1821:FreeRTOS/Src/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
1822:FreeRTOS/Src/tasks.c **** 	{
1823:FreeRTOS/Src/tasks.c **** 		pxTCB->uxBasePriority = uxPriority;
1824:FreeRTOS/Src/tasks.c **** 	}
1825:FreeRTOS/Src/tasks.c **** 	#endif
1826:FreeRTOS/Src/tasks.c **** 
1827:FreeRTOS/Src/tasks.c **** 	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
1828:FreeRTOS/Src/tasks.c **** 	vListInitialiseItem( &( pxTCB->xEventListItem ) );
1829:FreeRTOS/Src/tasks.c **** 
1830:FreeRTOS/Src/tasks.c **** 	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
1831:FreeRTOS/Src/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
1832:FreeRTOS/Src/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
1833:FreeRTOS/Src/tasks.c **** 
1834:FreeRTOS/Src/tasks.c **** 	/* Event lists are always in priority order. */
1835:FreeRTOS/Src/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPri
1836:FreeRTOS/Src/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
1837:FreeRTOS/Src/tasks.c **** 
1838:FreeRTOS/Src/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
1839:FreeRTOS/Src/tasks.c **** 	{
1840:FreeRTOS/Src/tasks.c **** 		pxTCB->uxCriticalNesting = ( unsigned portBASE_TYPE ) 0;
1841:FreeRTOS/Src/tasks.c **** 	}
1842:FreeRTOS/Src/tasks.c **** 	#endif
1843:FreeRTOS/Src/tasks.c **** 
1844:FreeRTOS/Src/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
1845:FreeRTOS/Src/tasks.c **** 	{
1846:FreeRTOS/Src/tasks.c **** 		pxTCB->pxTaskTag = NULL;
1847:FreeRTOS/Src/tasks.c **** 	}
1848:FreeRTOS/Src/tasks.c **** 	#endif
1849:FreeRTOS/Src/tasks.c **** 
1850:FreeRTOS/Src/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
1851:FreeRTOS/Src/tasks.c **** 	{
1852:FreeRTOS/Src/tasks.c **** 		pxTCB->ulRunTimeCounter = 0UL;
1853:FreeRTOS/Src/tasks.c **** 	}
1854:FreeRTOS/Src/tasks.c **** 	#endif
1855:FreeRTOS/Src/tasks.c **** }
1856:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 34


1857:FreeRTOS/Src/tasks.c **** 
1858:FreeRTOS/Src/tasks.c **** static void prvInitialiseTaskLists( void )
1859:FreeRTOS/Src/tasks.c **** {
1860:FreeRTOS/Src/tasks.c **** unsigned portBASE_TYPE uxPriority;
1861:FreeRTOS/Src/tasks.c **** 
1862:FreeRTOS/Src/tasks.c **** 	for( uxPriority = 0; uxPriority < configMAX_PRIORITIES; uxPriority++ )
1863:FreeRTOS/Src/tasks.c **** 	{
1864:FreeRTOS/Src/tasks.c **** 		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
1865:FreeRTOS/Src/tasks.c **** 	}
1866:FreeRTOS/Src/tasks.c **** 
1867:FreeRTOS/Src/tasks.c **** 	vListInitialise( ( xList * ) &xDelayedTaskList1 );
1868:FreeRTOS/Src/tasks.c **** 	vListInitialise( ( xList * ) &xDelayedTaskList2 );
1869:FreeRTOS/Src/tasks.c **** 	vListInitialise( ( xList * ) &xPendingReadyList );
1870:FreeRTOS/Src/tasks.c **** 
1871:FreeRTOS/Src/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
1872:FreeRTOS/Src/tasks.c **** 	{
1873:FreeRTOS/Src/tasks.c **** 		vListInitialise( ( xList * ) &xTasksWaitingTermination );
1874:FreeRTOS/Src/tasks.c **** 	}
1875:FreeRTOS/Src/tasks.c **** 	#endif
1876:FreeRTOS/Src/tasks.c **** 
1877:FreeRTOS/Src/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
1878:FreeRTOS/Src/tasks.c **** 	{
1879:FreeRTOS/Src/tasks.c **** 		vListInitialise( ( xList * ) &xSuspendedTaskList );
1880:FreeRTOS/Src/tasks.c **** 	}
1881:FreeRTOS/Src/tasks.c **** 	#endif
1882:FreeRTOS/Src/tasks.c **** 
1883:FreeRTOS/Src/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
1884:FreeRTOS/Src/tasks.c **** 	using list2. */
1885:FreeRTOS/Src/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
1886:FreeRTOS/Src/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1887:FreeRTOS/Src/tasks.c **** }
1888:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
1889:FreeRTOS/Src/tasks.c **** 
1890:FreeRTOS/Src/tasks.c **** static void prvCheckTasksWaitingTermination( void )
1891:FreeRTOS/Src/tasks.c **** {
1892:FreeRTOS/Src/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
1893:FreeRTOS/Src/tasks.c **** 	{
1894:FreeRTOS/Src/tasks.c **** 		portBASE_TYPE xListIsEmpty;
1895:FreeRTOS/Src/tasks.c **** 
1896:FreeRTOS/Src/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
1897:FreeRTOS/Src/tasks.c **** 		too often in the idle task. */
1898:FreeRTOS/Src/tasks.c **** 		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
1899:FreeRTOS/Src/tasks.c **** 		{
1900:FreeRTOS/Src/tasks.c **** 			vTaskSuspendAll();
1901:FreeRTOS/Src/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
1902:FreeRTOS/Src/tasks.c **** 			xTaskResumeAll();
1903:FreeRTOS/Src/tasks.c **** 
1904:FreeRTOS/Src/tasks.c **** 			if( !xListIsEmpty )
1905:FreeRTOS/Src/tasks.c **** 			{
1906:FreeRTOS/Src/tasks.c **** 				tskTCB *pxTCB;
1907:FreeRTOS/Src/tasks.c **** 
1908:FreeRTOS/Src/tasks.c **** 				portENTER_CRITICAL();
1909:FreeRTOS/Src/tasks.c **** 				{
1910:FreeRTOS/Src/tasks.c **** 					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
1911:FreeRTOS/Src/tasks.c **** 					vListRemove( &( pxTCB->xGenericListItem ) );
1912:FreeRTOS/Src/tasks.c **** 					--uxCurrentNumberOfTasks;
1913:FreeRTOS/Src/tasks.c **** 					--uxTasksDeleted;
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 35


1914:FreeRTOS/Src/tasks.c **** 				}
1915:FreeRTOS/Src/tasks.c **** 				portEXIT_CRITICAL();
1916:FreeRTOS/Src/tasks.c **** 
1917:FreeRTOS/Src/tasks.c **** 				prvDeleteTCB( pxTCB );
1918:FreeRTOS/Src/tasks.c **** 			}
1919:FreeRTOS/Src/tasks.c **** 		}
1920:FreeRTOS/Src/tasks.c **** 	}
1921:FreeRTOS/Src/tasks.c **** 	#endif
1922:FreeRTOS/Src/tasks.c **** }
1923:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
1924:FreeRTOS/Src/tasks.c **** 
1925:FreeRTOS/Src/tasks.c **** static tskTCB *prvAllocateTCBAndStack( unsigned portSHORT usStackDepth )
1926:FreeRTOS/Src/tasks.c **** {
1927:FreeRTOS/Src/tasks.c **** tskTCB *pxNewTCB;
1928:FreeRTOS/Src/tasks.c **** 
1929:FreeRTOS/Src/tasks.c **** 	/* Allocate space for the TCB.  Where the memory comes from depends on
1930:FreeRTOS/Src/tasks.c **** 	the implementation of the port malloc function. */
1931:FreeRTOS/Src/tasks.c **** 	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
1932:FreeRTOS/Src/tasks.c **** 
1933:FreeRTOS/Src/tasks.c **** 	if( pxNewTCB != NULL )
1934:FreeRTOS/Src/tasks.c **** 	{
1935:FreeRTOS/Src/tasks.c **** 		/* Allocate space for the stack used by the task being created.
1936:FreeRTOS/Src/tasks.c **** 		The base of the stack memory stored in the TCB so the task can
1937:FreeRTOS/Src/tasks.c **** 		be deleted later if required. */
1938:FreeRTOS/Src/tasks.c **** 		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMalloc( ( ( size_t )usStackDepth ) * sizeof( portS
1939:FreeRTOS/Src/tasks.c **** 
1940:FreeRTOS/Src/tasks.c **** 		if( pxNewTCB->pxStack == NULL )
1941:FreeRTOS/Src/tasks.c **** 		{
1942:FreeRTOS/Src/tasks.c **** 			/* Could not allocate the stack.  Delete the allocated TCB. */
1943:FreeRTOS/Src/tasks.c **** 			vPortFree( pxNewTCB );
1944:FreeRTOS/Src/tasks.c **** 			pxNewTCB = NULL;
1945:FreeRTOS/Src/tasks.c **** 		}
1946:FreeRTOS/Src/tasks.c **** 		else
1947:FreeRTOS/Src/tasks.c **** 		{
1948:FreeRTOS/Src/tasks.c **** 			/* Just to help debugging. */
1949:FreeRTOS/Src/tasks.c **** 			memset( pxNewTCB->pxStack, tskSTACK_FILL_BYTE, usStackDepth * sizeof( portSTACK_TYPE ) );
1950:FreeRTOS/Src/tasks.c **** 		}
1951:FreeRTOS/Src/tasks.c **** 	}
1952:FreeRTOS/Src/tasks.c **** 
1953:FreeRTOS/Src/tasks.c **** 	return pxNewTCB;
1954:FreeRTOS/Src/tasks.c **** }
1955:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
1956:FreeRTOS/Src/tasks.c **** 
1957:FreeRTOS/Src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1958:FreeRTOS/Src/tasks.c **** 
1959:FreeRTOS/Src/tasks.c **** 	static void prvListTaskWithinSingleList( const signed portCHAR *pcWriteBuffer, xList *pxList, sign
1960:FreeRTOS/Src/tasks.c **** 	{
1961:FreeRTOS/Src/tasks.c **** 	volatile tskTCB *pxNextTCB, *pxFirstTCB;
1962:FreeRTOS/Src/tasks.c **** 	unsigned portSHORT usStackRemaining;
1963:FreeRTOS/Src/tasks.c **** 
1964:FreeRTOS/Src/tasks.c **** 		/* Write the details of all the TCB's in pxList into the buffer. */
1965:FreeRTOS/Src/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
1966:FreeRTOS/Src/tasks.c **** 		do
1967:FreeRTOS/Src/tasks.c **** 		{
1968:FreeRTOS/Src/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
1969:FreeRTOS/Src/tasks.c **** 			usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned portCHAR * ) pxNextTCB->pxStack );
1970:FreeRTOS/Src/tasks.c **** 			sprintf( pcStatusString, ( portCHAR * ) "%s\t\t%c\t%u\t%u\t%u\r\n", pxNextTCB->pcTaskName, cStat
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 36


1971:FreeRTOS/Src/tasks.c **** 			strcat( ( portCHAR * ) pcWriteBuffer, ( portCHAR * ) pcStatusString );
1972:FreeRTOS/Src/tasks.c **** 
1973:FreeRTOS/Src/tasks.c **** 		} while( pxNextTCB != pxFirstTCB );
1974:FreeRTOS/Src/tasks.c **** 	}
1975:FreeRTOS/Src/tasks.c **** 
1976:FreeRTOS/Src/tasks.c **** #endif
1977:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
1978:FreeRTOS/Src/tasks.c **** 
1979:FreeRTOS/Src/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
1980:FreeRTOS/Src/tasks.c **** 
1981:FreeRTOS/Src/tasks.c **** 	static void prvGenerateRunTimeStatsForTasksInList( const signed portCHAR *pcWriteBuffer, xList *px
1982:FreeRTOS/Src/tasks.c **** 	{
1983:FreeRTOS/Src/tasks.c **** 	volatile tskTCB *pxNextTCB, *pxFirstTCB;
1984:FreeRTOS/Src/tasks.c **** 	unsigned portLONG ulStatsAsPercentage;
1985:FreeRTOS/Src/tasks.c **** 
1986:FreeRTOS/Src/tasks.c **** 		/* Write the run time stats of all the TCB's in pxList into the buffer. */
1987:FreeRTOS/Src/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
1988:FreeRTOS/Src/tasks.c **** 		do
1989:FreeRTOS/Src/tasks.c **** 		{
1990:FreeRTOS/Src/tasks.c **** 			/* Get next TCB in from the list. */
1991:FreeRTOS/Src/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
1992:FreeRTOS/Src/tasks.c **** 
1993:FreeRTOS/Src/tasks.c **** 			/* Divide by zero check. */
1994:FreeRTOS/Src/tasks.c **** 			if( ulTotalRunTime > 0UL )
1995:FreeRTOS/Src/tasks.c **** 			{
1996:FreeRTOS/Src/tasks.c **** 				/* Has the task run at all? */
1997:FreeRTOS/Src/tasks.c **** 				if( pxNextTCB->ulRunTimeCounter == 0 )
1998:FreeRTOS/Src/tasks.c **** 				{
1999:FreeRTOS/Src/tasks.c **** 					/* The task has used no CPU time at all. */
2000:FreeRTOS/Src/tasks.c **** 					sprintf( pcStatsString, ( portCHAR * ) "%s\t\t0\t\t0%%\r\n", pxNextTCB->pcTaskName );
2001:FreeRTOS/Src/tasks.c **** 				}
2002:FreeRTOS/Src/tasks.c **** 				else
2003:FreeRTOS/Src/tasks.c **** 				{
2004:FreeRTOS/Src/tasks.c **** 					/* What percentage of the total run time as the task used?
2005:FreeRTOS/Src/tasks.c **** 					This will always be rounded down to the nearest integer. */
2006:FreeRTOS/Src/tasks.c **** 					ulStatsAsPercentage = ( 100UL * pxNextTCB->ulRunTimeCounter ) / ulTotalRunTime;
2007:FreeRTOS/Src/tasks.c **** 
2008:FreeRTOS/Src/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
2009:FreeRTOS/Src/tasks.c **** 					{
2010:FreeRTOS/Src/tasks.c **** 						sprintf( pcStatsString, ( portCHAR * ) "%s\t\t%u\t\t%u%%\r\n", pxNextTCB->pcTaskName, ( unsig
2011:FreeRTOS/Src/tasks.c **** 					}
2012:FreeRTOS/Src/tasks.c **** 					else
2013:FreeRTOS/Src/tasks.c **** 					{
2014:FreeRTOS/Src/tasks.c **** 						/* If the percentage is zero here then the task has
2015:FreeRTOS/Src/tasks.c **** 						consumed less than 1% of the total run time. */
2016:FreeRTOS/Src/tasks.c **** 						sprintf( pcStatsString, ( portCHAR * ) "%s\t\t%u\t\t<1%%\r\n", pxNextTCB->pcTaskName, ( unsig
2017:FreeRTOS/Src/tasks.c **** 					}
2018:FreeRTOS/Src/tasks.c **** 				}
2019:FreeRTOS/Src/tasks.c **** 
2020:FreeRTOS/Src/tasks.c **** 				strcat( ( portCHAR * ) pcWriteBuffer, ( portCHAR * ) pcStatsString );
2021:FreeRTOS/Src/tasks.c **** 			}
2022:FreeRTOS/Src/tasks.c **** 
2023:FreeRTOS/Src/tasks.c **** 		} while( pxNextTCB != pxFirstTCB );
2024:FreeRTOS/Src/tasks.c **** 	}
2025:FreeRTOS/Src/tasks.c **** 
2026:FreeRTOS/Src/tasks.c **** #endif
2027:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 37


2028:FreeRTOS/Src/tasks.c **** 
2029:FreeRTOS/Src/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
2030:FreeRTOS/Src/tasks.c **** 
2031:FreeRTOS/Src/tasks.c **** 	unsigned portSHORT usTaskCheckFreeStackSpace( const unsigned portCHAR * pucStackByte )
2032:FreeRTOS/Src/tasks.c **** 	{
2033:FreeRTOS/Src/tasks.c **** 	register unsigned portSHORT usCount = 0;
2034:FreeRTOS/Src/tasks.c **** 
2035:FreeRTOS/Src/tasks.c **** 		while( *pucStackByte == tskSTACK_FILL_BYTE )
2036:FreeRTOS/Src/tasks.c **** 		{
2037:FreeRTOS/Src/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
2038:FreeRTOS/Src/tasks.c **** 			usCount++;
2039:FreeRTOS/Src/tasks.c **** 		}
2040:FreeRTOS/Src/tasks.c **** 
2041:FreeRTOS/Src/tasks.c **** 		usCount /= sizeof( portSTACK_TYPE );
2042:FreeRTOS/Src/tasks.c **** 
2043:FreeRTOS/Src/tasks.c **** 		return usCount;
2044:FreeRTOS/Src/tasks.c **** 	}
2045:FreeRTOS/Src/tasks.c **** 
2046:FreeRTOS/Src/tasks.c **** #endif
2047:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
2048:FreeRTOS/Src/tasks.c **** 
2049:FreeRTOS/Src/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
2050:FreeRTOS/Src/tasks.c **** 
2051:FreeRTOS/Src/tasks.c **** 	unsigned portBASE_TYPE uxTaskGetStackHighWaterMark( xTaskHandle xTask )
2052:FreeRTOS/Src/tasks.c **** 	{
2053:FreeRTOS/Src/tasks.c **** 	tskTCB *pxTCB;
2054:FreeRTOS/Src/tasks.c **** 	unsigned portCHAR *pcEndOfStack;
2055:FreeRTOS/Src/tasks.c **** 
2056:FreeRTOS/Src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2057:FreeRTOS/Src/tasks.c **** 
2058:FreeRTOS/Src/tasks.c **** 		#if portSTACK_GROWTH < 0
2059:FreeRTOS/Src/tasks.c **** 		{
2060:FreeRTOS/Src/tasks.c **** 			pcEndOfStack = ( unsigned portCHAR * ) pxTCB->pxStack;
2061:FreeRTOS/Src/tasks.c **** 		}
2062:FreeRTOS/Src/tasks.c **** 		#else
2063:FreeRTOS/Src/tasks.c **** 		{
2064:FreeRTOS/Src/tasks.c **** 			pcEndOfStack = ( unsigned portCHAR * ) pxTCB->pxEndOfStack;
2065:FreeRTOS/Src/tasks.c **** 		}
2066:FreeRTOS/Src/tasks.c **** 		#endif
2067:FreeRTOS/Src/tasks.c **** 
2068:FreeRTOS/Src/tasks.c **** 		return usTaskCheckFreeStackSpace( pcEndOfStack );
2069:FreeRTOS/Src/tasks.c **** 	}
2070:FreeRTOS/Src/tasks.c **** 
2071:FreeRTOS/Src/tasks.c **** #endif
2072:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
2073:FreeRTOS/Src/tasks.c **** 
2074:FreeRTOS/Src/tasks.c **** #if ( ( INCLUDE_vTaskDelete == 1 ) || ( INCLUDE_vTaskCleanUpResources == 1 ) )
2075:FreeRTOS/Src/tasks.c **** 
2076:FreeRTOS/Src/tasks.c **** 	static void prvDeleteTCB( tskTCB *pxTCB )
2077:FreeRTOS/Src/tasks.c **** 	{
  27              		.loc 1 2077 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 10B5     		push	{r4, lr}
  33              	.LCFI0:
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 38


  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 4, -8
  36              		.cfi_offset 14, -4
  37 0002 0446     		mov	r4, r0
2078:FreeRTOS/Src/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up to
2079:FreeRTOS/Src/tasks.c **** 		the task to free any memory allocated at the application level. */
2080:FreeRTOS/Src/tasks.c **** 		vPortFree( pxTCB->pxStack );
  38              		.loc 1 2080 0
  39 0004 006B     		ldr	r0, [r0, #48]
  40              	.LVL1:
  41 0006 FFF7FEFF 		bl	vPortFree
  42              	.LVL2:
2081:FreeRTOS/Src/tasks.c **** 		vPortFree( pxTCB );
  43              		.loc 1 2081 0
  44 000a 2046     		mov	r0, r4
  45 000c FFF7FEFF 		bl	vPortFree
  46              	.LVL3:
  47 0010 10BD     		pop	{r4, pc}
  48              		.cfi_endproc
  49              	.LFE29:
  51 0012 00BF     		.section	.text.prvAllocateTCBAndStack,"ax",%progbits
  52              		.align	2
  53              		.thumb
  54              		.thumb_func
  56              	prvAllocateTCBAndStack:
  57              	.LFB28:
1926:FreeRTOS/Src/tasks.c **** tskTCB *pxNewTCB;
  58              		.loc 1 1926 0
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 0
  61              		@ frame_needed = 0, uses_anonymous_args = 0
  62              	.LVL4:
  63 0000 38B5     		push	{r3, r4, r5, lr}
  64              	.LCFI1:
  65              		.cfi_def_cfa_offset 16
  66              		.cfi_offset 3, -16
  67              		.cfi_offset 4, -12
  68              		.cfi_offset 5, -8
  69              		.cfi_offset 14, -4
  70 0002 0446     		mov	r4, r0
1931:FreeRTOS/Src/tasks.c **** 
  71              		.loc 1 1931 0
  72 0004 4420     		movs	r0, #68
  73              	.LVL5:
  74 0006 FFF7FEFF 		bl	pvPortMalloc
  75              	.LVL6:
1933:FreeRTOS/Src/tasks.c **** 	{
  76              		.loc 1 1933 0
  77 000a 0546     		mov	r5, r0
  78 000c 70B1     		cbz	r0, .L4
1938:FreeRTOS/Src/tasks.c **** 
  79              		.loc 1 1938 0
  80 000e A400     		lsls	r4, r4, #2
  81 0010 2046     		mov	r0, r4
  82              	.LVL7:
  83 0012 FFF7FEFF 		bl	pvPortMalloc
  84              	.LVL8:
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 39


  85 0016 2863     		str	r0, [r5, #48]
1940:FreeRTOS/Src/tasks.c **** 		{
  86              		.loc 1 1940 0
  87 0018 20B9     		cbnz	r0, .L5
1943:FreeRTOS/Src/tasks.c **** 			pxNewTCB = NULL;
  88              		.loc 1 1943 0
  89 001a 2846     		mov	r0, r5
  90 001c FFF7FEFF 		bl	vPortFree
  91              	.LVL9:
1944:FreeRTOS/Src/tasks.c **** 		}
  92              		.loc 1 1944 0
  93 0020 0025     		movs	r5, #0
  94 0022 03E0     		b	.L4
  95              	.LVL10:
  96              	.L5:
1949:FreeRTOS/Src/tasks.c **** 		}
  97              		.loc 1 1949 0
  98 0024 2246     		mov	r2, r4
  99 0026 A521     		movs	r1, #165
 100 0028 FFF7FEFF 		bl	memset
 101              	.LVL11:
 102              	.L4:
1954:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 103              		.loc 1 1954 0
 104 002c 2846     		mov	r0, r5
 105 002e 38BD     		pop	{r3, r4, r5, pc}
 106              		.cfi_endproc
 107              	.LFE28:
 109              		.section	.text.prvInitialiseTCBVariables,"ax",%progbits
 110              		.align	2
 111              		.thumb
 112              		.thumb_func
 114              	prvInitialiseTCBVariables:
 115              	.LFB25:
1804:FreeRTOS/Src/tasks.c **** 	/* Store the function name in the TCB. */
 116              		.loc 1 1804 0
 117              		.cfi_startproc
 118              		@ args = 0, pretend = 0, frame = 0
 119              		@ frame_needed = 0, uses_anonymous_args = 0
 120              	.LVL12:
 121 0000 38B5     		push	{r3, r4, r5, lr}
 122              	.LCFI2:
 123              		.cfi_def_cfa_offset 16
 124              		.cfi_offset 3, -16
 125              		.cfi_offset 4, -12
 126              		.cfi_offset 5, -8
 127              		.cfi_offset 14, -4
 128 0002 0446     		mov	r4, r0
 129 0004 1546     		mov	r5, r2
1809:FreeRTOS/Src/tasks.c **** 	}
 130              		.loc 1 1809 0
 131 0006 1022     		movs	r2, #16
 132              	.LVL13:
 133 0008 3430     		adds	r0, r0, #52
 134              	.LVL14:
 135 000a FFF7FEFF 		bl	strncpy
 136              	.LVL15:
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 40


1812:FreeRTOS/Src/tasks.c **** 
 137              		.loc 1 1812 0
 138 000e 0023     		movs	r3, #0
 139 0010 84F84330 		strb	r3, [r4, #67]
1815:FreeRTOS/Src/tasks.c **** 	{
 140              		.loc 1 1815 0
 141 0014 042D     		cmp	r5, #4
 142 0016 00D9     		bls	.L8
1817:FreeRTOS/Src/tasks.c **** 	}
 143              		.loc 1 1817 0
 144 0018 0425     		movs	r5, #4
 145              	.LVL16:
 146              	.L8:
1820:FreeRTOS/Src/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 147              		.loc 1 1820 0
 148 001a E562     		str	r5, [r4, #44]
1827:FreeRTOS/Src/tasks.c **** 	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 149              		.loc 1 1827 0
 150 001c 201D     		adds	r0, r4, #4
 151 001e FFF7FEFF 		bl	vListInitialiseItem
 152              	.LVL17:
1828:FreeRTOS/Src/tasks.c **** 
 153              		.loc 1 1828 0
 154 0022 04F11800 		add	r0, r4, #24
 155 0026 FFF7FEFF 		bl	vListInitialiseItem
 156              	.LVL18:
1832:FreeRTOS/Src/tasks.c **** 
 157              		.loc 1 1832 0
 158 002a 2461     		str	r4, [r4, #16]
1835:FreeRTOS/Src/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 159              		.loc 1 1835 0
 160 002c C5F10505 		rsb	r5, r5, #5
 161              	.LVL19:
 162 0030 A561     		str	r5, [r4, #24]
1836:FreeRTOS/Src/tasks.c **** 
 163              		.loc 1 1836 0
 164 0032 6462     		str	r4, [r4, #36]
 165 0034 38BD     		pop	{r3, r4, r5, pc}
 166              		.cfi_endproc
 167              	.LFE25:
 169 0036 00BF     		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 170              		.align	2
 171              		.thumb
 172              		.thumb_func
 174              	prvInitialiseTaskLists:
 175              	.LFB26:
1859:FreeRTOS/Src/tasks.c **** unsigned portBASE_TYPE uxPriority;
 176              		.loc 1 1859 0
 177              		.cfi_startproc
 178              		@ args = 0, pretend = 0, frame = 0
 179              		@ frame_needed = 0, uses_anonymous_args = 0
 180 0000 38B5     		push	{r3, r4, r5, lr}
 181              	.LCFI3:
 182              		.cfi_def_cfa_offset 16
 183              		.cfi_offset 3, -16
 184              		.cfi_offset 4, -12
 185              		.cfi_offset 5, -8
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 41


 186              		.cfi_offset 14, -4
 187              	.LVL20:
1862:FreeRTOS/Src/tasks.c **** 	{
 188              		.loc 1 1862 0
 189 0002 0024     		movs	r4, #0
 190 0004 07E0     		b	.L12
 191              	.LVL21:
 192              	.L13:
1864:FreeRTOS/Src/tasks.c **** 	}
 193              		.loc 1 1864 0 discriminator 3
 194 0006 04EB8402 		add	r2, r4, r4, lsl #2
 195 000a 9300     		lsls	r3, r2, #2
 196 000c 0E48     		ldr	r0, .L15
 197 000e 1844     		add	r0, r0, r3
 198 0010 FFF7FEFF 		bl	vListInitialise
 199              	.LVL22:
1862:FreeRTOS/Src/tasks.c **** 	{
 200              		.loc 1 1862 0 discriminator 3
 201 0014 0134     		adds	r4, r4, #1
 202              	.LVL23:
 203              	.L12:
1862:FreeRTOS/Src/tasks.c **** 	{
 204              		.loc 1 1862 0 is_stmt 0 discriminator 1
 205 0016 042C     		cmp	r4, #4
 206 0018 F5D9     		bls	.L13
1867:FreeRTOS/Src/tasks.c **** 	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 207              		.loc 1 1867 0 is_stmt 1
 208 001a 0C4D     		ldr	r5, .L15+4
 209 001c 2846     		mov	r0, r5
 210 001e FFF7FEFF 		bl	vListInitialise
 211              	.LVL24:
1868:FreeRTOS/Src/tasks.c **** 	vListInitialise( ( xList * ) &xPendingReadyList );
 212              		.loc 1 1868 0
 213 0022 0B4C     		ldr	r4, .L15+8
 214              	.LVL25:
 215 0024 2046     		mov	r0, r4
 216 0026 FFF7FEFF 		bl	vListInitialise
 217              	.LVL26:
1869:FreeRTOS/Src/tasks.c **** 
 218              		.loc 1 1869 0
 219 002a 0A48     		ldr	r0, .L15+12
 220 002c FFF7FEFF 		bl	vListInitialise
 221              	.LVL27:
1873:FreeRTOS/Src/tasks.c **** 	}
 222              		.loc 1 1873 0
 223 0030 0948     		ldr	r0, .L15+16
 224 0032 FFF7FEFF 		bl	vListInitialise
 225              	.LVL28:
1879:FreeRTOS/Src/tasks.c **** 	}
 226              		.loc 1 1879 0
 227 0036 0948     		ldr	r0, .L15+20
 228 0038 FFF7FEFF 		bl	vListInitialise
 229              	.LVL29:
1885:FreeRTOS/Src/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 230              		.loc 1 1885 0
 231 003c 084B     		ldr	r3, .L15+24
 232 003e 1D60     		str	r5, [r3]
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 42


1886:FreeRTOS/Src/tasks.c **** }
 233              		.loc 1 1886 0
 234 0040 084B     		ldr	r3, .L15+28
 235 0042 1C60     		str	r4, [r3]
 236 0044 38BD     		pop	{r3, r4, r5, pc}
 237              	.L16:
 238 0046 00BF     		.align	2
 239              	.L15:
 240 0048 00000000 		.word	.LANCHOR0
 241 004c 00000000 		.word	.LANCHOR1
 242 0050 00000000 		.word	.LANCHOR2
 243 0054 00000000 		.word	.LANCHOR3
 244 0058 00000000 		.word	.LANCHOR4
 245 005c 00000000 		.word	.LANCHOR5
 246 0060 00000000 		.word	.LANCHOR6
 247 0064 00000000 		.word	.LANCHOR7
 248              		.cfi_endproc
 249              	.LFE26:
 251              		.section	.text.xTaskCreate,"ax",%progbits
 252              		.align	2
 253              		.global	xTaskCreate
 254              		.thumb
 255              		.thumb_func
 257              	xTaskCreate:
 258              	.LFB1:
 369:FreeRTOS/Src/tasks.c **** signed portBASE_TYPE xReturn;
 259              		.loc 1 369 0
 260              		.cfi_startproc
 261              		@ args = 8, pretend = 0, frame = 0
 262              		@ frame_needed = 0, uses_anonymous_args = 0
 263              	.LVL30:
 264 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 265              	.LCFI4:
 266              		.cfi_def_cfa_offset 24
 267              		.cfi_offset 4, -24
 268              		.cfi_offset 5, -20
 269              		.cfi_offset 6, -16
 270              		.cfi_offset 7, -12
 271              		.cfi_offset 8, -8
 272              		.cfi_offset 14, -4
 273 0004 0646     		mov	r6, r0
 274 0006 8846     		mov	r8, r1
 275 0008 1446     		mov	r4, r2
 276 000a 1F46     		mov	r7, r3
 375:FreeRTOS/Src/tasks.c **** 
 277              		.loc 1 375 0
 278 000c 1046     		mov	r0, r2
 279              	.LVL31:
 280 000e FFF7FEFF 		bl	prvAllocateTCBAndStack
 281              	.LVL32:
 377:FreeRTOS/Src/tasks.c **** 	{
 282              		.loc 1 377 0
 283 0012 0546     		mov	r5, r0
 284 0014 0028     		cmp	r0, #0
 285 0016 4DD0     		beq	.L26
 286              	.LBB2:
 382:FreeRTOS/Src/tasks.c **** 
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 43


 287              		.loc 1 382 0
 288 0018 069A     		ldr	r2, [sp, #24]
 289 001a 4146     		mov	r1, r8
 290 001c FFF7FEFF 		bl	prvInitialiseTCBVariables
 291              	.LVL33:
 390:FreeRTOS/Src/tasks.c **** 		}
 292              		.loc 1 390 0
 293 0020 286B     		ldr	r0, [r5, #48]
 294 0022 631E     		subs	r3, r4, #1
 295 0024 2E4A     		ldr	r2, .L28
 296 0026 1340     		ands	r3, r3, r2
 297 0028 03D5     		bpl	.L19
 298 002a 013B     		subs	r3, r3, #1
 299 002c 63F00303 		orn	r3, r3, #3
 300 0030 0133     		adds	r3, r3, #1
 301              	.L19:
 302 0032 E41A     		subs	r4, r4, r3
 303 0034 04F18044 		add	r4, r4, #1073741824
 304 0038 013C     		subs	r4, r4, #1
 305              	.LVL34:
 407:FreeRTOS/Src/tasks.c **** 
 306              		.loc 1 407 0
 307 003a 3A46     		mov	r2, r7
 308 003c 3146     		mov	r1, r6
 309 003e 00EB8400 		add	r0, r0, r4, lsl #2
 310              	.LVL35:
 311 0042 FFF7FEFF 		bl	pxPortInitialiseStack
 312              	.LVL36:
 313 0046 2860     		str	r0, [r5]
 411:FreeRTOS/Src/tasks.c **** 		{
 314              		.loc 1 411 0
 315 0048 FFF7FEFF 		bl	vPortEnterCritical
 316              	.LVL37:
 413:FreeRTOS/Src/tasks.c **** 			if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 317              		.loc 1 413 0
 318 004c 254B     		ldr	r3, .L28+4
 319 004e 1A68     		ldr	r2, [r3]
 320 0050 0132     		adds	r2, r2, #1
 321 0052 1A60     		str	r2, [r3]
 414:FreeRTOS/Src/tasks.c **** 			{
 322              		.loc 1 414 0
 323 0054 1B68     		ldr	r3, [r3]
 324 0056 012B     		cmp	r3, #1
 325 0058 04D1     		bne	.L20
 417:FreeRTOS/Src/tasks.c **** 
 326              		.loc 1 417 0
 327 005a 234B     		ldr	r3, .L28+8
 328 005c 1D60     		str	r5, [r3]
 422:FreeRTOS/Src/tasks.c **** 			}
 329              		.loc 1 422 0
 330 005e FFF7FEFF 		bl	prvInitialiseTaskLists
 331              	.LVL38:
 332 0062 0AE0     		b	.L21
 333              	.L20:
 429:FreeRTOS/Src/tasks.c **** 				{
 334              		.loc 1 429 0
 335 0064 214B     		ldr	r3, .L28+12
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 44


 336 0066 1B68     		ldr	r3, [r3]
 337 0068 3BB9     		cbnz	r3, .L21
 431:FreeRTOS/Src/tasks.c **** 					{
 338              		.loc 1 431 0
 339 006a 1F4B     		ldr	r3, .L28+8
 340 006c 1B68     		ldr	r3, [r3]
 341 006e DB6A     		ldr	r3, [r3, #44]
 342 0070 069A     		ldr	r2, [sp, #24]
 343 0072 9A42     		cmp	r2, r3
 344 0074 01D3     		bcc	.L21
 433:FreeRTOS/Src/tasks.c **** 					}
 345              		.loc 1 433 0
 346 0076 1C4B     		ldr	r3, .L28+8
 347 0078 1D60     		str	r5, [r3]
 348              	.L21:
 440:FreeRTOS/Src/tasks.c **** 			{
 349              		.loc 1 440 0
 350 007a EB6A     		ldr	r3, [r5, #44]
 351 007c 1C4A     		ldr	r2, .L28+16
 352 007e 1268     		ldr	r2, [r2]
 353 0080 9342     		cmp	r3, r2
 354 0082 01D9     		bls	.L22
 442:FreeRTOS/Src/tasks.c **** 			}
 355              		.loc 1 442 0
 356 0084 1A4A     		ldr	r2, .L28+16
 357 0086 1360     		str	r3, [r2]
 358              	.L22:
 451:FreeRTOS/Src/tasks.c **** 
 359              		.loc 1 451 0
 360 0088 1A49     		ldr	r1, .L28+20
 361 008a 0A68     		ldr	r2, [r1]
 362 008c 0132     		adds	r2, r2, #1
 363 008e 0A60     		str	r2, [r1]
 453:FreeRTOS/Src/tasks.c **** 
 364              		.loc 1 453 0
 365 0090 194A     		ldr	r2, .L28+24
 366 0092 1268     		ldr	r2, [r2]
 367 0094 9342     		cmp	r3, r2
 368 0096 01D9     		bls	.L23
 453:FreeRTOS/Src/tasks.c **** 
 369              		.loc 1 453 0 is_stmt 0 discriminator 1
 370 0098 174A     		ldr	r2, .L28+24
 371 009a 1360     		str	r3, [r2]
 372              	.L23:
 453:FreeRTOS/Src/tasks.c **** 
 373              		.loc 1 453 0 discriminator 3
 374 009c 03EB8303 		add	r3, r3, r3, lsl #2
 375 00a0 9A00     		lsls	r2, r3, #2
 376 00a2 291D     		adds	r1, r5, #4
 377 00a4 1548     		ldr	r0, .L28+28
 378 00a6 1044     		add	r0, r0, r2
 379 00a8 FFF7FEFF 		bl	vListInsertEnd
 380              	.LVL39:
 458:FreeRTOS/Src/tasks.c **** 	}
 381              		.loc 1 458 0 is_stmt 1 discriminator 3
 382 00ac FFF7FEFF 		bl	vPortExitCritical
 383              	.LVL40:
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 45


 455:FreeRTOS/Src/tasks.c **** 			traceTASK_CREATE( pxNewTCB );
 384              		.loc 1 455 0 discriminator 3
 385 00b0 0124     		movs	r4, #1
 386              	.LBE2:
 387 00b2 01E0     		b	.L18
 388              	.LVL41:
 389              	.L26:
 462:FreeRTOS/Src/tasks.c **** 		traceTASK_CREATE_FAILED( pxNewTCB );
 390              		.loc 1 462 0
 391 00b4 4FF0FF34 		mov	r4, #-1
 392              	.LVL42:
 393              	.L18:
 466:FreeRTOS/Src/tasks.c **** 	{
 394              		.loc 1 466 0
 395 00b8 012C     		cmp	r4, #1
 396 00ba 0DD1     		bne	.L24
 468:FreeRTOS/Src/tasks.c **** 		{
 397              		.loc 1 468 0
 398 00bc 079B     		ldr	r3, [sp, #28]
 399 00be 03B1     		cbz	r3, .L25
 473:FreeRTOS/Src/tasks.c **** 		}
 400              		.loc 1 473 0
 401 00c0 1D60     		str	r5, [r3]
 402              	.L25:
 476:FreeRTOS/Src/tasks.c **** 		{
 403              		.loc 1 476 0
 404 00c2 0A4B     		ldr	r3, .L28+12
 405 00c4 1B68     		ldr	r3, [r3]
 406 00c6 3BB1     		cbz	r3, .L24
 480:FreeRTOS/Src/tasks.c **** 			{
 407              		.loc 1 480 0
 408 00c8 074B     		ldr	r3, .L28+8
 409 00ca 1B68     		ldr	r3, [r3]
 410 00cc DB6A     		ldr	r3, [r3, #44]
 411 00ce 069A     		ldr	r2, [sp, #24]
 412 00d0 9A42     		cmp	r2, r3
 413 00d2 01D9     		bls	.L24
 482:FreeRTOS/Src/tasks.c **** 			}
 414              		.loc 1 482 0
 415 00d4 FFF7FEFF 		bl	vPortYieldFromISR
 416              	.LVL43:
 417              	.L24:
 488:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 418              		.loc 1 488 0
 419 00d8 2046     		mov	r0, r4
 420 00da BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 421              	.LVL44:
 422              	.L29:
 423 00de 00BF     		.align	2
 424              	.L28:
 425 00e0 03000080 		.word	-2147483645
 426 00e4 00000000 		.word	.LANCHOR8
 427 00e8 00000000 		.word	.LANCHOR9
 428 00ec 00000000 		.word	.LANCHOR10
 429 00f0 00000000 		.word	.LANCHOR11
 430 00f4 00000000 		.word	.LANCHOR12
 431 00f8 00000000 		.word	.LANCHOR13
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 46


 432 00fc 00000000 		.word	.LANCHOR0
 433              		.cfi_endproc
 434              	.LFE1:
 436              		.section	.text.vTaskDelete,"ax",%progbits
 437              		.align	2
 438              		.global	vTaskDelete
 439              		.thumb
 440              		.thumb_func
 442              	vTaskDelete:
 443              	.LFB2:
 494:FreeRTOS/Src/tasks.c **** 	tskTCB *pxTCB;
 444              		.loc 1 494 0
 445              		.cfi_startproc
 446              		@ args = 0, pretend = 0, frame = 0
 447              		@ frame_needed = 0, uses_anonymous_args = 0
 448              	.LVL45:
 449 0000 70B5     		push	{r4, r5, r6, lr}
 450              	.LCFI5:
 451              		.cfi_def_cfa_offset 16
 452              		.cfi_offset 4, -16
 453              		.cfi_offset 5, -12
 454              		.cfi_offset 6, -8
 455              		.cfi_offset 14, -4
 456 0002 0446     		mov	r4, r0
 497:FreeRTOS/Src/tasks.c **** 		{
 457              		.loc 1 497 0
 458 0004 FFF7FEFF 		bl	vPortEnterCritical
 459              	.LVL46:
 501:FreeRTOS/Src/tasks.c **** 			{
 460              		.loc 1 501 0
 461 0008 144B     		ldr	r3, .L38
 462 000a 1B68     		ldr	r3, [r3]
 463 000c A342     		cmp	r3, r4
 464 000e 00D1     		bne	.L31
 503:FreeRTOS/Src/tasks.c **** 			}
 465              		.loc 1 503 0
 466 0010 0024     		movs	r4, #0
 467              	.LVL47:
 468              	.L31:
 507:FreeRTOS/Src/tasks.c **** 
 469              		.loc 1 507 0
 470 0012 14B9     		cbnz	r4, .L36
 507:FreeRTOS/Src/tasks.c **** 
 471              		.loc 1 507 0 is_stmt 0 discriminator 1
 472 0014 114B     		ldr	r3, .L38
 473 0016 1D68     		ldr	r5, [r3]
 474              	.LVL48:
 475 0018 00E0     		b	.L32
 476              	.LVL49:
 477              	.L36:
 507:FreeRTOS/Src/tasks.c **** 
 478              		.loc 1 507 0
 479 001a 2546     		mov	r5, r4
 480              	.LVL50:
 481              	.L32:
 513:FreeRTOS/Src/tasks.c **** 
 482              		.loc 1 513 0 is_stmt 1 discriminator 4
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 47


 483 001c 2E1D     		adds	r6, r5, #4
 484 001e 3046     		mov	r0, r6
 485 0020 FFF7FEFF 		bl	vListRemove
 486              	.LVL51:
 516:FreeRTOS/Src/tasks.c **** 			{
 487              		.loc 1 516 0 discriminator 4
 488 0024 AB6A     		ldr	r3, [r5, #40]
 489 0026 1BB1     		cbz	r3, .L33
 518:FreeRTOS/Src/tasks.c **** 			}
 490              		.loc 1 518 0
 491 0028 05F11800 		add	r0, r5, #24
 492 002c FFF7FEFF 		bl	vListRemove
 493              	.LVL52:
 494              	.L33:
 521:FreeRTOS/Src/tasks.c **** 
 495              		.loc 1 521 0
 496 0030 3146     		mov	r1, r6
 497 0032 0B48     		ldr	r0, .L38+4
 498 0034 FFF7FEFF 		bl	vListInsertEnd
 499              	.LVL53:
 526:FreeRTOS/Src/tasks.c **** 
 500              		.loc 1 526 0
 501 0038 0A4A     		ldr	r2, .L38+8
 502 003a 1368     		ldr	r3, [r2]
 503 003c 0133     		adds	r3, r3, #1
 504 003e 1360     		str	r3, [r2]
 530:FreeRTOS/Src/tasks.c **** 
 505              		.loc 1 530 0
 506 0040 094A     		ldr	r2, .L38+12
 507 0042 1368     		ldr	r3, [r2]
 508 0044 0133     		adds	r3, r3, #1
 509 0046 1360     		str	r3, [r2]
 534:FreeRTOS/Src/tasks.c **** 
 510              		.loc 1 534 0
 511 0048 FFF7FEFF 		bl	vPortExitCritical
 512              	.LVL54:
 537:FreeRTOS/Src/tasks.c **** 		{
 513              		.loc 1 537 0
 514 004c 074B     		ldr	r3, .L38+16
 515 004e 1B68     		ldr	r3, [r3]
 516 0050 13B1     		cbz	r3, .L30
 539:FreeRTOS/Src/tasks.c **** 			{
 517              		.loc 1 539 0
 518 0052 0CB9     		cbnz	r4, .L30
 541:FreeRTOS/Src/tasks.c **** 			}
 519              		.loc 1 541 0
 520 0054 FFF7FEFF 		bl	vPortYieldFromISR
 521              	.LVL55:
 522              	.L30:
 523 0058 70BD     		pop	{r4, r5, r6, pc}
 524              	.LVL56:
 525              	.L39:
 526 005a 00BF     		.align	2
 527              	.L38:
 528 005c 00000000 		.word	.LANCHOR9
 529 0060 00000000 		.word	.LANCHOR4
 530 0064 00000000 		.word	.LANCHOR14
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 48


 531 0068 00000000 		.word	.LANCHOR12
 532 006c 00000000 		.word	.LANCHOR10
 533              		.cfi_endproc
 534              	.LFE2:
 536              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 537              		.align	2
 538              		.global	uxTaskPriorityGet
 539              		.thumb
 540              		.thumb_func
 542              	uxTaskPriorityGet:
 543              	.LFB5:
 698:FreeRTOS/Src/tasks.c **** 	tskTCB *pxTCB;
 544              		.loc 1 698 0
 545              		.cfi_startproc
 546              		@ args = 0, pretend = 0, frame = 0
 547              		@ frame_needed = 0, uses_anonymous_args = 0
 548              	.LVL57:
 549 0000 10B5     		push	{r4, lr}
 550              	.LCFI6:
 551              		.cfi_def_cfa_offset 8
 552              		.cfi_offset 4, -8
 553              		.cfi_offset 14, -4
 554 0002 0446     		mov	r4, r0
 702:FreeRTOS/Src/tasks.c **** 		{
 555              		.loc 1 702 0
 556 0004 FFF7FEFF 		bl	vPortEnterCritical
 557              	.LVL58:
 706:FreeRTOS/Src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 558              		.loc 1 706 0
 559 0008 0CB9     		cbnz	r4, .L41
 706:FreeRTOS/Src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 560              		.loc 1 706 0 is_stmt 0 discriminator 1
 561 000a 034B     		ldr	r3, .L43
 562 000c 1C68     		ldr	r4, [r3]
 563              	.LVL59:
 564              	.L41:
 707:FreeRTOS/Src/tasks.c **** 		}
 565              		.loc 1 707 0 is_stmt 1 discriminator 4
 566 000e E46A     		ldr	r4, [r4, #44]
 567              	.LVL60:
 709:FreeRTOS/Src/tasks.c **** 
 568              		.loc 1 709 0 discriminator 4
 569 0010 FFF7FEFF 		bl	vPortExitCritical
 570              	.LVL61:
 712:FreeRTOS/Src/tasks.c **** 
 571              		.loc 1 712 0 discriminator 4
 572 0014 2046     		mov	r0, r4
 573 0016 10BD     		pop	{r4, pc}
 574              	.LVL62:
 575              	.L44:
 576              		.align	2
 577              	.L43:
 578 0018 00000000 		.word	.LANCHOR9
 579              		.cfi_endproc
 580              	.LFE5:
 582              		.section	.text.vTaskPrioritySet,"ax",%progbits
 583              		.align	2
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 49


 584              		.global	vTaskPrioritySet
 585              		.thumb
 586              		.thumb_func
 588              	vTaskPrioritySet:
 589              	.LFB6:
 720:FreeRTOS/Src/tasks.c **** 	tskTCB *pxTCB;
 590              		.loc 1 720 0
 591              		.cfi_startproc
 592              		@ args = 0, pretend = 0, frame = 0
 593              		@ frame_needed = 0, uses_anonymous_args = 0
 594              	.LVL63:
 595 0000 70B5     		push	{r4, r5, r6, lr}
 596              	.LCFI7:
 597              		.cfi_def_cfa_offset 16
 598              		.cfi_offset 4, -16
 599              		.cfi_offset 5, -12
 600              		.cfi_offset 6, -8
 601              		.cfi_offset 14, -4
 602 0002 0546     		mov	r5, r0
 603 0004 0C46     		mov	r4, r1
 604              	.LVL64:
 725:FreeRTOS/Src/tasks.c **** 		{
 605              		.loc 1 725 0
 606 0006 0429     		cmp	r1, #4
 607 0008 00D9     		bls	.L46
 727:FreeRTOS/Src/tasks.c **** 		}
 608              		.loc 1 727 0
 609 000a 0424     		movs	r4, #4
 610              	.L46:
 611              	.LVL65:
 730:FreeRTOS/Src/tasks.c **** 		{
 612              		.loc 1 730 0
 613 000c FFF7FEFF 		bl	vPortEnterCritical
 614              	.LVL66:
 732:FreeRTOS/Src/tasks.c **** 			{
 615              		.loc 1 732 0
 616 0010 1D4B     		ldr	r3, .L60
 617 0012 1B68     		ldr	r3, [r3]
 618 0014 AB42     		cmp	r3, r5
 619 0016 00D1     		bne	.L47
 734:FreeRTOS/Src/tasks.c **** 			}
 620              		.loc 1 734 0
 621 0018 0025     		movs	r5, #0
 622              	.LVL67:
 623              	.L47:
 739:FreeRTOS/Src/tasks.c **** 
 624              		.loc 1 739 0
 625 001a 15B9     		cbnz	r5, .L56
 739:FreeRTOS/Src/tasks.c **** 
 626              		.loc 1 739 0 is_stmt 0 discriminator 1
 627 001c 1A4B     		ldr	r3, .L60
 628 001e 1E68     		ldr	r6, [r3]
 629              	.LVL68:
 630 0020 00E0     		b	.L48
 631              	.LVL69:
 632              	.L56:
 739:FreeRTOS/Src/tasks.c **** 
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 50


 633              		.loc 1 739 0
 634 0022 2E46     		mov	r6, r5
 635              	.LVL70:
 636              	.L48:
 749:FreeRTOS/Src/tasks.c **** 			}
 637              		.loc 1 749 0 is_stmt 1 discriminator 4
 638 0024 F36A     		ldr	r3, [r6, #44]
 639              	.LVL71:
 753:FreeRTOS/Src/tasks.c **** 			{
 640              		.loc 1 753 0 discriminator 4
 641 0026 9C42     		cmp	r4, r3
 642 0028 2AD0     		beq	.L49
 757:FreeRTOS/Src/tasks.c **** 				{
 643              		.loc 1 757 0
 644 002a 01D9     		bls	.L50
 759:FreeRTOS/Src/tasks.c **** 					{
 645              		.loc 1 759 0
 646 002c 1DB9     		cbnz	r5, .L57
 647 002e 05E0     		b	.L51
 648              	.L50:
 768:FreeRTOS/Src/tasks.c **** 				{
 649              		.loc 1 768 0
 650 0030 1DB1     		cbz	r5, .L58
 722:FreeRTOS/Src/tasks.c **** 
 651              		.loc 1 722 0
 652 0032 0025     		movs	r5, #0
 653 0034 02E0     		b	.L51
 654              	.L57:
 765:FreeRTOS/Src/tasks.c **** 					}
 655              		.loc 1 765 0
 656 0036 0125     		movs	r5, #1
 657 0038 00E0     		b	.L51
 658              	.L58:
 772:FreeRTOS/Src/tasks.c **** 				}
 659              		.loc 1 772 0
 660 003a 0125     		movs	r5, #1
 661              	.L51:
 662              	.LVL72:
 791:FreeRTOS/Src/tasks.c **** 				}
 663              		.loc 1 791 0
 664 003c F462     		str	r4, [r6, #44]
 795:FreeRTOS/Src/tasks.c **** 
 665              		.loc 1 795 0
 666 003e C4F10504 		rsb	r4, r4, #5
 667              	.LVL73:
 668 0042 B461     		str	r4, [r6, #24]
 801:FreeRTOS/Src/tasks.c **** 				{
 669              		.loc 1 801 0
 670 0044 7169     		ldr	r1, [r6, #20]
 671 0046 03EB8303 		add	r3, r3, r3, lsl #2
 672              	.LVL74:
 673 004a 9A00     		lsls	r2, r3, #2
 674 004c 0F4B     		ldr	r3, .L60+4
 675 004e 1A44     		add	r2, r2, r3
 676 0050 9142     		cmp	r1, r2
 677 0052 12D1     		bne	.L52
 806:FreeRTOS/Src/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 51


 678              		.loc 1 806 0
 679 0054 341D     		adds	r4, r6, #4
 680 0056 2046     		mov	r0, r4
 681 0058 FFF7FEFF 		bl	vListRemove
 682              	.LVL75:
 807:FreeRTOS/Src/tasks.c **** 				}
 683              		.loc 1 807 0
 684 005c F36A     		ldr	r3, [r6, #44]
 685 005e 0C4A     		ldr	r2, .L60+8
 686 0060 1268     		ldr	r2, [r2]
 687 0062 9342     		cmp	r3, r2
 688 0064 01D9     		bls	.L53
 807:FreeRTOS/Src/tasks.c **** 				}
 689              		.loc 1 807 0 is_stmt 0 discriminator 1
 690 0066 0A4A     		ldr	r2, .L60+8
 691 0068 1360     		str	r3, [r2]
 692              	.L53:
 807:FreeRTOS/Src/tasks.c **** 				}
 693              		.loc 1 807 0 discriminator 3
 694 006a 03EB8303 		add	r3, r3, r3, lsl #2
 695 006e 9A00     		lsls	r2, r3, #2
 696 0070 2146     		mov	r1, r4
 697 0072 0648     		ldr	r0, .L60+4
 698 0074 1044     		add	r0, r0, r2
 699 0076 FFF7FEFF 		bl	vListInsertEnd
 700              	.LVL76:
 701              	.L52:
 810:FreeRTOS/Src/tasks.c **** 				{
 702              		.loc 1 810 0 is_stmt 1
 703 007a 0DB1     		cbz	r5, .L49
 812:FreeRTOS/Src/tasks.c **** 				}
 704              		.loc 1 812 0
 705 007c FFF7FEFF 		bl	vPortYieldFromISR
 706              	.LVL77:
 707              	.L49:
 816:FreeRTOS/Src/tasks.c **** 	}
 708              		.loc 1 816 0
 709 0080 FFF7FEFF 		bl	vPortExitCritical
 710              	.LVL78:
 711 0084 70BD     		pop	{r4, r5, r6, pc}
 712              	.LVL79:
 713              	.L61:
 714 0086 00BF     		.align	2
 715              	.L60:
 716 0088 00000000 		.word	.LANCHOR9
 717 008c 00000000 		.word	.LANCHOR0
 718 0090 00000000 		.word	.LANCHOR13
 719              		.cfi_endproc
 720              	.LFE6:
 722              		.section	.text.vTaskSuspend,"ax",%progbits
 723              		.align	2
 724              		.global	vTaskSuspend
 725              		.thumb
 726              		.thumb_func
 728              	vTaskSuspend:
 729              	.LFB7:
 825:FreeRTOS/Src/tasks.c **** 	tskTCB *pxTCB;
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 52


 730              		.loc 1 825 0
 731              		.cfi_startproc
 732              		@ args = 0, pretend = 0, frame = 0
 733              		@ frame_needed = 0, uses_anonymous_args = 0
 734              	.LVL80:
 735 0000 70B5     		push	{r4, r5, r6, lr}
 736              	.LCFI8:
 737              		.cfi_def_cfa_offset 16
 738              		.cfi_offset 4, -16
 739              		.cfi_offset 5, -12
 740              		.cfi_offset 6, -8
 741              		.cfi_offset 14, -4
 742 0002 0446     		mov	r4, r0
 828:FreeRTOS/Src/tasks.c **** 		{
 743              		.loc 1 828 0
 744 0004 FFF7FEFF 		bl	vPortEnterCritical
 745              	.LVL81:
 832:FreeRTOS/Src/tasks.c **** 			{
 746              		.loc 1 832 0
 747 0008 0E4B     		ldr	r3, .L70
 748 000a 1B68     		ldr	r3, [r3]
 749 000c A342     		cmp	r3, r4
 750 000e 00D1     		bne	.L63
 834:FreeRTOS/Src/tasks.c **** 			}
 751              		.loc 1 834 0
 752 0010 0024     		movs	r4, #0
 753              	.LVL82:
 754              	.L63:
 838:FreeRTOS/Src/tasks.c **** 
 755              		.loc 1 838 0
 756 0012 14B9     		cbnz	r4, .L68
 838:FreeRTOS/Src/tasks.c **** 
 757              		.loc 1 838 0 is_stmt 0 discriminator 1
 758 0014 0B4B     		ldr	r3, .L70
 759 0016 1D68     		ldr	r5, [r3]
 760              	.LVL83:
 761 0018 00E0     		b	.L64
 762              	.LVL84:
 763              	.L68:
 838:FreeRTOS/Src/tasks.c **** 
 764              		.loc 1 838 0
 765 001a 2546     		mov	r5, r4
 766              	.LVL85:
 767              	.L64:
 843:FreeRTOS/Src/tasks.c **** 
 768              		.loc 1 843 0 is_stmt 1 discriminator 4
 769 001c 2E1D     		adds	r6, r5, #4
 770 001e 3046     		mov	r0, r6
 771 0020 FFF7FEFF 		bl	vListRemove
 772              	.LVL86:
 846:FreeRTOS/Src/tasks.c **** 			{
 773              		.loc 1 846 0 discriminator 4
 774 0024 AB6A     		ldr	r3, [r5, #40]
 775 0026 1BB1     		cbz	r3, .L65
 848:FreeRTOS/Src/tasks.c **** 			}
 776              		.loc 1 848 0
 777 0028 05F11800 		add	r0, r5, #24
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 53


 778 002c FFF7FEFF 		bl	vListRemove
 779              	.LVL87:
 780              	.L65:
 851:FreeRTOS/Src/tasks.c **** 		}
 781              		.loc 1 851 0
 782 0030 3146     		mov	r1, r6
 783 0032 0548     		ldr	r0, .L70+4
 784 0034 FFF7FEFF 		bl	vListInsertEnd
 785              	.LVL88:
 853:FreeRTOS/Src/tasks.c **** 
 786              		.loc 1 853 0
 787 0038 FFF7FEFF 		bl	vPortExitCritical
 788              	.LVL89:
 856:FreeRTOS/Src/tasks.c **** 		{
 789              		.loc 1 856 0
 790 003c 0CB9     		cbnz	r4, .L62
 858:FreeRTOS/Src/tasks.c **** 		}
 791              		.loc 1 858 0
 792 003e FFF7FEFF 		bl	vPortYieldFromISR
 793              	.LVL90:
 794              	.L62:
 795 0042 70BD     		pop	{r4, r5, r6, pc}
 796              	.LVL91:
 797              	.L71:
 798              		.align	2
 799              	.L70:
 800 0044 00000000 		.word	.LANCHOR9
 801 0048 00000000 		.word	.LANCHOR5
 802              		.cfi_endproc
 803              	.LFE7:
 805              		.section	.text.xTaskIsTaskSuspended,"ax",%progbits
 806              		.align	2
 807              		.global	xTaskIsTaskSuspended
 808              		.thumb
 809              		.thumb_func
 811              	xTaskIsTaskSuspended:
 812              	.LFB8:
 868:FreeRTOS/Src/tasks.c **** 	portBASE_TYPE xReturn = pdFALSE;
 813              		.loc 1 868 0
 814              		.cfi_startproc
 815              		@ args = 0, pretend = 0, frame = 0
 816              		@ frame_needed = 0, uses_anonymous_args = 0
 817              		@ link register save eliminated.
 818              	.LVL92:
 874:FreeRTOS/Src/tasks.c **** 		{
 819              		.loc 1 874 0
 820 0000 4269     		ldr	r2, [r0, #20]
 821 0002 084B     		ldr	r3, .L77
 822 0004 9A42     		cmp	r2, r3
 823 0006 06D1     		bne	.L74
 877:FreeRTOS/Src/tasks.c **** 			{
 824              		.loc 1 877 0
 825 0008 836A     		ldr	r3, [r0, #40]
 826 000a 074A     		ldr	r2, .L77+4
 827 000c 9342     		cmp	r3, r2
 828 000e 04D0     		beq	.L75
 883:FreeRTOS/Src/tasks.c **** 				{
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 54


 829              		.loc 1 883 0
 830 0010 2BB1     		cbz	r3, .L76
 869:FreeRTOS/Src/tasks.c **** 	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
 831              		.loc 1 869 0
 832 0012 0020     		movs	r0, #0
 833              	.LVL93:
 834 0014 7047     		bx	lr
 835              	.LVL94:
 836              	.L74:
 837 0016 0020     		movs	r0, #0
 838              	.LVL95:
 839 0018 7047     		bx	lr
 840              	.LVL96:
 841              	.L75:
 842 001a 0020     		movs	r0, #0
 843              	.LVL97:
 844 001c 7047     		bx	lr
 845              	.LVL98:
 846              	.L76:
 885:FreeRTOS/Src/tasks.c **** 				}
 847              		.loc 1 885 0
 848 001e 0120     		movs	r0, #1
 849              	.LVL99:
 891:FreeRTOS/Src/tasks.c **** 
 850              		.loc 1 891 0
 851 0020 7047     		bx	lr
 852              	.L78:
 853 0022 00BF     		.align	2
 854              	.L77:
 855 0024 00000000 		.word	.LANCHOR5
 856 0028 00000000 		.word	.LANCHOR3
 857              		.cfi_endproc
 858              	.LFE8:
 860              		.section	.text.vTaskResume,"ax",%progbits
 861              		.align	2
 862              		.global	vTaskResume
 863              		.thumb
 864              		.thumb_func
 866              	vTaskResume:
 867              	.LFB9:
 899:FreeRTOS/Src/tasks.c **** 	tskTCB *pxTCB;
 868              		.loc 1 899 0
 869              		.cfi_startproc
 870              		@ args = 0, pretend = 0, frame = 0
 871              		@ frame_needed = 0, uses_anonymous_args = 0
 872              	.LVL100:
 908:FreeRTOS/Src/tasks.c **** 		{
 873              		.loc 1 908 0
 874 0000 50B3     		cbz	r0, .L84
 899:FreeRTOS/Src/tasks.c **** 	tskTCB *pxTCB;
 875              		.loc 1 899 0 discriminator 1
 876 0002 38B5     		push	{r3, r4, r5, lr}
 877              	.LCFI9:
 878              		.cfi_def_cfa_offset 16
 879              		.cfi_offset 3, -16
 880              		.cfi_offset 4, -12
 881              		.cfi_offset 5, -8
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 55


 882              		.cfi_offset 14, -4
 908:FreeRTOS/Src/tasks.c **** 		{
 883              		.loc 1 908 0 discriminator 1
 884 0004 154A     		ldr	r2, .L85
 885 0006 1268     		ldr	r2, [r2]
 886 0008 9042     		cmp	r0, r2
 887 000a 24D0     		beq	.L79
 888 000c 0446     		mov	r4, r0
 910:FreeRTOS/Src/tasks.c **** 			{
 889              		.loc 1 910 0
 890 000e FFF7FEFF 		bl	vPortEnterCritical
 891              	.LVL101:
 912:FreeRTOS/Src/tasks.c **** 				{
 892              		.loc 1 912 0
 893 0012 2046     		mov	r0, r4
 894 0014 FFF7FEFF 		bl	xTaskIsTaskSuspended
 895              	.LVL102:
 896 0018 0128     		cmp	r0, #1
 897 001a 1AD1     		bne	.L81
 918:FreeRTOS/Src/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 898              		.loc 1 918 0
 899 001c 251D     		adds	r5, r4, #4
 900 001e 2846     		mov	r0, r5
 901 0020 FFF7FEFF 		bl	vListRemove
 902              	.LVL103:
 919:FreeRTOS/Src/tasks.c **** 
 903              		.loc 1 919 0
 904 0024 E36A     		ldr	r3, [r4, #44]
 905 0026 0E4A     		ldr	r2, .L85+4
 906 0028 1268     		ldr	r2, [r2]
 907 002a 9342     		cmp	r3, r2
 908 002c 01D9     		bls	.L82
 919:FreeRTOS/Src/tasks.c **** 
 909              		.loc 1 919 0 is_stmt 0 discriminator 1
 910 002e 0C4A     		ldr	r2, .L85+4
 911 0030 1360     		str	r3, [r2]
 912              	.L82:
 919:FreeRTOS/Src/tasks.c **** 
 913              		.loc 1 919 0 discriminator 3
 914 0032 03EB8303 		add	r3, r3, r3, lsl #2
 915 0036 9A00     		lsls	r2, r3, #2
 916 0038 2946     		mov	r1, r5
 917 003a 0A48     		ldr	r0, .L85+8
 918 003c 1044     		add	r0, r0, r2
 919 003e FFF7FEFF 		bl	vListInsertEnd
 920              	.LVL104:
 922:FreeRTOS/Src/tasks.c **** 					{
 921              		.loc 1 922 0 is_stmt 1 discriminator 3
 922 0042 E26A     		ldr	r2, [r4, #44]
 923 0044 054B     		ldr	r3, .L85
 924 0046 1B68     		ldr	r3, [r3]
 925 0048 DB6A     		ldr	r3, [r3, #44]
 926 004a 9A42     		cmp	r2, r3
 927 004c 01D3     		bcc	.L81
 926:FreeRTOS/Src/tasks.c **** 					}
 928              		.loc 1 926 0
 929 004e FFF7FEFF 		bl	vPortYieldFromISR
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 56


 930              	.LVL105:
 931              	.L81:
 930:FreeRTOS/Src/tasks.c **** 		}
 932              		.loc 1 930 0
 933 0052 FFF7FEFF 		bl	vPortExitCritical
 934              	.LVL106:
 935              	.L79:
 936 0056 38BD     		pop	{r3, r4, r5, pc}
 937              	.LVL107:
 938              	.L84:
 939              	.LCFI10:
 940              		.cfi_def_cfa_offset 0
 941              		.cfi_restore 3
 942              		.cfi_restore 4
 943              		.cfi_restore 5
 944              		.cfi_restore 14
 945 0058 7047     		bx	lr
 946              	.L86:
 947 005a 00BF     		.align	2
 948              	.L85:
 949 005c 00000000 		.word	.LANCHOR9
 950 0060 00000000 		.word	.LANCHOR13
 951 0064 00000000 		.word	.LANCHOR0
 952              		.cfi_endproc
 953              	.LFE9:
 955              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 956              		.align	2
 957              		.global	xTaskResumeFromISR
 958              		.thumb
 959              		.thumb_func
 961              	xTaskResumeFromISR:
 962              	.LFB10:
 941:FreeRTOS/Src/tasks.c **** 	portBASE_TYPE xYieldRequired = pdFALSE;
 963              		.loc 1 941 0
 964              		.cfi_startproc
 965              		@ args = 0, pretend = 0, frame = 0
 966              		@ frame_needed = 0, uses_anonymous_args = 0
 967              	.LVL108:
 968 0000 70B5     		push	{r4, r5, r6, lr}
 969              	.LCFI11:
 970              		.cfi_def_cfa_offset 16
 971              		.cfi_offset 4, -16
 972              		.cfi_offset 5, -12
 973              		.cfi_offset 6, -8
 974              		.cfi_offset 14, -4
 975 0002 0546     		mov	r5, r0
 976              	.LVL109:
 947:FreeRTOS/Src/tasks.c **** 		{
 977              		.loc 1 947 0
 978 0004 FFF7FEFF 		bl	xTaskIsTaskSuspended
 979              	.LVL110:
 980 0008 0128     		cmp	r0, #1
 981 000a 25D1     		bne	.L91
 951:FreeRTOS/Src/tasks.c **** 			{
 982              		.loc 1 951 0
 983 000c 144B     		ldr	r3, .L93
 984 000e 1B68     		ldr	r3, [r3]
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 57


 985 0010 DBB9     		cbnz	r3, .L89
 953:FreeRTOS/Src/tasks.c **** 				vListRemove(  &( pxTCB->xGenericListItem ) );
 986              		.loc 1 953 0
 987 0012 EC6A     		ldr	r4, [r5, #44]
 988 0014 134B     		ldr	r3, .L93+4
 989 0016 1B68     		ldr	r3, [r3]
 990 0018 DB6A     		ldr	r3, [r3, #44]
 991 001a 9C42     		cmp	r4, r3
 992 001c 34BF     		ite	cc
 993 001e 0024     		movcc	r4, #0
 994 0020 0124     		movcs	r4, #1
 995              	.LVL111:
 954:FreeRTOS/Src/tasks.c **** 				prvAddTaskToReadyQueue( pxTCB );
 996              		.loc 1 954 0
 997 0022 2E1D     		adds	r6, r5, #4
 998 0024 3046     		mov	r0, r6
 999 0026 FFF7FEFF 		bl	vListRemove
 1000              	.LVL112:
 955:FreeRTOS/Src/tasks.c **** 			}
 1001              		.loc 1 955 0
 1002 002a EB6A     		ldr	r3, [r5, #44]
 1003 002c 0E4A     		ldr	r2, .L93+8
 1004 002e 1268     		ldr	r2, [r2]
 1005 0030 9342     		cmp	r3, r2
 1006 0032 01D9     		bls	.L90
 955:FreeRTOS/Src/tasks.c **** 			}
 1007              		.loc 1 955 0 is_stmt 0 discriminator 1
 1008 0034 0C4A     		ldr	r2, .L93+8
 1009 0036 1360     		str	r3, [r2]
 1010              	.L90:
 955:FreeRTOS/Src/tasks.c **** 			}
 1011              		.loc 1 955 0 discriminator 3
 1012 0038 03EB8303 		add	r3, r3, r3, lsl #2
 1013 003c 9A00     		lsls	r2, r3, #2
 1014 003e 3146     		mov	r1, r6
 1015 0040 0A48     		ldr	r0, .L93+12
 1016 0042 1044     		add	r0, r0, r2
 1017 0044 FFF7FEFF 		bl	vListInsertEnd
 1018              	.LVL113:
 1019 0048 07E0     		b	.L88
 1020              	.LVL114:
 1021              	.L89:
 962:FreeRTOS/Src/tasks.c **** 			}
 1022              		.loc 1 962 0 is_stmt 1
 1023 004a 05F11801 		add	r1, r5, #24
 1024 004e 0848     		ldr	r0, .L93+16
 1025 0050 FFF7FEFF 		bl	vListInsertEnd
 1026              	.LVL115:
 942:FreeRTOS/Src/tasks.c **** 	tskTCB *pxTCB;
 1027              		.loc 1 942 0
 1028 0054 0024     		movs	r4, #0
 1029 0056 00E0     		b	.L88
 1030              	.L91:
 1031 0058 0024     		movs	r4, #0
 1032              	.LVL116:
 1033              	.L88:
 967:FreeRTOS/Src/tasks.c **** 
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 58


 1034              		.loc 1 967 0
 1035 005a 2046     		mov	r0, r4
 1036 005c 70BD     		pop	{r4, r5, r6, pc}
 1037              	.LVL117:
 1038              	.L94:
 1039 005e 00BF     		.align	2
 1040              	.L93:
 1041 0060 00000000 		.word	.LANCHOR15
 1042 0064 00000000 		.word	.LANCHOR9
 1043 0068 00000000 		.word	.LANCHOR13
 1044 006c 00000000 		.word	.LANCHOR0
 1045 0070 00000000 		.word	.LANCHOR3
 1046              		.cfi_endproc
 1047              	.LFE10:
 1049              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1050              		.align	2
 1051              		.global	vTaskStartScheduler
 1052              		.thumb
 1053              		.thumb_func
 1055              	vTaskStartScheduler:
 1056              	.LFB11:
 980:FreeRTOS/Src/tasks.c **** portBASE_TYPE xReturn;
 1057              		.loc 1 980 0
 1058              		.cfi_startproc
 1059              		@ args = 0, pretend = 0, frame = 0
 1060              		@ frame_needed = 0, uses_anonymous_args = 0
 1061 0000 00B5     		push	{lr}
 1062              	.LCFI12:
 1063              		.cfi_def_cfa_offset 4
 1064              		.cfi_offset 14, -4
 1065 0002 83B0     		sub	sp, sp, #12
 1066              	.LCFI13:
 1067              		.cfi_def_cfa_offset 16
 984:FreeRTOS/Src/tasks.c **** 
 1068              		.loc 1 984 0
 1069 0004 0023     		movs	r3, #0
 1070 0006 0193     		str	r3, [sp, #4]
 1071 0008 0093     		str	r3, [sp]
 1072 000a 8022     		movs	r2, #128
 1073 000c 0A49     		ldr	r1, .L98
 1074 000e 0B48     		ldr	r0, .L98+4
 1075 0010 FFF7FEFF 		bl	xTaskCreate
 1076              	.LVL118:
 986:FreeRTOS/Src/tasks.c **** 	{
 1077              		.loc 1 986 0
 1078 0014 0128     		cmp	r0, #1
 1079 0016 0BD1     		bne	.L95
 996:FreeRTOS/Src/tasks.c **** 
 1080              		.loc 1 996 0
 1081              		.syntax unified
 1082              	@ 996 "FreeRTOS/Src/tasks.c" 1
 1083 0018 4FF0BF00 			mov r0, #191								
 1084 001c 80F31188 		msr basepri, r0							
 1085              	
 1086              	@ 0 "" 2
 1087              	.LVL119:
 998:FreeRTOS/Src/tasks.c **** 		xTickCount = ( portTickType ) 0;
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 59


 1088              		.loc 1 998 0
 1089              		.thumb
 1090              		.syntax unified
 1091 0020 0122     		movs	r2, #1
 1092 0022 074B     		ldr	r3, .L98+8
 1093 0024 1A60     		str	r2, [r3]
 999:FreeRTOS/Src/tasks.c **** 
 1094              		.loc 1 999 0
 1095 0026 0022     		movs	r2, #0
 1096 0028 064B     		ldr	r3, .L98+12
 1097 002a 1A60     		str	r2, [r3]
1008:FreeRTOS/Src/tasks.c **** 		{
 1098              		.loc 1 1008 0
 1099 002c FFF7FEFF 		bl	xPortStartScheduler
 1100              	.LVL120:
 1101              	.L95:
1018:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 1102              		.loc 1 1018 0
 1103 0030 03B0     		add	sp, sp, #12
 1104              	.LCFI14:
 1105              		.cfi_def_cfa_offset 4
 1106              		@ sp needed
 1107 0032 5DF804FB 		ldr	pc, [sp], #4
 1108              	.L99:
 1109 0036 00BF     		.align	2
 1110              	.L98:
 1111 0038 00000000 		.word	.LC0
 1112 003c 00000000 		.word	prvIdleTask
 1113 0040 00000000 		.word	.LANCHOR10
 1114 0044 00000000 		.word	.LANCHOR16
 1115              		.cfi_endproc
 1116              	.LFE11:
 1118              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1119              		.align	2
 1120              		.global	vTaskEndScheduler
 1121              		.thumb
 1122              		.thumb_func
 1124              	vTaskEndScheduler:
 1125              	.LFB12:
1022:FreeRTOS/Src/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1126              		.loc 1 1022 0
 1127              		.cfi_startproc
 1128              		@ args = 0, pretend = 0, frame = 0
 1129              		@ frame_needed = 0, uses_anonymous_args = 0
 1130 0000 08B5     		push	{r3, lr}
 1131              	.LCFI15:
 1132              		.cfi_def_cfa_offset 8
 1133              		.cfi_offset 3, -8
 1134              		.cfi_offset 14, -4
1026:FreeRTOS/Src/tasks.c **** 	xSchedulerRunning = pdFALSE;
 1135              		.loc 1 1026 0
 1136              		.syntax unified
 1137              	@ 1026 "FreeRTOS/Src/tasks.c" 1
 1138 0002 4FF0BF00 			mov r0, #191								
 1139 0006 80F31188 		msr basepri, r0							
 1140              	
 1141              	@ 0 "" 2
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 60


1027:FreeRTOS/Src/tasks.c **** 	vPortEndScheduler();
 1142              		.loc 1 1027 0
 1143              		.thumb
 1144              		.syntax unified
 1145 000a 0022     		movs	r2, #0
 1146 000c 024B     		ldr	r3, .L102
 1147 000e 1A60     		str	r2, [r3]
1028:FreeRTOS/Src/tasks.c **** }
 1148              		.loc 1 1028 0
 1149 0010 FFF7FEFF 		bl	vPortEndScheduler
 1150              	.LVL121:
 1151 0014 08BD     		pop	{r3, pc}
 1152              	.L103:
 1153 0016 00BF     		.align	2
 1154              	.L102:
 1155 0018 00000000 		.word	.LANCHOR10
 1156              		.cfi_endproc
 1157              	.LFE12:
 1159              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1160              		.align	2
 1161              		.global	vTaskSuspendAll
 1162              		.thumb
 1163              		.thumb_func
 1165              	vTaskSuspendAll:
 1166              	.LFB13:
1033:FreeRTOS/Src/tasks.c **** 	/* A critical section is not required as the variable is of type
 1167              		.loc 1 1033 0
 1168              		.cfi_startproc
 1169              		@ args = 0, pretend = 0, frame = 0
 1170              		@ frame_needed = 0, uses_anonymous_args = 0
 1171              		@ link register save eliminated.
1036:FreeRTOS/Src/tasks.c **** }
 1172              		.loc 1 1036 0
 1173 0000 024A     		ldr	r2, .L105
 1174 0002 1368     		ldr	r3, [r2]
 1175 0004 0133     		adds	r3, r3, #1
 1176 0006 1360     		str	r3, [r2]
 1177 0008 7047     		bx	lr
 1178              	.L106:
 1179 000a 00BF     		.align	2
 1180              	.L105:
 1181 000c 00000000 		.word	.LANCHOR15
 1182              		.cfi_endproc
 1183              	.LFE13:
 1185              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1186              		.align	2
 1187              		.global	xTaskGetTickCount
 1188              		.thumb
 1189              		.thumb_func
 1191              	xTaskGetTickCount:
 1192              	.LFB15:
1123:FreeRTOS/Src/tasks.c **** portTickType xTicks;
 1193              		.loc 1 1123 0
 1194              		.cfi_startproc
 1195              		@ args = 0, pretend = 0, frame = 0
 1196              		@ frame_needed = 0, uses_anonymous_args = 0
 1197 0000 10B5     		push	{r4, lr}
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 61


 1198              	.LCFI16:
 1199              		.cfi_def_cfa_offset 8
 1200              		.cfi_offset 4, -8
 1201              		.cfi_offset 14, -4
1127:FreeRTOS/Src/tasks.c **** 	{
 1202              		.loc 1 1127 0
 1203 0002 FFF7FEFF 		bl	vPortEnterCritical
 1204              	.LVL122:
1129:FreeRTOS/Src/tasks.c **** 	}
 1205              		.loc 1 1129 0
 1206 0006 034B     		ldr	r3, .L109
 1207 0008 1C68     		ldr	r4, [r3]
 1208              	.LVL123:
1131:FreeRTOS/Src/tasks.c **** 
 1209              		.loc 1 1131 0
 1210 000a FFF7FEFF 		bl	vPortExitCritical
 1211              	.LVL124:
1134:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 1212              		.loc 1 1134 0
 1213 000e 2046     		mov	r0, r4
 1214 0010 10BD     		pop	{r4, pc}
 1215              	.LVL125:
 1216              	.L110:
 1217 0012 00BF     		.align	2
 1218              	.L109:
 1219 0014 00000000 		.word	.LANCHOR16
 1220              		.cfi_endproc
 1221              	.LFE15:
 1223              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 1224              		.align	2
 1225              		.global	uxTaskGetNumberOfTasks
 1226              		.thumb
 1227              		.thumb_func
 1229              	uxTaskGetNumberOfTasks:
 1230              	.LFB16:
1138:FreeRTOS/Src/tasks.c **** 	/* A critical section is not required because the variables are of type
 1231              		.loc 1 1138 0
 1232              		.cfi_startproc
 1233              		@ args = 0, pretend = 0, frame = 0
 1234              		@ frame_needed = 0, uses_anonymous_args = 0
 1235              		@ link register save eliminated.
1141:FreeRTOS/Src/tasks.c **** }
 1236              		.loc 1 1141 0
 1237 0000 014B     		ldr	r3, .L112
 1238 0002 1868     		ldr	r0, [r3]
1142:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 1239              		.loc 1 1142 0
 1240 0004 7047     		bx	lr
 1241              	.L113:
 1242 0006 00BF     		.align	2
 1243              	.L112:
 1244 0008 00000000 		.word	.LANCHOR8
 1245              		.cfi_endproc
 1246              	.LFE16:
 1248              		.section	.text.vTaskIncrementTick,"ax",%progbits
 1249              		.align	2
 1250              		.global	vTaskIncrementTick
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 62


 1251              		.thumb
 1252              		.thumb_func
 1254              	vTaskIncrementTick:
 1255              	.LFB17:
1316:FreeRTOS/Src/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
 1256              		.loc 1 1316 0
 1257              		.cfi_startproc
 1258              		@ args = 0, pretend = 0, frame = 0
 1259              		@ frame_needed = 0, uses_anonymous_args = 0
 1260 0000 38B5     		push	{r3, r4, r5, lr}
 1261              	.LCFI17:
 1262              		.cfi_def_cfa_offset 16
 1263              		.cfi_offset 3, -16
 1264              		.cfi_offset 4, -12
 1265              		.cfi_offset 5, -8
 1266              		.cfi_offset 14, -4
1320:FreeRTOS/Src/tasks.c **** 	{
 1267              		.loc 1 1320 0
 1268 0002 224B     		ldr	r3, .L125
 1269 0004 1B68     		ldr	r3, [r3]
 1270 0006 002B     		cmp	r3, #0
 1271 0008 3BD1     		bne	.L115
1322:FreeRTOS/Src/tasks.c **** 		if( xTickCount == ( portTickType ) 0 )
 1272              		.loc 1 1322 0
 1273 000a 214B     		ldr	r3, .L125+4
 1274 000c 1A68     		ldr	r2, [r3]
 1275 000e 0132     		adds	r2, r2, #1
 1276 0010 1A60     		str	r2, [r3]
1323:FreeRTOS/Src/tasks.c **** 		{
 1277              		.loc 1 1323 0
 1278 0012 1B68     		ldr	r3, [r3]
 1279 0014 43BB     		cbnz	r3, .L117
 1280              	.LBB3:
1330:FreeRTOS/Src/tasks.c **** 			pxDelayedTaskList = pxOverflowDelayedTaskList;
 1281              		.loc 1 1330 0
 1282 0016 1F4A     		ldr	r2, .L125+8
 1283 0018 1168     		ldr	r1, [r2]
 1284              	.LVL126:
1331:FreeRTOS/Src/tasks.c **** 			pxOverflowDelayedTaskList = pxTemp;
 1285              		.loc 1 1331 0
 1286 001a 1F4B     		ldr	r3, .L125+12
 1287 001c 1868     		ldr	r0, [r3]
 1288 001e 1060     		str	r0, [r2]
1332:FreeRTOS/Src/tasks.c ****             xNumOfOverflows++;
 1289              		.loc 1 1332 0
 1290 0020 1960     		str	r1, [r3]
1333:FreeRTOS/Src/tasks.c **** 		}
 1291              		.loc 1 1333 0
 1292 0022 1E4A     		ldr	r2, .L125+16
 1293 0024 1368     		ldr	r3, [r2]
 1294 0026 0133     		adds	r3, r3, #1
 1295 0028 1360     		str	r3, [r2]
 1296 002a 1DE0     		b	.L117
 1297              	.LVL127:
 1298              	.L122:
 1299              	.LBE3:
 1300              	.LBB4:
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 63


1337:FreeRTOS/Src/tasks.c **** 	}
 1301              		.loc 1 1337 0 discriminator 13
 1302 002c 6268     		ldr	r2, [r4, #4]
 1303 002e 184B     		ldr	r3, .L125+4
 1304 0030 1B68     		ldr	r3, [r3]
 1305 0032 9A42     		cmp	r2, r3
 1306 0034 29D8     		bhi	.L114
1337:FreeRTOS/Src/tasks.c **** 	}
 1307              		.loc 1 1337 0 is_stmt 0 discriminator 1
 1308 0036 251D     		adds	r5, r4, #4
 1309 0038 2846     		mov	r0, r5
 1310 003a FFF7FEFF 		bl	vListRemove
 1311              	.LVL128:
 1312 003e A36A     		ldr	r3, [r4, #40]
 1313 0040 1BB1     		cbz	r3, .L119
1337:FreeRTOS/Src/tasks.c **** 	}
 1314              		.loc 1 1337 0 discriminator 2
 1315 0042 04F11800 		add	r0, r4, #24
 1316 0046 FFF7FEFF 		bl	vListRemove
 1317              	.LVL129:
 1318              	.L119:
1337:FreeRTOS/Src/tasks.c **** 	}
 1319              		.loc 1 1337 0 discriminator 4
 1320 004a E36A     		ldr	r3, [r4, #44]
 1321 004c 144A     		ldr	r2, .L125+20
 1322 004e 1268     		ldr	r2, [r2]
 1323 0050 9342     		cmp	r3, r2
 1324 0052 01D9     		bls	.L120
1337:FreeRTOS/Src/tasks.c **** 	}
 1325              		.loc 1 1337 0 discriminator 5
 1326 0054 124A     		ldr	r2, .L125+20
 1327 0056 1360     		str	r3, [r2]
 1328              	.L120:
1337:FreeRTOS/Src/tasks.c **** 	}
 1329              		.loc 1 1337 0 discriminator 7
 1330 0058 03EB8303 		add	r3, r3, r3, lsl #2
 1331 005c 9A00     		lsls	r2, r3, #2
 1332 005e 2946     		mov	r1, r5
 1333 0060 1048     		ldr	r0, .L125+24
 1334 0062 1044     		add	r0, r0, r2
 1335 0064 FFF7FEFF 		bl	vListInsertEnd
 1336              	.LVL130:
 1337              	.L117:
1337:FreeRTOS/Src/tasks.c **** 	}
 1338              		.loc 1 1337 0 discriminator 8
 1339 0068 0A4B     		ldr	r3, .L125+8
 1340 006a 1B68     		ldr	r3, [r3]
 1341 006c 1B68     		ldr	r3, [r3]
 1342 006e 23B1     		cbz	r3, .L123
1337:FreeRTOS/Src/tasks.c **** 	}
 1343              		.loc 1 1337 0 discriminator 9
 1344 0070 084B     		ldr	r3, .L125+8
 1345 0072 1B68     		ldr	r3, [r3]
 1346 0074 DB68     		ldr	r3, [r3, #12]
 1347 0076 DC68     		ldr	r4, [r3, #12]
 1348 0078 00E0     		b	.L121
 1349              	.L123:
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 64


1337:FreeRTOS/Src/tasks.c **** 	}
 1350              		.loc 1 1337 0
 1351 007a 0024     		movs	r4, #0
 1352              	.L121:
 1353              	.LVL131:
1337:FreeRTOS/Src/tasks.c **** 	}
 1354              		.loc 1 1337 0 discriminator 12
 1355 007c 002C     		cmp	r4, #0
 1356 007e D5D1     		bne	.L122
 1357 0080 38BD     		pop	{r3, r4, r5, pc}
 1358              	.LVL132:
 1359              	.L115:
 1360              	.LBE4:
1341:FreeRTOS/Src/tasks.c **** 
 1361              		.loc 1 1341 0 is_stmt 1
 1362 0082 094A     		ldr	r2, .L125+28
 1363 0084 1368     		ldr	r3, [r2]
 1364 0086 0133     		adds	r3, r3, #1
 1365 0088 1360     		str	r3, [r2]
 1366              	.L114:
 1367 008a 38BD     		pop	{r3, r4, r5, pc}
 1368              	.L126:
 1369              		.align	2
 1370              	.L125:
 1371 008c 00000000 		.word	.LANCHOR15
 1372 0090 00000000 		.word	.LANCHOR16
 1373 0094 00000000 		.word	.LANCHOR6
 1374 0098 00000000 		.word	.LANCHOR7
 1375 009c 00000000 		.word	.LANCHOR17
 1376 00a0 00000000 		.word	.LANCHOR13
 1377 00a4 00000000 		.word	.LANCHOR0
 1378 00a8 00000000 		.word	.LANCHOR18
 1379              		.cfi_endproc
 1380              	.LFE17:
 1382              		.section	.text.xTaskResumeAll,"ax",%progbits
 1383              		.align	2
 1384              		.global	xTaskResumeAll
 1385              		.thumb
 1386              		.thumb_func
 1388              	xTaskResumeAll:
 1389              	.LFB14:
1041:FreeRTOS/Src/tasks.c **** register tskTCB *pxTCB;
 1390              		.loc 1 1041 0
 1391              		.cfi_startproc
 1392              		@ args = 0, pretend = 0, frame = 0
 1393              		@ frame_needed = 0, uses_anonymous_args = 0
 1394 0000 70B5     		push	{r4, r5, r6, lr}
 1395              	.LCFI18:
 1396              		.cfi_def_cfa_offset 16
 1397              		.cfi_offset 4, -16
 1398              		.cfi_offset 5, -12
 1399              		.cfi_offset 6, -8
 1400              		.cfi_offset 14, -4
 1401              	.LVL133:
1050:FreeRTOS/Src/tasks.c **** 	{
 1402              		.loc 1 1050 0
 1403 0002 FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 65


 1404              	.LVL134:
1052:FreeRTOS/Src/tasks.c **** 
 1405              		.loc 1 1052 0
 1406 0006 2C4B     		ldr	r3, .L144
 1407 0008 1A68     		ldr	r2, [r3]
 1408 000a 013A     		subs	r2, r2, #1
 1409 000c 1A60     		str	r2, [r3]
1054:FreeRTOS/Src/tasks.c **** 		{
 1410              		.loc 1 1054 0
 1411 000e 1B68     		ldr	r3, [r3]
 1412 0010 002B     		cmp	r3, #0
 1413 0012 49D1     		bne	.L138
1056:FreeRTOS/Src/tasks.c **** 			{
 1414              		.loc 1 1056 0
 1415 0014 294B     		ldr	r3, .L144+4
 1416 0016 1B68     		ldr	r3, [r3]
 1417 0018 03BB     		cbnz	r3, .L139
1043:FreeRTOS/Src/tasks.c **** 
 1418              		.loc 1 1043 0
 1419 001a 0024     		movs	r4, #0
 1420 001c 47E0     		b	.L128
 1421              	.LVL135:
 1422              	.L133:
 1423              	.LBB5:
1064:FreeRTOS/Src/tasks.c **** 					vListRemove( &( pxTCB->xGenericListItem ) );
 1424              		.loc 1 1064 0
 1425 001e 04F11800 		add	r0, r4, #24
 1426 0022 FFF7FEFF 		bl	vListRemove
 1427              	.LVL136:
1065:FreeRTOS/Src/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 1428              		.loc 1 1065 0
 1429 0026 251D     		adds	r5, r4, #4
 1430 0028 2846     		mov	r0, r5
 1431 002a FFF7FEFF 		bl	vListRemove
 1432              	.LVL137:
1066:FreeRTOS/Src/tasks.c **** 
 1433              		.loc 1 1066 0
 1434 002e E36A     		ldr	r3, [r4, #44]
 1435 0030 234A     		ldr	r2, .L144+8
 1436 0032 1268     		ldr	r2, [r2]
 1437 0034 9342     		cmp	r3, r2
 1438 0036 01D9     		bls	.L130
1066:FreeRTOS/Src/tasks.c **** 
 1439              		.loc 1 1066 0 is_stmt 0 discriminator 1
 1440 0038 214A     		ldr	r2, .L144+8
 1441 003a 1360     		str	r3, [r2]
 1442              	.L130:
1066:FreeRTOS/Src/tasks.c **** 
 1443              		.loc 1 1066 0 discriminator 3
 1444 003c 03EB8303 		add	r3, r3, r3, lsl #2
 1445 0040 9A00     		lsls	r2, r3, #2
 1446 0042 2946     		mov	r1, r5
 1447 0044 1F48     		ldr	r0, .L144+12
 1448 0046 1044     		add	r0, r0, r2
 1449 0048 FFF7FEFF 		bl	vListInsertEnd
 1450              	.LVL138:
1070:FreeRTOS/Src/tasks.c **** 					{
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 66


 1451              		.loc 1 1070 0 is_stmt 1 discriminator 3
 1452 004c E26A     		ldr	r2, [r4, #44]
 1453 004e 1E4B     		ldr	r3, .L144+16
 1454 0050 1B68     		ldr	r3, [r3]
 1455 0052 DB6A     		ldr	r3, [r3, #44]
 1456 0054 9A42     		cmp	r2, r3
 1457 0056 02D3     		bcc	.L129
1072:FreeRTOS/Src/tasks.c **** 					}
 1458              		.loc 1 1072 0
 1459 0058 0126     		movs	r6, #1
 1460              	.LVL139:
 1461 005a 00E0     		b	.L129
 1462              	.LVL140:
 1463              	.L139:
 1464              	.LBE5:
 1465 005c 0026     		movs	r6, #0
 1466              	.L129:
 1467              	.LVL141:
 1468              	.LBB6:
1062:FreeRTOS/Src/tasks.c **** 				{
 1469              		.loc 1 1062 0
 1470 005e 1B4B     		ldr	r3, .L144+20
 1471 0060 1B68     		ldr	r3, [r3]
 1472 0062 1BB1     		cbz	r3, .L141
1062:FreeRTOS/Src/tasks.c **** 				{
 1473              		.loc 1 1062 0 is_stmt 0 discriminator 1
 1474 0064 194B     		ldr	r3, .L144+20
 1475 0066 DB68     		ldr	r3, [r3, #12]
 1476 0068 DC68     		ldr	r4, [r3, #12]
 1477 006a 00E0     		b	.L132
 1478              	.L141:
1062:FreeRTOS/Src/tasks.c **** 				{
 1479              		.loc 1 1062 0
 1480 006c 0024     		movs	r4, #0
 1481              	.L132:
 1482              	.LVL142:
1062:FreeRTOS/Src/tasks.c **** 				{
 1483              		.loc 1 1062 0 discriminator 4
 1484 006e 002C     		cmp	r4, #0
 1485 0070 D5D1     		bne	.L133
1079:FreeRTOS/Src/tasks.c **** 				{
 1486              		.loc 1 1079 0 is_stmt 1
 1487 0072 174B     		ldr	r3, .L144+24
 1488 0074 1B68     		ldr	r3, [r3]
 1489 0076 33B9     		cbnz	r3, .L134
 1490 0078 0AE0     		b	.L135
 1491              	.L136:
1083:FreeRTOS/Src/tasks.c **** 						--uxMissedTicks;
 1492              		.loc 1 1083 0
 1493 007a FFF7FEFF 		bl	vTaskIncrementTick
 1494              	.LVL143:
1084:FreeRTOS/Src/tasks.c **** 					}
 1495              		.loc 1 1084 0
 1496 007e 144A     		ldr	r2, .L144+24
 1497 0080 1368     		ldr	r3, [r2]
 1498 0082 013B     		subs	r3, r3, #1
 1499 0084 1360     		str	r3, [r2]
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 67


 1500              	.L134:
1081:FreeRTOS/Src/tasks.c **** 					{
 1501              		.loc 1 1081 0
 1502 0086 124B     		ldr	r3, .L144+24
 1503 0088 1B68     		ldr	r3, [r3]
 1504 008a 002B     		cmp	r3, #0
 1505 008c F5D1     		bne	.L136
1092:FreeRTOS/Src/tasks.c **** 					}
 1506              		.loc 1 1092 0
 1507 008e 0126     		movs	r6, #1
 1508              	.LVL144:
 1509              	.L135:
1097:FreeRTOS/Src/tasks.c **** 				{
 1510              		.loc 1 1097 0
 1511 0090 1EB9     		cbnz	r6, .L137
1097:FreeRTOS/Src/tasks.c **** 				{
 1512              		.loc 1 1097 0 is_stmt 0 discriminator 1
 1513 0092 104B     		ldr	r3, .L144+28
 1514 0094 1B68     		ldr	r3, [r3]
 1515 0096 012B     		cmp	r3, #1
 1516 0098 08D1     		bne	.L142
 1517              	.L137:
 1518              	.LVL145:
1100:FreeRTOS/Src/tasks.c **** 					taskYIELD();
 1519              		.loc 1 1100 0 is_stmt 1
 1520 009a 0022     		movs	r2, #0
 1521 009c 0D4B     		ldr	r3, .L144+28
 1522 009e 1A60     		str	r2, [r3]
1101:FreeRTOS/Src/tasks.c **** 				}
 1523              		.loc 1 1101 0
 1524 00a0 FFF7FEFF 		bl	vPortYieldFromISR
 1525              	.LVL146:
1099:FreeRTOS/Src/tasks.c **** 					xMissedYield = pdFALSE;
 1526              		.loc 1 1099 0
 1527 00a4 0124     		movs	r4, #1
 1528              	.LVL147:
 1529 00a6 02E0     		b	.L128
 1530              	.LVL148:
 1531              	.L138:
 1532              	.LBE6:
1043:FreeRTOS/Src/tasks.c **** 
 1533              		.loc 1 1043 0
 1534 00a8 0024     		movs	r4, #0
 1535 00aa 00E0     		b	.L128
 1536              	.LVL149:
 1537              	.L142:
 1538 00ac 0024     		movs	r4, #0
 1539              	.LVL150:
 1540              	.L128:
1106:FreeRTOS/Src/tasks.c **** 
 1541              		.loc 1 1106 0
 1542 00ae FFF7FEFF 		bl	vPortExitCritical
 1543              	.LVL151:
1109:FreeRTOS/Src/tasks.c **** 
 1544              		.loc 1 1109 0
 1545 00b2 2046     		mov	r0, r4
 1546 00b4 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 68


 1547              	.LVL152:
 1548              	.L145:
 1549 00b6 00BF     		.align	2
 1550              	.L144:
 1551 00b8 00000000 		.word	.LANCHOR15
 1552 00bc 00000000 		.word	.LANCHOR8
 1553 00c0 00000000 		.word	.LANCHOR13
 1554 00c4 00000000 		.word	.LANCHOR0
 1555 00c8 00000000 		.word	.LANCHOR9
 1556 00cc 00000000 		.word	.LANCHOR3
 1557 00d0 00000000 		.word	.LANCHOR18
 1558 00d4 00000000 		.word	.LANCHOR19
 1559              		.cfi_endproc
 1560              	.LFE14:
 1562              		.section	.text.vTaskDelayUntil,"ax",%progbits
 1563              		.align	2
 1564              		.global	vTaskDelayUntil
 1565              		.thumb
 1566              		.thumb_func
 1568              	vTaskDelayUntil:
 1569              	.LFB3:
 560:FreeRTOS/Src/tasks.c **** 	portTickType xTimeToWake;
 1570              		.loc 1 560 0
 1571              		.cfi_startproc
 1572              		@ args = 0, pretend = 0, frame = 0
 1573              		@ frame_needed = 0, uses_anonymous_args = 0
 1574              	.LVL153:
 1575 0000 38B5     		push	{r3, r4, r5, lr}
 1576              	.LCFI19:
 1577              		.cfi_def_cfa_offset 16
 1578              		.cfi_offset 3, -16
 1579              		.cfi_offset 4, -12
 1580              		.cfi_offset 5, -8
 1581              		.cfi_offset 14, -4
 1582 0002 0546     		mov	r5, r0
 1583 0004 0C46     		mov	r4, r1
 1584              	.LVL154:
 564:FreeRTOS/Src/tasks.c **** 		{
 1585              		.loc 1 564 0
 1586 0006 FFF7FEFF 		bl	vTaskSuspendAll
 1587              	.LVL155:
 567:FreeRTOS/Src/tasks.c **** 
 1588              		.loc 1 567 0
 1589 000a 2B68     		ldr	r3, [r5]
 1590 000c 1C44     		add	r4, r4, r3
 1591              	.LVL156:
 569:FreeRTOS/Src/tasks.c **** 			{
 1592              		.loc 1 569 0
 1593 000e 1E4A     		ldr	r2, .L157
 1594 0010 1268     		ldr	r2, [r2]
 1595 0012 9342     		cmp	r3, r2
 1596 0014 07D9     		bls	.L147
 576:FreeRTOS/Src/tasks.c **** 				{
 1597              		.loc 1 576 0
 1598 0016 A342     		cmp	r3, r4
 1599 0018 0DD9     		bls	.L152
 576:FreeRTOS/Src/tasks.c **** 				{
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 69


 1600              		.loc 1 576 0 is_stmt 0 discriminator 1
 1601 001a 1B4B     		ldr	r3, .L157
 1602 001c 1B68     		ldr	r3, [r3]
 1603 001e 9C42     		cmp	r4, r3
 1604 0020 0BD8     		bhi	.L153
 562:FreeRTOS/Src/tasks.c **** 
 1605              		.loc 1 562 0 is_stmt 1
 1606 0022 0023     		movs	r3, #0
 1607 0024 0EE0     		b	.L148
 1608              	.L147:
 586:FreeRTOS/Src/tasks.c **** 				{
 1609              		.loc 1 586 0
 1610 0026 A342     		cmp	r3, r4
 1611 0028 09D8     		bhi	.L154
 586:FreeRTOS/Src/tasks.c **** 				{
 1612              		.loc 1 586 0 is_stmt 0 discriminator 1
 1613 002a 174B     		ldr	r3, .L157
 1614 002c 1B68     		ldr	r3, [r3]
 1615 002e 9C42     		cmp	r4, r3
 1616 0030 07D8     		bhi	.L155
 562:FreeRTOS/Src/tasks.c **** 
 1617              		.loc 1 562 0 is_stmt 1
 1618 0032 0023     		movs	r3, #0
 1619 0034 06E0     		b	.L148
 1620              	.L152:
 1621 0036 0023     		movs	r3, #0
 1622 0038 04E0     		b	.L148
 1623              	.L153:
 578:FreeRTOS/Src/tasks.c **** 				}
 1624              		.loc 1 578 0
 1625 003a 0123     		movs	r3, #1
 1626 003c 02E0     		b	.L148
 1627              	.L154:
 588:FreeRTOS/Src/tasks.c **** 				}
 1628              		.loc 1 588 0
 1629 003e 0123     		movs	r3, #1
 1630 0040 00E0     		b	.L148
 1631              	.L155:
 1632 0042 0123     		movs	r3, #1
 1633              	.L148:
 1634              	.LVL157:
 593:FreeRTOS/Src/tasks.c **** 
 1635              		.loc 1 593 0
 1636 0044 2C60     		str	r4, [r5]
 595:FreeRTOS/Src/tasks.c **** 			{
 1637              		.loc 1 595 0
 1638 0046 C3B1     		cbz	r3, .L149
 602:FreeRTOS/Src/tasks.c **** 
 1639              		.loc 1 602 0
 1640 0048 104D     		ldr	r5, .L157+4
 1641              	.LVL158:
 1642 004a 2868     		ldr	r0, [r5]
 1643 004c 0430     		adds	r0, r0, #4
 1644 004e FFF7FEFF 		bl	vListRemove
 1645              	.LVL159:
 605:FreeRTOS/Src/tasks.c **** 
 1646              		.loc 1 605 0
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 70


 1647 0052 2B68     		ldr	r3, [r5]
 1648 0054 5C60     		str	r4, [r3, #4]
 607:FreeRTOS/Src/tasks.c **** 				{
 1649              		.loc 1 607 0
 1650 0056 0C4B     		ldr	r3, .L157
 1651 0058 1B68     		ldr	r3, [r3]
 1652 005a 9C42     		cmp	r4, r3
 1653 005c 06D2     		bcs	.L150
 611:FreeRTOS/Src/tasks.c **** 				}
 1654              		.loc 1 611 0
 1655 005e 0C4B     		ldr	r3, .L157+8
 1656 0060 1868     		ldr	r0, [r3]
 1657 0062 2968     		ldr	r1, [r5]
 1658 0064 0431     		adds	r1, r1, #4
 1659 0066 FFF7FEFF 		bl	vListInsert
 1660              	.LVL160:
 1661 006a 06E0     		b	.L149
 1662              	.L150:
 617:FreeRTOS/Src/tasks.c **** 				}
 1663              		.loc 1 617 0
 1664 006c 094B     		ldr	r3, .L157+12
 1665 006e 1868     		ldr	r0, [r3]
 1666 0070 064B     		ldr	r3, .L157+4
 1667 0072 1968     		ldr	r1, [r3]
 1668 0074 0431     		adds	r1, r1, #4
 1669 0076 FFF7FEFF 		bl	vListInsert
 1670              	.LVL161:
 1671              	.L149:
 621:FreeRTOS/Src/tasks.c **** 
 1672              		.loc 1 621 0
 1673 007a FFF7FEFF 		bl	xTaskResumeAll
 1674              	.LVL162:
 625:FreeRTOS/Src/tasks.c **** 		{
 1675              		.loc 1 625 0
 1676 007e 08B9     		cbnz	r0, .L146
 627:FreeRTOS/Src/tasks.c **** 		}
 1677              		.loc 1 627 0
 1678 0080 FFF7FEFF 		bl	vPortYieldFromISR
 1679              	.LVL163:
 1680              	.L146:
 1681 0084 38BD     		pop	{r3, r4, r5, pc}
 1682              	.LVL164:
 1683              	.L158:
 1684 0086 00BF     		.align	2
 1685              	.L157:
 1686 0088 00000000 		.word	.LANCHOR16
 1687 008c 00000000 		.word	.LANCHOR9
 1688 0090 00000000 		.word	.LANCHOR7
 1689 0094 00000000 		.word	.LANCHOR6
 1690              		.cfi_endproc
 1691              	.LFE3:
 1693              		.section	.text.vTaskDelay,"ax",%progbits
 1694              		.align	2
 1695              		.global	vTaskDelay
 1696              		.thumb
 1697              		.thumb_func
 1699              	vTaskDelay:
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 71


 1700              	.LFB4:
 637:FreeRTOS/Src/tasks.c **** 	portTickType xTimeToWake;
 1701              		.loc 1 637 0
 1702              		.cfi_startproc
 1703              		@ args = 0, pretend = 0, frame = 0
 1704              		@ frame_needed = 0, uses_anonymous_args = 0
 1705              	.LVL165:
 1706 0000 70B5     		push	{r4, r5, r6, lr}
 1707              	.LCFI20:
 1708              		.cfi_def_cfa_offset 16
 1709              		.cfi_offset 4, -16
 1710              		.cfi_offset 5, -12
 1711              		.cfi_offset 6, -8
 1712              		.cfi_offset 14, -4
 1713              	.LVL166:
 642:FreeRTOS/Src/tasks.c **** 		{
 1714              		.loc 1 642 0
 1715 0002 00B3     		cbz	r0, .L164
 1716 0004 0446     		mov	r4, r0
 644:FreeRTOS/Src/tasks.c **** 			{
 1717              		.loc 1 644 0
 1718 0006 FFF7FEFF 		bl	vTaskSuspendAll
 1719              	.LVL167:
 658:FreeRTOS/Src/tasks.c **** 
 1720              		.loc 1 658 0
 1721 000a 114D     		ldr	r5, .L166
 1722 000c 2B68     		ldr	r3, [r5]
 1723 000e 1C44     		add	r4, r4, r3
 1724              	.LVL168:
 663:FreeRTOS/Src/tasks.c **** 
 1725              		.loc 1 663 0
 1726 0010 104E     		ldr	r6, .L166+4
 1727 0012 3068     		ldr	r0, [r6]
 1728 0014 0430     		adds	r0, r0, #4
 1729 0016 FFF7FEFF 		bl	vListRemove
 1730              	.LVL169:
 666:FreeRTOS/Src/tasks.c **** 
 1731              		.loc 1 666 0
 1732 001a 3368     		ldr	r3, [r6]
 1733 001c 5C60     		str	r4, [r3, #4]
 668:FreeRTOS/Src/tasks.c **** 				{
 1734              		.loc 1 668 0
 1735 001e 2B68     		ldr	r3, [r5]
 1736 0020 9C42     		cmp	r4, r3
 1737 0022 06D2     		bcs	.L161
 672:FreeRTOS/Src/tasks.c **** 				}
 1738              		.loc 1 672 0
 1739 0024 0C4B     		ldr	r3, .L166+8
 1740 0026 1868     		ldr	r0, [r3]
 1741 0028 3168     		ldr	r1, [r6]
 1742 002a 0431     		adds	r1, r1, #4
 1743 002c FFF7FEFF 		bl	vListInsert
 1744              	.LVL170:
 1745 0030 06E0     		b	.L162
 1746              	.L161:
 678:FreeRTOS/Src/tasks.c **** 				}
 1747              		.loc 1 678 0
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 72


 1748 0032 0A4B     		ldr	r3, .L166+12
 1749 0034 1868     		ldr	r0, [r3]
 1750 0036 074B     		ldr	r3, .L166+4
 1751 0038 1968     		ldr	r1, [r3]
 1752 003a 0431     		adds	r1, r1, #4
 1753 003c FFF7FEFF 		bl	vListInsert
 1754              	.LVL171:
 1755              	.L162:
 681:FreeRTOS/Src/tasks.c **** 		}
 1756              		.loc 1 681 0
 1757 0040 FFF7FEFF 		bl	xTaskResumeAll
 1758              	.LVL172:
 1759 0044 00E0     		b	.L160
 1760              	.LVL173:
 1761              	.L164:
 639:FreeRTOS/Src/tasks.c **** 
 1762              		.loc 1 639 0
 1763 0046 0020     		movs	r0, #0
 1764              	.LVL174:
 1765              	.L160:
 686:FreeRTOS/Src/tasks.c **** 		{
 1766              		.loc 1 686 0
 1767 0048 08B9     		cbnz	r0, .L159
 688:FreeRTOS/Src/tasks.c **** 		}
 1768              		.loc 1 688 0
 1769 004a FFF7FEFF 		bl	vPortYieldFromISR
 1770              	.LVL175:
 1771              	.L159:
 1772 004e 70BD     		pop	{r4, r5, r6, pc}
 1773              	.L167:
 1774              		.align	2
 1775              	.L166:
 1776 0050 00000000 		.word	.LANCHOR16
 1777 0054 00000000 		.word	.LANCHOR9
 1778 0058 00000000 		.word	.LANCHOR7
 1779 005c 00000000 		.word	.LANCHOR6
 1780              		.cfi_endproc
 1781              	.LFE4:
 1783              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 1784              		.align	2
 1785              		.thumb
 1786              		.thumb_func
 1788              	prvCheckTasksWaitingTermination:
 1789              	.LFB27:
1891:FreeRTOS/Src/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
 1790              		.loc 1 1891 0
 1791              		.cfi_startproc
 1792              		@ args = 0, pretend = 0, frame = 0
 1793              		@ frame_needed = 0, uses_anonymous_args = 0
 1794              	.LBB7:
1898:FreeRTOS/Src/tasks.c **** 		{
 1795              		.loc 1 1898 0
 1796 0000 134B     		ldr	r3, .L174
 1797 0002 1B68     		ldr	r3, [r3]
 1798 0004 13B3     		cbz	r3, .L173
 1799              	.LBE7:
1891:FreeRTOS/Src/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 73


 1800              		.loc 1 1891 0
 1801 0006 10B5     		push	{r4, lr}
 1802              	.LCFI21:
 1803              		.cfi_def_cfa_offset 8
 1804              		.cfi_offset 4, -8
 1805              		.cfi_offset 14, -4
 1806              	.LBB9:
1900:FreeRTOS/Src/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 1807              		.loc 1 1900 0
 1808 0008 FFF7FEFF 		bl	vTaskSuspendAll
 1809              	.LVL176:
1901:FreeRTOS/Src/tasks.c **** 			xTaskResumeAll();
 1810              		.loc 1 1901 0
 1811 000c 114B     		ldr	r3, .L174+4
 1812 000e 1C68     		ldr	r4, [r3]
 1813              	.LVL177:
1902:FreeRTOS/Src/tasks.c **** 
 1814              		.loc 1 1902 0
 1815 0010 FFF7FEFF 		bl	xTaskResumeAll
 1816              	.LVL178:
1904:FreeRTOS/Src/tasks.c **** 			{
 1817              		.loc 1 1904 0
 1818 0014 CCB1     		cbz	r4, .L168
 1819              	.LBB8:
1908:FreeRTOS/Src/tasks.c **** 				{
 1820              		.loc 1 1908 0
 1821 0016 FFF7FEFF 		bl	vPortEnterCritical
 1822              	.LVL179:
1910:FreeRTOS/Src/tasks.c **** 					vListRemove( &( pxTCB->xGenericListItem ) );
 1823              		.loc 1 1910 0
 1824 001a 0E4B     		ldr	r3, .L174+4
 1825 001c 1B68     		ldr	r3, [r3]
 1826 001e 1BB1     		cbz	r3, .L171
1910:FreeRTOS/Src/tasks.c **** 					vListRemove( &( pxTCB->xGenericListItem ) );
 1827              		.loc 1 1910 0 is_stmt 0 discriminator 1
 1828 0020 0C4B     		ldr	r3, .L174+4
 1829 0022 DB68     		ldr	r3, [r3, #12]
 1830 0024 DC68     		ldr	r4, [r3, #12]
 1831              	.LVL180:
 1832 0026 00E0     		b	.L170
 1833              	.LVL181:
 1834              	.L171:
1910:FreeRTOS/Src/tasks.c **** 					vListRemove( &( pxTCB->xGenericListItem ) );
 1835              		.loc 1 1910 0
 1836 0028 0024     		movs	r4, #0
 1837              	.LVL182:
 1838              	.L170:
1911:FreeRTOS/Src/tasks.c **** 					--uxCurrentNumberOfTasks;
 1839              		.loc 1 1911 0 is_stmt 1 discriminator 4
 1840 002a 201D     		adds	r0, r4, #4
 1841 002c FFF7FEFF 		bl	vListRemove
 1842              	.LVL183:
1912:FreeRTOS/Src/tasks.c **** 					--uxTasksDeleted;
 1843              		.loc 1 1912 0 discriminator 4
 1844 0030 094A     		ldr	r2, .L174+8
 1845 0032 1368     		ldr	r3, [r2]
 1846 0034 013B     		subs	r3, r3, #1
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 74


 1847 0036 1360     		str	r3, [r2]
1913:FreeRTOS/Src/tasks.c **** 				}
 1848              		.loc 1 1913 0 discriminator 4
 1849 0038 054A     		ldr	r2, .L174
 1850 003a 1368     		ldr	r3, [r2]
 1851 003c 013B     		subs	r3, r3, #1
 1852 003e 1360     		str	r3, [r2]
1915:FreeRTOS/Src/tasks.c **** 
 1853              		.loc 1 1915 0 discriminator 4
 1854 0040 FFF7FEFF 		bl	vPortExitCritical
 1855              	.LVL184:
1917:FreeRTOS/Src/tasks.c **** 			}
 1856              		.loc 1 1917 0 discriminator 4
 1857 0044 2046     		mov	r0, r4
 1858 0046 FFF7FEFF 		bl	prvDeleteTCB
 1859              	.LVL185:
 1860              	.L168:
 1861 004a 10BD     		pop	{r4, pc}
 1862              	.L173:
 1863              	.LCFI22:
 1864              		.cfi_def_cfa_offset 0
 1865              		.cfi_restore 4
 1866              		.cfi_restore 14
 1867 004c 7047     		bx	lr
 1868              	.L175:
 1869 004e 00BF     		.align	2
 1870              	.L174:
 1871 0050 00000000 		.word	.LANCHOR14
 1872 0054 00000000 		.word	.LANCHOR4
 1873 0058 00000000 		.word	.LANCHOR8
 1874              	.LBE8:
 1875              	.LBE9:
 1876              		.cfi_endproc
 1877              	.LFE27:
 1879              		.section	.text.prvIdleTask,"ax",%progbits
 1880              		.align	2
 1881              		.thumb
 1882              		.thumb_func
 1884              	prvIdleTask:
 1885              	.LFB24:
1739:FreeRTOS/Src/tasks.c **** 	/* Stop warnings. */
 1886              		.loc 1 1739 0
 1887              		.cfi_startproc
 1888              		@ Volatile: function does not return.
 1889              		@ args = 0, pretend = 0, frame = 0
 1890              		@ frame_needed = 0, uses_anonymous_args = 0
 1891              	.LVL186:
 1892 0000 08B5     		push	{r3, lr}
 1893              	.LCFI23:
 1894              		.cfi_def_cfa_offset 8
 1895              		.cfi_offset 3, -8
 1896              		.cfi_offset 14, -4
 1897              	.LVL187:
 1898              	.L177:
1746:FreeRTOS/Src/tasks.c **** 
 1899              		.loc 1 1746 0
 1900 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 75


 1901              	.LVL188:
1769:FreeRTOS/Src/tasks.c **** 			{
 1902              		.loc 1 1769 0
 1903 0006 034B     		ldr	r3, .L180
 1904 0008 1B68     		ldr	r3, [r3]
 1905 000a 012B     		cmp	r3, #1
 1906 000c F9D9     		bls	.L177
1771:FreeRTOS/Src/tasks.c **** 			}
 1907              		.loc 1 1771 0
 1908 000e FFF7FEFF 		bl	vPortYieldFromISR
 1909              	.LVL189:
 1910 0012 F6E7     		b	.L177
 1911              	.L181:
 1912              		.align	2
 1913              	.L180:
 1914 0014 00000000 		.word	.LANCHOR0
 1915              		.cfi_endproc
 1916              	.LFE24:
 1918              		.section	.text.vTaskSwitchContext,"ax",%progbits
 1919              		.align	2
 1920              		.global	vTaskSwitchContext
 1921              		.thumb
 1922              		.thumb_func
 1924              	vTaskSwitchContext:
 1925              	.LFB18:
1512:FreeRTOS/Src/tasks.c **** 	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 1926              		.loc 1 1512 0
 1927              		.cfi_startproc
 1928              		@ args = 0, pretend = 0, frame = 0
 1929              		@ frame_needed = 0, uses_anonymous_args = 0
 1930              		@ link register save eliminated.
1513:FreeRTOS/Src/tasks.c **** 	{
 1931              		.loc 1 1513 0
 1932 0000 1A4B     		ldr	r3, .L188
 1933 0002 1B68     		ldr	r3, [r3]
 1934 0004 3BB1     		cbz	r3, .L183
1517:FreeRTOS/Src/tasks.c **** 		return;
 1935              		.loc 1 1517 0
 1936 0006 0122     		movs	r2, #1
 1937 0008 194B     		ldr	r3, .L188+4
 1938 000a 1A60     		str	r2, [r3]
 1939 000c 7047     		bx	lr
 1940              	.L185:
1543:FreeRTOS/Src/tasks.c **** 	}
 1941              		.loc 1 1543 0
 1942 000e 194A     		ldr	r2, .L188+8
 1943 0010 1368     		ldr	r3, [r2]
 1944 0012 013B     		subs	r3, r3, #1
 1945 0014 1360     		str	r3, [r2]
 1946              	.L183:
1541:FreeRTOS/Src/tasks.c **** 	{
 1947              		.loc 1 1541 0
 1948 0016 174B     		ldr	r3, .L188+8
 1949 0018 1B68     		ldr	r3, [r3]
 1950 001a 03EB8303 		add	r3, r3, r3, lsl #2
 1951 001e 9A00     		lsls	r2, r3, #2
 1952 0020 154B     		ldr	r3, .L188+12
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 76


 1953 0022 9B58     		ldr	r3, [r3, r2]
 1954 0024 002B     		cmp	r3, #0
 1955 0026 F2D0     		beq	.L185
1512:FreeRTOS/Src/tasks.c **** 	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 1956              		.loc 1 1512 0
 1957 0028 30B4     		push	{r4, r5}
 1958              	.LCFI24:
 1959              		.cfi_def_cfa_offset 8
 1960              		.cfi_offset 4, -8
 1961              		.cfi_offset 5, -4
 1962              	.LBB10:
1548:FreeRTOS/Src/tasks.c **** 
 1963              		.loc 1 1548 0
 1964 002a 124B     		ldr	r3, .L188+8
 1965 002c 1B68     		ldr	r3, [r3]
 1966              	.LVL190:
 1967 002e 124D     		ldr	r5, .L188+12
 1968 0030 9900     		lsls	r1, r3, #2
 1969 0032 CA18     		adds	r2, r1, r3
 1970 0034 9000     		lsls	r0, r2, #2
 1971 0036 2844     		add	r0, r0, r5
 1972 0038 4268     		ldr	r2, [r0, #4]
 1973 003a 5468     		ldr	r4, [r2, #4]
 1974 003c 4460     		str	r4, [r0, #4]
 1975 003e 1944     		add	r1, r1, r3
 1976 0040 8A00     		lsls	r2, r1, #2
 1977 0042 0832     		adds	r2, r2, #8
 1978 0044 2A44     		add	r2, r2, r5
 1979 0046 9442     		cmp	r4, r2
 1980 0048 05D1     		bne	.L186
1548:FreeRTOS/Src/tasks.c **** 
 1981              		.loc 1 1548 0 is_stmt 0 discriminator 1
 1982 004a 6068     		ldr	r0, [r4, #4]
 1983 004c 03EB8301 		add	r1, r3, r3, lsl #2
 1984 0050 8A00     		lsls	r2, r1, #2
 1985 0052 2A44     		add	r2, r2, r5
 1986 0054 5060     		str	r0, [r2, #4]
 1987              	.L186:
1548:FreeRTOS/Src/tasks.c **** 
 1988              		.loc 1 1548 0 discriminator 3
 1989 0056 03EB8303 		add	r3, r3, r3, lsl #2
 1990              	.LVL191:
 1991 005a 9A00     		lsls	r2, r3, #2
 1992 005c 064B     		ldr	r3, .L188+12
 1993 005e 1A44     		add	r2, r2, r3
 1994 0060 5368     		ldr	r3, [r2, #4]
 1995 0062 DA68     		ldr	r2, [r3, #12]
 1996 0064 054B     		ldr	r3, .L188+16
 1997 0066 1A60     		str	r2, [r3]
 1998              	.LBE10:
1552:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 1999              		.loc 1 1552 0 is_stmt 1 discriminator 3
 2000 0068 30BC     		pop	{r4, r5}
 2001              	.LCFI25:
 2002              		.cfi_restore 5
 2003              		.cfi_restore 4
 2004              		.cfi_def_cfa_offset 0
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 77


 2005 006a 7047     		bx	lr
 2006              	.L189:
 2007              		.align	2
 2008              	.L188:
 2009 006c 00000000 		.word	.LANCHOR15
 2010 0070 00000000 		.word	.LANCHOR19
 2011 0074 00000000 		.word	.LANCHOR13
 2012 0078 00000000 		.word	.LANCHOR0
 2013 007c 00000000 		.word	.LANCHOR9
 2014              		.cfi_endproc
 2015              	.LFE18:
 2017              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2018              		.align	2
 2019              		.global	vTaskPlaceOnEventList
 2020              		.thumb
 2021              		.thumb_func
 2023              	vTaskPlaceOnEventList:
 2024              	.LFB19:
1556:FreeRTOS/Src/tasks.c **** portTickType xTimeToWake;
 2025              		.loc 1 1556 0
 2026              		.cfi_startproc
 2027              		@ args = 0, pretend = 0, frame = 0
 2028              		@ frame_needed = 0, uses_anonymous_args = 0
 2029              	.LVL192:
 2030 0000 38B5     		push	{r3, r4, r5, lr}
 2031              	.LCFI26:
 2032              		.cfi_def_cfa_offset 16
 2033              		.cfi_offset 3, -16
 2034              		.cfi_offset 4, -12
 2035              		.cfi_offset 5, -8
 2036              		.cfi_offset 14, -4
 2037 0002 0D46     		mov	r5, r1
1565:FreeRTOS/Src/tasks.c **** 
 2038              		.loc 1 1565 0
 2039 0004 154C     		ldr	r4, .L195
 2040 0006 2168     		ldr	r1, [r4]
 2041              	.LVL193:
 2042 0008 1831     		adds	r1, r1, #24
 2043 000a FFF7FEFF 		bl	vListInsert
 2044              	.LVL194:
1570:FreeRTOS/Src/tasks.c **** 
 2045              		.loc 1 1570 0
 2046 000e 2068     		ldr	r0, [r4]
 2047 0010 0430     		adds	r0, r0, #4
 2048 0012 FFF7FEFF 		bl	vListRemove
 2049              	.LVL195:
1575:FreeRTOS/Src/tasks.c **** 		{
 2050              		.loc 1 1575 0
 2051 0016 B5F1FF3F 		cmp	r5, #-1
 2052 001a 05D1     		bne	.L191
1580:FreeRTOS/Src/tasks.c **** 		}
 2053              		.loc 1 1580 0
 2054 001c 2168     		ldr	r1, [r4]
 2055 001e 0431     		adds	r1, r1, #4
 2056 0020 0F48     		ldr	r0, .L195+4
 2057 0022 FFF7FEFF 		bl	vListInsertEnd
 2058              	.LVL196:
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 78


 2059 0026 38BD     		pop	{r3, r4, r5, pc}
 2060              	.LVL197:
 2061              	.L191:
1586:FreeRTOS/Src/tasks.c **** 
 2062              		.loc 1 1586 0
 2063 0028 0E4B     		ldr	r3, .L195+8
 2064 002a 1968     		ldr	r1, [r3]
 2065 002c 2944     		add	r1, r1, r5
 2066              	.LVL198:
1588:FreeRTOS/Src/tasks.c **** 
 2067              		.loc 1 1588 0
 2068 002e 0B4A     		ldr	r2, .L195
 2069 0030 1268     		ldr	r2, [r2]
 2070 0032 5160     		str	r1, [r2, #4]
1590:FreeRTOS/Src/tasks.c **** 			{
 2071              		.loc 1 1590 0
 2072 0034 1B68     		ldr	r3, [r3]
 2073 0036 9942     		cmp	r1, r3
 2074 0038 07D2     		bcs	.L193
1593:FreeRTOS/Src/tasks.c **** 			}
 2075              		.loc 1 1593 0
 2076 003a 0B4B     		ldr	r3, .L195+12
 2077 003c 1868     		ldr	r0, [r3]
 2078 003e 074B     		ldr	r3, .L195
 2079 0040 1968     		ldr	r1, [r3]
 2080              	.LVL199:
 2081 0042 0431     		adds	r1, r1, #4
 2082 0044 FFF7FEFF 		bl	vListInsert
 2083              	.LVL200:
 2084 0048 38BD     		pop	{r3, r4, r5, pc}
 2085              	.LVL201:
 2086              	.L193:
1598:FreeRTOS/Src/tasks.c **** 			}
 2087              		.loc 1 1598 0
 2088 004a 084B     		ldr	r3, .L195+16
 2089 004c 1868     		ldr	r0, [r3]
 2090 004e 034B     		ldr	r3, .L195
 2091 0050 1968     		ldr	r1, [r3]
 2092              	.LVL202:
 2093 0052 0431     		adds	r1, r1, #4
 2094 0054 FFF7FEFF 		bl	vListInsert
 2095              	.LVL203:
 2096 0058 38BD     		pop	{r3, r4, r5, pc}
 2097              	.LVL204:
 2098              	.L196:
 2099 005a 00BF     		.align	2
 2100              	.L195:
 2101 005c 00000000 		.word	.LANCHOR9
 2102 0060 00000000 		.word	.LANCHOR5
 2103 0064 00000000 		.word	.LANCHOR16
 2104 0068 00000000 		.word	.LANCHOR7
 2105 006c 00000000 		.word	.LANCHOR6
 2106              		.cfi_endproc
 2107              	.LFE19:
 2109              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 2110              		.align	2
 2111              		.global	xTaskRemoveFromEventList
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 79


 2112              		.thumb
 2113              		.thumb_func
 2115              	xTaskRemoveFromEventList:
 2116              	.LFB20:
1626:FreeRTOS/Src/tasks.c **** tskTCB *pxUnblockedTCB;
 2117              		.loc 1 1626 0
 2118              		.cfi_startproc
 2119              		@ args = 0, pretend = 0, frame = 0
 2120              		@ frame_needed = 0, uses_anonymous_args = 0
 2121              	.LVL205:
 2122 0000 38B5     		push	{r3, r4, r5, lr}
 2123              	.LCFI27:
 2124              		.cfi_def_cfa_offset 16
 2125              		.cfi_offset 3, -16
 2126              		.cfi_offset 4, -12
 2127              		.cfi_offset 5, -8
 2128              		.cfi_offset 14, -4
1640:FreeRTOS/Src/tasks.c **** 	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
 2129              		.loc 1 1640 0
 2130 0002 0368     		ldr	r3, [r0]
 2131 0004 13B1     		cbz	r3, .L203
1640:FreeRTOS/Src/tasks.c **** 	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
 2132              		.loc 1 1640 0 is_stmt 0 discriminator 1
 2133 0006 C368     		ldr	r3, [r0, #12]
 2134 0008 DC68     		ldr	r4, [r3, #12]
 2135 000a 00E0     		b	.L198
 2136              	.L203:
1640:FreeRTOS/Src/tasks.c **** 	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
 2137              		.loc 1 1640 0
 2138 000c 0024     		movs	r4, #0
 2139              	.L198:
 2140              	.LVL206:
1641:FreeRTOS/Src/tasks.c **** 
 2141              		.loc 1 1641 0 is_stmt 1 discriminator 4
 2142 000e 04F11805 		add	r5, r4, #24
 2143 0012 2846     		mov	r0, r5
 2144              	.LVL207:
 2145 0014 FFF7FEFF 		bl	vListRemove
 2146              	.LVL208:
1643:FreeRTOS/Src/tasks.c **** 	{
 2147              		.loc 1 1643 0 discriminator 4
 2148 0018 124B     		ldr	r3, .L206
 2149 001a 1B68     		ldr	r3, [r3]
 2150 001c 9BB9     		cbnz	r3, .L199
1645:FreeRTOS/Src/tasks.c **** 		prvAddTaskToReadyQueue( pxUnblockedTCB );
 2151              		.loc 1 1645 0
 2152 001e 251D     		adds	r5, r4, #4
 2153 0020 2846     		mov	r0, r5
 2154 0022 FFF7FEFF 		bl	vListRemove
 2155              	.LVL209:
1646:FreeRTOS/Src/tasks.c **** 	}
 2156              		.loc 1 1646 0
 2157 0026 E36A     		ldr	r3, [r4, #44]
 2158 0028 0F4A     		ldr	r2, .L206+4
 2159 002a 1268     		ldr	r2, [r2]
 2160 002c 9342     		cmp	r3, r2
 2161 002e 01D9     		bls	.L200
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 80


1646:FreeRTOS/Src/tasks.c **** 	}
 2162              		.loc 1 1646 0 is_stmt 0 discriminator 1
 2163 0030 0D4A     		ldr	r2, .L206+4
 2164 0032 1360     		str	r3, [r2]
 2165              	.L200:
1646:FreeRTOS/Src/tasks.c **** 	}
 2166              		.loc 1 1646 0 discriminator 3
 2167 0034 03EB8303 		add	r3, r3, r3, lsl #2
 2168 0038 9A00     		lsls	r2, r3, #2
 2169 003a 2946     		mov	r1, r5
 2170 003c 0B48     		ldr	r0, .L206+8
 2171 003e 1044     		add	r0, r0, r2
 2172 0040 FFF7FEFF 		bl	vListInsertEnd
 2173              	.LVL210:
 2174 0044 03E0     		b	.L201
 2175              	.L199:
1652:FreeRTOS/Src/tasks.c **** 	}
 2176              		.loc 1 1652 0 is_stmt 1
 2177 0046 2946     		mov	r1, r5
 2178 0048 0948     		ldr	r0, .L206+12
 2179 004a FFF7FEFF 		bl	vListInsertEnd
 2180              	.LVL211:
 2181              	.L201:
1655:FreeRTOS/Src/tasks.c **** 	{
 2182              		.loc 1 1655 0
 2183 004e E26A     		ldr	r2, [r4, #44]
 2184 0050 084B     		ldr	r3, .L206+16
 2185 0052 1B68     		ldr	r3, [r3]
 2186 0054 DB6A     		ldr	r3, [r3, #44]
 2187 0056 9A42     		cmp	r2, r3
 2188 0058 01D3     		bcc	.L204
1661:FreeRTOS/Src/tasks.c **** 	}
 2189              		.loc 1 1661 0
 2190 005a 0120     		movs	r0, #1
 2191 005c 38BD     		pop	{r3, r4, r5, pc}
 2192              	.LVL212:
 2193              	.L204:
1665:FreeRTOS/Src/tasks.c **** 	}
 2194              		.loc 1 1665 0
 2195 005e 0020     		movs	r0, #0
 2196              	.LVL213:
1669:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 2197              		.loc 1 1669 0
 2198 0060 38BD     		pop	{r3, r4, r5, pc}
 2199              	.LVL214:
 2200              	.L207:
 2201 0062 00BF     		.align	2
 2202              	.L206:
 2203 0064 00000000 		.word	.LANCHOR15
 2204 0068 00000000 		.word	.LANCHOR13
 2205 006c 00000000 		.word	.LANCHOR0
 2206 0070 00000000 		.word	.LANCHOR3
 2207 0074 00000000 		.word	.LANCHOR9
 2208              		.cfi_endproc
 2209              	.LFE20:
 2211              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 2212              		.align	2
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 81


 2213              		.global	vTaskSetTimeOutState
 2214              		.thumb
 2215              		.thumb_func
 2217              	vTaskSetTimeOutState:
 2218              	.LFB21:
1673:FreeRTOS/Src/tasks.c ****     pxTimeOut->xOverflowCount = xNumOfOverflows;
 2219              		.loc 1 1673 0
 2220              		.cfi_startproc
 2221              		@ args = 0, pretend = 0, frame = 0
 2222              		@ frame_needed = 0, uses_anonymous_args = 0
 2223              		@ link register save eliminated.
 2224              	.LVL215:
1674:FreeRTOS/Src/tasks.c ****     pxTimeOut->xTimeOnEntering = xTickCount;
 2225              		.loc 1 1674 0
 2226 0000 034B     		ldr	r3, .L209
 2227 0002 1B68     		ldr	r3, [r3]
 2228 0004 0360     		str	r3, [r0]
1675:FreeRTOS/Src/tasks.c **** }
 2229              		.loc 1 1675 0
 2230 0006 034B     		ldr	r3, .L209+4
 2231 0008 1B68     		ldr	r3, [r3]
 2232 000a 4360     		str	r3, [r0, #4]
 2233 000c 7047     		bx	lr
 2234              	.L210:
 2235 000e 00BF     		.align	2
 2236              	.L209:
 2237 0010 00000000 		.word	.LANCHOR17
 2238 0014 00000000 		.word	.LANCHOR16
 2239              		.cfi_endproc
 2240              	.LFE21:
 2242              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 2243              		.align	2
 2244              		.global	xTaskCheckForTimeOut
 2245              		.thumb
 2246              		.thumb_func
 2248              	xTaskCheckForTimeOut:
 2249              	.LFB22:
1680:FreeRTOS/Src/tasks.c **** portBASE_TYPE xReturn;
 2250              		.loc 1 1680 0
 2251              		.cfi_startproc
 2252              		@ args = 0, pretend = 0, frame = 0
 2253              		@ frame_needed = 0, uses_anonymous_args = 0
 2254              	.LVL216:
 2255 0000 38B5     		push	{r3, r4, r5, lr}
 2256              	.LCFI28:
 2257              		.cfi_def_cfa_offset 16
 2258              		.cfi_offset 3, -16
 2259              		.cfi_offset 4, -12
 2260              		.cfi_offset 5, -8
 2261              		.cfi_offset 14, -4
 2262 0002 0446     		mov	r4, r0
 2263 0004 0D46     		mov	r5, r1
1683:FreeRTOS/Src/tasks.c **** 	{
 2264              		.loc 1 1683 0
 2265 0006 FFF7FEFF 		bl	vPortEnterCritical
 2266              	.LVL217:
1689:FreeRTOS/Src/tasks.c **** 			{
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 82


 2267              		.loc 1 1689 0
 2268 000a 2B68     		ldr	r3, [r5]
 2269 000c B3F1FF3F 		cmp	r3, #-1
 2270 0010 19D0     		beq	.L214
1696:FreeRTOS/Src/tasks.c **** 		{
 2271              		.loc 1 1696 0
 2272 0012 2168     		ldr	r1, [r4]
 2273 0014 104A     		ldr	r2, .L218
 2274 0016 1268     		ldr	r2, [r2]
 2275 0018 9142     		cmp	r1, r2
 2276 001a 04D0     		beq	.L213
1696:FreeRTOS/Src/tasks.c **** 		{
 2277              		.loc 1 1696 0 is_stmt 0 discriminator 1
 2278 001c 6168     		ldr	r1, [r4, #4]
 2279 001e 0F4A     		ldr	r2, .L218+4
 2280 0020 1268     		ldr	r2, [r2]
 2281 0022 9142     		cmp	r1, r2
 2282 0024 11D9     		bls	.L215
 2283              	.L213:
1704:FreeRTOS/Src/tasks.c **** 		{
 2284              		.loc 1 1704 0 is_stmt 1
 2285 0026 0D4A     		ldr	r2, .L218+4
 2286 0028 1268     		ldr	r2, [r2]
 2287 002a 6168     		ldr	r1, [r4, #4]
 2288 002c 521A     		subs	r2, r2, r1
 2289 002e 9342     		cmp	r3, r2
 2290 0030 0DD9     		bls	.L216
1707:FreeRTOS/Src/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 2291              		.loc 1 1707 0
 2292 0032 0A4A     		ldr	r2, .L218+4
 2293 0034 1268     		ldr	r2, [r2]
 2294 0036 511A     		subs	r1, r2, r1
 2295 0038 5B1A     		subs	r3, r3, r1
 2296 003a 2B60     		str	r3, [r5]
1708:FreeRTOS/Src/tasks.c **** 			xReturn = pdFALSE;
 2297              		.loc 1 1708 0
 2298 003c 2046     		mov	r0, r4
 2299 003e FFF7FEFF 		bl	vTaskSetTimeOutState
 2300              	.LVL218:
1709:FreeRTOS/Src/tasks.c **** 		}
 2301              		.loc 1 1709 0
 2302 0042 0024     		movs	r4, #0
 2303              	.LVL219:
 2304 0044 04E0     		b	.L212
 2305              	.LVL220:
 2306              	.L214:
1691:FreeRTOS/Src/tasks.c **** 			}
 2307              		.loc 1 1691 0
 2308 0046 0024     		movs	r4, #0
 2309              	.LVL221:
 2310 0048 02E0     		b	.L212
 2311              	.LVL222:
 2312              	.L215:
1702:FreeRTOS/Src/tasks.c **** 		}
 2313              		.loc 1 1702 0
 2314 004a 0124     		movs	r4, #1
 2315              	.LVL223:
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 83


 2316 004c 00E0     		b	.L212
 2317              	.LVL224:
 2318              	.L216:
1713:FreeRTOS/Src/tasks.c **** 		}
 2319              		.loc 1 1713 0
 2320 004e 0124     		movs	r4, #1
 2321              	.LVL225:
 2322              	.L212:
1716:FreeRTOS/Src/tasks.c **** 
 2323              		.loc 1 1716 0
 2324 0050 FFF7FEFF 		bl	vPortExitCritical
 2325              	.LVL226:
1719:FreeRTOS/Src/tasks.c **** /*-----------------------------------------------------------*/
 2326              		.loc 1 1719 0
 2327 0054 2046     		mov	r0, r4
 2328 0056 38BD     		pop	{r3, r4, r5, pc}
 2329              	.LVL227:
 2330              	.L219:
 2331              		.align	2
 2332              	.L218:
 2333 0058 00000000 		.word	.LANCHOR17
 2334 005c 00000000 		.word	.LANCHOR16
 2335              		.cfi_endproc
 2336              	.LFE22:
 2338              		.section	.text.vTaskMissedYield,"ax",%progbits
 2339              		.align	2
 2340              		.global	vTaskMissedYield
 2341              		.thumb
 2342              		.thumb_func
 2344              	vTaskMissedYield:
 2345              	.LFB23:
1723:FreeRTOS/Src/tasks.c **** 	xMissedYield = pdTRUE;
 2346              		.loc 1 1723 0
 2347              		.cfi_startproc
 2348              		@ args = 0, pretend = 0, frame = 0
 2349              		@ frame_needed = 0, uses_anonymous_args = 0
 2350              		@ link register save eliminated.
1724:FreeRTOS/Src/tasks.c **** }
 2351              		.loc 1 1724 0
 2352 0000 0122     		movs	r2, #1
 2353 0002 014B     		ldr	r3, .L221
 2354 0004 1A60     		str	r2, [r3]
 2355 0006 7047     		bx	lr
 2356              	.L222:
 2357              		.align	2
 2358              	.L221:
 2359 0008 00000000 		.word	.LANCHOR19
 2360              		.cfi_endproc
 2361              	.LFE23:
 2363              		.global	pxCurrentTCB
 2364              		.section	.bss.uxMissedTicks,"aw",%nobits
 2365              		.align	2
 2366              		.set	.LANCHOR18,. + 0
 2369              	uxMissedTicks:
 2370 0000 00000000 		.space	4
 2371              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 2372              		.align	2
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 84


 2373              		.set	.LANCHOR6,. + 0
 2376              	pxDelayedTaskList:
 2377 0000 00000000 		.space	4
 2378              		.section	.rodata.str1.4,"aMS",%progbits,1
 2379              		.align	2
 2380              	.LC0:
 2381 0000 49444C45 		.ascii	"IDLE\000"
 2381      00
 2382              		.section	.bss.xSchedulerRunning,"aw",%nobits
 2383              		.align	2
 2384              		.set	.LANCHOR10,. + 0
 2387              	xSchedulerRunning:
 2388 0000 00000000 		.space	4
 2389              		.section	.bss.uxTasksDeleted,"aw",%nobits
 2390              		.align	2
 2391              		.set	.LANCHOR14,. + 0
 2394              	uxTasksDeleted:
 2395 0000 00000000 		.space	4
 2396              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 2397              		.align	2
 2398              		.set	.LANCHOR4,. + 0
 2401              	xTasksWaitingTermination:
 2402 0000 00000000 		.space	20
 2402      00000000 
 2402      00000000 
 2402      00000000 
 2402      00000000 
 2403              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 2404              		.align	2
 2405              		.set	.LANCHOR0,. + 0
 2408              	pxReadyTasksLists:
 2409 0000 00000000 		.space	100
 2409      00000000 
 2409      00000000 
 2409      00000000 
 2409      00000000 
 2410              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 2411              		.align	2
 2412              		.set	.LANCHOR15,. + 0
 2415              	uxSchedulerSuspended:
 2416 0000 00000000 		.space	4
 2417              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 2418              		.align	2
 2419              		.set	.LANCHOR8,. + 0
 2422              	uxCurrentNumberOfTasks:
 2423 0000 00000000 		.space	4
 2424              		.section	.bss.pxCurrentTCB,"aw",%nobits
 2425              		.align	2
 2426              		.set	.LANCHOR9,. + 0
 2429              	pxCurrentTCB:
 2430 0000 00000000 		.space	4
 2431              		.section	.bss.xPendingReadyList,"aw",%nobits
 2432              		.align	2
 2433              		.set	.LANCHOR3,. + 0
 2436              	xPendingReadyList:
 2437 0000 00000000 		.space	20
 2437      00000000 
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 85


 2437      00000000 
 2437      00000000 
 2437      00000000 
 2438              		.section	.bss.xNumOfOverflows,"aw",%nobits
 2439              		.align	2
 2440              		.set	.LANCHOR17,. + 0
 2443              	xNumOfOverflows:
 2444 0000 00000000 		.space	4
 2445              		.section	.bss.xTickCount,"aw",%nobits
 2446              		.align	2
 2447              		.set	.LANCHOR16,. + 0
 2450              	xTickCount:
 2451 0000 00000000 		.space	4
 2452              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 2453              		.align	2
 2454              		.set	.LANCHOR7,. + 0
 2457              	pxOverflowDelayedTaskList:
 2458 0000 00000000 		.space	4
 2459              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 2460              		.align	2
 2461              		.set	.LANCHOR13,. + 0
 2464              	uxTopReadyPriority:
 2465 0000 00000000 		.space	4
 2466              		.section	.bss.uxTaskNumber,"aw",%nobits
 2467              		.align	2
 2468              		.set	.LANCHOR12,. + 0
 2471              	uxTaskNumber:
 2472 0000 00000000 		.space	4
 2473              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 2474              		.align	2
 2475              		.set	.LANCHOR1,. + 0
 2478              	xDelayedTaskList1:
 2479 0000 00000000 		.space	20
 2479      00000000 
 2479      00000000 
 2479      00000000 
 2479      00000000 
 2480              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 2481              		.align	2
 2482              		.set	.LANCHOR2,. + 0
 2485              	xDelayedTaskList2:
 2486 0000 00000000 		.space	20
 2486      00000000 
 2486      00000000 
 2486      00000000 
 2486      00000000 
 2487              		.section	.bss.xMissedYield,"aw",%nobits
 2488              		.align	2
 2489              		.set	.LANCHOR19,. + 0
 2492              	xMissedYield:
 2493 0000 00000000 		.space	4
 2494              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 2495              		.align	2
 2496              		.set	.LANCHOR5,. + 0
 2499              	xSuspendedTaskList:
 2500 0000 00000000 		.space	20
 2500      00000000 
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 86


 2500      00000000 
 2500      00000000 
 2500      00000000 
 2501              		.section	.bss.uxTopUsedPriority,"aw",%nobits
 2502              		.align	2
 2503              		.set	.LANCHOR11,. + 0
 2506              	uxTopUsedPriority:
 2507 0000 00000000 		.space	4
 2508              		.text
 2509              	.Letext0:
 2510              		.file 2 "/usr/local/Cellar/gcc-arm-none-eabi/20160926/lib/gcc/arm-none-eabi/5.4.1/include/stddef.h
 2511              		.file 3 "FreeRTOS/Inc/projdefs.h"
 2512              		.file 4 "FreeRTOS/ARMCM3/Inc/portmacro.h"
 2513              		.file 5 "FreeRTOS/Inc/list.h"
 2514              		.file 6 "FreeRTOS/Inc/task.h"
 2515              		.file 7 "FreeRTOS/Inc/portable.h"
 2516              		.file 8 "/usr/local/Cellar/gcc-arm-none-eabi/20160926/arm-none-eabi/include/string.h"
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 87


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:20     .text.prvDeleteTCB:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:24     .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:52     .text.prvAllocateTCBAndStack:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:56     .text.prvAllocateTCBAndStack:0000000000000000 prvAllocateTCBAndStack
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:110    .text.prvInitialiseTCBVariables:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:114    .text.prvInitialiseTCBVariables:0000000000000000 prvInitialiseTCBVariables
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:170    .text.prvInitialiseTaskLists:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:174    .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:240    .text.prvInitialiseTaskLists:0000000000000048 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:252    .text.xTaskCreate:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:257    .text.xTaskCreate:0000000000000000 xTaskCreate
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:425    .text.xTaskCreate:00000000000000e0 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:437    .text.vTaskDelete:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:442    .text.vTaskDelete:0000000000000000 vTaskDelete
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:528    .text.vTaskDelete:000000000000005c $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:537    .text.uxTaskPriorityGet:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:542    .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:578    .text.uxTaskPriorityGet:0000000000000018 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:583    .text.vTaskPrioritySet:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:588    .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:716    .text.vTaskPrioritySet:0000000000000088 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:723    .text.vTaskSuspend:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:728    .text.vTaskSuspend:0000000000000000 vTaskSuspend
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:800    .text.vTaskSuspend:0000000000000044 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:806    .text.xTaskIsTaskSuspended:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:811    .text.xTaskIsTaskSuspended:0000000000000000 xTaskIsTaskSuspended
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:855    .text.xTaskIsTaskSuspended:0000000000000024 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:861    .text.vTaskResume:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:866    .text.vTaskResume:0000000000000000 vTaskResume
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:949    .text.vTaskResume:000000000000005c $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:956    .text.xTaskResumeFromISR:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:961    .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:1041   .text.xTaskResumeFromISR:0000000000000060 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:1050   .text.vTaskStartScheduler:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:1055   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:1111   .text.vTaskStartScheduler:0000000000000038 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:1884   .text.prvIdleTask:0000000000000000 prvIdleTask
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:1119   .text.vTaskEndScheduler:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:1124   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:1155   .text.vTaskEndScheduler:0000000000000018 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:1160   .text.vTaskSuspendAll:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:1165   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:1181   .text.vTaskSuspendAll:000000000000000c $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:1186   .text.xTaskGetTickCount:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:1191   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:1219   .text.xTaskGetTickCount:0000000000000014 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:1224   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:1229   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:1244   .text.uxTaskGetNumberOfTasks:0000000000000008 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:1249   .text.vTaskIncrementTick:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:1254   .text.vTaskIncrementTick:0000000000000000 vTaskIncrementTick
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:1371   .text.vTaskIncrementTick:000000000000008c $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:1383   .text.xTaskResumeAll:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:1388   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:1551   .text.xTaskResumeAll:00000000000000b8 $d
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 88


/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:1563   .text.vTaskDelayUntil:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:1568   .text.vTaskDelayUntil:0000000000000000 vTaskDelayUntil
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:1686   .text.vTaskDelayUntil:0000000000000088 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:1694   .text.vTaskDelay:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:1699   .text.vTaskDelay:0000000000000000 vTaskDelay
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:1776   .text.vTaskDelay:0000000000000050 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:1784   .text.prvCheckTasksWaitingTermination:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:1788   .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:1871   .text.prvCheckTasksWaitingTermination:0000000000000050 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:1880   .text.prvIdleTask:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:1914   .text.prvIdleTask:0000000000000014 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:1919   .text.vTaskSwitchContext:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:1924   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2009   .text.vTaskSwitchContext:000000000000006c $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2018   .text.vTaskPlaceOnEventList:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2023   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2101   .text.vTaskPlaceOnEventList:000000000000005c $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2110   .text.xTaskRemoveFromEventList:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2115   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2203   .text.xTaskRemoveFromEventList:0000000000000064 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2212   .text.vTaskSetTimeOutState:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2217   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2237   .text.vTaskSetTimeOutState:0000000000000010 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2243   .text.xTaskCheckForTimeOut:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2248   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2333   .text.xTaskCheckForTimeOut:0000000000000058 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2339   .text.vTaskMissedYield:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2344   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2359   .text.vTaskMissedYield:0000000000000008 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2429   .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2365   .bss.uxMissedTicks:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2369   .bss.uxMissedTicks:0000000000000000 uxMissedTicks
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2372   .bss.pxDelayedTaskList:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2376   .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2379   .rodata.str1.4:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2383   .bss.xSchedulerRunning:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2387   .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2390   .bss.uxTasksDeleted:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2394   .bss.uxTasksDeleted:0000000000000000 uxTasksDeleted
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2397   .bss.xTasksWaitingTermination:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2401   .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2404   .bss.pxReadyTasksLists:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2408   .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2411   .bss.uxSchedulerSuspended:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2415   .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2418   .bss.uxCurrentNumberOfTasks:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2422   .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2425   .bss.pxCurrentTCB:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2432   .bss.xPendingReadyList:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2436   .bss.xPendingReadyList:0000000000000000 xPendingReadyList
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2439   .bss.xNumOfOverflows:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2443   .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2446   .bss.xTickCount:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2450   .bss.xTickCount:0000000000000000 xTickCount
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2453   .bss.pxOverflowDelayedTaskList:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2457   .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2460   .bss.uxTopReadyPriority:0000000000000000 $d
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s 			page 89


/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2464   .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2467   .bss.uxTaskNumber:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2471   .bss.uxTaskNumber:0000000000000000 uxTaskNumber
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2474   .bss.xDelayedTaskList1:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2478   .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2481   .bss.xDelayedTaskList2:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2485   .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2488   .bss.xMissedYield:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2492   .bss.xMissedYield:0000000000000000 xMissedYield
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2495   .bss.xSuspendedTaskList:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2499   .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2502   .bss.uxTopUsedPriority:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqTBhse.s:2506   .bss.uxTopUsedPriority:0000000000000000 uxTopUsedPriority
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
vPortFree
pvPortMalloc
memset
strncpy
vListInitialiseItem
vListInitialise
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
vPortYieldFromISR
vListRemove
xPortStartScheduler
vPortEndScheduler
vListInsert
