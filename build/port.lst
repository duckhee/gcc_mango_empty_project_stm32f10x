ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"port.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvTaskExitError,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	prvTaskExitError:
  25              	.LFB33:
  26              		.file 1 "FreeRTOS/ARM_CM3/port.c"
   1:FreeRTOS/ARM_CM3/port.c **** /*
   2:FreeRTOS/ARM_CM3/port.c ****  * FreeRTOS Kernel V10.1.1
   3:FreeRTOS/ARM_CM3/port.c ****  * Copyright (C) 2018 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/ARM_CM3/port.c ****  *
   5:FreeRTOS/ARM_CM3/port.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:FreeRTOS/ARM_CM3/port.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:FreeRTOS/ARM_CM3/port.c ****  * the Software without restriction, including without limitation the rights to
   8:FreeRTOS/ARM_CM3/port.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:FreeRTOS/ARM_CM3/port.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:FreeRTOS/ARM_CM3/port.c ****  * subject to the following conditions:
  11:FreeRTOS/ARM_CM3/port.c ****  *
  12:FreeRTOS/ARM_CM3/port.c ****  * The above copyright notice and this permission notice shall be included in all
  13:FreeRTOS/ARM_CM3/port.c ****  * copies or substantial portions of the Software.
  14:FreeRTOS/ARM_CM3/port.c ****  *
  15:FreeRTOS/ARM_CM3/port.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:FreeRTOS/ARM_CM3/port.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:FreeRTOS/ARM_CM3/port.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:FreeRTOS/ARM_CM3/port.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:FreeRTOS/ARM_CM3/port.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:FreeRTOS/ARM_CM3/port.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:FreeRTOS/ARM_CM3/port.c ****  *
  22:FreeRTOS/ARM_CM3/port.c ****  * http://www.FreeRTOS.org
  23:FreeRTOS/ARM_CM3/port.c ****  * http://aws.amazon.com/freertos
  24:FreeRTOS/ARM_CM3/port.c ****  *
  25:FreeRTOS/ARM_CM3/port.c ****  * 1 tab == 4 spaces!
  26:FreeRTOS/ARM_CM3/port.c ****  */
  27:FreeRTOS/ARM_CM3/port.c **** 
  28:FreeRTOS/ARM_CM3/port.c **** /*-----------------------------------------------------------
  29:FreeRTOS/ARM_CM3/port.c ****  * Implementation of functions defined in portable.h for the ARM CM3 port.
  30:FreeRTOS/ARM_CM3/port.c ****  *----------------------------------------------------------*/
  31:FreeRTOS/ARM_CM3/port.c **** 
  32:FreeRTOS/ARM_CM3/port.c **** /* Scheduler includes. */
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s 			page 2


  33:FreeRTOS/ARM_CM3/port.c **** #include "FreeRTOS.h"
  34:FreeRTOS/ARM_CM3/port.c **** #include "task.h"
  35:FreeRTOS/ARM_CM3/port.c **** 
  36:FreeRTOS/ARM_CM3/port.c **** /* For backward compatibility, ensure configKERNEL_INTERRUPT_PRIORITY is
  37:FreeRTOS/ARM_CM3/port.c **** defined.  The value should also ensure backward compatibility.
  38:FreeRTOS/ARM_CM3/port.c **** FreeRTOS.org versions prior to V4.4.0 did not include this definition. */
  39:FreeRTOS/ARM_CM3/port.c **** #ifndef configKERNEL_INTERRUPT_PRIORITY
  40:FreeRTOS/ARM_CM3/port.c **** 	#define configKERNEL_INTERRUPT_PRIORITY 255
  41:FreeRTOS/ARM_CM3/port.c **** #endif
  42:FreeRTOS/ARM_CM3/port.c **** 
  43:FreeRTOS/ARM_CM3/port.c **** #ifndef configSYSTICK_CLOCK_HZ
  44:FreeRTOS/ARM_CM3/port.c **** 	#define configSYSTICK_CLOCK_HZ configCPU_CLOCK_HZ
  45:FreeRTOS/ARM_CM3/port.c **** 	/* Ensure the SysTick is clocked at the same frequency as the core. */
  46:FreeRTOS/ARM_CM3/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 1UL << 2UL )
  47:FreeRTOS/ARM_CM3/port.c **** #else
  48:FreeRTOS/ARM_CM3/port.c **** 	/* The way the SysTick is clocked is not modified in case it is not the same
  49:FreeRTOS/ARM_CM3/port.c **** 	as the core. */
  50:FreeRTOS/ARM_CM3/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 0 )
  51:FreeRTOS/ARM_CM3/port.c **** #endif
  52:FreeRTOS/ARM_CM3/port.c **** 
  53:FreeRTOS/ARM_CM3/port.c **** /* Constants required to manipulate the core.  Registers first... */
  54:FreeRTOS/ARM_CM3/port.c **** #define portNVIC_SYSTICK_CTRL_REG			( * ( ( volatile uint32_t * ) 0xe000e010 ) )
  55:FreeRTOS/ARM_CM3/port.c **** #define portNVIC_SYSTICK_LOAD_REG			( * ( ( volatile uint32_t * ) 0xe000e014 ) )
  56:FreeRTOS/ARM_CM3/port.c **** #define portNVIC_SYSTICK_CURRENT_VALUE_REG	( * ( ( volatile uint32_t * ) 0xe000e018 ) )
  57:FreeRTOS/ARM_CM3/port.c **** #define portNVIC_SYSPRI2_REG				( * ( ( volatile uint32_t * ) 0xe000ed20 ) )
  58:FreeRTOS/ARM_CM3/port.c **** /* ...then bits in the registers. */
  59:FreeRTOS/ARM_CM3/port.c **** #define portNVIC_SYSTICK_INT_BIT			( 1UL << 1UL )
  60:FreeRTOS/ARM_CM3/port.c **** #define portNVIC_SYSTICK_ENABLE_BIT			( 1UL << 0UL )
  61:FreeRTOS/ARM_CM3/port.c **** #define portNVIC_SYSTICK_COUNT_FLAG_BIT		( 1UL << 16UL )
  62:FreeRTOS/ARM_CM3/port.c **** #define portNVIC_PENDSVCLEAR_BIT 			( 1UL << 27UL )
  63:FreeRTOS/ARM_CM3/port.c **** #define portNVIC_PEND_SYSTICK_CLEAR_BIT		( 1UL << 25UL )
  64:FreeRTOS/ARM_CM3/port.c **** 
  65:FreeRTOS/ARM_CM3/port.c **** #define portNVIC_PENDSV_PRI					( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 16UL )
  66:FreeRTOS/ARM_CM3/port.c **** #define portNVIC_SYSTICK_PRI				( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 24UL )
  67:FreeRTOS/ARM_CM3/port.c **** 
  68:FreeRTOS/ARM_CM3/port.c **** /* Constants required to check the validity of an interrupt priority. */
  69:FreeRTOS/ARM_CM3/port.c **** #define portFIRST_USER_INTERRUPT_NUMBER		( 16 )
  70:FreeRTOS/ARM_CM3/port.c **** #define portNVIC_IP_REGISTERS_OFFSET_16 	( 0xE000E3F0 )
  71:FreeRTOS/ARM_CM3/port.c **** #define portAIRCR_REG						( * ( ( volatile uint32_t * ) 0xE000ED0C ) )
  72:FreeRTOS/ARM_CM3/port.c **** #define portMAX_8_BIT_VALUE					( ( uint8_t ) 0xff )
  73:FreeRTOS/ARM_CM3/port.c **** #define portTOP_BIT_OF_BYTE					( ( uint8_t ) 0x80 )
  74:FreeRTOS/ARM_CM3/port.c **** #define portMAX_PRIGROUP_BITS				( ( uint8_t ) 7 )
  75:FreeRTOS/ARM_CM3/port.c **** #define portPRIORITY_GROUP_MASK				( 0x07UL << 8UL )
  76:FreeRTOS/ARM_CM3/port.c **** #define portPRIGROUP_SHIFT					( 8UL )
  77:FreeRTOS/ARM_CM3/port.c **** 
  78:FreeRTOS/ARM_CM3/port.c **** /* Masks off all bits but the VECTACTIVE bits in the ICSR register. */
  79:FreeRTOS/ARM_CM3/port.c **** #define portVECTACTIVE_MASK					( 0xFFUL )
  80:FreeRTOS/ARM_CM3/port.c **** 
  81:FreeRTOS/ARM_CM3/port.c **** /* Constants required to set up the initial stack. */
  82:FreeRTOS/ARM_CM3/port.c **** #define portINITIAL_XPSR					( 0x01000000UL )
  83:FreeRTOS/ARM_CM3/port.c **** 
  84:FreeRTOS/ARM_CM3/port.c **** /* The systick is a 24-bit counter. */
  85:FreeRTOS/ARM_CM3/port.c **** #define portMAX_24_BIT_NUMBER				( 0xffffffUL )
  86:FreeRTOS/ARM_CM3/port.c **** 
  87:FreeRTOS/ARM_CM3/port.c **** /* A fiddle factor to estimate the number of SysTick counts that would have
  88:FreeRTOS/ARM_CM3/port.c **** occurred while the SysTick counter is stopped during tickless idle
  89:FreeRTOS/ARM_CM3/port.c **** calculations. */
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s 			page 3


  90:FreeRTOS/ARM_CM3/port.c **** #define portMISSED_COUNTS_FACTOR			( 45UL )
  91:FreeRTOS/ARM_CM3/port.c **** 
  92:FreeRTOS/ARM_CM3/port.c **** /* For strict compliance with the Cortex-M spec the task start address should
  93:FreeRTOS/ARM_CM3/port.c **** have bit-0 clear, as it is loaded into the PC on exit from an ISR. */
  94:FreeRTOS/ARM_CM3/port.c **** #define portSTART_ADDRESS_MASK				( ( StackType_t ) 0xfffffffeUL )
  95:FreeRTOS/ARM_CM3/port.c **** 
  96:FreeRTOS/ARM_CM3/port.c **** /* Let the user override the pre-loading of the initial LR with the address of
  97:FreeRTOS/ARM_CM3/port.c **** prvTaskExitError() in case it messes up unwinding of the stack in the
  98:FreeRTOS/ARM_CM3/port.c **** debugger. */
  99:FreeRTOS/ARM_CM3/port.c **** #ifdef configTASK_RETURN_ADDRESS
 100:FreeRTOS/ARM_CM3/port.c **** 	#define portTASK_RETURN_ADDRESS	configTASK_RETURN_ADDRESS
 101:FreeRTOS/ARM_CM3/port.c **** #else
 102:FreeRTOS/ARM_CM3/port.c **** 	#define portTASK_RETURN_ADDRESS	prvTaskExitError
 103:FreeRTOS/ARM_CM3/port.c **** #endif
 104:FreeRTOS/ARM_CM3/port.c **** 
 105:FreeRTOS/ARM_CM3/port.c **** /*
 106:FreeRTOS/ARM_CM3/port.c ****  * Setup the timer to generate the tick interrupts.  The implementation in this
 107:FreeRTOS/ARM_CM3/port.c ****  * file is weak to allow application writers to change the timer used to
 108:FreeRTOS/ARM_CM3/port.c ****  * generate the tick interrupt.
 109:FreeRTOS/ARM_CM3/port.c ****  */
 110:FreeRTOS/ARM_CM3/port.c **** void vPortSetupTimerInterrupt( void );
 111:FreeRTOS/ARM_CM3/port.c **** 
 112:FreeRTOS/ARM_CM3/port.c **** /*
 113:FreeRTOS/ARM_CM3/port.c ****  * Exception handlers.
 114:FreeRTOS/ARM_CM3/port.c ****  */
 115:FreeRTOS/ARM_CM3/port.c **** void xPortPendSVHandler( void ) __attribute__ (( naked ));
 116:FreeRTOS/ARM_CM3/port.c **** void xPortSysTickHandler( void );
 117:FreeRTOS/ARM_CM3/port.c **** void vPortSVCHandler( void ) __attribute__ (( naked ));
 118:FreeRTOS/ARM_CM3/port.c **** 
 119:FreeRTOS/ARM_CM3/port.c **** /*
 120:FreeRTOS/ARM_CM3/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 121:FreeRTOS/ARM_CM3/port.c ****  */
 122:FreeRTOS/ARM_CM3/port.c **** static void prvPortStartFirstTask( void ) __attribute__ (( naked ));
 123:FreeRTOS/ARM_CM3/port.c **** 
 124:FreeRTOS/ARM_CM3/port.c **** /*
 125:FreeRTOS/ARM_CM3/port.c ****  * Used to catch tasks that attempt to return from their implementing function.
 126:FreeRTOS/ARM_CM3/port.c ****  */
 127:FreeRTOS/ARM_CM3/port.c **** static void prvTaskExitError( void );
 128:FreeRTOS/ARM_CM3/port.c **** 
 129:FreeRTOS/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 130:FreeRTOS/ARM_CM3/port.c **** 
 131:FreeRTOS/ARM_CM3/port.c **** /* Each task maintains its own interrupt status in the critical nesting
 132:FreeRTOS/ARM_CM3/port.c **** variable. */
 133:FreeRTOS/ARM_CM3/port.c **** static UBaseType_t uxCriticalNesting = 0xaaaaaaaa;
 134:FreeRTOS/ARM_CM3/port.c **** 
 135:FreeRTOS/ARM_CM3/port.c **** /*
 136:FreeRTOS/ARM_CM3/port.c ****  * The number of SysTick increments that make up one tick period.
 137:FreeRTOS/ARM_CM3/port.c ****  */
 138:FreeRTOS/ARM_CM3/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 139:FreeRTOS/ARM_CM3/port.c **** 	static uint32_t ulTimerCountsForOneTick = 0;
 140:FreeRTOS/ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 141:FreeRTOS/ARM_CM3/port.c **** 
 142:FreeRTOS/ARM_CM3/port.c **** /*
 143:FreeRTOS/ARM_CM3/port.c ****  * The maximum number of tick periods that can be suppressed is limited by the
 144:FreeRTOS/ARM_CM3/port.c ****  * 24 bit resolution of the SysTick timer.
 145:FreeRTOS/ARM_CM3/port.c ****  */
 146:FreeRTOS/ARM_CM3/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s 			page 4


 147:FreeRTOS/ARM_CM3/port.c **** 	static uint32_t xMaximumPossibleSuppressedTicks = 0;
 148:FreeRTOS/ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 149:FreeRTOS/ARM_CM3/port.c **** 
 150:FreeRTOS/ARM_CM3/port.c **** /*
 151:FreeRTOS/ARM_CM3/port.c ****  * Compensate for the CPU cycles that pass while the SysTick is stopped (low
 152:FreeRTOS/ARM_CM3/port.c ****  * power functionality only.
 153:FreeRTOS/ARM_CM3/port.c ****  */
 154:FreeRTOS/ARM_CM3/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 155:FreeRTOS/ARM_CM3/port.c **** 	static uint32_t ulStoppedTimerCompensation = 0;
 156:FreeRTOS/ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 157:FreeRTOS/ARM_CM3/port.c **** 
 158:FreeRTOS/ARM_CM3/port.c **** /*
 159:FreeRTOS/ARM_CM3/port.c ****  * Used by the portASSERT_IF_INTERRUPT_PRIORITY_INVALID() macro to ensure
 160:FreeRTOS/ARM_CM3/port.c ****  * FreeRTOS API functions are not called from interrupts that have been assigned
 161:FreeRTOS/ARM_CM3/port.c ****  * a priority above configMAX_SYSCALL_INTERRUPT_PRIORITY.
 162:FreeRTOS/ARM_CM3/port.c ****  */
 163:FreeRTOS/ARM_CM3/port.c **** #if( configASSERT_DEFINED == 1 )
 164:FreeRTOS/ARM_CM3/port.c **** 	 static uint8_t ucMaxSysCallPriority = 0;
 165:FreeRTOS/ARM_CM3/port.c **** 	 static uint32_t ulMaxPRIGROUPValue = 0;
 166:FreeRTOS/ARM_CM3/port.c **** 	 static const volatile uint8_t * const pcInterruptPriorityRegisters = ( const volatile uint8_t * c
 167:FreeRTOS/ARM_CM3/port.c **** #endif /* configASSERT_DEFINED */
 168:FreeRTOS/ARM_CM3/port.c **** 
 169:FreeRTOS/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 170:FreeRTOS/ARM_CM3/port.c **** 
 171:FreeRTOS/ARM_CM3/port.c **** /*
 172:FreeRTOS/ARM_CM3/port.c ****  * See header file for description.
 173:FreeRTOS/ARM_CM3/port.c ****  */
 174:FreeRTOS/ARM_CM3/port.c **** StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParam
 175:FreeRTOS/ARM_CM3/port.c **** {
 176:FreeRTOS/ARM_CM3/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 177:FreeRTOS/ARM_CM3/port.c **** 	interrupt. */
 178:FreeRTOS/ARM_CM3/port.c **** 	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of int
 179:FreeRTOS/ARM_CM3/port.c **** 	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 180:FreeRTOS/ARM_CM3/port.c **** 	pxTopOfStack--;
 181:FreeRTOS/ARM_CM3/port.c **** 	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 182:FreeRTOS/ARM_CM3/port.c **** 	pxTopOfStack--;
 183:FreeRTOS/ARM_CM3/port.c **** 	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 184:FreeRTOS/ARM_CM3/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 185:FreeRTOS/ARM_CM3/port.c **** 	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 186:FreeRTOS/ARM_CM3/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 187:FreeRTOS/ARM_CM3/port.c **** 
 188:FreeRTOS/ARM_CM3/port.c **** 	return pxTopOfStack;
 189:FreeRTOS/ARM_CM3/port.c **** }
 190:FreeRTOS/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 191:FreeRTOS/ARM_CM3/port.c **** 
 192:FreeRTOS/ARM_CM3/port.c **** static void prvTaskExitError( void )
 193:FreeRTOS/ARM_CM3/port.c **** {
  27              		.loc 1 193 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 82B0     		sub	sp, sp, #8
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
 194:FreeRTOS/ARM_CM3/port.c **** volatile uint32_t ulDummy = 0UL;
  35              		.loc 1 194 0
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s 			page 5


  36 0002 0023     		movs	r3, #0
  37 0004 0193     		str	r3, [sp, #4]
  38              	.LBB12:
  39              	.LBB13:
  40              		.file 2 "FreeRTOS/ARM_CM3/portmacro.h"
   1:FreeRTOS/ARM_CM3/portmacro.h **** /*
   2:FreeRTOS/ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.1.1
   3:FreeRTOS/ARM_CM3/portmacro.h ****  * Copyright (C) 2018 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/ARM_CM3/portmacro.h ****  *
   5:FreeRTOS/ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:FreeRTOS/ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:FreeRTOS/ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:FreeRTOS/ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:FreeRTOS/ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:FreeRTOS/ARM_CM3/portmacro.h ****  * subject to the following conditions:
  11:FreeRTOS/ARM_CM3/portmacro.h ****  *
  12:FreeRTOS/ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:FreeRTOS/ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  14:FreeRTOS/ARM_CM3/portmacro.h ****  *
  15:FreeRTOS/ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:FreeRTOS/ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:FreeRTOS/ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:FreeRTOS/ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:FreeRTOS/ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:FreeRTOS/ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:FreeRTOS/ARM_CM3/portmacro.h ****  *
  22:FreeRTOS/ARM_CM3/portmacro.h ****  * http://www.FreeRTOS.org
  23:FreeRTOS/ARM_CM3/portmacro.h ****  * http://aws.amazon.com/freertos
  24:FreeRTOS/ARM_CM3/portmacro.h ****  *
  25:FreeRTOS/ARM_CM3/portmacro.h ****  * 1 tab == 4 spaces!
  26:FreeRTOS/ARM_CM3/portmacro.h ****  */
  27:FreeRTOS/ARM_CM3/portmacro.h **** 
  28:FreeRTOS/ARM_CM3/portmacro.h **** 
  29:FreeRTOS/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  30:FreeRTOS/ARM_CM3/portmacro.h **** #define PORTMACRO_H
  31:FreeRTOS/ARM_CM3/portmacro.h **** 
  32:FreeRTOS/ARM_CM3/portmacro.h **** #ifdef __cplusplus
  33:FreeRTOS/ARM_CM3/portmacro.h **** extern "C" {
  34:FreeRTOS/ARM_CM3/portmacro.h **** #endif
  35:FreeRTOS/ARM_CM3/portmacro.h **** 
  36:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  37:FreeRTOS/ARM_CM3/portmacro.h ****  * Port specific definitions.
  38:FreeRTOS/ARM_CM3/portmacro.h ****  *
  39:FreeRTOS/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:FreeRTOS/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  41:FreeRTOS/ARM_CM3/portmacro.h ****  *
  42:FreeRTOS/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  43:FreeRTOS/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  44:FreeRTOS/ARM_CM3/portmacro.h ****  */
  45:FreeRTOS/ARM_CM3/portmacro.h **** 
  46:FreeRTOS/ARM_CM3/portmacro.h **** /* Type definitions. */
  47:FreeRTOS/ARM_CM3/portmacro.h **** #define portCHAR		char
  48:FreeRTOS/ARM_CM3/portmacro.h **** #define portFLOAT		float
  49:FreeRTOS/ARM_CM3/portmacro.h **** #define portDOUBLE		double
  50:FreeRTOS/ARM_CM3/portmacro.h **** #define portLONG		long
  51:FreeRTOS/ARM_CM3/portmacro.h **** #define portSHORT		short
  52:FreeRTOS/ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s 			page 6


  53:FreeRTOS/ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  54:FreeRTOS/ARM_CM3/portmacro.h **** 
  55:FreeRTOS/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:FreeRTOS/ARM_CM3/portmacro.h **** typedef long BaseType_t;
  57:FreeRTOS/ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  58:FreeRTOS/ARM_CM3/portmacro.h **** 
  59:FreeRTOS/ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:FreeRTOS/ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
  61:FreeRTOS/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:FreeRTOS/ARM_CM3/portmacro.h **** #else
  63:FreeRTOS/ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
  64:FreeRTOS/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:FreeRTOS/ARM_CM3/portmacro.h **** 
  66:FreeRTOS/ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:FreeRTOS/ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
  68:FreeRTOS/ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:FreeRTOS/ARM_CM3/portmacro.h **** #endif
  70:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  71:FreeRTOS/ARM_CM3/portmacro.h **** 
  72:FreeRTOS/ARM_CM3/portmacro.h **** /* Architecture specifics. */
  73:FreeRTOS/ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:FreeRTOS/ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:FreeRTOS/ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  77:FreeRTOS/ARM_CM3/portmacro.h **** 
  78:FreeRTOS/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  79:FreeRTOS/ARM_CM3/portmacro.h **** #define portYIELD() 															\
  80:FreeRTOS/ARM_CM3/portmacro.h **** {																				\
  81:FreeRTOS/ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:FreeRTOS/ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:FreeRTOS/ARM_CM3/portmacro.h **** 																				\
  84:FreeRTOS/ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:FreeRTOS/ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:FreeRTOS/ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:FreeRTOS/ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
  88:FreeRTOS/ARM_CM3/portmacro.h **** }
  89:FreeRTOS/ARM_CM3/portmacro.h **** 
  90:FreeRTOS/ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:FreeRTOS/ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:FreeRTOS/ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:FreeRTOS/ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  95:FreeRTOS/ARM_CM3/portmacro.h **** 
  96:FreeRTOS/ARM_CM3/portmacro.h **** /* Critical section management. */
  97:FreeRTOS/ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
  98:FreeRTOS/ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
  99:FreeRTOS/ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:FreeRTOS/ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:FreeRTOS/ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:FreeRTOS/ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:FreeRTOS/ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:FreeRTOS/ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:FreeRTOS/ARM_CM3/portmacro.h **** 
 106:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 107:FreeRTOS/ARM_CM3/portmacro.h **** 
 108:FreeRTOS/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:FreeRTOS/ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s 			page 7


 110:FreeRTOS/ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 111:FreeRTOS/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:FreeRTOS/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 114:FreeRTOS/ARM_CM3/portmacro.h **** 
 115:FreeRTOS/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 116:FreeRTOS/ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:FreeRTOS/ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:FreeRTOS/ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:FreeRTOS/ARM_CM3/portmacro.h **** #endif
 120:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 121:FreeRTOS/ARM_CM3/portmacro.h **** 
 122:FreeRTOS/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 123:FreeRTOS/ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:FreeRTOS/ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:FreeRTOS/ARM_CM3/portmacro.h **** #endif
 126:FreeRTOS/ARM_CM3/portmacro.h **** 
 127:FreeRTOS/ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:FreeRTOS/ARM_CM3/portmacro.h **** 
 129:FreeRTOS/ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 130:FreeRTOS/ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:FreeRTOS/ARM_CM3/portmacro.h **** 	{
 132:FreeRTOS/ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 133:FreeRTOS/ARM_CM3/portmacro.h **** 
 134:FreeRTOS/ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:FreeRTOS/ARM_CM3/portmacro.h **** 		return ucReturn;
 136:FreeRTOS/ARM_CM3/portmacro.h **** 	}
 137:FreeRTOS/ARM_CM3/portmacro.h **** 
 138:FreeRTOS/ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 139:FreeRTOS/ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:FreeRTOS/ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:FreeRTOS/ARM_CM3/portmacro.h **** 	#endif
 142:FreeRTOS/ARM_CM3/portmacro.h **** 
 143:FreeRTOS/ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:FreeRTOS/ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:FreeRTOS/ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:FreeRTOS/ARM_CM3/portmacro.h **** 
 147:FreeRTOS/ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:FreeRTOS/ARM_CM3/portmacro.h **** 
 149:FreeRTOS/ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:FreeRTOS/ARM_CM3/portmacro.h **** 
 151:FreeRTOS/ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:FreeRTOS/ARM_CM3/portmacro.h **** 
 153:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 154:FreeRTOS/ARM_CM3/portmacro.h **** 
 155:FreeRTOS/ARM_CM3/portmacro.h **** #ifdef configASSERT
 156:FreeRTOS/ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:FreeRTOS/ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:FreeRTOS/ARM_CM3/portmacro.h **** #endif
 159:FreeRTOS/ARM_CM3/portmacro.h **** 
 160:FreeRTOS/ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 161:FreeRTOS/ARM_CM3/portmacro.h **** #define portNOP()
 162:FreeRTOS/ARM_CM3/portmacro.h **** 
 163:FreeRTOS/ARM_CM3/portmacro.h **** #define portINLINE	__inline
 164:FreeRTOS/ARM_CM3/portmacro.h **** 
 165:FreeRTOS/ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 166:FreeRTOS/ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s 			page 8


 167:FreeRTOS/ARM_CM3/portmacro.h **** #endif
 168:FreeRTOS/ARM_CM3/portmacro.h **** 
 169:FreeRTOS/ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:FreeRTOS/ARM_CM3/portmacro.h **** {
 171:FreeRTOS/ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:FreeRTOS/ARM_CM3/portmacro.h **** BaseType_t xReturn;
 173:FreeRTOS/ARM_CM3/portmacro.h **** 
 174:FreeRTOS/ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:FreeRTOS/ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:FreeRTOS/ARM_CM3/portmacro.h **** 
 177:FreeRTOS/ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:FreeRTOS/ARM_CM3/portmacro.h **** 	{
 179:FreeRTOS/ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 180:FreeRTOS/ARM_CM3/portmacro.h **** 	}
 181:FreeRTOS/ARM_CM3/portmacro.h **** 	else
 182:FreeRTOS/ARM_CM3/portmacro.h **** 	{
 183:FreeRTOS/ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 184:FreeRTOS/ARM_CM3/portmacro.h **** 	}
 185:FreeRTOS/ARM_CM3/portmacro.h **** 
 186:FreeRTOS/ARM_CM3/portmacro.h **** 	return xReturn;
 187:FreeRTOS/ARM_CM3/portmacro.h **** }
 188:FreeRTOS/ARM_CM3/portmacro.h **** 
 189:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 190:FreeRTOS/ARM_CM3/portmacro.h **** 
 191:FreeRTOS/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:FreeRTOS/ARM_CM3/portmacro.h **** {
 193:FreeRTOS/ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 194:FreeRTOS/ARM_CM3/portmacro.h **** 
 195:FreeRTOS/ARM_CM3/portmacro.h **** 	__asm volatile
  41              		.loc 2 195 0
  42              		.syntax unified
  43              	@ 195 "FreeRTOS/ARM_CM3/portmacro.h" 1
  44 0006 4FF0BF03 			mov r3, #191												
  45 000a 83F31188 		msr basepri, r3											
  46 000e BFF36F8F 		isb														
  47 0012 BFF34F8F 		dsb														
  48              	
  49              	@ 0 "" 2
  50              	.LVL0:
  51              		.thumb
  52              		.syntax unified
  53              	.L2:
  54              	.LBE13:
  55              	.LBE12:
 195:FreeRTOS/ARM_CM3/port.c **** 
 196:FreeRTOS/ARM_CM3/port.c **** 	/* A function that implements a task must not exit or attempt to return to
 197:FreeRTOS/ARM_CM3/port.c **** 	its caller as there is nothing to return to.  If a task wants to exit it
 198:FreeRTOS/ARM_CM3/port.c **** 	should instead call vTaskDelete( NULL ).
 199:FreeRTOS/ARM_CM3/port.c **** 
 200:FreeRTOS/ARM_CM3/port.c **** 	Artificially force an assert() to be triggered if configASSERT() is
 201:FreeRTOS/ARM_CM3/port.c **** 	defined, then stop here so application writers can catch the error. */
 202:FreeRTOS/ARM_CM3/port.c **** 	configASSERT( uxCriticalNesting == ~0UL );
 203:FreeRTOS/ARM_CM3/port.c **** 	portDISABLE_INTERRUPTS();
 204:FreeRTOS/ARM_CM3/port.c **** 	while( ulDummy == 0 )
  56              		.loc 1 204 0 discriminator 1
  57 0016 019B     		ldr	r3, [sp, #4]
  58 0018 002B     		cmp	r3, #0
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s 			page 9


  59 001a FCD0     		beq	.L2
 205:FreeRTOS/ARM_CM3/port.c **** 	{
 206:FreeRTOS/ARM_CM3/port.c **** 		/* This file calls prvTaskExitError() after the scheduler has been
 207:FreeRTOS/ARM_CM3/port.c **** 		started to remove a compiler warning about the function being defined
 208:FreeRTOS/ARM_CM3/port.c **** 		but never called.  ulDummy is used purely to quieten other warnings
 209:FreeRTOS/ARM_CM3/port.c **** 		about code appearing after this function is called - making ulDummy
 210:FreeRTOS/ARM_CM3/port.c **** 		volatile makes the compiler think the function could return and
 211:FreeRTOS/ARM_CM3/port.c **** 		therefore not output an 'unreachable code' warning for code that appears
 212:FreeRTOS/ARM_CM3/port.c **** 		after it. */
 213:FreeRTOS/ARM_CM3/port.c **** 	}
 214:FreeRTOS/ARM_CM3/port.c **** }
  60              		.loc 1 214 0
  61 001c 02B0     		add	sp, sp, #8
  62              	.LCFI1:
  63              		.cfi_def_cfa_offset 0
  64              		@ sp needed
  65 001e 7047     		bx	lr
  66              		.cfi_endproc
  67              	.LFE33:
  69              		.section	.text.prvPortStartFirstTask,"ax",%progbits
  70              		.align	2
  71              		.thumb
  72              		.thumb_func
  74              	prvPortStartFirstTask:
  75              	.LFB35:
 215:FreeRTOS/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 216:FreeRTOS/ARM_CM3/port.c **** 
 217:FreeRTOS/ARM_CM3/port.c **** void vPortSVCHandler( void )
 218:FreeRTOS/ARM_CM3/port.c **** {
 219:FreeRTOS/ARM_CM3/port.c **** 	__asm volatile (
 220:FreeRTOS/ARM_CM3/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 221:FreeRTOS/ARM_CM3/port.c **** 					"	ldr r1, [r3]					\n" /* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 222:FreeRTOS/ARM_CM3/port.c **** 					"	ldr r0, [r1]					\n" /* The first item in pxCurrentTCB is the task top of stack. */
 223:FreeRTOS/ARM_CM3/port.c **** 					"	ldmia r0!, {r4-r11}				\n" /* Pop the registers that are not automatically saved on exceptio
 224:FreeRTOS/ARM_CM3/port.c **** 					"	msr psp, r0						\n" /* Restore the task stack pointer. */
 225:FreeRTOS/ARM_CM3/port.c **** 					"	isb								\n"
 226:FreeRTOS/ARM_CM3/port.c **** 					"	mov r0, #0 						\n"
 227:FreeRTOS/ARM_CM3/port.c **** 					"	msr	basepri, r0					\n"
 228:FreeRTOS/ARM_CM3/port.c **** 					"	orr r14, #0xd					\n"
 229:FreeRTOS/ARM_CM3/port.c **** 					"	bx r14							\n"
 230:FreeRTOS/ARM_CM3/port.c **** 					"									\n"
 231:FreeRTOS/ARM_CM3/port.c **** 					"	.align 4						\n"
 232:FreeRTOS/ARM_CM3/port.c **** 					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 233:FreeRTOS/ARM_CM3/port.c **** 				);
 234:FreeRTOS/ARM_CM3/port.c **** }
 235:FreeRTOS/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 236:FreeRTOS/ARM_CM3/port.c **** 
 237:FreeRTOS/ARM_CM3/port.c **** static void prvPortStartFirstTask( void )
 238:FreeRTOS/ARM_CM3/port.c **** {
  76              		.loc 1 238 0
  77              		.cfi_startproc
  78              		@ Naked Function: prologue and epilogue provided by programmer.
  79              		@ args = 0, pretend = 0, frame = 0
  80              		@ frame_needed = 0, uses_anonymous_args = 0
 239:FreeRTOS/ARM_CM3/port.c **** 	__asm volatile(
  81              		.loc 1 239 0
  82              		.syntax unified
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s 			page 10


  83              	@ 239 "FreeRTOS/ARM_CM3/port.c" 1
  84 0000 0648     		 ldr r0, =0xE000ED08 	
  85 0002 0068     	 ldr r0, [r0] 			
  86 0004 0068     	 ldr r0, [r0] 			
  87 0006 80F30888 	 msr msp, r0			
  88 000a 62B6     	 cpsie i				
  89 000c 61B6     	 cpsie f				
  90 000e BFF34F8F 	 dsb					
  91 0012 BFF36F8F 	 isb					
  92 0016 00DF     	 svc 0					
  93 0018 00BF     	 nop					
  94              	
  95              	@ 0 "" 2
 240:FreeRTOS/ARM_CM3/port.c **** 					" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 241:FreeRTOS/ARM_CM3/port.c **** 					" ldr r0, [r0] 			\n"
 242:FreeRTOS/ARM_CM3/port.c **** 					" ldr r0, [r0] 			\n"
 243:FreeRTOS/ARM_CM3/port.c **** 					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
 244:FreeRTOS/ARM_CM3/port.c **** 					" cpsie i				\n" /* Globally enable interrupts. */
 245:FreeRTOS/ARM_CM3/port.c **** 					" cpsie f				\n"
 246:FreeRTOS/ARM_CM3/port.c **** 					" dsb					\n"
 247:FreeRTOS/ARM_CM3/port.c **** 					" isb					\n"
 248:FreeRTOS/ARM_CM3/port.c **** 					" svc 0					\n" /* System call to start first task. */
 249:FreeRTOS/ARM_CM3/port.c **** 					" nop					\n"
 250:FreeRTOS/ARM_CM3/port.c **** 				);
 251:FreeRTOS/ARM_CM3/port.c **** }
  96              		.loc 1 251 0
  97              		.thumb
  98              		.syntax unified
  99              		.cfi_endproc
 100              	.LFE35:
 102 001a 0000     		.section	.text.pxPortInitialiseStack,"ax",%progbits
 103              		.align	2
 104              		.global	pxPortInitialiseStack
 105              		.thumb
 106              		.thumb_func
 108              	pxPortInitialiseStack:
 109              	.LFB32:
 175:FreeRTOS/ARM_CM3/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 110              		.loc 1 175 0
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 0, uses_anonymous_args = 0
 114              		@ link register save eliminated.
 115              	.LVL1:
 179:FreeRTOS/ARM_CM3/port.c **** 	pxTopOfStack--;
 116              		.loc 1 179 0
 117 0000 4FF08073 		mov	r3, #16777216
 118 0004 40F8043C 		str	r3, [r0, #-4]
 119              	.LVL2:
 181:FreeRTOS/ARM_CM3/port.c **** 	pxTopOfStack--;
 120              		.loc 1 181 0
 121 0008 21F00101 		bic	r1, r1, #1
 122              	.LVL3:
 123 000c 40F8081C 		str	r1, [r0, #-8]
 124              	.LVL4:
 183:FreeRTOS/ARM_CM3/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 125              		.loc 1 183 0
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s 			page 11


 126 0010 034B     		ldr	r3, .L6
 127 0012 40F80C3C 		str	r3, [r0, #-12]
 128              	.LVL5:
 185:FreeRTOS/ARM_CM3/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 129              		.loc 1 185 0
 130 0016 40F8202C 		str	r2, [r0, #-32]
 131              	.LVL6:
 189:FreeRTOS/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 132              		.loc 1 189 0
 133 001a 4038     		subs	r0, r0, #64
 134              	.LVL7:
 135 001c 7047     		bx	lr
 136              	.L7:
 137 001e 00BF     		.align	2
 138              	.L6:
 139 0020 00000000 		.word	prvTaskExitError
 140              		.cfi_endproc
 141              	.LFE32:
 143              		.section	.text.vPortSVCHandler,"ax",%progbits
 144              		.align	2
 145              		.global	vPortSVCHandler
 146              		.thumb
 147              		.thumb_func
 149              	vPortSVCHandler:
 150              	.LFB34:
 218:FreeRTOS/ARM_CM3/port.c **** 	__asm volatile (
 151              		.loc 1 218 0
 152              		.cfi_startproc
 153              		@ Naked Function: prologue and epilogue provided by programmer.
 154              		@ args = 0, pretend = 0, frame = 0
 155              		@ frame_needed = 0, uses_anonymous_args = 0
 219:FreeRTOS/ARM_CM3/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 156              		.loc 1 219 0
 157              		.syntax unified
 158              	@ 219 "FreeRTOS/ARM_CM3/port.c" 1
 159 0000 074B     			ldr	r3, pxCurrentTCBConst2		
 160 0002 1968     		ldr r1, [r3]					
 161 0004 0868     		ldr r0, [r1]					
 162 0006 B0E8F00F 		ldmia r0!, {r4-r11}				
 163 000a 80F30988 		msr psp, r0						
 164 000e BFF36F8F 		isb								
 165 0012 4FF00000 		mov r0, #0 						
 166 0016 80F31188 		msr	basepri, r0					
 167 001a 4EF00D0E 		orr r14, #0xd					
 168 001e 7047     		bx r14							
 169              										
 170              		.align 4						
 171 0020 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 172              	
 173              	@ 0 "" 2
 234:FreeRTOS/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 174              		.loc 1 234 0
 175              		.thumb
 176              		.syntax unified
 177              		.cfi_endproc
 178              	.LFE34:
 180              		.section	.text.vPortEndScheduler,"ax",%progbits
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s 			page 12


 181              		.align	2
 182              		.global	vPortEndScheduler
 183              		.thumb
 184              		.thumb_func
 186              	vPortEndScheduler:
 187              	.LFB37:
 252:FreeRTOS/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 253:FreeRTOS/ARM_CM3/port.c **** 
 254:FreeRTOS/ARM_CM3/port.c **** /*
 255:FreeRTOS/ARM_CM3/port.c ****  * See header file for description.
 256:FreeRTOS/ARM_CM3/port.c ****  */
 257:FreeRTOS/ARM_CM3/port.c **** BaseType_t xPortStartScheduler( void )
 258:FreeRTOS/ARM_CM3/port.c **** {
 259:FreeRTOS/ARM_CM3/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 260:FreeRTOS/ARM_CM3/port.c **** 	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
 261:FreeRTOS/ARM_CM3/port.c **** 	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );
 262:FreeRTOS/ARM_CM3/port.c **** 
 263:FreeRTOS/ARM_CM3/port.c **** 	#if( configASSERT_DEFINED == 1 )
 264:FreeRTOS/ARM_CM3/port.c **** 	{
 265:FreeRTOS/ARM_CM3/port.c **** 		volatile uint32_t ulOriginalPriority;
 266:FreeRTOS/ARM_CM3/port.c **** 		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_I
 267:FreeRTOS/ARM_CM3/port.c **** 		volatile uint8_t ucMaxPriorityValue;
 268:FreeRTOS/ARM_CM3/port.c **** 
 269:FreeRTOS/ARM_CM3/port.c **** 		/* Determine the maximum priority from which ISR safe FreeRTOS API
 270:FreeRTOS/ARM_CM3/port.c **** 		functions can be called.  ISR safe functions are those that end in
 271:FreeRTOS/ARM_CM3/port.c **** 		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
 272:FreeRTOS/ARM_CM3/port.c **** 		ensure interrupt entry is as fast and simple as possible.
 273:FreeRTOS/ARM_CM3/port.c **** 
 274:FreeRTOS/ARM_CM3/port.c **** 		Save the interrupt priority value that is about to be clobbered. */
 275:FreeRTOS/ARM_CM3/port.c **** 		ulOriginalPriority = *pucFirstUserPriorityRegister;
 276:FreeRTOS/ARM_CM3/port.c **** 
 277:FreeRTOS/ARM_CM3/port.c **** 		/* Determine the number of priority bits available.  First write to all
 278:FreeRTOS/ARM_CM3/port.c **** 		possible bits. */
 279:FreeRTOS/ARM_CM3/port.c **** 		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 280:FreeRTOS/ARM_CM3/port.c **** 
 281:FreeRTOS/ARM_CM3/port.c **** 		/* Read the value back to see how many bits stuck. */
 282:FreeRTOS/ARM_CM3/port.c **** 		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 283:FreeRTOS/ARM_CM3/port.c **** 
 284:FreeRTOS/ARM_CM3/port.c **** 		/* Use the same mask on the maximum system call priority. */
 285:FreeRTOS/ARM_CM3/port.c **** 		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 286:FreeRTOS/ARM_CM3/port.c **** 
 287:FreeRTOS/ARM_CM3/port.c **** 		/* Calculate the maximum acceptable priority group value for the number
 288:FreeRTOS/ARM_CM3/port.c **** 		of bits read back. */
 289:FreeRTOS/ARM_CM3/port.c **** 		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 290:FreeRTOS/ARM_CM3/port.c **** 		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 291:FreeRTOS/ARM_CM3/port.c **** 		{
 292:FreeRTOS/ARM_CM3/port.c **** 			ulMaxPRIGROUPValue--;
 293:FreeRTOS/ARM_CM3/port.c **** 			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 294:FreeRTOS/ARM_CM3/port.c **** 		}
 295:FreeRTOS/ARM_CM3/port.c **** 
 296:FreeRTOS/ARM_CM3/port.c **** 		#ifdef __NVIC_PRIO_BITS
 297:FreeRTOS/ARM_CM3/port.c **** 		{
 298:FreeRTOS/ARM_CM3/port.c **** 			/* Check the CMSIS configuration that defines the number of
 299:FreeRTOS/ARM_CM3/port.c **** 			priority bits matches the number of priority bits actually queried
 300:FreeRTOS/ARM_CM3/port.c **** 			from the hardware. */
 301:FreeRTOS/ARM_CM3/port.c **** 			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 302:FreeRTOS/ARM_CM3/port.c **** 		}
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s 			page 13


 303:FreeRTOS/ARM_CM3/port.c **** 		#endif
 304:FreeRTOS/ARM_CM3/port.c **** 
 305:FreeRTOS/ARM_CM3/port.c **** 		#ifdef configPRIO_BITS
 306:FreeRTOS/ARM_CM3/port.c **** 		{
 307:FreeRTOS/ARM_CM3/port.c **** 			/* Check the FreeRTOS configuration that defines the number of
 308:FreeRTOS/ARM_CM3/port.c **** 			priority bits matches the number of priority bits actually queried
 309:FreeRTOS/ARM_CM3/port.c **** 			from the hardware. */
 310:FreeRTOS/ARM_CM3/port.c **** 			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 311:FreeRTOS/ARM_CM3/port.c **** 		}
 312:FreeRTOS/ARM_CM3/port.c **** 		#endif
 313:FreeRTOS/ARM_CM3/port.c **** 
 314:FreeRTOS/ARM_CM3/port.c **** 		/* Shift the priority group value back to its position within the AIRCR
 315:FreeRTOS/ARM_CM3/port.c **** 		register. */
 316:FreeRTOS/ARM_CM3/port.c **** 		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 317:FreeRTOS/ARM_CM3/port.c **** 		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 318:FreeRTOS/ARM_CM3/port.c **** 
 319:FreeRTOS/ARM_CM3/port.c **** 		/* Restore the clobbered interrupt priority register to its original
 320:FreeRTOS/ARM_CM3/port.c **** 		value. */
 321:FreeRTOS/ARM_CM3/port.c **** 		*pucFirstUserPriorityRegister = ulOriginalPriority;
 322:FreeRTOS/ARM_CM3/port.c **** 	}
 323:FreeRTOS/ARM_CM3/port.c **** 	#endif /* conifgASSERT_DEFINED */
 324:FreeRTOS/ARM_CM3/port.c **** 
 325:FreeRTOS/ARM_CM3/port.c **** 	/* Make PendSV and SysTick the lowest priority interrupts. */
 326:FreeRTOS/ARM_CM3/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 327:FreeRTOS/ARM_CM3/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 328:FreeRTOS/ARM_CM3/port.c **** 
 329:FreeRTOS/ARM_CM3/port.c **** 	/* Start the timer that generates the tick ISR.  Interrupts are disabled
 330:FreeRTOS/ARM_CM3/port.c **** 	here already. */
 331:FreeRTOS/ARM_CM3/port.c **** 	vPortSetupTimerInterrupt();
 332:FreeRTOS/ARM_CM3/port.c **** 
 333:FreeRTOS/ARM_CM3/port.c **** 	/* Initialise the critical nesting count ready for the first task. */
 334:FreeRTOS/ARM_CM3/port.c **** 	uxCriticalNesting = 0;
 335:FreeRTOS/ARM_CM3/port.c **** 
 336:FreeRTOS/ARM_CM3/port.c **** 	/* Start the first task. */
 337:FreeRTOS/ARM_CM3/port.c **** 	prvPortStartFirstTask();
 338:FreeRTOS/ARM_CM3/port.c **** 
 339:FreeRTOS/ARM_CM3/port.c **** 	/* Should never get here as the tasks will now be executing!  Call the task
 340:FreeRTOS/ARM_CM3/port.c **** 	exit error function to prevent compiler warnings about a static function
 341:FreeRTOS/ARM_CM3/port.c **** 	not being called in the case that the application writer overrides this
 342:FreeRTOS/ARM_CM3/port.c **** 	functionality by defining configTASK_RETURN_ADDRESS.  Call
 343:FreeRTOS/ARM_CM3/port.c **** 	vTaskSwitchContext() so link time optimisation does not remove the
 344:FreeRTOS/ARM_CM3/port.c **** 	symbol. */
 345:FreeRTOS/ARM_CM3/port.c **** 	vTaskSwitchContext();
 346:FreeRTOS/ARM_CM3/port.c **** 	prvTaskExitError();
 347:FreeRTOS/ARM_CM3/port.c **** 
 348:FreeRTOS/ARM_CM3/port.c **** 	/* Should not get here! */
 349:FreeRTOS/ARM_CM3/port.c **** 	return 0;
 350:FreeRTOS/ARM_CM3/port.c **** }
 351:FreeRTOS/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 352:FreeRTOS/ARM_CM3/port.c **** 
 353:FreeRTOS/ARM_CM3/port.c **** void vPortEndScheduler( void )
 354:FreeRTOS/ARM_CM3/port.c **** {
 188              		.loc 1 354 0
 189              		.cfi_startproc
 190              		@ args = 0, pretend = 0, frame = 0
 191              		@ frame_needed = 0, uses_anonymous_args = 0
 192              		@ link register save eliminated.
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s 			page 14


 193 0000 7047     		bx	lr
 194              		.cfi_endproc
 195              	.LFE37:
 197 0002 00BF     		.section	.text.vPortEnterCritical,"ax",%progbits
 198              		.align	2
 199              		.global	vPortEnterCritical
 200              		.thumb
 201              		.thumb_func
 203              	vPortEnterCritical:
 204              	.LFB38:
 355:FreeRTOS/ARM_CM3/port.c **** 	/* Not implemented in ports where there is nothing to return to.
 356:FreeRTOS/ARM_CM3/port.c **** 	Artificially force an assert. */
 357:FreeRTOS/ARM_CM3/port.c **** 	configASSERT( uxCriticalNesting == 1000UL );
 358:FreeRTOS/ARM_CM3/port.c **** }
 359:FreeRTOS/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 360:FreeRTOS/ARM_CM3/port.c **** 
 361:FreeRTOS/ARM_CM3/port.c **** void vPortEnterCritical( void )
 362:FreeRTOS/ARM_CM3/port.c **** {
 205              		.loc 1 362 0
 206              		.cfi_startproc
 207              		@ args = 0, pretend = 0, frame = 0
 208              		@ frame_needed = 0, uses_anonymous_args = 0
 209              		@ link register save eliminated.
 210              	.LBB14:
 211              	.LBB15:
 212              		.loc 2 195 0
 213              		.syntax unified
 214              	@ 195 "FreeRTOS/ARM_CM3/portmacro.h" 1
 215 0000 4FF0BF03 			mov r3, #191												
 216 0004 83F31188 		msr basepri, r3											
 217 0008 BFF36F8F 		isb														
 218 000c BFF34F8F 		dsb														
 219              	
 220              	@ 0 "" 2
 221              		.thumb
 222              		.syntax unified
 223              	.LBE15:
 224              	.LBE14:
 363:FreeRTOS/ARM_CM3/port.c **** 	portDISABLE_INTERRUPTS();
 364:FreeRTOS/ARM_CM3/port.c **** 	uxCriticalNesting++;
 225              		.loc 1 364 0
 226 0010 024A     		ldr	r2, .L11
 227 0012 1368     		ldr	r3, [r2]
 228 0014 0133     		adds	r3, r3, #1
 229 0016 1360     		str	r3, [r2]
 230 0018 7047     		bx	lr
 231              	.L12:
 232 001a 00BF     		.align	2
 233              	.L11:
 234 001c 00000000 		.word	.LANCHOR0
 235              		.cfi_endproc
 236              	.LFE38:
 238              		.section	.text.vPortExitCritical,"ax",%progbits
 239              		.align	2
 240              		.global	vPortExitCritical
 241              		.thumb
 242              		.thumb_func
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s 			page 15


 244              	vPortExitCritical:
 245              	.LFB39:
 365:FreeRTOS/ARM_CM3/port.c **** 
 366:FreeRTOS/ARM_CM3/port.c **** 	/* This is not the interrupt safe version of the enter critical function so
 367:FreeRTOS/ARM_CM3/port.c **** 	assert() if it is being called from an interrupt context.  Only API
 368:FreeRTOS/ARM_CM3/port.c **** 	functions that end in "FromISR" can be used in an interrupt.  Only assert if
 369:FreeRTOS/ARM_CM3/port.c **** 	the critical nesting count is 1 to protect against recursive calls if the
 370:FreeRTOS/ARM_CM3/port.c **** 	assert function also uses a critical section. */
 371:FreeRTOS/ARM_CM3/port.c **** 	if( uxCriticalNesting == 1 )
 372:FreeRTOS/ARM_CM3/port.c **** 	{
 373:FreeRTOS/ARM_CM3/port.c **** 		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 374:FreeRTOS/ARM_CM3/port.c **** 	}
 375:FreeRTOS/ARM_CM3/port.c **** }
 376:FreeRTOS/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 377:FreeRTOS/ARM_CM3/port.c **** 
 378:FreeRTOS/ARM_CM3/port.c **** void vPortExitCritical( void )
 379:FreeRTOS/ARM_CM3/port.c **** {
 246              		.loc 1 379 0
 247              		.cfi_startproc
 248              		@ args = 0, pretend = 0, frame = 0
 249              		@ frame_needed = 0, uses_anonymous_args = 0
 250              		@ link register save eliminated.
 380:FreeRTOS/ARM_CM3/port.c **** 	configASSERT( uxCriticalNesting );
 381:FreeRTOS/ARM_CM3/port.c **** 	uxCriticalNesting--;
 251              		.loc 1 381 0
 252 0000 034A     		ldr	r2, .L15
 253 0002 1368     		ldr	r3, [r2]
 254 0004 013B     		subs	r3, r3, #1
 255 0006 1360     		str	r3, [r2]
 382:FreeRTOS/ARM_CM3/port.c **** 	if( uxCriticalNesting == 0 )
 256              		.loc 1 382 0
 257 0008 0BB9     		cbnz	r3, .L13
 258              	.LVL8:
 259              	.LBB16:
 260              	.LBB17:
 196:FreeRTOS/ARM_CM3/portmacro.h **** 	(
 197:FreeRTOS/ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n" \
 198:FreeRTOS/ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:FreeRTOS/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 200:FreeRTOS/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 201:FreeRTOS/ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:FreeRTOS/ARM_CM3/portmacro.h **** 	);
 203:FreeRTOS/ARM_CM3/portmacro.h **** }
 204:FreeRTOS/ARM_CM3/portmacro.h **** 
 205:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 206:FreeRTOS/ARM_CM3/portmacro.h **** 
 207:FreeRTOS/ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:FreeRTOS/ARM_CM3/portmacro.h **** {
 209:FreeRTOS/ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:FreeRTOS/ARM_CM3/portmacro.h **** 
 211:FreeRTOS/ARM_CM3/portmacro.h **** 	__asm volatile
 212:FreeRTOS/ARM_CM3/portmacro.h **** 	(
 213:FreeRTOS/ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:FreeRTOS/ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n" \
 215:FreeRTOS/ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:FreeRTOS/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 217:FreeRTOS/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s 			page 16


 218:FreeRTOS/ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:FreeRTOS/ARM_CM3/portmacro.h **** 	);
 220:FreeRTOS/ARM_CM3/portmacro.h **** 
 221:FreeRTOS/ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:FreeRTOS/ARM_CM3/portmacro.h **** 	warnings. */
 223:FreeRTOS/ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 224:FreeRTOS/ARM_CM3/portmacro.h **** }
 225:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 226:FreeRTOS/ARM_CM3/portmacro.h **** 
 227:FreeRTOS/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:FreeRTOS/ARM_CM3/portmacro.h **** {
 229:FreeRTOS/ARM_CM3/portmacro.h **** 	__asm volatile
 261              		.loc 2 229 0
 262              		.syntax unified
 263              	@ 229 "FreeRTOS/ARM_CM3/portmacro.h" 1
 264 000a 83F31188 			msr basepri, r3	
 265              	@ 0 "" 2
 266              	.LVL9:
 267              		.thumb
 268              		.syntax unified
 269              	.L13:
 270 000e 7047     		bx	lr
 271              	.L16:
 272              		.align	2
 273              	.L15:
 274 0010 00000000 		.word	.LANCHOR0
 275              	.LBE17:
 276              	.LBE16:
 277              		.cfi_endproc
 278              	.LFE39:
 280              		.section	.text.xPortPendSVHandler,"ax",%progbits
 281              		.align	2
 282              		.global	xPortPendSVHandler
 283              		.thumb
 284              		.thumb_func
 286              	xPortPendSVHandler:
 287              	.LFB40:
 383:FreeRTOS/ARM_CM3/port.c **** 	{
 384:FreeRTOS/ARM_CM3/port.c **** 		portENABLE_INTERRUPTS();
 385:FreeRTOS/ARM_CM3/port.c **** 	}
 386:FreeRTOS/ARM_CM3/port.c **** }
 387:FreeRTOS/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 388:FreeRTOS/ARM_CM3/port.c **** 
 389:FreeRTOS/ARM_CM3/port.c **** void xPortPendSVHandler( void )
 390:FreeRTOS/ARM_CM3/port.c **** {
 288              		.loc 1 390 0
 289              		.cfi_startproc
 290              		@ Naked Function: prologue and epilogue provided by programmer.
 291              		@ args = 0, pretend = 0, frame = 0
 292              		@ frame_needed = 0, uses_anonymous_args = 0
 391:FreeRTOS/ARM_CM3/port.c **** 	/* This is a naked function. */
 392:FreeRTOS/ARM_CM3/port.c **** 
 393:FreeRTOS/ARM_CM3/port.c **** 	__asm volatile
 293              		.loc 1 393 0
 294              		.syntax unified
 295              	@ 393 "FreeRTOS/ARM_CM3/port.c" 1
 296 0000 EFF30980 			mrs r0, psp							
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s 			page 17


 297 0004 BFF36F8F 		isb									
 298              											
 299 0008 0D4B     		ldr	r3, pxCurrentTCBConst			
 300 000a 1A68     		ldr	r2, [r3]						
 301              											
 302 000c 20E9F00F 		stmdb r0!, {r4-r11}					
 303 0010 1060     		str r0, [r2]						
 304              											
 305 0012 2DE90840 		stmdb sp!, {r3, r14}				
 306 0016 4FF0BF00 		mov r0, #191							
 307 001a 80F31188 		msr basepri, r0						
 308 001e FFF7FEFF 		bl vTaskSwitchContext				
 309 0022 4FF00000 		mov r0, #0							
 310 0026 80F31188 		msr basepri, r0						
 311 002a BDE80840 		ldmia sp!, {r3, r14}				
 312              											
 313 002e 1968     		ldr r1, [r3]						
 314 0030 0868     		ldr r0, [r1]						
 315 0032 B0E8F00F 		ldmia r0!, {r4-r11}					
 316 0036 80F30988 		msr psp, r0							
 317 003a BFF36F8F 		isb									
 318 003e 7047     		bx r14								
 319              											
 320              		.align 4							
 321 0040 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 322              	
 323              	@ 0 "" 2
 394:FreeRTOS/ARM_CM3/port.c **** 	(
 395:FreeRTOS/ARM_CM3/port.c **** 	"	mrs r0, psp							\n"
 396:FreeRTOS/ARM_CM3/port.c **** 	"	isb									\n"
 397:FreeRTOS/ARM_CM3/port.c **** 	"										\n"
 398:FreeRTOS/ARM_CM3/port.c **** 	"	ldr	r3, pxCurrentTCBConst			\n" /* Get the location of the current TCB. */
 399:FreeRTOS/ARM_CM3/port.c **** 	"	ldr	r2, [r3]						\n"
 400:FreeRTOS/ARM_CM3/port.c **** 	"										\n"
 401:FreeRTOS/ARM_CM3/port.c **** 	"	stmdb r0!, {r4-r11}					\n" /* Save the remaining registers. */
 402:FreeRTOS/ARM_CM3/port.c **** 	"	str r0, [r2]						\n" /* Save the new top of stack into the first member of the TCB. */
 403:FreeRTOS/ARM_CM3/port.c **** 	"										\n"
 404:FreeRTOS/ARM_CM3/port.c **** 	"	stmdb sp!, {r3, r14}				\n"
 405:FreeRTOS/ARM_CM3/port.c **** 	"	mov r0, %0							\n"
 406:FreeRTOS/ARM_CM3/port.c **** 	"	msr basepri, r0						\n"
 407:FreeRTOS/ARM_CM3/port.c **** 	"	bl vTaskSwitchContext				\n"
 408:FreeRTOS/ARM_CM3/port.c **** 	"	mov r0, #0							\n"
 409:FreeRTOS/ARM_CM3/port.c **** 	"	msr basepri, r0						\n"
 410:FreeRTOS/ARM_CM3/port.c **** 	"	ldmia sp!, {r3, r14}				\n"
 411:FreeRTOS/ARM_CM3/port.c **** 	"										\n" /* Restore the context, including the critical nesting count. */
 412:FreeRTOS/ARM_CM3/port.c **** 	"	ldr r1, [r3]						\n"
 413:FreeRTOS/ARM_CM3/port.c **** 	"	ldr r0, [r1]						\n" /* The first item in pxCurrentTCB is the task top of stack. */
 414:FreeRTOS/ARM_CM3/port.c **** 	"	ldmia r0!, {r4-r11}					\n" /* Pop the registers. */
 415:FreeRTOS/ARM_CM3/port.c **** 	"	msr psp, r0							\n"
 416:FreeRTOS/ARM_CM3/port.c **** 	"	isb									\n"
 417:FreeRTOS/ARM_CM3/port.c **** 	"	bx r14								\n"
 418:FreeRTOS/ARM_CM3/port.c **** 	"										\n"
 419:FreeRTOS/ARM_CM3/port.c **** 	"	.align 4							\n"
 420:FreeRTOS/ARM_CM3/port.c **** 	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
 421:FreeRTOS/ARM_CM3/port.c **** 	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
 422:FreeRTOS/ARM_CM3/port.c **** 	);
 423:FreeRTOS/ARM_CM3/port.c **** }
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s 			page 18


 324              		.loc 1 423 0
 325              		.thumb
 326              		.syntax unified
 327              		.cfi_endproc
 328              	.LFE40:
 330              		.section	.text.xPortSysTickHandler,"ax",%progbits
 331              		.align	2
 332              		.global	xPortSysTickHandler
 333              		.thumb
 334              		.thumb_func
 336              	xPortSysTickHandler:
 337              	.LFB41:
 424:FreeRTOS/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 425:FreeRTOS/ARM_CM3/port.c **** 
 426:FreeRTOS/ARM_CM3/port.c **** void xPortSysTickHandler( void )
 427:FreeRTOS/ARM_CM3/port.c **** {
 338              		.loc 1 427 0
 339              		.cfi_startproc
 340              		@ args = 0, pretend = 0, frame = 0
 341              		@ frame_needed = 0, uses_anonymous_args = 0
 342 0000 08B5     		push	{r3, lr}
 343              	.LCFI2:
 344              		.cfi_def_cfa_offset 8
 345              		.cfi_offset 3, -8
 346              		.cfi_offset 14, -4
 347              	.LBB18:
 348              	.LBB19:
 195:FreeRTOS/ARM_CM3/portmacro.h **** 	(
 349              		.loc 2 195 0
 350              		.syntax unified
 351              	@ 195 "FreeRTOS/ARM_CM3/portmacro.h" 1
 352 0002 4FF0BF03 			mov r3, #191												
 353 0006 83F31188 		msr basepri, r3											
 354 000a BFF36F8F 		isb														
 355 000e BFF34F8F 		dsb														
 356              	
 357              	@ 0 "" 2
 358              		.thumb
 359              		.syntax unified
 360              	.LBE19:
 361              	.LBE18:
 428:FreeRTOS/ARM_CM3/port.c **** 	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
 429:FreeRTOS/ARM_CM3/port.c **** 	executes all interrupts must be unmasked.  There is therefore no need to
 430:FreeRTOS/ARM_CM3/port.c **** 	save and then restore the interrupt mask value as its value is already
 431:FreeRTOS/ARM_CM3/port.c **** 	known. */
 432:FreeRTOS/ARM_CM3/port.c **** 	portDISABLE_INTERRUPTS();
 433:FreeRTOS/ARM_CM3/port.c **** 	{
 434:FreeRTOS/ARM_CM3/port.c **** 		/* Increment the RTOS tick. */
 435:FreeRTOS/ARM_CM3/port.c **** 		if( xTaskIncrementTick() != pdFALSE )
 362              		.loc 1 435 0
 363 0012 FFF7FEFF 		bl	xTaskIncrementTick
 364              	.LVL10:
 365 0016 18B1     		cbz	r0, .L19
 436:FreeRTOS/ARM_CM3/port.c **** 		{
 437:FreeRTOS/ARM_CM3/port.c **** 			/* A context switch is required.  Context switching is performed in
 438:FreeRTOS/ARM_CM3/port.c **** 			the PendSV interrupt.  Pend the PendSV interrupt. */
 439:FreeRTOS/ARM_CM3/port.c **** 			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s 			page 19


 366              		.loc 1 439 0
 367 0018 4FF08052 		mov	r2, #268435456
 368 001c 024B     		ldr	r3, .L21
 369 001e 1A60     		str	r2, [r3]
 370              	.L19:
 371              	.LVL11:
 372              	.LBB20:
 373              	.LBB21:
 374              		.loc 2 229 0
 375 0020 0023     		movs	r3, #0
 376              		.syntax unified
 377              	@ 229 "FreeRTOS/ARM_CM3/portmacro.h" 1
 378 0022 83F31188 			msr basepri, r3	
 379              	@ 0 "" 2
 380              	.LVL12:
 381              		.thumb
 382              		.syntax unified
 383 0026 08BD     		pop	{r3, pc}
 384              	.L22:
 385              		.align	2
 386              	.L21:
 387 0028 04ED00E0 		.word	-536810236
 388              	.LBE21:
 389              	.LBE20:
 390              		.cfi_endproc
 391              	.LFE41:
 393              		.section	.text.vPortSetupTimerInterrupt,"ax",%progbits
 394              		.align	2
 395              		.weak	vPortSetupTimerInterrupt
 396              		.thumb
 397              		.thumb_func
 399              	vPortSetupTimerInterrupt:
 400              	.LFB42:
 440:FreeRTOS/ARM_CM3/port.c **** 		}
 441:FreeRTOS/ARM_CM3/port.c **** 	}
 442:FreeRTOS/ARM_CM3/port.c **** 	portENABLE_INTERRUPTS();
 443:FreeRTOS/ARM_CM3/port.c **** }
 444:FreeRTOS/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 445:FreeRTOS/ARM_CM3/port.c **** 
 446:FreeRTOS/ARM_CM3/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 447:FreeRTOS/ARM_CM3/port.c **** 
 448:FreeRTOS/ARM_CM3/port.c **** 	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
 449:FreeRTOS/ARM_CM3/port.c **** 	{
 450:FreeRTOS/ARM_CM3/port.c **** 	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
 451:FreeRTOS/ARM_CM3/port.c **** 	TickType_t xModifiableIdleTime;
 452:FreeRTOS/ARM_CM3/port.c **** 
 453:FreeRTOS/ARM_CM3/port.c **** 		/* Make sure the SysTick reload value does not overflow the counter. */
 454:FreeRTOS/ARM_CM3/port.c **** 		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 455:FreeRTOS/ARM_CM3/port.c **** 		{
 456:FreeRTOS/ARM_CM3/port.c **** 			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 457:FreeRTOS/ARM_CM3/port.c **** 		}
 458:FreeRTOS/ARM_CM3/port.c **** 
 459:FreeRTOS/ARM_CM3/port.c **** 		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
 460:FreeRTOS/ARM_CM3/port.c **** 		is accounted for as best it can be, but using the tickless mode will
 461:FreeRTOS/ARM_CM3/port.c **** 		inevitably result in some tiny drift of the time maintained by the
 462:FreeRTOS/ARM_CM3/port.c **** 		kernel with respect to calendar time. */
 463:FreeRTOS/ARM_CM3/port.c **** 		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s 			page 20


 464:FreeRTOS/ARM_CM3/port.c **** 
 465:FreeRTOS/ARM_CM3/port.c **** 		/* Calculate the reload value required to wait xExpectedIdleTime
 466:FreeRTOS/ARM_CM3/port.c **** 		tick periods.  -1 is used because this code will execute part way
 467:FreeRTOS/ARM_CM3/port.c **** 		through one of the tick periods. */
 468:FreeRTOS/ARM_CM3/port.c **** 		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleT
 469:FreeRTOS/ARM_CM3/port.c **** 		if( ulReloadValue > ulStoppedTimerCompensation )
 470:FreeRTOS/ARM_CM3/port.c **** 		{
 471:FreeRTOS/ARM_CM3/port.c **** 			ulReloadValue -= ulStoppedTimerCompensation;
 472:FreeRTOS/ARM_CM3/port.c **** 		}
 473:FreeRTOS/ARM_CM3/port.c **** 
 474:FreeRTOS/ARM_CM3/port.c **** 		/* Enter a critical section but don't use the taskENTER_CRITICAL()
 475:FreeRTOS/ARM_CM3/port.c **** 		method as that will mask interrupts that should exit sleep mode. */
 476:FreeRTOS/ARM_CM3/port.c **** 		__asm volatile( "cpsid i" ::: "memory" );
 477:FreeRTOS/ARM_CM3/port.c **** 		__asm volatile( "dsb" );
 478:FreeRTOS/ARM_CM3/port.c **** 		__asm volatile( "isb" );
 479:FreeRTOS/ARM_CM3/port.c **** 
 480:FreeRTOS/ARM_CM3/port.c **** 		/* If a context switch is pending or a task is waiting for the scheduler
 481:FreeRTOS/ARM_CM3/port.c **** 		to be unsuspended then abandon the low power entry. */
 482:FreeRTOS/ARM_CM3/port.c **** 		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 483:FreeRTOS/ARM_CM3/port.c **** 		{
 484:FreeRTOS/ARM_CM3/port.c **** 			/* Restart from whatever is left in the count register to complete
 485:FreeRTOS/ARM_CM3/port.c **** 			this tick period. */
 486:FreeRTOS/ARM_CM3/port.c **** 			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 487:FreeRTOS/ARM_CM3/port.c **** 
 488:FreeRTOS/ARM_CM3/port.c **** 			/* Restart SysTick. */
 489:FreeRTOS/ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 490:FreeRTOS/ARM_CM3/port.c **** 
 491:FreeRTOS/ARM_CM3/port.c **** 			/* Reset the reload register to the value required for normal tick
 492:FreeRTOS/ARM_CM3/port.c **** 			periods. */
 493:FreeRTOS/ARM_CM3/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 494:FreeRTOS/ARM_CM3/port.c **** 
 495:FreeRTOS/ARM_CM3/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 496:FreeRTOS/ARM_CM3/port.c **** 			above. */
 497:FreeRTOS/ARM_CM3/port.c **** 			__asm volatile( "cpsie i" ::: "memory" );
 498:FreeRTOS/ARM_CM3/port.c **** 		}
 499:FreeRTOS/ARM_CM3/port.c **** 		else
 500:FreeRTOS/ARM_CM3/port.c **** 		{
 501:FreeRTOS/ARM_CM3/port.c **** 			/* Set the new reload value. */
 502:FreeRTOS/ARM_CM3/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 503:FreeRTOS/ARM_CM3/port.c **** 
 504:FreeRTOS/ARM_CM3/port.c **** 			/* Clear the SysTick count flag and set the count value back to
 505:FreeRTOS/ARM_CM3/port.c **** 			zero. */
 506:FreeRTOS/ARM_CM3/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 507:FreeRTOS/ARM_CM3/port.c **** 
 508:FreeRTOS/ARM_CM3/port.c **** 			/* Restart SysTick. */
 509:FreeRTOS/ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 510:FreeRTOS/ARM_CM3/port.c **** 
 511:FreeRTOS/ARM_CM3/port.c **** 			/* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
 512:FreeRTOS/ARM_CM3/port.c **** 			set its parameter to 0 to indicate that its implementation contains
 513:FreeRTOS/ARM_CM3/port.c **** 			its own wait for interrupt or wait for event instruction, and so wfi
 514:FreeRTOS/ARM_CM3/port.c **** 			should not be executed again.  However, the original expected idle
 515:FreeRTOS/ARM_CM3/port.c **** 			time variable must remain unmodified, so a copy is taken. */
 516:FreeRTOS/ARM_CM3/port.c **** 			xModifiableIdleTime = xExpectedIdleTime;
 517:FreeRTOS/ARM_CM3/port.c **** 			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 518:FreeRTOS/ARM_CM3/port.c **** 			if( xModifiableIdleTime > 0 )
 519:FreeRTOS/ARM_CM3/port.c **** 			{
 520:FreeRTOS/ARM_CM3/port.c **** 				__asm volatile( "dsb" ::: "memory" );
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s 			page 21


 521:FreeRTOS/ARM_CM3/port.c **** 				__asm volatile( "wfi" );
 522:FreeRTOS/ARM_CM3/port.c **** 				__asm volatile( "isb" );
 523:FreeRTOS/ARM_CM3/port.c **** 			}
 524:FreeRTOS/ARM_CM3/port.c **** 			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 525:FreeRTOS/ARM_CM3/port.c **** 
 526:FreeRTOS/ARM_CM3/port.c **** 			/* Re-enable interrupts to allow the interrupt that brought the MCU
 527:FreeRTOS/ARM_CM3/port.c **** 			out of sleep mode to execute immediately.  see comments above
 528:FreeRTOS/ARM_CM3/port.c **** 			__disable_interrupt() call above. */
 529:FreeRTOS/ARM_CM3/port.c **** 			__asm volatile( "cpsie i" ::: "memory" );
 530:FreeRTOS/ARM_CM3/port.c **** 			__asm volatile( "dsb" );
 531:FreeRTOS/ARM_CM3/port.c **** 			__asm volatile( "isb" );
 532:FreeRTOS/ARM_CM3/port.c **** 
 533:FreeRTOS/ARM_CM3/port.c **** 			/* Disable interrupts again because the clock is about to be stopped
 534:FreeRTOS/ARM_CM3/port.c **** 			and interrupts that execute while the clock is stopped will increase
 535:FreeRTOS/ARM_CM3/port.c **** 			any slippage between the time maintained by the RTOS and calendar
 536:FreeRTOS/ARM_CM3/port.c **** 			time. */
 537:FreeRTOS/ARM_CM3/port.c **** 			__asm volatile( "cpsid i" ::: "memory" );
 538:FreeRTOS/ARM_CM3/port.c **** 			__asm volatile( "dsb" );
 539:FreeRTOS/ARM_CM3/port.c **** 			__asm volatile( "isb" );
 540:FreeRTOS/ARM_CM3/port.c **** 
 541:FreeRTOS/ARM_CM3/port.c **** 			/* Disable the SysTick clock without reading the
 542:FreeRTOS/ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG register to ensure the
 543:FreeRTOS/ARM_CM3/port.c **** 			portNVIC_SYSTICK_COUNT_FLAG_BIT is not cleared if it is set.  Again,
 544:FreeRTOS/ARM_CM3/port.c **** 			the time the SysTick is stopped for is accounted for as best it can
 545:FreeRTOS/ARM_CM3/port.c **** 			be, but using the tickless mode will inevitably result in some tiny
 546:FreeRTOS/ARM_CM3/port.c **** 			drift of the time maintained by the kernel with respect to calendar
 547:FreeRTOS/ARM_CM3/port.c **** 			time*/
 548:FreeRTOS/ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 549:FreeRTOS/ARM_CM3/port.c **** 
 550:FreeRTOS/ARM_CM3/port.c **** 			/* Determine if the SysTick clock has already counted to zero and
 551:FreeRTOS/ARM_CM3/port.c **** 			been set back to the current reload value (the reload back being
 552:FreeRTOS/ARM_CM3/port.c **** 			correct for the entire expected idle time) or if the SysTick is yet
 553:FreeRTOS/ARM_CM3/port.c **** 			to count to zero (in which case an interrupt other than the SysTick
 554:FreeRTOS/ARM_CM3/port.c **** 			must have brought the system out of sleep mode). */
 555:FreeRTOS/ARM_CM3/port.c **** 			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 556:FreeRTOS/ARM_CM3/port.c **** 			{
 557:FreeRTOS/ARM_CM3/port.c **** 				uint32_t ulCalculatedLoadValue;
 558:FreeRTOS/ARM_CM3/port.c **** 
 559:FreeRTOS/ARM_CM3/port.c **** 				/* The tick interrupt is already pending, and the SysTick count
 560:FreeRTOS/ARM_CM3/port.c **** 				reloaded with ulReloadValue.  Reset the
 561:FreeRTOS/ARM_CM3/port.c **** 				portNVIC_SYSTICK_LOAD_REG with whatever remains of this tick
 562:FreeRTOS/ARM_CM3/port.c **** 				period. */
 563:FreeRTOS/ARM_CM3/port.c **** 				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_
 564:FreeRTOS/ARM_CM3/port.c **** 
 565:FreeRTOS/ARM_CM3/port.c **** 				/* Don't allow a tiny value, or values that have somehow
 566:FreeRTOS/ARM_CM3/port.c **** 				underflowed because the post sleep hook did something
 567:FreeRTOS/ARM_CM3/port.c **** 				that took too long. */
 568:FreeRTOS/ARM_CM3/port.c **** 				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimer
 569:FreeRTOS/ARM_CM3/port.c **** 				{
 570:FreeRTOS/ARM_CM3/port.c **** 					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 571:FreeRTOS/ARM_CM3/port.c **** 				}
 572:FreeRTOS/ARM_CM3/port.c **** 
 573:FreeRTOS/ARM_CM3/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 574:FreeRTOS/ARM_CM3/port.c **** 
 575:FreeRTOS/ARM_CM3/port.c **** 				/* As the pending tick will be processed as soon as this
 576:FreeRTOS/ARM_CM3/port.c **** 				function exits, the tick value maintained by the tick is stepped
 577:FreeRTOS/ARM_CM3/port.c **** 				forward by one less than the time spent waiting. */
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s 			page 22


 578:FreeRTOS/ARM_CM3/port.c **** 				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 579:FreeRTOS/ARM_CM3/port.c **** 			}
 580:FreeRTOS/ARM_CM3/port.c **** 			else
 581:FreeRTOS/ARM_CM3/port.c **** 			{
 582:FreeRTOS/ARM_CM3/port.c **** 				/* Something other than the tick interrupt ended the sleep.
 583:FreeRTOS/ARM_CM3/port.c **** 				Work out how long the sleep lasted rounded to complete tick
 584:FreeRTOS/ARM_CM3/port.c **** 				periods (not the ulReload value which accounted for part
 585:FreeRTOS/ARM_CM3/port.c **** 				ticks). */
 586:FreeRTOS/ARM_CM3/port.c **** 				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTI
 587:FreeRTOS/ARM_CM3/port.c **** 
 588:FreeRTOS/ARM_CM3/port.c **** 				/* How many complete tick periods passed while the processor
 589:FreeRTOS/ARM_CM3/port.c **** 				was waiting? */
 590:FreeRTOS/ARM_CM3/port.c **** 				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 591:FreeRTOS/ARM_CM3/port.c **** 
 592:FreeRTOS/ARM_CM3/port.c **** 				/* The reload value is set to whatever fraction of a single tick
 593:FreeRTOS/ARM_CM3/port.c **** 				period remains. */
 594:FreeRTOS/ARM_CM3/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulC
 595:FreeRTOS/ARM_CM3/port.c **** 			}
 596:FreeRTOS/ARM_CM3/port.c **** 
 597:FreeRTOS/ARM_CM3/port.c **** 			/* Restart SysTick so it runs from portNVIC_SYSTICK_LOAD_REG
 598:FreeRTOS/ARM_CM3/port.c **** 			again, then set portNVIC_SYSTICK_LOAD_REG back to its standard
 599:FreeRTOS/ARM_CM3/port.c **** 			value. */
 600:FreeRTOS/ARM_CM3/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 601:FreeRTOS/ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 602:FreeRTOS/ARM_CM3/port.c **** 			vTaskStepTick( ulCompleteTickPeriods );
 603:FreeRTOS/ARM_CM3/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 604:FreeRTOS/ARM_CM3/port.c **** 
 605:FreeRTOS/ARM_CM3/port.c **** 			/* Exit with interrpts enabled. */
 606:FreeRTOS/ARM_CM3/port.c **** 			__asm volatile( "cpsie i" ::: "memory" );
 607:FreeRTOS/ARM_CM3/port.c **** 		}
 608:FreeRTOS/ARM_CM3/port.c **** 	}
 609:FreeRTOS/ARM_CM3/port.c **** 
 610:FreeRTOS/ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 611:FreeRTOS/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 612:FreeRTOS/ARM_CM3/port.c **** 
 613:FreeRTOS/ARM_CM3/port.c **** /*
 614:FreeRTOS/ARM_CM3/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 615:FreeRTOS/ARM_CM3/port.c ****  * frequency.
 616:FreeRTOS/ARM_CM3/port.c ****  */
 617:FreeRTOS/ARM_CM3/port.c **** __attribute__(( weak )) void vPortSetupTimerInterrupt( void )
 618:FreeRTOS/ARM_CM3/port.c **** {
 401              		.loc 1 618 0
 402              		.cfi_startproc
 403              		@ args = 0, pretend = 0, frame = 0
 404              		@ frame_needed = 0, uses_anonymous_args = 0
 405              		@ link register save eliminated.
 619:FreeRTOS/ARM_CM3/port.c **** 	/* Calculate the constants required to configure the tick interrupt. */
 620:FreeRTOS/ARM_CM3/port.c **** 	#if( configUSE_TICKLESS_IDLE == 1 )
 621:FreeRTOS/ARM_CM3/port.c **** 	{
 622:FreeRTOS/ARM_CM3/port.c **** 		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 623:FreeRTOS/ARM_CM3/port.c **** 		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 624:FreeRTOS/ARM_CM3/port.c **** 		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOC
 625:FreeRTOS/ARM_CM3/port.c **** 	}
 626:FreeRTOS/ARM_CM3/port.c **** 	#endif /* configUSE_TICKLESS_IDLE */
 627:FreeRTOS/ARM_CM3/port.c **** 
 628:FreeRTOS/ARM_CM3/port.c **** 	/* Stop and clear the SysTick. */
 629:FreeRTOS/ARM_CM3/port.c **** 	portNVIC_SYSTICK_CTRL_REG = 0UL;
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s 			page 23


 406              		.loc 1 629 0
 407 0000 054B     		ldr	r3, .L24
 408 0002 0022     		movs	r2, #0
 409 0004 1A60     		str	r2, [r3]
 630:FreeRTOS/ARM_CM3/port.c **** 	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 410              		.loc 1 630 0
 411 0006 0549     		ldr	r1, .L24+4
 412 0008 0A60     		str	r2, [r1]
 631:FreeRTOS/ARM_CM3/port.c **** 
 632:FreeRTOS/ARM_CM3/port.c **** 	/* Configure SysTick to interrupt at the requested rate. */
 633:FreeRTOS/ARM_CM3/port.c **** 	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 413              		.loc 1 633 0
 414 000a 0549     		ldr	r1, .L24+8
 415 000c 054A     		ldr	r2, .L24+12
 416 000e 1160     		str	r1, [r2]
 634:FreeRTOS/ARM_CM3/port.c **** 	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTI
 417              		.loc 1 634 0
 418 0010 0722     		movs	r2, #7
 419 0012 1A60     		str	r2, [r3]
 420 0014 7047     		bx	lr
 421              	.L25:
 422 0016 00BF     		.align	2
 423              	.L24:
 424 0018 10E000E0 		.word	-536813552
 425 001c 18E000E0 		.word	-536813544
 426 0020 3F190100 		.word	71999
 427 0024 14E000E0 		.word	-536813548
 428              		.cfi_endproc
 429              	.LFE42:
 431              		.section	.text.xPortStartScheduler,"ax",%progbits
 432              		.align	2
 433              		.global	xPortStartScheduler
 434              		.thumb
 435              		.thumb_func
 437              	xPortStartScheduler:
 438              	.LFB36:
 258:FreeRTOS/ARM_CM3/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 439              		.loc 1 258 0
 440              		.cfi_startproc
 441              		@ args = 0, pretend = 0, frame = 0
 442              		@ frame_needed = 0, uses_anonymous_args = 0
 443 0000 10B5     		push	{r4, lr}
 444              	.LCFI3:
 445              		.cfi_def_cfa_offset 8
 446              		.cfi_offset 4, -8
 447              		.cfi_offset 14, -4
 326:FreeRTOS/ARM_CM3/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 448              		.loc 1 326 0
 449 0002 0B4B     		ldr	r3, .L28
 450 0004 1A68     		ldr	r2, [r3]
 451 0006 42F47F02 		orr	r2, r2, #16711680
 452 000a 1A60     		str	r2, [r3]
 327:FreeRTOS/ARM_CM3/port.c **** 
 453              		.loc 1 327 0
 454 000c 1A68     		ldr	r2, [r3]
 455 000e 42F07F42 		orr	r2, r2, #-16777216
 456 0012 1A60     		str	r2, [r3]
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s 			page 24


 331:FreeRTOS/ARM_CM3/port.c **** 
 457              		.loc 1 331 0
 458 0014 FFF7FEFF 		bl	vPortSetupTimerInterrupt
 459              	.LVL13:
 334:FreeRTOS/ARM_CM3/port.c **** 
 460              		.loc 1 334 0
 461 0018 0024     		movs	r4, #0
 462 001a 064B     		ldr	r3, .L28+4
 463 001c 1C60     		str	r4, [r3]
 337:FreeRTOS/ARM_CM3/port.c **** 
 464              		.loc 1 337 0
 465 001e FFF7FEFF 		bl	prvPortStartFirstTask
 466              	.LVL14:
 345:FreeRTOS/ARM_CM3/port.c **** 	prvTaskExitError();
 467              		.loc 1 345 0
 468 0022 FFF7FEFF 		bl	vTaskSwitchContext
 469              	.LVL15:
 346:FreeRTOS/ARM_CM3/port.c **** 
 470              		.loc 1 346 0
 471 0026 FFF7FEFF 		bl	prvTaskExitError
 472              	.LVL16:
 350:FreeRTOS/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 473              		.loc 1 350 0
 474 002a 2046     		mov	r0, r4
 475 002c 10BD     		pop	{r4, pc}
 476              	.L29:
 477 002e 00BF     		.align	2
 478              	.L28:
 479 0030 20ED00E0 		.word	-536810208
 480 0034 00000000 		.word	.LANCHOR0
 481              		.cfi_endproc
 482              	.LFE36:
 484              		.section	.data.uxCriticalNesting,"aw",%progbits
 485              		.align	2
 486              		.set	.LANCHOR0,. + 0
 489              	uxCriticalNesting:
 490 0000 AAAAAAAA 		.word	-1431655766
 491              		.text
 492              	.Letext0:
 493              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20160926/arm-none-eabi/include/machine/_default_types
 494              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi/20160926/arm-none-eabi/include/sys/_stdint.h"
 495              		.file 5 "FreeRTOS/Inc/projdefs.h"
 496              		.file 6 "FreeRTOS/Inc/task.h"
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s 			page 25


DEFINED SYMBOLS
                            *ABS*:0000000000000000 port.c
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s:20     .text.prvTaskExitError:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s:24     .text.prvTaskExitError:0000000000000000 prvTaskExitError
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s:70     .text.prvPortStartFirstTask:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s:74     .text.prvPortStartFirstTask:0000000000000000 prvPortStartFirstTask
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s:103    .text.pxPortInitialiseStack:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s:108    .text.pxPortInitialiseStack:0000000000000000 pxPortInitialiseStack
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s:139    .text.pxPortInitialiseStack:0000000000000020 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s:144    .text.vPortSVCHandler:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s:149    .text.vPortSVCHandler:0000000000000000 vPortSVCHandler
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s:171    .text.vPortSVCHandler:0000000000000020 pxCurrentTCBConst2
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s:171    .text.vPortSVCHandler:0000000000000020 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s:181    .text.vPortEndScheduler:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s:186    .text.vPortEndScheduler:0000000000000000 vPortEndScheduler
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s:198    .text.vPortEnterCritical:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s:203    .text.vPortEnterCritical:0000000000000000 vPortEnterCritical
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s:234    .text.vPortEnterCritical:000000000000001c $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s:239    .text.vPortExitCritical:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s:244    .text.vPortExitCritical:0000000000000000 vPortExitCritical
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s:274    .text.vPortExitCritical:0000000000000010 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s:281    .text.xPortPendSVHandler:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s:286    .text.xPortPendSVHandler:0000000000000000 xPortPendSVHandler
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s:321    .text.xPortPendSVHandler:0000000000000040 pxCurrentTCBConst
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s:321    .text.xPortPendSVHandler:0000000000000040 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s:331    .text.xPortSysTickHandler:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s:336    .text.xPortSysTickHandler:0000000000000000 xPortSysTickHandler
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s:387    .text.xPortSysTickHandler:0000000000000028 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s:394    .text.vPortSetupTimerInterrupt:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s:399    .text.vPortSetupTimerInterrupt:0000000000000000 vPortSetupTimerInterrupt
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s:424    .text.vPortSetupTimerInterrupt:0000000000000018 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s:432    .text.xPortStartScheduler:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s:437    .text.xPortStartScheduler:0000000000000000 xPortStartScheduler
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s:479    .text.xPortStartScheduler:0000000000000030 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s:485    .data.uxCriticalNesting:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s:489    .data.uxCriticalNesting:0000000000000000 uxCriticalNesting
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s:102    .text.prvPortStartFirstTask:000000000000001a $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccgOZ5rY.s:1647   .text.prvPortStartFirstTask:000000000000001c $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
pxCurrentTCB
vTaskSwitchContext
xTaskIncrementTick
