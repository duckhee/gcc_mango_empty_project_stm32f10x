ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"port.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvSetupTimerInterrupt,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	prvSetupTimerInterrupt:
  25              	.LFB10:
  26              		.file 1 "FreeRTOS/ARMCM3/Src/port.c"
   1:FreeRTOS/ARMCM3/Src/port.c **** /*
   2:FreeRTOS/ARMCM3/Src/port.c **** 	FreeRTOS V5.4.2 - Copyright (C) 2009 Real Time Engineers Ltd.
   3:FreeRTOS/ARMCM3/Src/port.c **** 
   4:FreeRTOS/ARMCM3/Src/port.c **** 	This file is part of the FreeRTOS distribution.
   5:FreeRTOS/ARMCM3/Src/port.c **** 
   6:FreeRTOS/ARMCM3/Src/port.c **** 	FreeRTOS is free software; you can redistribute it and/or modify it	under 
   7:FreeRTOS/ARMCM3/Src/port.c **** 	the terms of the GNU General Public License (version 2) as published by the 
   8:FreeRTOS/ARMCM3/Src/port.c **** 	Free Software Foundation and modified by the FreeRTOS exception.
   9:FreeRTOS/ARMCM3/Src/port.c **** 	**NOTE** The exception to the GPL is included to allow you to distribute a
  10:FreeRTOS/ARMCM3/Src/port.c **** 	combined work that includes FreeRTOS without being obliged to provide the 
  11:FreeRTOS/ARMCM3/Src/port.c **** 	source code for proprietary components outside of the FreeRTOS kernel.  
  12:FreeRTOS/ARMCM3/Src/port.c **** 	Alternative commercial license and support terms are also available upon 
  13:FreeRTOS/ARMCM3/Src/port.c **** 	request.  See the licensing section of http://www.FreeRTOS.org for full 
  14:FreeRTOS/ARMCM3/Src/port.c **** 	license details.
  15:FreeRTOS/ARMCM3/Src/port.c **** 
  16:FreeRTOS/ARMCM3/Src/port.c **** 	FreeRTOS is distributed in the hope that it will be useful,	but WITHOUT
  17:FreeRTOS/ARMCM3/Src/port.c **** 	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  18:FreeRTOS/ARMCM3/Src/port.c **** 	FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  19:FreeRTOS/ARMCM3/Src/port.c **** 	more details.
  20:FreeRTOS/ARMCM3/Src/port.c **** 
  21:FreeRTOS/ARMCM3/Src/port.c **** 	You should have received a copy of the GNU General Public License along
  22:FreeRTOS/ARMCM3/Src/port.c **** 	with FreeRTOS; if not, write to the Free Software Foundation, Inc., 59
  23:FreeRTOS/ARMCM3/Src/port.c **** 	Temple Place, Suite 330, Boston, MA  02111-1307  USA.
  24:FreeRTOS/ARMCM3/Src/port.c **** 
  25:FreeRTOS/ARMCM3/Src/port.c **** 
  26:FreeRTOS/ARMCM3/Src/port.c **** 	***************************************************************************
  27:FreeRTOS/ARMCM3/Src/port.c **** 	*                                                                         *
  28:FreeRTOS/ARMCM3/Src/port.c **** 	* Looking for a quick start?  Then check out the FreeRTOS eBook!          *
  29:FreeRTOS/ARMCM3/Src/port.c **** 	* See http://www.FreeRTOS.org/Documentation for details                   *
  30:FreeRTOS/ARMCM3/Src/port.c **** 	*                                                                         *
  31:FreeRTOS/ARMCM3/Src/port.c **** 	***************************************************************************
  32:FreeRTOS/ARMCM3/Src/port.c **** 
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s 			page 2


  33:FreeRTOS/ARMCM3/Src/port.c **** 	1 tab == 4 spaces!
  34:FreeRTOS/ARMCM3/Src/port.c **** 
  35:FreeRTOS/ARMCM3/Src/port.c **** 	Please ensure to read the configuration and relevant port sections of the
  36:FreeRTOS/ARMCM3/Src/port.c **** 	online documentation.
  37:FreeRTOS/ARMCM3/Src/port.c **** 
  38:FreeRTOS/ARMCM3/Src/port.c **** 	http://www.FreeRTOS.org - Documentation, latest information, license and
  39:FreeRTOS/ARMCM3/Src/port.c **** 	contact details.
  40:FreeRTOS/ARMCM3/Src/port.c **** 
  41:FreeRTOS/ARMCM3/Src/port.c **** 	http://www.SafeRTOS.com - A version that is certified for use in safety
  42:FreeRTOS/ARMCM3/Src/port.c **** 	critical systems.
  43:FreeRTOS/ARMCM3/Src/port.c **** 
  44:FreeRTOS/ARMCM3/Src/port.c **** 	http://www.OpenRTOS.com - Commercial support, development, porting,
  45:FreeRTOS/ARMCM3/Src/port.c **** 	licensing and training services.
  46:FreeRTOS/ARMCM3/Src/port.c **** */
  47:FreeRTOS/ARMCM3/Src/port.c **** 
  48:FreeRTOS/ARMCM3/Src/port.c **** /*-----------------------------------------------------------
  49:FreeRTOS/ARMCM3/Src/port.c ****  * Implementation of functions defined in portable.h for the ARM CM3 port.
  50:FreeRTOS/ARMCM3/Src/port.c ****  *----------------------------------------------------------*/
  51:FreeRTOS/ARMCM3/Src/port.c **** 
  52:FreeRTOS/ARMCM3/Src/port.c **** /* Scheduler includes. */
  53:FreeRTOS/ARMCM3/Src/port.c **** #include "FreeRTOS.h"
  54:FreeRTOS/ARMCM3/Src/port.c **** #include "task.h"
  55:FreeRTOS/ARMCM3/Src/port.c **** 
  56:FreeRTOS/ARMCM3/Src/port.c **** /* For backward compatibility, ensure configKERNEL_INTERRUPT_PRIORITY is
  57:FreeRTOS/ARMCM3/Src/port.c **** defined.  The value should also ensure backward compatibility.
  58:FreeRTOS/ARMCM3/Src/port.c **** FreeRTOS.org versions prior to V4.4.0 did not include this definition. */
  59:FreeRTOS/ARMCM3/Src/port.c **** #ifndef configKERNEL_INTERRUPT_PRIORITY
  60:FreeRTOS/ARMCM3/Src/port.c **** 	#define configKERNEL_INTERRUPT_PRIORITY 255
  61:FreeRTOS/ARMCM3/Src/port.c **** #endif
  62:FreeRTOS/ARMCM3/Src/port.c **** 
  63:FreeRTOS/ARMCM3/Src/port.c **** /* Constants required to manipulate the NVIC. */
  64:FreeRTOS/ARMCM3/Src/port.c **** #define portNVIC_SYSTICK_CTRL		( ( volatile unsigned portLONG *) 0xe000e010 )
  65:FreeRTOS/ARMCM3/Src/port.c **** #define portNVIC_SYSTICK_LOAD		( ( volatile unsigned portLONG *) 0xe000e014 )
  66:FreeRTOS/ARMCM3/Src/port.c **** #define portNVIC_INT_CTRL			( ( volatile unsigned portLONG *) 0xe000ed04 )
  67:FreeRTOS/ARMCM3/Src/port.c **** #define portNVIC_SYSPRI2			( ( volatile unsigned portLONG *) 0xe000ed20 )
  68:FreeRTOS/ARMCM3/Src/port.c **** #define portNVIC_SYSTICK_CLK		0x00000004
  69:FreeRTOS/ARMCM3/Src/port.c **** #define portNVIC_SYSTICK_INT		0x00000002
  70:FreeRTOS/ARMCM3/Src/port.c **** #define portNVIC_SYSTICK_ENABLE		0x00000001
  71:FreeRTOS/ARMCM3/Src/port.c **** #define portNVIC_PENDSVSET			0x10000000
  72:FreeRTOS/ARMCM3/Src/port.c **** #define portNVIC_PENDSV_PRI			( ( ( unsigned portLONG ) configKERNEL_INTERRUPT_PRIORITY ) << 16 )
  73:FreeRTOS/ARMCM3/Src/port.c **** #define portNVIC_SYSTICK_PRI		( ( ( unsigned portLONG ) configKERNEL_INTERRUPT_PRIORITY ) << 24 )
  74:FreeRTOS/ARMCM3/Src/port.c **** 
  75:FreeRTOS/ARMCM3/Src/port.c **** /* Constants required to set up the initial stack. */
  76:FreeRTOS/ARMCM3/Src/port.c **** #define portINITIAL_XPSR			( 0x01000000 )
  77:FreeRTOS/ARMCM3/Src/port.c **** 
  78:FreeRTOS/ARMCM3/Src/port.c **** /* The priority used by the kernel is assigned to a variable to make access
  79:FreeRTOS/ARMCM3/Src/port.c **** from inline assembler easier. */
  80:FreeRTOS/ARMCM3/Src/port.c **** const unsigned portLONG ulKernelPriority = configKERNEL_INTERRUPT_PRIORITY;
  81:FreeRTOS/ARMCM3/Src/port.c **** 
  82:FreeRTOS/ARMCM3/Src/port.c **** /* Each task maintains its own interrupt status in the critical nesting
  83:FreeRTOS/ARMCM3/Src/port.c **** variable. */
  84:FreeRTOS/ARMCM3/Src/port.c **** static unsigned portBASE_TYPE uxCriticalNesting = 0xaaaaaaaa;
  85:FreeRTOS/ARMCM3/Src/port.c **** 
  86:FreeRTOS/ARMCM3/Src/port.c **** /*
  87:FreeRTOS/ARMCM3/Src/port.c ****  * Setup the timer to generate the tick interrupts.
  88:FreeRTOS/ARMCM3/Src/port.c ****  */
  89:FreeRTOS/ARMCM3/Src/port.c **** static void prvSetupTimerInterrupt( void );
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s 			page 3


  90:FreeRTOS/ARMCM3/Src/port.c **** 
  91:FreeRTOS/ARMCM3/Src/port.c **** /*
  92:FreeRTOS/ARMCM3/Src/port.c ****  * Exception handlers.
  93:FreeRTOS/ARMCM3/Src/port.c ****  */
  94:FreeRTOS/ARMCM3/Src/port.c **** void xPortPendSVHandler( void ) __attribute__ (( naked ));
  95:FreeRTOS/ARMCM3/Src/port.c **** void xPortSysTickHandler( void );
  96:FreeRTOS/ARMCM3/Src/port.c **** void vPortSVCHandler( void ) __attribute__ (( naked ));
  97:FreeRTOS/ARMCM3/Src/port.c **** 
  98:FreeRTOS/ARMCM3/Src/port.c **** /*
  99:FreeRTOS/ARMCM3/Src/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 100:FreeRTOS/ARMCM3/Src/port.c ****  */
 101:FreeRTOS/ARMCM3/Src/port.c **** void vPortStartFirstTask( void ) __attribute__ (( naked ));
 102:FreeRTOS/ARMCM3/Src/port.c **** 
 103:FreeRTOS/ARMCM3/Src/port.c **** /*-----------------------------------------------------------*/
 104:FreeRTOS/ARMCM3/Src/port.c **** 
 105:FreeRTOS/ARMCM3/Src/port.c **** /*
 106:FreeRTOS/ARMCM3/Src/port.c ****  * See header file for description.
 107:FreeRTOS/ARMCM3/Src/port.c ****  */
 108:FreeRTOS/ARMCM3/Src/port.c **** portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvPa
 109:FreeRTOS/ARMCM3/Src/port.c **** {
 110:FreeRTOS/ARMCM3/Src/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 111:FreeRTOS/ARMCM3/Src/port.c **** 	interrupt. */
 112:FreeRTOS/ARMCM3/Src/port.c **** 	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 113:FreeRTOS/ARMCM3/Src/port.c **** 	pxTopOfStack--;
 114:FreeRTOS/ARMCM3/Src/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 115:FreeRTOS/ARMCM3/Src/port.c **** 	pxTopOfStack--;
 116:FreeRTOS/ARMCM3/Src/port.c **** 	*pxTopOfStack = 0;	/* LR */
 117:FreeRTOS/ARMCM3/Src/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 118:FreeRTOS/ARMCM3/Src/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 119:FreeRTOS/ARMCM3/Src/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 120:FreeRTOS/ARMCM3/Src/port.c **** 
 121:FreeRTOS/ARMCM3/Src/port.c **** 	return pxTopOfStack;
 122:FreeRTOS/ARMCM3/Src/port.c **** }
 123:FreeRTOS/ARMCM3/Src/port.c **** /*-----------------------------------------------------------*/
 124:FreeRTOS/ARMCM3/Src/port.c **** 
 125:FreeRTOS/ARMCM3/Src/port.c **** void vPortSVCHandler( void )
 126:FreeRTOS/ARMCM3/Src/port.c **** {
 127:FreeRTOS/ARMCM3/Src/port.c **** 	__asm volatile (
 128:FreeRTOS/ARMCM3/Src/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 129:FreeRTOS/ARMCM3/Src/port.c **** 					"	ldr r1, [r3]					\n" /* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 130:FreeRTOS/ARMCM3/Src/port.c **** 					"	ldr r0, [r1]					\n" /* The first item in pxCurrentTCB is the task top of stack. */
 131:FreeRTOS/ARMCM3/Src/port.c **** 					"	ldmia r0!, {r4-r11}				\n" /* Pop the registers that are not automatically saved on exceptio
 132:FreeRTOS/ARMCM3/Src/port.c **** 					"	msr psp, r0						\n" /* Restore the task stack pointer. */
 133:FreeRTOS/ARMCM3/Src/port.c **** 					"	mov r0, #0 						\n"
 134:FreeRTOS/ARMCM3/Src/port.c **** 					"	msr	basepri, r0					\n"
 135:FreeRTOS/ARMCM3/Src/port.c **** 					"	orr r14, #0xd					\n"
 136:FreeRTOS/ARMCM3/Src/port.c **** 					"	bx r14							\n"
 137:FreeRTOS/ARMCM3/Src/port.c **** 					"									\n"
 138:FreeRTOS/ARMCM3/Src/port.c **** 					"	.align 2						\n"
 139:FreeRTOS/ARMCM3/Src/port.c **** 					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 140:FreeRTOS/ARMCM3/Src/port.c **** 				);
 141:FreeRTOS/ARMCM3/Src/port.c **** }
 142:FreeRTOS/ARMCM3/Src/port.c **** /*-----------------------------------------------------------*/
 143:FreeRTOS/ARMCM3/Src/port.c **** 
 144:FreeRTOS/ARMCM3/Src/port.c **** void vPortStartFirstTask( void )
 145:FreeRTOS/ARMCM3/Src/port.c **** {
 146:FreeRTOS/ARMCM3/Src/port.c **** 	__asm volatile(
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s 			page 4


 147:FreeRTOS/ARMCM3/Src/port.c **** 					" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 148:FreeRTOS/ARMCM3/Src/port.c **** 					" ldr r0, [r0] 			\n"
 149:FreeRTOS/ARMCM3/Src/port.c **** 					" ldr r0, [r0] 			\n"
 150:FreeRTOS/ARMCM3/Src/port.c **** 					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
 151:FreeRTOS/ARMCM3/Src/port.c **** 					" svc 0					\n" /* System call to start first task. */
 152:FreeRTOS/ARMCM3/Src/port.c **** 				);
 153:FreeRTOS/ARMCM3/Src/port.c **** }
 154:FreeRTOS/ARMCM3/Src/port.c **** /*-----------------------------------------------------------*/
 155:FreeRTOS/ARMCM3/Src/port.c **** 
 156:FreeRTOS/ARMCM3/Src/port.c **** /*
 157:FreeRTOS/ARMCM3/Src/port.c ****  * See header file for description.
 158:FreeRTOS/ARMCM3/Src/port.c ****  */
 159:FreeRTOS/ARMCM3/Src/port.c **** portBASE_TYPE xPortStartScheduler( void )
 160:FreeRTOS/ARMCM3/Src/port.c **** {
 161:FreeRTOS/ARMCM3/Src/port.c **** 	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
 162:FreeRTOS/ARMCM3/Src/port.c **** 	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 163:FreeRTOS/ARMCM3/Src/port.c **** 	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 164:FreeRTOS/ARMCM3/Src/port.c **** 
 165:FreeRTOS/ARMCM3/Src/port.c **** 	/* Start the timer that generates the tick ISR.  Interrupts are disabled
 166:FreeRTOS/ARMCM3/Src/port.c **** 	here already. */
 167:FreeRTOS/ARMCM3/Src/port.c **** 	prvSetupTimerInterrupt();
 168:FreeRTOS/ARMCM3/Src/port.c **** 
 169:FreeRTOS/ARMCM3/Src/port.c **** 	/* Initialise the critical nesting count ready for the first task. */
 170:FreeRTOS/ARMCM3/Src/port.c **** 	uxCriticalNesting = 0;
 171:FreeRTOS/ARMCM3/Src/port.c **** 
 172:FreeRTOS/ARMCM3/Src/port.c **** 	/* Start the first task. */
 173:FreeRTOS/ARMCM3/Src/port.c **** 	vPortStartFirstTask();
 174:FreeRTOS/ARMCM3/Src/port.c **** 
 175:FreeRTOS/ARMCM3/Src/port.c **** 	/* Should not get here! */
 176:FreeRTOS/ARMCM3/Src/port.c **** 	return 0;
 177:FreeRTOS/ARMCM3/Src/port.c **** }
 178:FreeRTOS/ARMCM3/Src/port.c **** /*-----------------------------------------------------------*/
 179:FreeRTOS/ARMCM3/Src/port.c **** 
 180:FreeRTOS/ARMCM3/Src/port.c **** void vPortEndScheduler( void )
 181:FreeRTOS/ARMCM3/Src/port.c **** {
 182:FreeRTOS/ARMCM3/Src/port.c **** 	/* It is unlikely that the CM3 port will require this function as there
 183:FreeRTOS/ARMCM3/Src/port.c **** 	is nothing to return to.  */
 184:FreeRTOS/ARMCM3/Src/port.c **** }
 185:FreeRTOS/ARMCM3/Src/port.c **** /*-----------------------------------------------------------*/
 186:FreeRTOS/ARMCM3/Src/port.c **** 
 187:FreeRTOS/ARMCM3/Src/port.c **** void vPortYieldFromISR( void )
 188:FreeRTOS/ARMCM3/Src/port.c **** {
 189:FreeRTOS/ARMCM3/Src/port.c **** 	/* Set a PendSV to request a context switch. */
 190:FreeRTOS/ARMCM3/Src/port.c **** 	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 191:FreeRTOS/ARMCM3/Src/port.c **** }
 192:FreeRTOS/ARMCM3/Src/port.c **** /*-----------------------------------------------------------*/
 193:FreeRTOS/ARMCM3/Src/port.c **** 
 194:FreeRTOS/ARMCM3/Src/port.c **** void vPortEnterCritical( void )
 195:FreeRTOS/ARMCM3/Src/port.c **** {
 196:FreeRTOS/ARMCM3/Src/port.c **** 	portDISABLE_INTERRUPTS();
 197:FreeRTOS/ARMCM3/Src/port.c **** 	uxCriticalNesting++;
 198:FreeRTOS/ARMCM3/Src/port.c **** }
 199:FreeRTOS/ARMCM3/Src/port.c **** /*-----------------------------------------------------------*/
 200:FreeRTOS/ARMCM3/Src/port.c **** 
 201:FreeRTOS/ARMCM3/Src/port.c **** void vPortExitCritical( void )
 202:FreeRTOS/ARMCM3/Src/port.c **** {
 203:FreeRTOS/ARMCM3/Src/port.c **** 	uxCriticalNesting--;
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s 			page 5


 204:FreeRTOS/ARMCM3/Src/port.c **** 	if( uxCriticalNesting == 0 )
 205:FreeRTOS/ARMCM3/Src/port.c **** 	{
 206:FreeRTOS/ARMCM3/Src/port.c **** 		portENABLE_INTERRUPTS();
 207:FreeRTOS/ARMCM3/Src/port.c **** 	}
 208:FreeRTOS/ARMCM3/Src/port.c **** }
 209:FreeRTOS/ARMCM3/Src/port.c **** /*-----------------------------------------------------------*/
 210:FreeRTOS/ARMCM3/Src/port.c **** 
 211:FreeRTOS/ARMCM3/Src/port.c **** void xPortPendSVHandler( void )
 212:FreeRTOS/ARMCM3/Src/port.c **** {
 213:FreeRTOS/ARMCM3/Src/port.c **** 	/* This is a naked function. */
 214:FreeRTOS/ARMCM3/Src/port.c **** 
 215:FreeRTOS/ARMCM3/Src/port.c **** 	__asm volatile
 216:FreeRTOS/ARMCM3/Src/port.c **** 	(
 217:FreeRTOS/ARMCM3/Src/port.c **** 	"	mrs r0, psp							\n"
 218:FreeRTOS/ARMCM3/Src/port.c **** 	"										\n"
 219:FreeRTOS/ARMCM3/Src/port.c **** 	"	ldr	r3, pxCurrentTCBConst			\n" /* Get the location of the current TCB. */
 220:FreeRTOS/ARMCM3/Src/port.c **** 	"	ldr	r2, [r3]						\n"
 221:FreeRTOS/ARMCM3/Src/port.c **** 	"										\n"
 222:FreeRTOS/ARMCM3/Src/port.c **** 	"	stmdb r0!, {r4-r11}					\n" /* Save the remaining registers. */
 223:FreeRTOS/ARMCM3/Src/port.c **** 	"	str r0, [r2]						\n" /* Save the new top of stack into the first member of the TCB. */
 224:FreeRTOS/ARMCM3/Src/port.c **** 	"										\n"
 225:FreeRTOS/ARMCM3/Src/port.c **** 	"	stmdb sp!, {r3, r14}				\n"
 226:FreeRTOS/ARMCM3/Src/port.c **** 	"	mov r0, %0							\n"
 227:FreeRTOS/ARMCM3/Src/port.c **** 	"	msr basepri, r0						\n"
 228:FreeRTOS/ARMCM3/Src/port.c **** 	"	bl vTaskSwitchContext				\n"
 229:FreeRTOS/ARMCM3/Src/port.c **** 	"	mov r0, #0							\n"
 230:FreeRTOS/ARMCM3/Src/port.c **** 	"	msr basepri, r0						\n"
 231:FreeRTOS/ARMCM3/Src/port.c **** 	"	ldmia sp!, {r3, r14}				\n"
 232:FreeRTOS/ARMCM3/Src/port.c **** 	"										\n"	/* Restore the context, including the critical nesting count. */
 233:FreeRTOS/ARMCM3/Src/port.c **** 	"	ldr r1, [r3]						\n"
 234:FreeRTOS/ARMCM3/Src/port.c **** 	"	ldr r0, [r1]						\n" /* The first item in pxCurrentTCB is the task top of stack. */
 235:FreeRTOS/ARMCM3/Src/port.c **** 	"	ldmia r0!, {r4-r11}					\n" /* Pop the registers. */
 236:FreeRTOS/ARMCM3/Src/port.c **** 	"	msr psp, r0							\n"
 237:FreeRTOS/ARMCM3/Src/port.c **** 	"	bx r14								\n"
 238:FreeRTOS/ARMCM3/Src/port.c **** 	"										\n"
 239:FreeRTOS/ARMCM3/Src/port.c **** 	"	.align 2							\n"
 240:FreeRTOS/ARMCM3/Src/port.c **** 	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
 241:FreeRTOS/ARMCM3/Src/port.c **** 	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
 242:FreeRTOS/ARMCM3/Src/port.c **** 	);
 243:FreeRTOS/ARMCM3/Src/port.c **** }
 244:FreeRTOS/ARMCM3/Src/port.c **** /*-----------------------------------------------------------*/
 245:FreeRTOS/ARMCM3/Src/port.c **** 
 246:FreeRTOS/ARMCM3/Src/port.c **** void xPortSysTickHandler( void )
 247:FreeRTOS/ARMCM3/Src/port.c **** {
 248:FreeRTOS/ARMCM3/Src/port.c **** unsigned portLONG ulDummy;
 249:FreeRTOS/ARMCM3/Src/port.c **** 
 250:FreeRTOS/ARMCM3/Src/port.c **** 	/* If using preemption, also force a context switch. */
 251:FreeRTOS/ARMCM3/Src/port.c **** 	#if configUSE_PREEMPTION == 1
 252:FreeRTOS/ARMCM3/Src/port.c **** 		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 253:FreeRTOS/ARMCM3/Src/port.c **** 	#endif
 254:FreeRTOS/ARMCM3/Src/port.c **** 
 255:FreeRTOS/ARMCM3/Src/port.c **** 	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
 256:FreeRTOS/ARMCM3/Src/port.c **** 	{
 257:FreeRTOS/ARMCM3/Src/port.c **** 		vTaskIncrementTick();
 258:FreeRTOS/ARMCM3/Src/port.c **** 	}
 259:FreeRTOS/ARMCM3/Src/port.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
 260:FreeRTOS/ARMCM3/Src/port.c **** }
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s 			page 6


 261:FreeRTOS/ARMCM3/Src/port.c **** /*-----------------------------------------------------------*/
 262:FreeRTOS/ARMCM3/Src/port.c **** 
 263:FreeRTOS/ARMCM3/Src/port.c **** /*
 264:FreeRTOS/ARMCM3/Src/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 265:FreeRTOS/ARMCM3/Src/port.c ****  * frequency.
 266:FreeRTOS/ARMCM3/Src/port.c ****  */
 267:FreeRTOS/ARMCM3/Src/port.c **** void prvSetupTimerInterrupt( void )
 268:FreeRTOS/ARMCM3/Src/port.c **** {
  27              		.loc 1 268 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 269:FreeRTOS/ARMCM3/Src/port.c **** 	/* Configure SysTick to interrupt at the requested rate. */
 270:FreeRTOS/ARMCM3/Src/port.c **** 	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  32              		.loc 1 270 0
  33 0000 034A     		ldr	r2, .L2
  34 0002 044B     		ldr	r3, .L2+4
  35 0004 1A60     		str	r2, [r3]
 271:FreeRTOS/ARMCM3/Src/port.c **** 	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
  36              		.loc 1 271 0
  37 0006 0722     		movs	r2, #7
  38 0008 043B     		subs	r3, r3, #4
  39 000a 1A60     		str	r2, [r3]
  40 000c 7047     		bx	lr
  41              	.L3:
  42 000e 00BF     		.align	2
  43              	.L2:
  44 0010 3F190100 		.word	71999
  45 0014 14E000E0 		.word	-536813548
  46              		.cfi_endproc
  47              	.LFE10:
  49              		.section	.text.pxPortInitialiseStack,"ax",%progbits
  50              		.align	2
  51              		.global	pxPortInitialiseStack
  52              		.thumb
  53              		.thumb_func
  55              	pxPortInitialiseStack:
  56              	.LFB0:
 109:FreeRTOS/ARMCM3/Src/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
  57              		.loc 1 109 0
  58              		.cfi_startproc
  59              		@ args = 0, pretend = 0, frame = 0
  60              		@ frame_needed = 0, uses_anonymous_args = 0
  61              		@ link register save eliminated.
  62              	.LVL0:
 112:FreeRTOS/ARMCM3/Src/port.c **** 	pxTopOfStack--;
  63              		.loc 1 112 0
  64 0000 4FF08073 		mov	r3, #16777216
  65 0004 0360     		str	r3, [r0]
  66              	.LVL1:
 114:FreeRTOS/ARMCM3/Src/port.c **** 	pxTopOfStack--;
  67              		.loc 1 114 0
  68 0006 40F8041C 		str	r1, [r0, #-4]
  69              	.LVL2:
 116:FreeRTOS/ARMCM3/Src/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
  70              		.loc 1 116 0
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s 			page 7


  71 000a 0023     		movs	r3, #0
  72 000c 40F8083C 		str	r3, [r0, #-8]
  73              	.LVL3:
 118:FreeRTOS/ARMCM3/Src/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
  74              		.loc 1 118 0
  75 0010 40F81C2C 		str	r2, [r0, #-28]
  76              	.LVL4:
 122:FreeRTOS/ARMCM3/Src/port.c **** /*-----------------------------------------------------------*/
  77              		.loc 1 122 0
  78 0014 3C38     		subs	r0, r0, #60
  79              	.LVL5:
  80 0016 7047     		bx	lr
  81              		.cfi_endproc
  82              	.LFE0:
  84              		.section	.text.vPortSVCHandler,"ax",%progbits
  85              		.align	2
  86              		.global	vPortSVCHandler
  87              		.thumb
  88              		.thumb_func
  90              	vPortSVCHandler:
  91              	.LFB1:
 126:FreeRTOS/ARMCM3/Src/port.c **** 	__asm volatile (
  92              		.loc 1 126 0
  93              		.cfi_startproc
  94              		@ Naked Function: prologue and epilogue provided by programmer.
  95              		@ args = 0, pretend = 0, frame = 0
  96              		@ frame_needed = 0, uses_anonymous_args = 0
 127:FreeRTOS/ARMCM3/Src/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
  97              		.loc 1 127 0
  98              		.syntax unified
  99              	@ 127 "FreeRTOS/ARMCM3/Src/port.c" 1
 100 0000 064B     			ldr	r3, pxCurrentTCBConst2		
 101 0002 1968     		ldr r1, [r3]					
 102 0004 0868     		ldr r0, [r1]					
 103 0006 B0E8F00F 		ldmia r0!, {r4-r11}				
 104 000a 80F30988 		msr psp, r0						
 105 000e 4FF00000 		mov r0, #0 						
 106 0012 80F31188 		msr	basepri, r0					
 107 0016 4EF00D0E 		orr r14, #0xd					
 108 001a 7047     		bx r14							
 109              										
 110              		.align 2						
 111 001c 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 112              	
 113              	@ 0 "" 2
 141:FreeRTOS/ARMCM3/Src/port.c **** /*-----------------------------------------------------------*/
 114              		.loc 1 141 0
 115              		.thumb
 116              		.syntax unified
 117              		.cfi_endproc
 118              	.LFE1:
 120              		.section	.text.vPortStartFirstTask,"ax",%progbits
 121              		.align	2
 122              		.global	vPortStartFirstTask
 123              		.thumb
 124              		.thumb_func
 126              	vPortStartFirstTask:
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s 			page 8


 127              	.LFB2:
 145:FreeRTOS/ARMCM3/Src/port.c **** 	__asm volatile(
 128              		.loc 1 145 0
 129              		.cfi_startproc
 130              		@ Naked Function: prologue and epilogue provided by programmer.
 131              		@ args = 0, pretend = 0, frame = 0
 132              		@ frame_needed = 0, uses_anonymous_args = 0
 146:FreeRTOS/ARMCM3/Src/port.c **** 					" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 133              		.loc 1 146 0
 134              		.syntax unified
 135              	@ 146 "FreeRTOS/ARMCM3/Src/port.c" 1
 136 0000 0248     		 ldr r0, =0xE000ED08 	
 137 0002 0068     	 ldr r0, [r0] 			
 138 0004 0068     	 ldr r0, [r0] 			
 139 0006 80F30888 	 msr msp, r0			
 140 000a 00DF     	 svc 0					
 141              	
 142              	@ 0 "" 2
 153:FreeRTOS/ARMCM3/Src/port.c **** /*-----------------------------------------------------------*/
 143              		.loc 1 153 0
 144              		.thumb
 145              		.syntax unified
 146              		.cfi_endproc
 147              	.LFE2:
 149              		.section	.text.xPortStartScheduler,"ax",%progbits
 150              		.align	2
 151              		.global	xPortStartScheduler
 152              		.thumb
 153              		.thumb_func
 155              	xPortStartScheduler:
 156              	.LFB3:
 160:FreeRTOS/ARMCM3/Src/port.c **** 	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
 157              		.loc 1 160 0
 158              		.cfi_startproc
 159              		@ args = 0, pretend = 0, frame = 0
 160              		@ frame_needed = 0, uses_anonymous_args = 0
 161 0000 10B5     		push	{r4, lr}
 162              	.LCFI0:
 163              		.cfi_def_cfa_offset 8
 164              		.cfi_offset 4, -8
 165              		.cfi_offset 14, -4
 162:FreeRTOS/ARMCM3/Src/port.c **** 	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 166              		.loc 1 162 0
 167 0002 094B     		ldr	r3, .L9
 168 0004 1A68     		ldr	r2, [r3]
 169 0006 42F47F02 		orr	r2, r2, #16711680
 170 000a 1A60     		str	r2, [r3]
 163:FreeRTOS/ARMCM3/Src/port.c **** 
 171              		.loc 1 163 0
 172 000c 1A68     		ldr	r2, [r3]
 173 000e 42F07F42 		orr	r2, r2, #-16777216
 174 0012 1A60     		str	r2, [r3]
 167:FreeRTOS/ARMCM3/Src/port.c **** 
 175              		.loc 1 167 0
 176 0014 FFF7FEFF 		bl	prvSetupTimerInterrupt
 177              	.LVL6:
 170:FreeRTOS/ARMCM3/Src/port.c **** 
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s 			page 9


 178              		.loc 1 170 0
 179 0018 0024     		movs	r4, #0
 180 001a 044B     		ldr	r3, .L9+4
 181 001c 1C60     		str	r4, [r3]
 173:FreeRTOS/ARMCM3/Src/port.c **** 
 182              		.loc 1 173 0
 183 001e FFF7FEFF 		bl	vPortStartFirstTask
 184              	.LVL7:
 177:FreeRTOS/ARMCM3/Src/port.c **** /*-----------------------------------------------------------*/
 185              		.loc 1 177 0
 186 0022 2046     		mov	r0, r4
 187 0024 10BD     		pop	{r4, pc}
 188              	.L10:
 189 0026 00BF     		.align	2
 190              	.L9:
 191 0028 20ED00E0 		.word	-536810208
 192 002c 00000000 		.word	.LANCHOR0
 193              		.cfi_endproc
 194              	.LFE3:
 196              		.section	.text.vPortEndScheduler,"ax",%progbits
 197              		.align	2
 198              		.global	vPortEndScheduler
 199              		.thumb
 200              		.thumb_func
 202              	vPortEndScheduler:
 203              	.LFB4:
 181:FreeRTOS/ARMCM3/Src/port.c **** 	/* It is unlikely that the CM3 port will require this function as there
 204              		.loc 1 181 0
 205              		.cfi_startproc
 206              		@ args = 0, pretend = 0, frame = 0
 207              		@ frame_needed = 0, uses_anonymous_args = 0
 208              		@ link register save eliminated.
 209 0000 7047     		bx	lr
 210              		.cfi_endproc
 211              	.LFE4:
 213 0002 00BF     		.section	.text.vPortYieldFromISR,"ax",%progbits
 214              		.align	2
 215              		.global	vPortYieldFromISR
 216              		.thumb
 217              		.thumb_func
 219              	vPortYieldFromISR:
 220              	.LFB5:
 188:FreeRTOS/ARMCM3/Src/port.c **** 	/* Set a PendSV to request a context switch. */
 221              		.loc 1 188 0
 222              		.cfi_startproc
 223              		@ args = 0, pretend = 0, frame = 0
 224              		@ frame_needed = 0, uses_anonymous_args = 0
 225              		@ link register save eliminated.
 190:FreeRTOS/ARMCM3/Src/port.c **** }
 226              		.loc 1 190 0
 227 0000 4FF08052 		mov	r2, #268435456
 228 0004 014B     		ldr	r3, .L13
 229 0006 1A60     		str	r2, [r3]
 230 0008 7047     		bx	lr
 231              	.L14:
 232 000a 00BF     		.align	2
 233              	.L13:
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s 			page 10


 234 000c 04ED00E0 		.word	-536810236
 235              		.cfi_endproc
 236              	.LFE5:
 238              		.section	.text.vPortEnterCritical,"ax",%progbits
 239              		.align	2
 240              		.global	vPortEnterCritical
 241              		.thumb
 242              		.thumb_func
 244              	vPortEnterCritical:
 245              	.LFB6:
 195:FreeRTOS/ARMCM3/Src/port.c **** 	portDISABLE_INTERRUPTS();
 246              		.loc 1 195 0
 247              		.cfi_startproc
 248              		@ args = 0, pretend = 0, frame = 0
 249              		@ frame_needed = 0, uses_anonymous_args = 0
 250              		@ link register save eliminated.
 196:FreeRTOS/ARMCM3/Src/port.c **** 	uxCriticalNesting++;
 251              		.loc 1 196 0
 252              		.syntax unified
 253              	@ 196 "FreeRTOS/ARMCM3/Src/port.c" 1
 254 0000 4FF0BF00 			mov r0, #191								
 255 0004 80F31188 		msr basepri, r0							
 256              	
 257              	@ 0 "" 2
 197:FreeRTOS/ARMCM3/Src/port.c **** }
 258              		.loc 1 197 0
 259              		.thumb
 260              		.syntax unified
 261 0008 024A     		ldr	r2, .L16
 262 000a 1368     		ldr	r3, [r2]
 263 000c 0133     		adds	r3, r3, #1
 264 000e 1360     		str	r3, [r2]
 265 0010 7047     		bx	lr
 266              	.L17:
 267 0012 00BF     		.align	2
 268              	.L16:
 269 0014 00000000 		.word	.LANCHOR0
 270              		.cfi_endproc
 271              	.LFE6:
 273              		.section	.text.vPortExitCritical,"ax",%progbits
 274              		.align	2
 275              		.global	vPortExitCritical
 276              		.thumb
 277              		.thumb_func
 279              	vPortExitCritical:
 280              	.LFB7:
 202:FreeRTOS/ARMCM3/Src/port.c **** 	uxCriticalNesting--;
 281              		.loc 1 202 0
 282              		.cfi_startproc
 283              		@ args = 0, pretend = 0, frame = 0
 284              		@ frame_needed = 0, uses_anonymous_args = 0
 285              		@ link register save eliminated.
 203:FreeRTOS/ARMCM3/Src/port.c **** 	if( uxCriticalNesting == 0 )
 286              		.loc 1 203 0
 287 0000 044A     		ldr	r2, .L20
 288 0002 1368     		ldr	r3, [r2]
 289 0004 013B     		subs	r3, r3, #1
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s 			page 11


 290 0006 1360     		str	r3, [r2]
 204:FreeRTOS/ARMCM3/Src/port.c **** 	{
 291              		.loc 1 204 0
 292 0008 1BB9     		cbnz	r3, .L18
 206:FreeRTOS/ARMCM3/Src/port.c **** 	}
 293              		.loc 1 206 0
 294              		.syntax unified
 295              	@ 206 "FreeRTOS/ARMCM3/Src/port.c" 1
 296 000a 4FF00000 			mov r0, #0					
 297 000e 80F31188 		msr basepri, r0				
 298              	
 299              	@ 0 "" 2
 300              		.thumb
 301              		.syntax unified
 302              	.L18:
 303 0012 7047     		bx	lr
 304              	.L21:
 305              		.align	2
 306              	.L20:
 307 0014 00000000 		.word	.LANCHOR0
 308              		.cfi_endproc
 309              	.LFE7:
 311              		.section	.text.xPortPendSVHandler,"ax",%progbits
 312              		.align	2
 313              		.global	xPortPendSVHandler
 314              		.thumb
 315              		.thumb_func
 317              	xPortPendSVHandler:
 318              	.LFB8:
 212:FreeRTOS/ARMCM3/Src/port.c **** 	/* This is a naked function. */
 319              		.loc 1 212 0
 320              		.cfi_startproc
 321              		@ Naked Function: prologue and epilogue provided by programmer.
 322              		@ args = 0, pretend = 0, frame = 0
 323              		@ frame_needed = 0, uses_anonymous_args = 0
 215:FreeRTOS/ARMCM3/Src/port.c **** 	(
 324              		.loc 1 215 0
 325              		.syntax unified
 326              	@ 215 "FreeRTOS/ARMCM3/Src/port.c" 1
 327 0000 EFF30980 			mrs r0, psp							
 328              											
 329 0004 0C4B     		ldr	r3, pxCurrentTCBConst			
 330 0006 1A68     		ldr	r2, [r3]						
 331              											
 332 0008 20E9F00F 		stmdb r0!, {r4-r11}					
 333 000c 1060     		str r0, [r2]						
 334              											
 335 000e 2DE90840 		stmdb sp!, {r3, r14}				
 336 0012 4FF0BF00 		mov r0, #191							
 337 0016 80F31188 		msr basepri, r0						
 338 001a FFF7FEFF 		bl vTaskSwitchContext				
 339 001e 4FF00000 		mov r0, #0							
 340 0022 80F31188 		msr basepri, r0						
 341 0026 BDE80840 		ldmia sp!, {r3, r14}				
 342              											
 343 002a 1968     		ldr r1, [r3]						
 344 002c 0868     		ldr r0, [r1]						
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s 			page 12


 345 002e B0E8F00F 		ldmia r0!, {r4-r11}					
 346 0032 80F30988 		msr psp, r0							
 347 0036 7047     		bx r14								
 348              											
 349              		.align 2							
 350 0038 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 351              	
 352              	@ 0 "" 2
 243:FreeRTOS/ARMCM3/Src/port.c **** /*-----------------------------------------------------------*/
 353              		.loc 1 243 0
 354              		.thumb
 355              		.syntax unified
 356              		.cfi_endproc
 357              	.LFE8:
 359              		.section	.text.xPortSysTickHandler,"ax",%progbits
 360              		.align	2
 361              		.global	xPortSysTickHandler
 362              		.thumb
 363              		.thumb_func
 365              	xPortSysTickHandler:
 366              	.LFB9:
 247:FreeRTOS/ARMCM3/Src/port.c **** unsigned portLONG ulDummy;
 367              		.loc 1 247 0
 368              		.cfi_startproc
 369              		@ args = 0, pretend = 0, frame = 0
 370              		@ frame_needed = 0, uses_anonymous_args = 0
 371 0000 08B5     		push	{r3, lr}
 372              	.LCFI1:
 373              		.cfi_def_cfa_offset 8
 374              		.cfi_offset 3, -8
 375              		.cfi_offset 14, -4
 252:FreeRTOS/ARMCM3/Src/port.c **** 	#endif
 376              		.loc 1 252 0
 377 0002 4FF08052 		mov	r2, #268435456
 378 0006 064B     		ldr	r3, .L25
 379 0008 1A60     		str	r2, [r3]
 380              	.LVL8:
 255:FreeRTOS/ARMCM3/Src/port.c **** 	{
 381              		.loc 1 255 0
 382              		.syntax unified
 383              	@ 255 "FreeRTOS/ARMCM3/Src/port.c" 1
 384 000a 4FF0BF00 			mov r0, #191								
 385 000e 80F31188 		msr basepri, r0							
 386              	
 387              	@ 0 "" 2
 257:FreeRTOS/ARMCM3/Src/port.c **** 	}
 388              		.loc 1 257 0
 389              		.thumb
 390              		.syntax unified
 391 0012 FFF7FEFF 		bl	vTaskIncrementTick
 392              	.LVL9:
 259:FreeRTOS/ARMCM3/Src/port.c **** }
 393              		.loc 1 259 0
 394              		.syntax unified
 395              	@ 259 "FreeRTOS/ARMCM3/Src/port.c" 1
 396 0016 4FF00000 			mov r0, #0					
 397 001a 80F31188 		msr basepri, r0				
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s 			page 13


 398              	
 399              	@ 0 "" 2
 400              		.thumb
 401              		.syntax unified
 402 001e 08BD     		pop	{r3, pc}
 403              	.L26:
 404              		.align	2
 405              	.L25:
 406 0020 04ED00E0 		.word	-536810236
 407              		.cfi_endproc
 408              	.LFE9:
 410              		.global	ulKernelPriority
 411              		.section	.rodata.ulKernelPriority,"a",%progbits
 412              		.align	2
 415              	ulKernelPriority:
 416 0000 FF000000 		.word	255
 417              		.section	.data.uxCriticalNesting,"aw",%progbits
 418              		.align	2
 419              		.set	.LANCHOR0,. + 0
 422              	uxCriticalNesting:
 423 0000 AAAAAAAA 		.word	-1431655766
 424              		.text
 425              	.Letext0:
 426              		.file 2 "FreeRTOS/Inc/projdefs.h"
 427              		.file 3 "FreeRTOS/ARMCM3/Inc/portmacro.h"
 428              		.file 4 "FreeRTOS/Inc/task.h"
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s 			page 14


DEFINED SYMBOLS
                            *ABS*:0000000000000000 port.c
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s:20     .text.prvSetupTimerInterrupt:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s:24     .text.prvSetupTimerInterrupt:0000000000000000 prvSetupTimerInterrupt
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s:44     .text.prvSetupTimerInterrupt:0000000000000010 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s:50     .text.pxPortInitialiseStack:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s:55     .text.pxPortInitialiseStack:0000000000000000 pxPortInitialiseStack
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s:85     .text.vPortSVCHandler:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s:90     .text.vPortSVCHandler:0000000000000000 vPortSVCHandler
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s:111    .text.vPortSVCHandler:000000000000001c pxCurrentTCBConst2
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s:111    .text.vPortSVCHandler:000000000000001c $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s:121    .text.vPortStartFirstTask:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s:126    .text.vPortStartFirstTask:0000000000000000 vPortStartFirstTask
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s:150    .text.xPortStartScheduler:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s:155    .text.xPortStartScheduler:0000000000000000 xPortStartScheduler
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s:191    .text.xPortStartScheduler:0000000000000028 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s:197    .text.vPortEndScheduler:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s:202    .text.vPortEndScheduler:0000000000000000 vPortEndScheduler
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s:214    .text.vPortYieldFromISR:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s:219    .text.vPortYieldFromISR:0000000000000000 vPortYieldFromISR
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s:234    .text.vPortYieldFromISR:000000000000000c $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s:239    .text.vPortEnterCritical:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s:244    .text.vPortEnterCritical:0000000000000000 vPortEnterCritical
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s:269    .text.vPortEnterCritical:0000000000000014 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s:274    .text.vPortExitCritical:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s:279    .text.vPortExitCritical:0000000000000000 vPortExitCritical
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s:307    .text.vPortExitCritical:0000000000000014 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s:312    .text.xPortPendSVHandler:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s:317    .text.xPortPendSVHandler:0000000000000000 xPortPendSVHandler
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s:350    .text.xPortPendSVHandler:0000000000000038 pxCurrentTCBConst
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s:350    .text.xPortPendSVHandler:0000000000000038 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s:360    .text.xPortSysTickHandler:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s:365    .text.xPortSysTickHandler:0000000000000000 xPortSysTickHandler
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s:406    .text.xPortSysTickHandler:0000000000000020 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s:415    .rodata.ulKernelPriority:0000000000000000 ulKernelPriority
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s:412    .rodata.ulKernelPriority:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s:418    .data.uxCriticalNesting:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s:422    .data.uxCriticalNesting:0000000000000000 uxCriticalNesting
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccEDk5H6.s:1185   .text.vPortStartFirstTask:000000000000000c $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
pxCurrentTCB
vTaskSwitchContext
vTaskIncrementTick
