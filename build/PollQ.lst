ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccKWTmDm.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"PollQ.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.vPolledQueueProducer,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	vPolledQueueProducer:
  25              	.LFB33:
  26              		.file 1 "FreeRTOS/test_Src/PollQ.c"
   1:FreeRTOS/test_Src/PollQ.c **** /*
   2:FreeRTOS/test_Src/PollQ.c ****  * FreeRTOS Kernel V10.1.1
   3:FreeRTOS/test_Src/PollQ.c ****  * Copyright (C) 2018 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/test_Src/PollQ.c ****  *
   5:FreeRTOS/test_Src/PollQ.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:FreeRTOS/test_Src/PollQ.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:FreeRTOS/test_Src/PollQ.c ****  * the Software without restriction, including without limitation the rights to
   8:FreeRTOS/test_Src/PollQ.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:FreeRTOS/test_Src/PollQ.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:FreeRTOS/test_Src/PollQ.c ****  * subject to the following conditions:
  11:FreeRTOS/test_Src/PollQ.c ****  *
  12:FreeRTOS/test_Src/PollQ.c ****  * The above copyright notice and this permission notice shall be included in all
  13:FreeRTOS/test_Src/PollQ.c ****  * copies or substantial portions of the Software.
  14:FreeRTOS/test_Src/PollQ.c ****  *
  15:FreeRTOS/test_Src/PollQ.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:FreeRTOS/test_Src/PollQ.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:FreeRTOS/test_Src/PollQ.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:FreeRTOS/test_Src/PollQ.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:FreeRTOS/test_Src/PollQ.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:FreeRTOS/test_Src/PollQ.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:FreeRTOS/test_Src/PollQ.c ****  *
  22:FreeRTOS/test_Src/PollQ.c ****  * http://www.FreeRTOS.org
  23:FreeRTOS/test_Src/PollQ.c ****  * http://aws.amazon.com/freertos
  24:FreeRTOS/test_Src/PollQ.c ****  *
  25:FreeRTOS/test_Src/PollQ.c ****  * 1 tab == 4 spaces!
  26:FreeRTOS/test_Src/PollQ.c ****  */
  27:FreeRTOS/test_Src/PollQ.c **** 
  28:FreeRTOS/test_Src/PollQ.c **** /*
  29:FreeRTOS/test_Src/PollQ.c ****  * This version of PollQ. c is for use on systems that have limited stack
  30:FreeRTOS/test_Src/PollQ.c ****  * space and no display facilities.  The complete version can be found in
  31:FreeRTOS/test_Src/PollQ.c ****  * the Demo/Common/Full directory.
  32:FreeRTOS/test_Src/PollQ.c ****  *
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccKWTmDm.s 			page 2


  33:FreeRTOS/test_Src/PollQ.c ****  * Creates two tasks that communicate over a single queue.  One task acts as a
  34:FreeRTOS/test_Src/PollQ.c ****  * producer, the other a consumer.
  35:FreeRTOS/test_Src/PollQ.c ****  *
  36:FreeRTOS/test_Src/PollQ.c ****  * The producer loops for three iteration, posting an incrementing number onto the
  37:FreeRTOS/test_Src/PollQ.c ****  * queue each cycle.  It then delays for a fixed period before doing exactly the
  38:FreeRTOS/test_Src/PollQ.c ****  * same again.
  39:FreeRTOS/test_Src/PollQ.c ****  *
  40:FreeRTOS/test_Src/PollQ.c ****  * The consumer loops emptying the queue.  Each item removed from the queue is
  41:FreeRTOS/test_Src/PollQ.c ****  * checked to ensure it contains the expected value.  When the queue is empty it
  42:FreeRTOS/test_Src/PollQ.c ****  * blocks for a fixed period, then does the same again.
  43:FreeRTOS/test_Src/PollQ.c ****  *
  44:FreeRTOS/test_Src/PollQ.c ****  * All queue access is performed without blocking.  The consumer completely empties
  45:FreeRTOS/test_Src/PollQ.c ****  * the queue each time it runs so the producer should never find the queue full.
  46:FreeRTOS/test_Src/PollQ.c ****  *
  47:FreeRTOS/test_Src/PollQ.c ****  * An error is flagged if the consumer obtains an unexpected value or the producer
  48:FreeRTOS/test_Src/PollQ.c ****  * find the queue is full.
  49:FreeRTOS/test_Src/PollQ.c ****  */
  50:FreeRTOS/test_Src/PollQ.c **** 
  51:FreeRTOS/test_Src/PollQ.c **** /*
  52:FreeRTOS/test_Src/PollQ.c **** Changes from V2.0.0
  53:FreeRTOS/test_Src/PollQ.c **** 
  54:FreeRTOS/test_Src/PollQ.c **** 	+ Delay periods are now specified using variables and constants of
  55:FreeRTOS/test_Src/PollQ.c **** 	  TickType_t rather than uint32_t.
  56:FreeRTOS/test_Src/PollQ.c **** */
  57:FreeRTOS/test_Src/PollQ.c **** 
  58:FreeRTOS/test_Src/PollQ.c **** #include <stdlib.h>
  59:FreeRTOS/test_Src/PollQ.c **** 
  60:FreeRTOS/test_Src/PollQ.c **** /* Scheduler include files. */
  61:FreeRTOS/test_Src/PollQ.c **** #include "FreeRTOS.h"
  62:FreeRTOS/test_Src/PollQ.c **** #include "task.h"
  63:FreeRTOS/test_Src/PollQ.c **** #include "queue.h"
  64:FreeRTOS/test_Src/PollQ.c **** 
  65:FreeRTOS/test_Src/PollQ.c **** /* Demo program include files. */
  66:FreeRTOS/test_Src/PollQ.c **** #include "PollQ.h"
  67:FreeRTOS/test_Src/PollQ.c **** 
  68:FreeRTOS/test_Src/PollQ.c **** #define pollqSTACK_SIZE			configMINIMAL_STACK_SIZE
  69:FreeRTOS/test_Src/PollQ.c **** #define pollqQUEUE_SIZE			( 10 )
  70:FreeRTOS/test_Src/PollQ.c **** #define pollqPRODUCER_DELAY		( pdMS_TO_TICKS( ( TickType_t ) 200 ) )
  71:FreeRTOS/test_Src/PollQ.c **** #define pollqCONSUMER_DELAY		( pollqPRODUCER_DELAY - ( TickType_t ) ( 20 / portTICK_PERIOD_MS ) )
  72:FreeRTOS/test_Src/PollQ.c **** #define pollqNO_DELAY			( ( TickType_t ) 0 )
  73:FreeRTOS/test_Src/PollQ.c **** #define pollqVALUES_TO_PRODUCE	( ( BaseType_t ) 3 )
  74:FreeRTOS/test_Src/PollQ.c **** #define pollqINITIAL_VALUE		( ( BaseType_t ) 0 )
  75:FreeRTOS/test_Src/PollQ.c **** 
  76:FreeRTOS/test_Src/PollQ.c **** /* The task that posts the incrementing number onto the queue. */
  77:FreeRTOS/test_Src/PollQ.c **** static portTASK_FUNCTION_PROTO( vPolledQueueProducer, pvParameters );
  78:FreeRTOS/test_Src/PollQ.c **** 
  79:FreeRTOS/test_Src/PollQ.c **** /* The task that empties the queue. */
  80:FreeRTOS/test_Src/PollQ.c **** static portTASK_FUNCTION_PROTO( vPolledQueueConsumer, pvParameters );
  81:FreeRTOS/test_Src/PollQ.c **** 
  82:FreeRTOS/test_Src/PollQ.c **** /* Variables that are used to check that the tasks are still running with no
  83:FreeRTOS/test_Src/PollQ.c **** errors. */
  84:FreeRTOS/test_Src/PollQ.c **** static volatile BaseType_t xPollingConsumerCount = pollqINITIAL_VALUE, xPollingProducerCount = poll
  85:FreeRTOS/test_Src/PollQ.c **** 
  86:FreeRTOS/test_Src/PollQ.c **** /*-----------------------------------------------------------*/
  87:FreeRTOS/test_Src/PollQ.c **** 
  88:FreeRTOS/test_Src/PollQ.c **** void vStartPolledQueueTasks( UBaseType_t uxPriority )
  89:FreeRTOS/test_Src/PollQ.c **** {
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccKWTmDm.s 			page 3


  90:FreeRTOS/test_Src/PollQ.c **** static QueueHandle_t xPolledQueue;
  91:FreeRTOS/test_Src/PollQ.c **** 
  92:FreeRTOS/test_Src/PollQ.c **** 	/* Create the queue used by the producer and consumer. */
  93:FreeRTOS/test_Src/PollQ.c **** 	xPolledQueue = xQueueCreate( pollqQUEUE_SIZE, ( UBaseType_t ) sizeof( uint16_t ) );
  94:FreeRTOS/test_Src/PollQ.c **** 
  95:FreeRTOS/test_Src/PollQ.c **** 	if( xPolledQueue != NULL )
  96:FreeRTOS/test_Src/PollQ.c **** 	{
  97:FreeRTOS/test_Src/PollQ.c **** 		/* vQueueAddToRegistry() adds the queue to the queue registry, if one is
  98:FreeRTOS/test_Src/PollQ.c **** 		in use.  The queue registry is provided as a means for kernel aware
  99:FreeRTOS/test_Src/PollQ.c **** 		debuggers to locate queues and has no purpose if a kernel aware debugger
 100:FreeRTOS/test_Src/PollQ.c **** 		is not being used.  The call to vQueueAddToRegistry() will be removed
 101:FreeRTOS/test_Src/PollQ.c **** 		by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
 102:FreeRTOS/test_Src/PollQ.c **** 		defined to be less than 1. */
 103:FreeRTOS/test_Src/PollQ.c **** 		vQueueAddToRegistry( xPolledQueue, "Poll_Test_Queue" );
 104:FreeRTOS/test_Src/PollQ.c **** 
 105:FreeRTOS/test_Src/PollQ.c **** 		/* Spawn the producer and consumer. */
 106:FreeRTOS/test_Src/PollQ.c **** 		xTaskCreate( vPolledQueueConsumer, "QConsNB", pollqSTACK_SIZE, ( void * ) &xPolledQueue, uxPriori
 107:FreeRTOS/test_Src/PollQ.c **** 		xTaskCreate( vPolledQueueProducer, "QProdNB", pollqSTACK_SIZE, ( void * ) &xPolledQueue, uxPriori
 108:FreeRTOS/test_Src/PollQ.c **** 	}
 109:FreeRTOS/test_Src/PollQ.c **** }
 110:FreeRTOS/test_Src/PollQ.c **** /*-----------------------------------------------------------*/
 111:FreeRTOS/test_Src/PollQ.c **** 
 112:FreeRTOS/test_Src/PollQ.c **** static portTASK_FUNCTION( vPolledQueueProducer, pvParameters )
 113:FreeRTOS/test_Src/PollQ.c **** {
  27              		.loc 1 113 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 70B5     		push	{r4, r5, r6, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 16
  35              		.cfi_offset 4, -16
  36              		.cfi_offset 5, -12
  37              		.cfi_offset 6, -8
  38              		.cfi_offset 14, -4
  39 0002 82B0     		sub	sp, sp, #8
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 24
  42 0004 0646     		mov	r6, r0
 114:FreeRTOS/test_Src/PollQ.c **** uint16_t usValue = ( uint16_t ) 0;
  43              		.loc 1 114 0
  44 0006 0025     		movs	r5, #0
  45 0008 ADF80650 		strh	r5, [sp, #6]	@ movhi
  46              	.LVL1:
  47              	.L6:
 115:FreeRTOS/test_Src/PollQ.c **** BaseType_t xError = pdFALSE, xLoop;
 116:FreeRTOS/test_Src/PollQ.c **** 
 117:FreeRTOS/test_Src/PollQ.c **** 	for( ;; )
 118:FreeRTOS/test_Src/PollQ.c **** 	{
 119:FreeRTOS/test_Src/PollQ.c **** 		for( xLoop = 0; xLoop < pollqVALUES_TO_PRODUCE; xLoop++ )
  48              		.loc 1 119 0
  49 000c 0024     		movs	r4, #0
  50 000e 19E0     		b	.L2
  51              	.LVL2:
  52              	.L5:
 120:FreeRTOS/test_Src/PollQ.c **** 		{
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccKWTmDm.s 			page 4


 121:FreeRTOS/test_Src/PollQ.c **** 			/* Send an incrementing number on the queue without blocking. */
 122:FreeRTOS/test_Src/PollQ.c **** 			if( xQueueSend( *( ( QueueHandle_t * ) pvParameters ), ( void * ) &usValue, pollqNO_DELAY ) != p
  53              		.loc 1 122 0
  54 0010 0023     		movs	r3, #0
  55 0012 1A46     		mov	r2, r3
  56 0014 0DF10601 		add	r1, sp, #6
  57 0018 3068     		ldr	r0, [r6]
  58 001a FFF7FEFF 		bl	xQueueGenericSend
  59              	.LVL3:
  60 001e 0128     		cmp	r0, #1
  61 0020 0ED1     		bne	.L7
 123:FreeRTOS/test_Src/PollQ.c **** 			{
 124:FreeRTOS/test_Src/PollQ.c **** 				/* We should never find the queue full so if we get here there
 125:FreeRTOS/test_Src/PollQ.c **** 				has been an error. */
 126:FreeRTOS/test_Src/PollQ.c **** 				xError = pdTRUE;
 127:FreeRTOS/test_Src/PollQ.c **** 			}
 128:FreeRTOS/test_Src/PollQ.c **** 			else
 129:FreeRTOS/test_Src/PollQ.c **** 			{
 130:FreeRTOS/test_Src/PollQ.c **** 				if( xError == pdFALSE )
  62              		.loc 1 130 0
  63 0022 3DB9     		cbnz	r5, .L4
 131:FreeRTOS/test_Src/PollQ.c **** 				{
 132:FreeRTOS/test_Src/PollQ.c **** 					/* If an error has ever been recorded we stop incrementing the
 133:FreeRTOS/test_Src/PollQ.c **** 					check variable. */
 134:FreeRTOS/test_Src/PollQ.c **** 					portENTER_CRITICAL();
  64              		.loc 1 134 0
  65 0024 FFF7FEFF 		bl	vPortEnterCritical
  66              	.LVL4:
 135:FreeRTOS/test_Src/PollQ.c **** 						xPollingProducerCount++;
  67              		.loc 1 135 0
  68 0028 094A     		ldr	r2, .L9
  69 002a 1368     		ldr	r3, [r2]
  70 002c 0133     		adds	r3, r3, #1
  71 002e 1360     		str	r3, [r2]
 136:FreeRTOS/test_Src/PollQ.c **** 					portEXIT_CRITICAL();
  72              		.loc 1 136 0
  73 0030 FFF7FEFF 		bl	vPortExitCritical
  74              	.LVL5:
  75              	.L4:
 137:FreeRTOS/test_Src/PollQ.c **** 				}
 138:FreeRTOS/test_Src/PollQ.c **** 
 139:FreeRTOS/test_Src/PollQ.c **** 				/* Update the value we are going to post next time around. */
 140:FreeRTOS/test_Src/PollQ.c **** 				usValue++;
  76              		.loc 1 140 0
  77 0034 BDF80630 		ldrh	r3, [sp, #6]
  78 0038 0133     		adds	r3, r3, #1
  79 003a ADF80630 		strh	r3, [sp, #6]	@ movhi
  80 003e 00E0     		b	.L3
  81              	.L7:
 126:FreeRTOS/test_Src/PollQ.c **** 			}
  82              		.loc 1 126 0
  83 0040 0125     		movs	r5, #1
  84              	.LVL6:
  85              	.L3:
 119:FreeRTOS/test_Src/PollQ.c **** 		{
  86              		.loc 1 119 0 discriminator 2
  87 0042 0134     		adds	r4, r4, #1
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccKWTmDm.s 			page 5


  88              	.LVL7:
  89              	.L2:
 119:FreeRTOS/test_Src/PollQ.c **** 		{
  90              		.loc 1 119 0 is_stmt 0 discriminator 1
  91 0044 022C     		cmp	r4, #2
  92 0046 E3DD     		ble	.L5
 141:FreeRTOS/test_Src/PollQ.c **** 			}
 142:FreeRTOS/test_Src/PollQ.c **** 		}
 143:FreeRTOS/test_Src/PollQ.c **** 
 144:FreeRTOS/test_Src/PollQ.c **** 		/* Wait before we start posting again to ensure the consumer runs and
 145:FreeRTOS/test_Src/PollQ.c **** 		empties the queue. */
 146:FreeRTOS/test_Src/PollQ.c **** 		vTaskDelay( pollqPRODUCER_DELAY );
  93              		.loc 1 146 0 is_stmt 1
  94 0048 C820     		movs	r0, #200
  95 004a FFF7FEFF 		bl	vTaskDelay
  96              	.LVL8:
 147:FreeRTOS/test_Src/PollQ.c **** 	}
  97              		.loc 1 147 0
  98 004e DDE7     		b	.L6
  99              	.L10:
 100              		.align	2
 101              	.L9:
 102 0050 00000000 		.word	.LANCHOR0
 103              		.cfi_endproc
 104              	.LFE33:
 106              		.section	.text.vPolledQueueConsumer,"ax",%progbits
 107              		.align	2
 108              		.thumb
 109              		.thumb_func
 111              	vPolledQueueConsumer:
 112              	.LFB34:
 148:FreeRTOS/test_Src/PollQ.c **** }  /*lint !e818 Function prototype must conform to API. */
 149:FreeRTOS/test_Src/PollQ.c **** /*-----------------------------------------------------------*/
 150:FreeRTOS/test_Src/PollQ.c **** 
 151:FreeRTOS/test_Src/PollQ.c **** static portTASK_FUNCTION( vPolledQueueConsumer, pvParameters )
 152:FreeRTOS/test_Src/PollQ.c **** {
 113              		.loc 1 152 0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 8
 116              		@ frame_needed = 0, uses_anonymous_args = 0
 117              	.LVL9:
 118 0000 70B5     		push	{r4, r5, r6, lr}
 119              	.LCFI2:
 120              		.cfi_def_cfa_offset 16
 121              		.cfi_offset 4, -16
 122              		.cfi_offset 5, -12
 123              		.cfi_offset 6, -8
 124              		.cfi_offset 14, -4
 125 0002 82B0     		sub	sp, sp, #8
 126              	.LCFI3:
 127              		.cfi_def_cfa_offset 24
 128 0004 0446     		mov	r4, r0
 129              	.LVL10:
 153:FreeRTOS/test_Src/PollQ.c **** uint16_t usData, usExpectedValue = ( uint16_t ) 0;
 154:FreeRTOS/test_Src/PollQ.c **** BaseType_t xError = pdFALSE;
 130              		.loc 1 154 0
 131 0006 0026     		movs	r6, #0
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccKWTmDm.s 			page 6


 153:FreeRTOS/test_Src/PollQ.c **** uint16_t usData, usExpectedValue = ( uint16_t ) 0;
 132              		.loc 1 153 0
 133 0008 3546     		mov	r5, r6
 134 000a 1BE0     		b	.L12
 135              	.LVL11:
 136              	.L15:
 155:FreeRTOS/test_Src/PollQ.c **** 
 156:FreeRTOS/test_Src/PollQ.c **** 	for( ;; )
 157:FreeRTOS/test_Src/PollQ.c **** 	{
 158:FreeRTOS/test_Src/PollQ.c **** 		/* Loop until the queue is empty. */
 159:FreeRTOS/test_Src/PollQ.c **** 		while( uxQueueMessagesWaiting( *( ( QueueHandle_t * ) pvParameters ) ) )
 160:FreeRTOS/test_Src/PollQ.c **** 		{
 161:FreeRTOS/test_Src/PollQ.c **** 			if( xQueueReceive( *( ( QueueHandle_t * ) pvParameters ), &usData, pollqNO_DELAY ) == pdPASS )
 137              		.loc 1 161 0
 138 000c 0022     		movs	r2, #0
 139 000e 0DF10601 		add	r1, sp, #6
 140 0012 2068     		ldr	r0, [r4]
 141 0014 FFF7FEFF 		bl	xQueueReceive
 142              	.LVL12:
 143 0018 0128     		cmp	r0, #1
 144 001a 13D1     		bne	.L12
 162:FreeRTOS/test_Src/PollQ.c **** 			{
 163:FreeRTOS/test_Src/PollQ.c **** 				if( usData != usExpectedValue )
 145              		.loc 1 163 0
 146 001c BDF80630 		ldrh	r3, [sp, #6]
 147 0020 9D42     		cmp	r5, r3
 148 0022 0AD1     		bne	.L16
 164:FreeRTOS/test_Src/PollQ.c **** 				{
 165:FreeRTOS/test_Src/PollQ.c **** 					/* This is not what we expected to receive so an error has
 166:FreeRTOS/test_Src/PollQ.c **** 					occurred. */
 167:FreeRTOS/test_Src/PollQ.c **** 					xError = pdTRUE;
 168:FreeRTOS/test_Src/PollQ.c **** 
 169:FreeRTOS/test_Src/PollQ.c **** 					/* Catch-up to the value we received so our next expected
 170:FreeRTOS/test_Src/PollQ.c **** 					value should again be correct. */
 171:FreeRTOS/test_Src/PollQ.c **** 					usExpectedValue = usData;
 172:FreeRTOS/test_Src/PollQ.c **** 				}
 173:FreeRTOS/test_Src/PollQ.c **** 				else
 174:FreeRTOS/test_Src/PollQ.c **** 				{
 175:FreeRTOS/test_Src/PollQ.c **** 					if( xError == pdFALSE )
 149              		.loc 1 175 0
 150 0024 5EB9     		cbnz	r6, .L17
 176:FreeRTOS/test_Src/PollQ.c **** 					{
 177:FreeRTOS/test_Src/PollQ.c **** 						/* Only increment the check variable if no errors have
 178:FreeRTOS/test_Src/PollQ.c **** 						occurred. */
 179:FreeRTOS/test_Src/PollQ.c **** 						portENTER_CRITICAL();
 151              		.loc 1 179 0
 152 0026 FFF7FEFF 		bl	vPortEnterCritical
 153              	.LVL13:
 180:FreeRTOS/test_Src/PollQ.c **** 							xPollingConsumerCount++;
 154              		.loc 1 180 0
 155 002a 0B4A     		ldr	r2, .L19
 156 002c 1368     		ldr	r3, [r2]
 157 002e 0133     		adds	r3, r3, #1
 158 0030 1360     		str	r3, [r2]
 181:FreeRTOS/test_Src/PollQ.c **** 						portEXIT_CRITICAL();
 159              		.loc 1 181 0
 160 0032 FFF7FEFF 		bl	vPortExitCritical
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccKWTmDm.s 			page 7


 161              	.LVL14:
 162 0036 2B46     		mov	r3, r5
 163 0038 02E0     		b	.L14
 164              	.L16:
 167:FreeRTOS/test_Src/PollQ.c **** 
 165              		.loc 1 167 0
 166 003a 0126     		movs	r6, #1
 167              	.LVL15:
 168 003c 00E0     		b	.L14
 169              	.LVL16:
 170              	.L17:
 171 003e 2B46     		mov	r3, r5
 172              	.LVL17:
 173              	.L14:
 182:FreeRTOS/test_Src/PollQ.c **** 					}
 183:FreeRTOS/test_Src/PollQ.c **** 				}
 184:FreeRTOS/test_Src/PollQ.c **** 
 185:FreeRTOS/test_Src/PollQ.c **** 				/* Next time round we would expect the number to be one higher. */
 186:FreeRTOS/test_Src/PollQ.c **** 				usExpectedValue++;
 174              		.loc 1 186 0
 175 0040 0133     		adds	r3, r3, #1
 176              	.LVL18:
 177 0042 9DB2     		uxth	r5, r3
 178              	.LVL19:
 179              	.L12:
 159:FreeRTOS/test_Src/PollQ.c **** 		{
 180              		.loc 1 159 0
 181 0044 2068     		ldr	r0, [r4]
 182 0046 FFF7FEFF 		bl	uxQueueMessagesWaiting
 183              	.LVL20:
 184 004a 0028     		cmp	r0, #0
 185 004c DED1     		bne	.L15
 187:FreeRTOS/test_Src/PollQ.c **** 			}
 188:FreeRTOS/test_Src/PollQ.c **** 		}
 189:FreeRTOS/test_Src/PollQ.c **** 
 190:FreeRTOS/test_Src/PollQ.c **** 		/* Now the queue is empty we block, allowing the producer to place more
 191:FreeRTOS/test_Src/PollQ.c **** 		items in the queue. */
 192:FreeRTOS/test_Src/PollQ.c **** 		vTaskDelay( pollqCONSUMER_DELAY );
 186              		.loc 1 192 0
 187 004e B420     		movs	r0, #180
 188 0050 FFF7FEFF 		bl	vTaskDelay
 189              	.LVL21:
 193:FreeRTOS/test_Src/PollQ.c **** 	}
 190              		.loc 1 193 0
 191 0054 F6E7     		b	.L12
 192              	.L20:
 193 0056 00BF     		.align	2
 194              	.L19:
 195 0058 00000000 		.word	.LANCHOR1
 196              		.cfi_endproc
 197              	.LFE34:
 199              		.section	.text.vStartPolledQueueTasks,"ax",%progbits
 200              		.align	2
 201              		.global	vStartPolledQueueTasks
 202              		.thumb
 203              		.thumb_func
 205              	vStartPolledQueueTasks:
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccKWTmDm.s 			page 8


 206              	.LFB32:
  89:FreeRTOS/test_Src/PollQ.c **** static QueueHandle_t xPolledQueue;
 207              		.loc 1 89 0
 208              		.cfi_startproc
 209              		@ args = 0, pretend = 0, frame = 0
 210              		@ frame_needed = 0, uses_anonymous_args = 0
 211              	.LVL22:
 212 0000 70B5     		push	{r4, r5, r6, lr}
 213              	.LCFI4:
 214              		.cfi_def_cfa_offset 16
 215              		.cfi_offset 4, -16
 216              		.cfi_offset 5, -12
 217              		.cfi_offset 6, -8
 218              		.cfi_offset 14, -4
 219 0002 82B0     		sub	sp, sp, #8
 220              	.LCFI5:
 221              		.cfi_def_cfa_offset 24
 222 0004 0446     		mov	r4, r0
  93:FreeRTOS/test_Src/PollQ.c **** 
 223              		.loc 1 93 0
 224 0006 0022     		movs	r2, #0
 225 0008 0221     		movs	r1, #2
 226 000a 0A20     		movs	r0, #10
 227              	.LVL23:
 228 000c FFF7FEFF 		bl	xQueueGenericCreate
 229              	.LVL24:
 230 0010 0A4B     		ldr	r3, .L24
 231 0012 1860     		str	r0, [r3]
  95:FreeRTOS/test_Src/PollQ.c **** 	{
 232              		.loc 1 95 0
 233 0014 80B1     		cbz	r0, .L21
 106:FreeRTOS/test_Src/PollQ.c **** 		xTaskCreate( vPolledQueueProducer, "QProdNB", pollqSTACK_SIZE, ( void * ) &xPolledQueue, uxPriori
 234              		.loc 1 106 0
 235 0016 1D46     		mov	r5, r3
 236 0018 0026     		movs	r6, #0
 237 001a 0196     		str	r6, [sp, #4]
 238 001c 0094     		str	r4, [sp]
 239 001e 8022     		movs	r2, #128
 240 0020 0749     		ldr	r1, .L24+4
 241 0022 0848     		ldr	r0, .L24+8
 242 0024 FFF7FEFF 		bl	xTaskCreate
 243              	.LVL25:
 107:FreeRTOS/test_Src/PollQ.c **** 	}
 244              		.loc 1 107 0
 245 0028 0196     		str	r6, [sp, #4]
 246 002a 0094     		str	r4, [sp]
 247 002c 2B46     		mov	r3, r5
 248 002e 8022     		movs	r2, #128
 249 0030 0549     		ldr	r1, .L24+12
 250 0032 0648     		ldr	r0, .L24+16
 251 0034 FFF7FEFF 		bl	xTaskCreate
 252              	.LVL26:
 253              	.L21:
 109:FreeRTOS/test_Src/PollQ.c **** /*-----------------------------------------------------------*/
 254              		.loc 1 109 0
 255 0038 02B0     		add	sp, sp, #8
 256              	.LCFI6:
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccKWTmDm.s 			page 9


 257              		.cfi_def_cfa_offset 16
 258              		@ sp needed
 259 003a 70BD     		pop	{r4, r5, r6, pc}
 260              	.LVL27:
 261              	.L25:
 262              		.align	2
 263              	.L24:
 264 003c 00000000 		.word	.LANCHOR2
 265 0040 00000000 		.word	.LC0
 266 0044 00000000 		.word	vPolledQueueConsumer
 267 0048 08000000 		.word	.LC1
 268 004c 00000000 		.word	vPolledQueueProducer
 269              		.cfi_endproc
 270              	.LFE32:
 272              		.section	.text.xArePollingQueuesStillRunning,"ax",%progbits
 273              		.align	2
 274              		.global	xArePollingQueuesStillRunning
 275              		.thumb
 276              		.thumb_func
 278              	xArePollingQueuesStillRunning:
 279              	.LFB35:
 194:FreeRTOS/test_Src/PollQ.c **** } /*lint !e818 Function prototype must conform to API. */
 195:FreeRTOS/test_Src/PollQ.c **** /*-----------------------------------------------------------*/
 196:FreeRTOS/test_Src/PollQ.c **** 
 197:FreeRTOS/test_Src/PollQ.c **** /* This is called to check that all the created tasks are still running with no errors. */
 198:FreeRTOS/test_Src/PollQ.c **** BaseType_t xArePollingQueuesStillRunning( void )
 199:FreeRTOS/test_Src/PollQ.c **** {
 280              		.loc 1 199 0
 281              		.cfi_startproc
 282              		@ args = 0, pretend = 0, frame = 0
 283              		@ frame_needed = 0, uses_anonymous_args = 0
 284              		@ link register save eliminated.
 200:FreeRTOS/test_Src/PollQ.c **** BaseType_t xReturn;
 201:FreeRTOS/test_Src/PollQ.c **** 
 202:FreeRTOS/test_Src/PollQ.c **** 	/* Check both the consumer and producer poll count to check they have both
 203:FreeRTOS/test_Src/PollQ.c **** 	been changed since out last trip round.  We do not need a critical section
 204:FreeRTOS/test_Src/PollQ.c **** 	around the check variables as this is called from a higher priority than
 205:FreeRTOS/test_Src/PollQ.c **** 	the other tasks that access the same variables. */
 206:FreeRTOS/test_Src/PollQ.c **** 	if( ( xPollingConsumerCount == pollqINITIAL_VALUE ) ||
 285              		.loc 1 206 0
 286 0000 084B     		ldr	r3, .L30
 287 0002 1B68     		ldr	r3, [r3]
 288 0004 23B1     		cbz	r3, .L28
 207:FreeRTOS/test_Src/PollQ.c **** 		( xPollingProducerCount == pollqINITIAL_VALUE )
 289              		.loc 1 207 0 discriminator 1
 290 0006 084B     		ldr	r3, .L30+4
 291 0008 1B68     		ldr	r3, [r3]
 206:FreeRTOS/test_Src/PollQ.c **** 		( xPollingProducerCount == pollqINITIAL_VALUE )
 292              		.loc 1 206 0 discriminator 1
 293 000a 1BB9     		cbnz	r3, .L29
 208:FreeRTOS/test_Src/PollQ.c **** 	  )
 209:FreeRTOS/test_Src/PollQ.c **** 	{
 210:FreeRTOS/test_Src/PollQ.c **** 		xReturn = pdFALSE;
 294              		.loc 1 210 0
 295 000c 0020     		movs	r0, #0
 296 000e 02E0     		b	.L27
 297              	.L28:
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccKWTmDm.s 			page 10


 298 0010 0020     		movs	r0, #0
 299 0012 00E0     		b	.L27
 300              	.L29:
 211:FreeRTOS/test_Src/PollQ.c **** 	}
 212:FreeRTOS/test_Src/PollQ.c **** 	else
 213:FreeRTOS/test_Src/PollQ.c **** 	{
 214:FreeRTOS/test_Src/PollQ.c **** 		xReturn = pdTRUE;
 301              		.loc 1 214 0
 302 0014 0120     		movs	r0, #1
 303              	.L27:
 304              	.LVL28:
 215:FreeRTOS/test_Src/PollQ.c **** 	}
 216:FreeRTOS/test_Src/PollQ.c **** 
 217:FreeRTOS/test_Src/PollQ.c **** 	/* Set the check variables back down so we know if they have been
 218:FreeRTOS/test_Src/PollQ.c **** 	incremented the next time around. */
 219:FreeRTOS/test_Src/PollQ.c **** 	xPollingConsumerCount = pollqINITIAL_VALUE;
 305              		.loc 1 219 0
 306 0016 0023     		movs	r3, #0
 307 0018 024A     		ldr	r2, .L30
 308 001a 1360     		str	r3, [r2]
 220:FreeRTOS/test_Src/PollQ.c **** 	xPollingProducerCount = pollqINITIAL_VALUE;
 309              		.loc 1 220 0
 310 001c 024A     		ldr	r2, .L30+4
 311 001e 1360     		str	r3, [r2]
 221:FreeRTOS/test_Src/PollQ.c **** 
 222:FreeRTOS/test_Src/PollQ.c **** 	return xReturn;
 223:FreeRTOS/test_Src/PollQ.c **** }
 312              		.loc 1 223 0
 313 0020 7047     		bx	lr
 314              	.L31:
 315 0022 00BF     		.align	2
 316              	.L30:
 317 0024 00000000 		.word	.LANCHOR1
 318 0028 00000000 		.word	.LANCHOR0
 319              		.cfi_endproc
 320              	.LFE35:
 322              		.section	.bss.xPollingProducerCount,"aw",%nobits
 323              		.align	2
 324              		.set	.LANCHOR0,. + 0
 327              	xPollingProducerCount:
 328 0000 00000000 		.space	4
 329              		.section	.rodata.str1.4,"aMS",%progbits,1
 330              		.align	2
 331              	.LC0:
 332 0000 51436F6E 		.ascii	"QConsNB\000"
 332      734E4200 
 333              	.LC1:
 334 0008 5150726F 		.ascii	"QProdNB\000"
 334      644E4200 
 335              		.section	.bss.xPollingConsumerCount,"aw",%nobits
 336              		.align	2
 337              		.set	.LANCHOR1,. + 0
 340              	xPollingConsumerCount:
 341 0000 00000000 		.space	4
 342              		.section	.bss.xPolledQueue.7499,"aw",%nobits
 343              		.align	2
 344              		.set	.LANCHOR2,. + 0
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccKWTmDm.s 			page 11


 347              	xPolledQueue.7499:
 348 0000 00000000 		.space	4
 349              		.text
 350              	.Letext0:
 351              		.file 2 "/usr/local/Cellar/gcc-arm-none-eabi/20160926/arm-none-eabi/include/machine/_default_types
 352              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20160926/arm-none-eabi/include/sys/_stdint.h"
 353              		.file 4 "FreeRTOS/ARM_CM3/portmacro.h"
 354              		.file 5 "FreeRTOS/Inc/task.h"
 355              		.file 6 "FreeRTOS/Inc/queue.h"
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccKWTmDm.s 			page 12


DEFINED SYMBOLS
                            *ABS*:0000000000000000 PollQ.c
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccKWTmDm.s:20     .text.vPolledQueueProducer:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccKWTmDm.s:24     .text.vPolledQueueProducer:0000000000000000 vPolledQueueProducer
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccKWTmDm.s:102    .text.vPolledQueueProducer:0000000000000050 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccKWTmDm.s:107    .text.vPolledQueueConsumer:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccKWTmDm.s:111    .text.vPolledQueueConsumer:0000000000000000 vPolledQueueConsumer
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccKWTmDm.s:195    .text.vPolledQueueConsumer:0000000000000058 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccKWTmDm.s:200    .text.vStartPolledQueueTasks:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccKWTmDm.s:205    .text.vStartPolledQueueTasks:0000000000000000 vStartPolledQueueTasks
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccKWTmDm.s:264    .text.vStartPolledQueueTasks:000000000000003c $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccKWTmDm.s:273    .text.xArePollingQueuesStillRunning:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccKWTmDm.s:278    .text.xArePollingQueuesStillRunning:0000000000000000 xArePollingQueuesStillRunning
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccKWTmDm.s:317    .text.xArePollingQueuesStillRunning:0000000000000024 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccKWTmDm.s:323    .bss.xPollingProducerCount:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccKWTmDm.s:327    .bss.xPollingProducerCount:0000000000000000 xPollingProducerCount
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccKWTmDm.s:330    .rodata.str1.4:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccKWTmDm.s:336    .bss.xPollingConsumerCount:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccKWTmDm.s:340    .bss.xPollingConsumerCount:0000000000000000 xPollingConsumerCount
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccKWTmDm.s:343    .bss.xPolledQueue.7499:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccKWTmDm.s:347    .bss.xPolledQueue.7499:0000000000000000 xPolledQueue.7499
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
xQueueGenericSend
vPortEnterCritical
vPortExitCritical
vTaskDelay
xQueueReceive
uxQueueMessagesWaiting
xQueueGenericCreate
xTaskCreate
