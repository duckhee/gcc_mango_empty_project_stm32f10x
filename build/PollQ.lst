ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccwpiyZa.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"PollQ.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.vPolledQueueProducer,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	vPolledQueueProducer:
  25              	.LFB1:
  26              		.file 1 "FreeRTOS/Common/Minimal/PollQ.c"
   1:FreeRTOS/Common/Minimal/PollQ.c **** /*
   2:FreeRTOS/Common/Minimal/PollQ.c **** 	FreeRTOS V5.4.2 - Copyright (C) 2009 Real Time Engineers Ltd.
   3:FreeRTOS/Common/Minimal/PollQ.c **** 
   4:FreeRTOS/Common/Minimal/PollQ.c **** 	This file is part of the FreeRTOS distribution.
   5:FreeRTOS/Common/Minimal/PollQ.c **** 
   6:FreeRTOS/Common/Minimal/PollQ.c **** 	FreeRTOS is free software; you can redistribute it and/or modify it	under 
   7:FreeRTOS/Common/Minimal/PollQ.c **** 	the terms of the GNU General Public License (version 2) as published by the 
   8:FreeRTOS/Common/Minimal/PollQ.c **** 	Free Software Foundation and modified by the FreeRTOS exception.
   9:FreeRTOS/Common/Minimal/PollQ.c **** 	**NOTE** The exception to the GPL is included to allow you to distribute a
  10:FreeRTOS/Common/Minimal/PollQ.c **** 	combined work that includes FreeRTOS without being obliged to provide the 
  11:FreeRTOS/Common/Minimal/PollQ.c **** 	source code for proprietary components outside of the FreeRTOS kernel.  
  12:FreeRTOS/Common/Minimal/PollQ.c **** 	Alternative commercial license and support terms are also available upon 
  13:FreeRTOS/Common/Minimal/PollQ.c **** 	request.  See the licensing section of http://www.FreeRTOS.org for full 
  14:FreeRTOS/Common/Minimal/PollQ.c **** 	license details.
  15:FreeRTOS/Common/Minimal/PollQ.c **** 
  16:FreeRTOS/Common/Minimal/PollQ.c **** 	FreeRTOS is distributed in the hope that it will be useful,	but WITHOUT
  17:FreeRTOS/Common/Minimal/PollQ.c **** 	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  18:FreeRTOS/Common/Minimal/PollQ.c **** 	FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  19:FreeRTOS/Common/Minimal/PollQ.c **** 	more details.
  20:FreeRTOS/Common/Minimal/PollQ.c **** 
  21:FreeRTOS/Common/Minimal/PollQ.c **** 	You should have received a copy of the GNU General Public License along
  22:FreeRTOS/Common/Minimal/PollQ.c **** 	with FreeRTOS; if not, write to the Free Software Foundation, Inc., 59
  23:FreeRTOS/Common/Minimal/PollQ.c **** 	Temple Place, Suite 330, Boston, MA  02111-1307  USA.
  24:FreeRTOS/Common/Minimal/PollQ.c **** 
  25:FreeRTOS/Common/Minimal/PollQ.c **** 
  26:FreeRTOS/Common/Minimal/PollQ.c **** 	***************************************************************************
  27:FreeRTOS/Common/Minimal/PollQ.c **** 	*                                                                         *
  28:FreeRTOS/Common/Minimal/PollQ.c **** 	* Looking for a quick start?  Then check out the FreeRTOS eBook!          *
  29:FreeRTOS/Common/Minimal/PollQ.c **** 	* See http://www.FreeRTOS.org/Documentation for details                   *
  30:FreeRTOS/Common/Minimal/PollQ.c **** 	*                                                                         *
  31:FreeRTOS/Common/Minimal/PollQ.c **** 	***************************************************************************
  32:FreeRTOS/Common/Minimal/PollQ.c **** 
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccwpiyZa.s 			page 2


  33:FreeRTOS/Common/Minimal/PollQ.c **** 	1 tab == 4 spaces!
  34:FreeRTOS/Common/Minimal/PollQ.c **** 
  35:FreeRTOS/Common/Minimal/PollQ.c **** 	Please ensure to read the configuration and relevant port sections of the
  36:FreeRTOS/Common/Minimal/PollQ.c **** 	online documentation.
  37:FreeRTOS/Common/Minimal/PollQ.c **** 
  38:FreeRTOS/Common/Minimal/PollQ.c **** 	http://www.FreeRTOS.org - Documentation, latest information, license and
  39:FreeRTOS/Common/Minimal/PollQ.c **** 	contact details.
  40:FreeRTOS/Common/Minimal/PollQ.c **** 
  41:FreeRTOS/Common/Minimal/PollQ.c **** 	http://www.SafeRTOS.com - A version that is certified for use in safety
  42:FreeRTOS/Common/Minimal/PollQ.c **** 	critical systems.
  43:FreeRTOS/Common/Minimal/PollQ.c **** 
  44:FreeRTOS/Common/Minimal/PollQ.c **** 	http://www.OpenRTOS.com - Commercial support, development, porting,
  45:FreeRTOS/Common/Minimal/PollQ.c **** 	licensing and training services.
  46:FreeRTOS/Common/Minimal/PollQ.c **** */
  47:FreeRTOS/Common/Minimal/PollQ.c **** 
  48:FreeRTOS/Common/Minimal/PollQ.c **** /*
  49:FreeRTOS/Common/Minimal/PollQ.c ****  * This version of PollQ. c is for use on systems that have limited stack
  50:FreeRTOS/Common/Minimal/PollQ.c ****  * space and no display facilities.  The complete version can be found in
  51:FreeRTOS/Common/Minimal/PollQ.c ****  * the Demo/Common/Full directory.
  52:FreeRTOS/Common/Minimal/PollQ.c ****  *
  53:FreeRTOS/Common/Minimal/PollQ.c ****  * Creates two tasks that communicate over a single queue.  One task acts as a
  54:FreeRTOS/Common/Minimal/PollQ.c ****  * producer, the other a consumer.
  55:FreeRTOS/Common/Minimal/PollQ.c ****  *
  56:FreeRTOS/Common/Minimal/PollQ.c ****  * The producer loops for three iteration, posting an incrementing number onto the
  57:FreeRTOS/Common/Minimal/PollQ.c ****  * queue each cycle.  It then delays for a fixed period before doing exactly the
  58:FreeRTOS/Common/Minimal/PollQ.c ****  * same again.
  59:FreeRTOS/Common/Minimal/PollQ.c ****  *
  60:FreeRTOS/Common/Minimal/PollQ.c ****  * The consumer loops emptying the queue.  Each item removed from the queue is
  61:FreeRTOS/Common/Minimal/PollQ.c ****  * checked to ensure it contains the expected value.  When the queue is empty it
  62:FreeRTOS/Common/Minimal/PollQ.c ****  * blocks for a fixed period, then does the same again.
  63:FreeRTOS/Common/Minimal/PollQ.c ****  *
  64:FreeRTOS/Common/Minimal/PollQ.c ****  * All queue access is performed without blocking.  The consumer completely empties
  65:FreeRTOS/Common/Minimal/PollQ.c ****  * the queue each time it runs so the producer should never find the queue full.
  66:FreeRTOS/Common/Minimal/PollQ.c ****  *
  67:FreeRTOS/Common/Minimal/PollQ.c ****  * An error is flagged if the consumer obtains an unexpected value or the producer
  68:FreeRTOS/Common/Minimal/PollQ.c ****  * find the queue is full.
  69:FreeRTOS/Common/Minimal/PollQ.c ****  */
  70:FreeRTOS/Common/Minimal/PollQ.c **** 
  71:FreeRTOS/Common/Minimal/PollQ.c **** /*
  72:FreeRTOS/Common/Minimal/PollQ.c **** Changes from V2.0.0
  73:FreeRTOS/Common/Minimal/PollQ.c **** 
  74:FreeRTOS/Common/Minimal/PollQ.c **** 	+ Delay periods are now specified using variables and constants of
  75:FreeRTOS/Common/Minimal/PollQ.c **** 	  portTickType rather than unsigned portLONG.
  76:FreeRTOS/Common/Minimal/PollQ.c **** */
  77:FreeRTOS/Common/Minimal/PollQ.c **** 
  78:FreeRTOS/Common/Minimal/PollQ.c **** #include <stdlib.h>
  79:FreeRTOS/Common/Minimal/PollQ.c **** 
  80:FreeRTOS/Common/Minimal/PollQ.c **** /* Scheduler include files. */
  81:FreeRTOS/Common/Minimal/PollQ.c **** #include "FreeRTOS.h"
  82:FreeRTOS/Common/Minimal/PollQ.c **** #include "task.h"
  83:FreeRTOS/Common/Minimal/PollQ.c **** #include "queue.h"
  84:FreeRTOS/Common/Minimal/PollQ.c **** 
  85:FreeRTOS/Common/Minimal/PollQ.c **** /* Demo program include files. */
  86:FreeRTOS/Common/Minimal/PollQ.c **** #include "PollQ.h"
  87:FreeRTOS/Common/Minimal/PollQ.c **** 
  88:FreeRTOS/Common/Minimal/PollQ.c **** #define pollqSTACK_SIZE			configMINIMAL_STACK_SIZE
  89:FreeRTOS/Common/Minimal/PollQ.c **** #define pollqQUEUE_SIZE			( 10 )
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccwpiyZa.s 			page 3


  90:FreeRTOS/Common/Minimal/PollQ.c **** #define pollqPRODUCER_DELAY		( ( portTickType ) 200 / portTICK_RATE_MS )
  91:FreeRTOS/Common/Minimal/PollQ.c **** #define pollqCONSUMER_DELAY		( pollqPRODUCER_DELAY - ( portTickType ) ( 20 / portTICK_RATE_MS ) )
  92:FreeRTOS/Common/Minimal/PollQ.c **** #define pollqNO_DELAY			( ( portTickType ) 0 )
  93:FreeRTOS/Common/Minimal/PollQ.c **** #define pollqVALUES_TO_PRODUCE	( ( signed portBASE_TYPE ) 3 )
  94:FreeRTOS/Common/Minimal/PollQ.c **** #define pollqINITIAL_VALUE		( ( signed portBASE_TYPE ) 0 )
  95:FreeRTOS/Common/Minimal/PollQ.c **** 
  96:FreeRTOS/Common/Minimal/PollQ.c **** /* The task that posts the incrementing number onto the queue. */
  97:FreeRTOS/Common/Minimal/PollQ.c **** static portTASK_FUNCTION_PROTO( vPolledQueueProducer, pvParameters );
  98:FreeRTOS/Common/Minimal/PollQ.c **** 
  99:FreeRTOS/Common/Minimal/PollQ.c **** /* The task that empties the queue. */
 100:FreeRTOS/Common/Minimal/PollQ.c **** static portTASK_FUNCTION_PROTO( vPolledQueueConsumer, pvParameters );
 101:FreeRTOS/Common/Minimal/PollQ.c **** 
 102:FreeRTOS/Common/Minimal/PollQ.c **** /* Variables that are used to check that the tasks are still running with no
 103:FreeRTOS/Common/Minimal/PollQ.c **** errors. */
 104:FreeRTOS/Common/Minimal/PollQ.c **** static volatile signed portBASE_TYPE xPollingConsumerCount = pollqINITIAL_VALUE, xPollingProducerCo
 105:FreeRTOS/Common/Minimal/PollQ.c **** 
 106:FreeRTOS/Common/Minimal/PollQ.c **** /*-----------------------------------------------------------*/
 107:FreeRTOS/Common/Minimal/PollQ.c **** 
 108:FreeRTOS/Common/Minimal/PollQ.c **** void vStartPolledQueueTasks( unsigned portBASE_TYPE uxPriority )
 109:FreeRTOS/Common/Minimal/PollQ.c **** {
 110:FreeRTOS/Common/Minimal/PollQ.c **** static xQueueHandle xPolledQueue;
 111:FreeRTOS/Common/Minimal/PollQ.c **** 
 112:FreeRTOS/Common/Minimal/PollQ.c **** 	/* Create the queue used by the producer and consumer. */
 113:FreeRTOS/Common/Minimal/PollQ.c **** 	xPolledQueue = xQueueCreate( pollqQUEUE_SIZE, ( unsigned portBASE_TYPE ) sizeof( unsigned portSHOR
 114:FreeRTOS/Common/Minimal/PollQ.c **** 
 115:FreeRTOS/Common/Minimal/PollQ.c **** 	/* vQueueAddToRegistry() adds the queue to the queue registry, if one is
 116:FreeRTOS/Common/Minimal/PollQ.c **** 	in use.  The queue registry is provided as a means for kernel aware 
 117:FreeRTOS/Common/Minimal/PollQ.c **** 	debuggers to locate queues and has no purpose if a kernel aware debugger
 118:FreeRTOS/Common/Minimal/PollQ.c **** 	is not being used.  The call to vQueueAddToRegistry() will be removed
 119:FreeRTOS/Common/Minimal/PollQ.c **** 	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is 
 120:FreeRTOS/Common/Minimal/PollQ.c **** 	defined to be less than 1. */
 121:FreeRTOS/Common/Minimal/PollQ.c **** 	vQueueAddToRegistry( xPolledQueue, ( signed portCHAR * ) "Poll_Test_Queue" );
 122:FreeRTOS/Common/Minimal/PollQ.c **** 
 123:FreeRTOS/Common/Minimal/PollQ.c **** 	/* Spawn the producer and consumer. */
 124:FreeRTOS/Common/Minimal/PollQ.c **** 	xTaskCreate( vPolledQueueConsumer, ( signed portCHAR * ) "QConsNB", pollqSTACK_SIZE, ( void * ) &x
 125:FreeRTOS/Common/Minimal/PollQ.c **** 	xTaskCreate( vPolledQueueProducer, ( signed portCHAR * ) "QProdNB", pollqSTACK_SIZE, ( void * ) &x
 126:FreeRTOS/Common/Minimal/PollQ.c **** }
 127:FreeRTOS/Common/Minimal/PollQ.c **** /*-----------------------------------------------------------*/
 128:FreeRTOS/Common/Minimal/PollQ.c **** 
 129:FreeRTOS/Common/Minimal/PollQ.c **** static portTASK_FUNCTION( vPolledQueueProducer, pvParameters )
 130:FreeRTOS/Common/Minimal/PollQ.c **** {
  27              		.loc 1 130 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 70B5     		push	{r4, r5, r6, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 16
  35              		.cfi_offset 4, -16
  36              		.cfi_offset 5, -12
  37              		.cfi_offset 6, -8
  38              		.cfi_offset 14, -4
  39 0002 82B0     		sub	sp, sp, #8
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 24
  42 0004 0646     		mov	r6, r0
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccwpiyZa.s 			page 4


 131:FreeRTOS/Common/Minimal/PollQ.c **** unsigned portSHORT usValue = ( unsigned portSHORT ) 0;
  43              		.loc 1 131 0
  44 0006 0025     		movs	r5, #0
  45 0008 ADF80650 		strh	r5, [sp, #6]	@ movhi
  46              	.LVL1:
  47              	.L6:
 132:FreeRTOS/Common/Minimal/PollQ.c **** signed portBASE_TYPE xError = pdFALSE, xLoop;
 133:FreeRTOS/Common/Minimal/PollQ.c **** 
 134:FreeRTOS/Common/Minimal/PollQ.c **** 	for( ;; )
 135:FreeRTOS/Common/Minimal/PollQ.c **** 	{		
 136:FreeRTOS/Common/Minimal/PollQ.c **** 		for( xLoop = 0; xLoop < pollqVALUES_TO_PRODUCE; xLoop++ )
  48              		.loc 1 136 0
  49 000c 0024     		movs	r4, #0
  50 000e 19E0     		b	.L2
  51              	.LVL2:
  52              	.L5:
 137:FreeRTOS/Common/Minimal/PollQ.c **** 		{
 138:FreeRTOS/Common/Minimal/PollQ.c **** 			/* Send an incrementing number on the queue without blocking. */
 139:FreeRTOS/Common/Minimal/PollQ.c **** 			if( xQueueSend( *( ( xQueueHandle * ) pvParameters ), ( void * ) &usValue, pollqNO_DELAY ) != pd
  53              		.loc 1 139 0
  54 0010 0023     		movs	r3, #0
  55 0012 1A46     		mov	r2, r3
  56 0014 0DF10601 		add	r1, sp, #6
  57 0018 3068     		ldr	r0, [r6]
  58 001a FFF7FEFF 		bl	xQueueGenericSend
  59              	.LVL3:
  60 001e 0128     		cmp	r0, #1
  61 0020 0ED1     		bne	.L7
 140:FreeRTOS/Common/Minimal/PollQ.c **** 			{
 141:FreeRTOS/Common/Minimal/PollQ.c **** 				/* We should never find the queue full so if we get here there
 142:FreeRTOS/Common/Minimal/PollQ.c **** 				has been an error. */
 143:FreeRTOS/Common/Minimal/PollQ.c **** 				xError = pdTRUE;
 144:FreeRTOS/Common/Minimal/PollQ.c **** 			}
 145:FreeRTOS/Common/Minimal/PollQ.c **** 			else
 146:FreeRTOS/Common/Minimal/PollQ.c **** 			{
 147:FreeRTOS/Common/Minimal/PollQ.c **** 				if( xError == pdFALSE )
  62              		.loc 1 147 0
  63 0022 3DB9     		cbnz	r5, .L4
 148:FreeRTOS/Common/Minimal/PollQ.c **** 				{
 149:FreeRTOS/Common/Minimal/PollQ.c **** 					/* If an error has ever been recorded we stop incrementing the
 150:FreeRTOS/Common/Minimal/PollQ.c **** 					check variable. */
 151:FreeRTOS/Common/Minimal/PollQ.c **** 					portENTER_CRITICAL();
  64              		.loc 1 151 0
  65 0024 FFF7FEFF 		bl	vPortEnterCritical
  66              	.LVL4:
 152:FreeRTOS/Common/Minimal/PollQ.c **** 						xPollingProducerCount++;
  67              		.loc 1 152 0
  68 0028 094A     		ldr	r2, .L9
  69 002a 1368     		ldr	r3, [r2]
  70 002c 0133     		adds	r3, r3, #1
  71 002e 1360     		str	r3, [r2]
 153:FreeRTOS/Common/Minimal/PollQ.c **** 					portEXIT_CRITICAL();
  72              		.loc 1 153 0
  73 0030 FFF7FEFF 		bl	vPortExitCritical
  74              	.LVL5:
  75              	.L4:
 154:FreeRTOS/Common/Minimal/PollQ.c **** 				}
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccwpiyZa.s 			page 5


 155:FreeRTOS/Common/Minimal/PollQ.c **** 
 156:FreeRTOS/Common/Minimal/PollQ.c **** 				/* Update the value we are going to post next time around. */
 157:FreeRTOS/Common/Minimal/PollQ.c **** 				usValue++;
  76              		.loc 1 157 0
  77 0034 BDF80630 		ldrh	r3, [sp, #6]
  78 0038 0133     		adds	r3, r3, #1
  79 003a ADF80630 		strh	r3, [sp, #6]	@ movhi
  80 003e 00E0     		b	.L3
  81              	.L7:
 143:FreeRTOS/Common/Minimal/PollQ.c **** 			}
  82              		.loc 1 143 0
  83 0040 0125     		movs	r5, #1
  84              	.LVL6:
  85              	.L3:
 136:FreeRTOS/Common/Minimal/PollQ.c **** 		{
  86              		.loc 1 136 0 discriminator 2
  87 0042 0134     		adds	r4, r4, #1
  88              	.LVL7:
  89              	.L2:
 136:FreeRTOS/Common/Minimal/PollQ.c **** 		{
  90              		.loc 1 136 0 is_stmt 0 discriminator 1
  91 0044 022C     		cmp	r4, #2
  92 0046 E3DD     		ble	.L5
 158:FreeRTOS/Common/Minimal/PollQ.c **** 			}
 159:FreeRTOS/Common/Minimal/PollQ.c **** 		}
 160:FreeRTOS/Common/Minimal/PollQ.c **** 
 161:FreeRTOS/Common/Minimal/PollQ.c **** 		/* Wait before we start posting again to ensure the consumer runs and
 162:FreeRTOS/Common/Minimal/PollQ.c **** 		empties the queue. */
 163:FreeRTOS/Common/Minimal/PollQ.c **** 		vTaskDelay( pollqPRODUCER_DELAY );
  93              		.loc 1 163 0 is_stmt 1
  94 0048 C820     		movs	r0, #200
  95 004a FFF7FEFF 		bl	vTaskDelay
  96              	.LVL8:
 164:FreeRTOS/Common/Minimal/PollQ.c **** 	}
  97              		.loc 1 164 0
  98 004e DDE7     		b	.L6
  99              	.L10:
 100              		.align	2
 101              	.L9:
 102 0050 00000000 		.word	.LANCHOR0
 103              		.cfi_endproc
 104              	.LFE1:
 106              		.section	.text.vPolledQueueConsumer,"ax",%progbits
 107              		.align	2
 108              		.thumb
 109              		.thumb_func
 111              	vPolledQueueConsumer:
 112              	.LFB2:
 165:FreeRTOS/Common/Minimal/PollQ.c **** }  /*lint !e818 Function prototype must conform to API. */
 166:FreeRTOS/Common/Minimal/PollQ.c **** /*-----------------------------------------------------------*/
 167:FreeRTOS/Common/Minimal/PollQ.c **** 
 168:FreeRTOS/Common/Minimal/PollQ.c **** static portTASK_FUNCTION( vPolledQueueConsumer, pvParameters )
 169:FreeRTOS/Common/Minimal/PollQ.c **** {
 113              		.loc 1 169 0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 8
 116              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccwpiyZa.s 			page 6


 117              	.LVL9:
 118 0000 70B5     		push	{r4, r5, r6, lr}
 119              	.LCFI2:
 120              		.cfi_def_cfa_offset 16
 121              		.cfi_offset 4, -16
 122              		.cfi_offset 5, -12
 123              		.cfi_offset 6, -8
 124              		.cfi_offset 14, -4
 125 0002 82B0     		sub	sp, sp, #8
 126              	.LCFI3:
 127              		.cfi_def_cfa_offset 24
 128 0004 0446     		mov	r4, r0
 129              	.LVL10:
 170:FreeRTOS/Common/Minimal/PollQ.c **** unsigned portSHORT usData, usExpectedValue = ( unsigned portSHORT ) 0;
 171:FreeRTOS/Common/Minimal/PollQ.c **** signed portBASE_TYPE xError = pdFALSE;
 130              		.loc 1 171 0
 131 0006 0026     		movs	r6, #0
 170:FreeRTOS/Common/Minimal/PollQ.c **** unsigned portSHORT usData, usExpectedValue = ( unsigned portSHORT ) 0;
 132              		.loc 1 170 0
 133 0008 3546     		mov	r5, r6
 134 000a 1CE0     		b	.L12
 135              	.LVL11:
 136              	.L15:
 172:FreeRTOS/Common/Minimal/PollQ.c **** 
 173:FreeRTOS/Common/Minimal/PollQ.c **** 	for( ;; )
 174:FreeRTOS/Common/Minimal/PollQ.c **** 	{		
 175:FreeRTOS/Common/Minimal/PollQ.c **** 		/* Loop until the queue is empty. */
 176:FreeRTOS/Common/Minimal/PollQ.c **** 		while( uxQueueMessagesWaiting( *( ( xQueueHandle * ) pvParameters ) ) )
 177:FreeRTOS/Common/Minimal/PollQ.c **** 		{
 178:FreeRTOS/Common/Minimal/PollQ.c **** 			if( xQueueReceive( *( ( xQueueHandle * ) pvParameters ), &usData, pollqNO_DELAY ) == pdPASS )
 137              		.loc 1 178 0
 138 000c 0023     		movs	r3, #0
 139 000e 1A46     		mov	r2, r3
 140 0010 0DF10601 		add	r1, sp, #6
 141 0014 2068     		ldr	r0, [r4]
 142 0016 FFF7FEFF 		bl	xQueueGenericReceive
 143              	.LVL12:
 144 001a 0128     		cmp	r0, #1
 145 001c 13D1     		bne	.L12
 179:FreeRTOS/Common/Minimal/PollQ.c **** 			{
 180:FreeRTOS/Common/Minimal/PollQ.c **** 				if( usData != usExpectedValue )
 146              		.loc 1 180 0
 147 001e BDF80630 		ldrh	r3, [sp, #6]
 148 0022 9D42     		cmp	r5, r3
 149 0024 0AD1     		bne	.L16
 181:FreeRTOS/Common/Minimal/PollQ.c **** 				{
 182:FreeRTOS/Common/Minimal/PollQ.c **** 					/* This is not what we expected to receive so an error has
 183:FreeRTOS/Common/Minimal/PollQ.c **** 					occurred. */
 184:FreeRTOS/Common/Minimal/PollQ.c **** 					xError = pdTRUE;
 185:FreeRTOS/Common/Minimal/PollQ.c **** 
 186:FreeRTOS/Common/Minimal/PollQ.c **** 					/* Catch-up to the value we received so our next expected
 187:FreeRTOS/Common/Minimal/PollQ.c **** 					value should again be correct. */
 188:FreeRTOS/Common/Minimal/PollQ.c **** 					usExpectedValue = usData;
 189:FreeRTOS/Common/Minimal/PollQ.c **** 				}
 190:FreeRTOS/Common/Minimal/PollQ.c **** 				else
 191:FreeRTOS/Common/Minimal/PollQ.c **** 				{
 192:FreeRTOS/Common/Minimal/PollQ.c **** 					if( xError == pdFALSE )
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccwpiyZa.s 			page 7


 150              		.loc 1 192 0
 151 0026 5EB9     		cbnz	r6, .L17
 193:FreeRTOS/Common/Minimal/PollQ.c **** 					{
 194:FreeRTOS/Common/Minimal/PollQ.c **** 						/* Only increment the check variable if no errors have
 195:FreeRTOS/Common/Minimal/PollQ.c **** 						occurred. */
 196:FreeRTOS/Common/Minimal/PollQ.c **** 						portENTER_CRITICAL();
 152              		.loc 1 196 0
 153 0028 FFF7FEFF 		bl	vPortEnterCritical
 154              	.LVL13:
 197:FreeRTOS/Common/Minimal/PollQ.c **** 							xPollingConsumerCount++;
 155              		.loc 1 197 0
 156 002c 0A4A     		ldr	r2, .L19
 157 002e 1368     		ldr	r3, [r2]
 158 0030 0133     		adds	r3, r3, #1
 159 0032 1360     		str	r3, [r2]
 198:FreeRTOS/Common/Minimal/PollQ.c **** 						portEXIT_CRITICAL();
 160              		.loc 1 198 0
 161 0034 FFF7FEFF 		bl	vPortExitCritical
 162              	.LVL14:
 163 0038 2B46     		mov	r3, r5
 164 003a 02E0     		b	.L14
 165              	.L16:
 184:FreeRTOS/Common/Minimal/PollQ.c **** 
 166              		.loc 1 184 0
 167 003c 0126     		movs	r6, #1
 168              	.LVL15:
 169 003e 00E0     		b	.L14
 170              	.LVL16:
 171              	.L17:
 172 0040 2B46     		mov	r3, r5
 173              	.LVL17:
 174              	.L14:
 199:FreeRTOS/Common/Minimal/PollQ.c **** 					}
 200:FreeRTOS/Common/Minimal/PollQ.c **** 				}
 201:FreeRTOS/Common/Minimal/PollQ.c **** 
 202:FreeRTOS/Common/Minimal/PollQ.c **** 				/* Next time round we would expect the number to be one higher. */
 203:FreeRTOS/Common/Minimal/PollQ.c **** 				usExpectedValue++;
 175              		.loc 1 203 0
 176 0042 0133     		adds	r3, r3, #1
 177              	.LVL18:
 178 0044 9DB2     		uxth	r5, r3
 179              	.LVL19:
 180              	.L12:
 176:FreeRTOS/Common/Minimal/PollQ.c **** 		{
 181              		.loc 1 176 0
 182 0046 2068     		ldr	r0, [r4]
 183 0048 FFF7FEFF 		bl	uxQueueMessagesWaiting
 184              	.LVL20:
 185 004c 0028     		cmp	r0, #0
 186 004e DDD1     		bne	.L15
 204:FreeRTOS/Common/Minimal/PollQ.c **** 			}
 205:FreeRTOS/Common/Minimal/PollQ.c **** 		}
 206:FreeRTOS/Common/Minimal/PollQ.c **** 
 207:FreeRTOS/Common/Minimal/PollQ.c **** 		/* Now the queue is empty we block, allowing the producer to place more
 208:FreeRTOS/Common/Minimal/PollQ.c **** 		items in the queue. */
 209:FreeRTOS/Common/Minimal/PollQ.c **** 		vTaskDelay( pollqCONSUMER_DELAY );
 187              		.loc 1 209 0
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccwpiyZa.s 			page 8


 188 0050 B420     		movs	r0, #180
 189 0052 FFF7FEFF 		bl	vTaskDelay
 190              	.LVL21:
 210:FreeRTOS/Common/Minimal/PollQ.c **** 	}
 191              		.loc 1 210 0
 192 0056 F6E7     		b	.L12
 193              	.L20:
 194              		.align	2
 195              	.L19:
 196 0058 00000000 		.word	.LANCHOR1
 197              		.cfi_endproc
 198              	.LFE2:
 200              		.section	.text.vStartPolledQueueTasks,"ax",%progbits
 201              		.align	2
 202              		.global	vStartPolledQueueTasks
 203              		.thumb
 204              		.thumb_func
 206              	vStartPolledQueueTasks:
 207              	.LFB0:
 109:FreeRTOS/Common/Minimal/PollQ.c **** static xQueueHandle xPolledQueue;
 208              		.loc 1 109 0
 209              		.cfi_startproc
 210              		@ args = 0, pretend = 0, frame = 0
 211              		@ frame_needed = 0, uses_anonymous_args = 0
 212              	.LVL22:
 213 0000 70B5     		push	{r4, r5, r6, lr}
 214              	.LCFI4:
 215              		.cfi_def_cfa_offset 16
 216              		.cfi_offset 4, -16
 217              		.cfi_offset 5, -12
 218              		.cfi_offset 6, -8
 219              		.cfi_offset 14, -4
 220 0002 82B0     		sub	sp, sp, #8
 221              	.LCFI5:
 222              		.cfi_def_cfa_offset 24
 223 0004 0546     		mov	r5, r0
 113:FreeRTOS/Common/Minimal/PollQ.c **** 
 224              		.loc 1 113 0
 225 0006 0221     		movs	r1, #2
 226 0008 0A20     		movs	r0, #10
 227              	.LVL23:
 228 000a FFF7FEFF 		bl	xQueueCreate
 229              	.LVL24:
 230 000e 0A4C     		ldr	r4, .L23
 231 0010 2060     		str	r0, [r4]
 124:FreeRTOS/Common/Minimal/PollQ.c **** 	xTaskCreate( vPolledQueueProducer, ( signed portCHAR * ) "QProdNB", pollqSTACK_SIZE, ( void * ) &x
 232              		.loc 1 124 0
 233 0012 0026     		movs	r6, #0
 234 0014 0196     		str	r6, [sp, #4]
 235 0016 0095     		str	r5, [sp]
 236 0018 2346     		mov	r3, r4
 237 001a 8022     		movs	r2, #128
 238 001c 0749     		ldr	r1, .L23+4
 239 001e 0848     		ldr	r0, .L23+8
 240 0020 FFF7FEFF 		bl	xTaskCreate
 241              	.LVL25:
 125:FreeRTOS/Common/Minimal/PollQ.c **** }
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccwpiyZa.s 			page 9


 242              		.loc 1 125 0
 243 0024 0196     		str	r6, [sp, #4]
 244 0026 0095     		str	r5, [sp]
 245 0028 2346     		mov	r3, r4
 246 002a 8022     		movs	r2, #128
 247 002c 0549     		ldr	r1, .L23+12
 248 002e 0648     		ldr	r0, .L23+16
 249 0030 FFF7FEFF 		bl	xTaskCreate
 250              	.LVL26:
 126:FreeRTOS/Common/Minimal/PollQ.c **** /*-----------------------------------------------------------*/
 251              		.loc 1 126 0
 252 0034 02B0     		add	sp, sp, #8
 253              	.LCFI6:
 254              		.cfi_def_cfa_offset 16
 255              		@ sp needed
 256 0036 70BD     		pop	{r4, r5, r6, pc}
 257              	.LVL27:
 258              	.L24:
 259              		.align	2
 260              	.L23:
 261 0038 00000000 		.word	.LANCHOR2
 262 003c 00000000 		.word	.LC0
 263 0040 00000000 		.word	vPolledQueueConsumer
 264 0044 08000000 		.word	.LC1
 265 0048 00000000 		.word	vPolledQueueProducer
 266              		.cfi_endproc
 267              	.LFE0:
 269              		.section	.text.xArePollingQueuesStillRunning,"ax",%progbits
 270              		.align	2
 271              		.global	xArePollingQueuesStillRunning
 272              		.thumb
 273              		.thumb_func
 275              	xArePollingQueuesStillRunning:
 276              	.LFB3:
 211:FreeRTOS/Common/Minimal/PollQ.c **** } /*lint !e818 Function prototype must conform to API. */
 212:FreeRTOS/Common/Minimal/PollQ.c **** /*-----------------------------------------------------------*/
 213:FreeRTOS/Common/Minimal/PollQ.c **** 
 214:FreeRTOS/Common/Minimal/PollQ.c **** /* This is called to check that all the created tasks are still running with no errors. */
 215:FreeRTOS/Common/Minimal/PollQ.c **** portBASE_TYPE xArePollingQueuesStillRunning( void )
 216:FreeRTOS/Common/Minimal/PollQ.c **** {
 277              		.loc 1 216 0
 278              		.cfi_startproc
 279              		@ args = 0, pretend = 0, frame = 0
 280              		@ frame_needed = 0, uses_anonymous_args = 0
 281              		@ link register save eliminated.
 217:FreeRTOS/Common/Minimal/PollQ.c **** portBASE_TYPE xReturn;
 218:FreeRTOS/Common/Minimal/PollQ.c **** 
 219:FreeRTOS/Common/Minimal/PollQ.c **** 	/* Check both the consumer and producer poll count to check they have both
 220:FreeRTOS/Common/Minimal/PollQ.c **** 	been changed since out last trip round.  We do not need a critical section
 221:FreeRTOS/Common/Minimal/PollQ.c **** 	around the check variables as this is called from a higher priority than
 222:FreeRTOS/Common/Minimal/PollQ.c **** 	the other tasks that access the same variables. */
 223:FreeRTOS/Common/Minimal/PollQ.c **** 	if( ( xPollingConsumerCount == pollqINITIAL_VALUE ) ||
 282              		.loc 1 223 0
 283 0000 084B     		ldr	r3, .L29
 284 0002 1B68     		ldr	r3, [r3]
 285 0004 23B1     		cbz	r3, .L27
 224:FreeRTOS/Common/Minimal/PollQ.c **** 		( xPollingProducerCount == pollqINITIAL_VALUE )
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccwpiyZa.s 			page 10


 286              		.loc 1 224 0 discriminator 1
 287 0006 084B     		ldr	r3, .L29+4
 288 0008 1B68     		ldr	r3, [r3]
 223:FreeRTOS/Common/Minimal/PollQ.c **** 		( xPollingProducerCount == pollqINITIAL_VALUE )
 289              		.loc 1 223 0 discriminator 1
 290 000a 1BB9     		cbnz	r3, .L28
 225:FreeRTOS/Common/Minimal/PollQ.c **** 	  )
 226:FreeRTOS/Common/Minimal/PollQ.c **** 	{
 227:FreeRTOS/Common/Minimal/PollQ.c **** 		xReturn = pdFALSE;
 291              		.loc 1 227 0
 292 000c 0020     		movs	r0, #0
 293 000e 02E0     		b	.L26
 294              	.L27:
 295 0010 0020     		movs	r0, #0
 296 0012 00E0     		b	.L26
 297              	.L28:
 228:FreeRTOS/Common/Minimal/PollQ.c **** 	}
 229:FreeRTOS/Common/Minimal/PollQ.c **** 	else
 230:FreeRTOS/Common/Minimal/PollQ.c **** 	{
 231:FreeRTOS/Common/Minimal/PollQ.c **** 		xReturn = pdTRUE;
 298              		.loc 1 231 0
 299 0014 0120     		movs	r0, #1
 300              	.L26:
 301              	.LVL28:
 232:FreeRTOS/Common/Minimal/PollQ.c **** 	}
 233:FreeRTOS/Common/Minimal/PollQ.c **** 
 234:FreeRTOS/Common/Minimal/PollQ.c **** 	/* Set the check variables back down so we know if they have been
 235:FreeRTOS/Common/Minimal/PollQ.c **** 	incremented the next time around. */
 236:FreeRTOS/Common/Minimal/PollQ.c **** 	xPollingConsumerCount = pollqINITIAL_VALUE;
 302              		.loc 1 236 0
 303 0016 0023     		movs	r3, #0
 304 0018 024A     		ldr	r2, .L29
 305 001a 1360     		str	r3, [r2]
 237:FreeRTOS/Common/Minimal/PollQ.c **** 	xPollingProducerCount = pollqINITIAL_VALUE;
 306              		.loc 1 237 0
 307 001c 024A     		ldr	r2, .L29+4
 308 001e 1360     		str	r3, [r2]
 238:FreeRTOS/Common/Minimal/PollQ.c **** 
 239:FreeRTOS/Common/Minimal/PollQ.c **** 	return xReturn;
 240:FreeRTOS/Common/Minimal/PollQ.c **** }
 309              		.loc 1 240 0
 310 0020 7047     		bx	lr
 311              	.L30:
 312 0022 00BF     		.align	2
 313              	.L29:
 314 0024 00000000 		.word	.LANCHOR1
 315 0028 00000000 		.word	.LANCHOR0
 316              		.cfi_endproc
 317              	.LFE3:
 319              		.section	.bss.xPolledQueue.4989,"aw",%nobits
 320              		.align	2
 321              		.set	.LANCHOR2,. + 0
 324              	xPolledQueue.4989:
 325 0000 00000000 		.space	4
 326              		.section	.bss.xPollingProducerCount,"aw",%nobits
 327              		.align	2
 328              		.set	.LANCHOR0,. + 0
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccwpiyZa.s 			page 11


 331              	xPollingProducerCount:
 332 0000 00000000 		.space	4
 333              		.section	.rodata.str1.4,"aMS",%progbits,1
 334              		.align	2
 335              	.LC0:
 336 0000 51436F6E 		.ascii	"QConsNB\000"
 336      734E4200 
 337              	.LC1:
 338 0008 5150726F 		.ascii	"QProdNB\000"
 338      644E4200 
 339              		.section	.bss.xPollingConsumerCount,"aw",%nobits
 340              		.align	2
 341              		.set	.LANCHOR1,. + 0
 344              	xPollingConsumerCount:
 345 0000 00000000 		.space	4
 346              		.text
 347              	.Letext0:
 348              		.file 2 "FreeRTOS/ARMCM3/Inc/portmacro.h"
 349              		.file 3 "FreeRTOS/Inc/task.h"
 350              		.file 4 "FreeRTOS/Inc/queue.h"
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccwpiyZa.s 			page 12


DEFINED SYMBOLS
                            *ABS*:0000000000000000 PollQ.c
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccwpiyZa.s:20     .text.vPolledQueueProducer:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccwpiyZa.s:24     .text.vPolledQueueProducer:0000000000000000 vPolledQueueProducer
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccwpiyZa.s:102    .text.vPolledQueueProducer:0000000000000050 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccwpiyZa.s:107    .text.vPolledQueueConsumer:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccwpiyZa.s:111    .text.vPolledQueueConsumer:0000000000000000 vPolledQueueConsumer
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccwpiyZa.s:196    .text.vPolledQueueConsumer:0000000000000058 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccwpiyZa.s:201    .text.vStartPolledQueueTasks:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccwpiyZa.s:206    .text.vStartPolledQueueTasks:0000000000000000 vStartPolledQueueTasks
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccwpiyZa.s:261    .text.vStartPolledQueueTasks:0000000000000038 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccwpiyZa.s:270    .text.xArePollingQueuesStillRunning:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccwpiyZa.s:275    .text.xArePollingQueuesStillRunning:0000000000000000 xArePollingQueuesStillRunning
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccwpiyZa.s:314    .text.xArePollingQueuesStillRunning:0000000000000024 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccwpiyZa.s:320    .bss.xPolledQueue.4989:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccwpiyZa.s:324    .bss.xPolledQueue.4989:0000000000000000 xPolledQueue.4989
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccwpiyZa.s:327    .bss.xPollingProducerCount:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccwpiyZa.s:331    .bss.xPollingProducerCount:0000000000000000 xPollingProducerCount
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccwpiyZa.s:334    .rodata.str1.4:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccwpiyZa.s:340    .bss.xPollingConsumerCount:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccwpiyZa.s:344    .bss.xPollingConsumerCount:0000000000000000 xPollingConsumerCount
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
xQueueGenericSend
vPortEnterCritical
vPortExitCritical
vTaskDelay
xQueueGenericReceive
uxQueueMessagesWaiting
xQueueCreate
xTaskCreate
