ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccrJQnVB.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"timertest.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.vSetupTimerTest,"ax",%progbits
  20              		.align	2
  21              		.global	vSetupTimerTest
  22              		.thumb
  23              		.thumb_func
  25              	vSetupTimerTest:
  26              	.LFB27:
  27              		.file 1 "FreeRTOS/parTest/timertest.c"
   1:FreeRTOS/parTest/timertest.c **** /*
   2:FreeRTOS/parTest/timertest.c **** 	FreeRTOS V5.4.2 - Copyright (C) 2009 Real Time Engineers Ltd.
   3:FreeRTOS/parTest/timertest.c **** 
   4:FreeRTOS/parTest/timertest.c **** 	This file is part of the FreeRTOS distribution.
   5:FreeRTOS/parTest/timertest.c **** 
   6:FreeRTOS/parTest/timertest.c **** 	FreeRTOS is free software; you can redistribute it and/or modify it	under 
   7:FreeRTOS/parTest/timertest.c **** 	the terms of the GNU General Public License (version 2) as published by the 
   8:FreeRTOS/parTest/timertest.c **** 	Free Software Foundation and modified by the FreeRTOS exception.
   9:FreeRTOS/parTest/timertest.c **** 	**NOTE** The exception to the GPL is included to allow you to distribute a
  10:FreeRTOS/parTest/timertest.c **** 	combined work that includes FreeRTOS without being obliged to provide the 
  11:FreeRTOS/parTest/timertest.c **** 	source code for proprietary components outside of the FreeRTOS kernel.  
  12:FreeRTOS/parTest/timertest.c **** 	Alternative commercial license and support terms are also available upon 
  13:FreeRTOS/parTest/timertest.c **** 	request.  See the licensing section of http://www.FreeRTOS.org for full 
  14:FreeRTOS/parTest/timertest.c **** 	license details.
  15:FreeRTOS/parTest/timertest.c **** 
  16:FreeRTOS/parTest/timertest.c **** 	FreeRTOS is distributed in the hope that it will be useful,	but WITHOUT
  17:FreeRTOS/parTest/timertest.c **** 	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  18:FreeRTOS/parTest/timertest.c **** 	FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  19:FreeRTOS/parTest/timertest.c **** 	more details.
  20:FreeRTOS/parTest/timertest.c **** 
  21:FreeRTOS/parTest/timertest.c **** 	You should have received a copy of the GNU General Public License along
  22:FreeRTOS/parTest/timertest.c **** 	with FreeRTOS; if not, write to the Free Software Foundation, Inc., 59
  23:FreeRTOS/parTest/timertest.c **** 	Temple Place, Suite 330, Boston, MA  02111-1307  USA.
  24:FreeRTOS/parTest/timertest.c **** 
  25:FreeRTOS/parTest/timertest.c **** 
  26:FreeRTOS/parTest/timertest.c **** 	***************************************************************************
  27:FreeRTOS/parTest/timertest.c **** 	*                                                                         *
  28:FreeRTOS/parTest/timertest.c **** 	* Looking for a quick start?  Then check out the FreeRTOS eBook!          *
  29:FreeRTOS/parTest/timertest.c **** 	* See http://www.FreeRTOS.org/Documentation for details                   *
  30:FreeRTOS/parTest/timertest.c **** 	*                                                                         *
  31:FreeRTOS/parTest/timertest.c **** 	***************************************************************************
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccrJQnVB.s 			page 2


  32:FreeRTOS/parTest/timertest.c **** 
  33:FreeRTOS/parTest/timertest.c **** 	1 tab == 4 spaces!
  34:FreeRTOS/parTest/timertest.c **** 
  35:FreeRTOS/parTest/timertest.c **** 	Please ensure to read the configuration and relevant port sections of the
  36:FreeRTOS/parTest/timertest.c **** 	online documentation.
  37:FreeRTOS/parTest/timertest.c **** 
  38:FreeRTOS/parTest/timertest.c **** 	http://www.FreeRTOS.org - Documentation, latest information, license and
  39:FreeRTOS/parTest/timertest.c **** 	contact details.
  40:FreeRTOS/parTest/timertest.c **** 
  41:FreeRTOS/parTest/timertest.c **** 	http://www.SafeRTOS.com - A version that is certified for use in safety
  42:FreeRTOS/parTest/timertest.c **** 	critical systems.
  43:FreeRTOS/parTest/timertest.c **** 
  44:FreeRTOS/parTest/timertest.c **** 	http://www.OpenRTOS.com - Commercial support, development, porting,
  45:FreeRTOS/parTest/timertest.c **** 	licensing and training services.
  46:FreeRTOS/parTest/timertest.c **** */
  47:FreeRTOS/parTest/timertest.c **** 
  48:FreeRTOS/parTest/timertest.c **** /* High speed timer test as described in main.c. */
  49:FreeRTOS/parTest/timertest.c **** 
  50:FreeRTOS/parTest/timertest.c **** /* Scheduler includes. */
  51:FreeRTOS/parTest/timertest.c **** #include "FreeRTOS.h"
  52:FreeRTOS/parTest/timertest.c **** 
  53:FreeRTOS/parTest/timertest.c **** /* Library includes. */
  54:FreeRTOS/parTest/timertest.c **** #include "stm32f10x_conf.h"
  55:FreeRTOS/parTest/timertest.c **** #include "stm32f10x_tim.h"
  56:FreeRTOS/parTest/timertest.c **** #include "stm32f10x.h"
  57:FreeRTOS/parTest/timertest.c **** 
  58:FreeRTOS/parTest/timertest.c **** #define TIM2_IRQChannel   ((u8)0x1C)
  59:FreeRTOS/parTest/timertest.c **** 
  60:FreeRTOS/parTest/timertest.c **** /* The set frequency of the interrupt.  Deviations from this are measured as
  61:FreeRTOS/parTest/timertest.c **** the jitter. */
  62:FreeRTOS/parTest/timertest.c **** #define timerINTERRUPT_FREQUENCY		( ( unsigned portSHORT ) 20000 )
  63:FreeRTOS/parTest/timertest.c **** 
  64:FreeRTOS/parTest/timertest.c **** /* The expected time between each of the timer interrupts - if the jitter was
  65:FreeRTOS/parTest/timertest.c **** zero. */
  66:FreeRTOS/parTest/timertest.c **** #define timerEXPECTED_DIFFERENCE_VALUE	( configCPU_CLOCK_HZ / timerINTERRUPT_FREQUENCY )
  67:FreeRTOS/parTest/timertest.c **** 
  68:FreeRTOS/parTest/timertest.c **** /* The highest available interrupt priority. */
  69:FreeRTOS/parTest/timertest.c **** #define timerHIGHEST_PRIORITY			( 0 )
  70:FreeRTOS/parTest/timertest.c **** 
  71:FreeRTOS/parTest/timertest.c **** /* Misc defines. */
  72:FreeRTOS/parTest/timertest.c **** #define timerMAX_32BIT_VALUE			( 0xffffffffUL )
  73:FreeRTOS/parTest/timertest.c **** #define timerTIMER_1_COUNT_VALUE		( * ( ( unsigned long * ) ( TIMER1_BASE + 0x48 ) ) )
  74:FreeRTOS/parTest/timertest.c **** 
  75:FreeRTOS/parTest/timertest.c **** /* The number of interrupts to pass before we start looking at the jitter. */
  76:FreeRTOS/parTest/timertest.c **** #define timerSETTLE_TIME			5
  77:FreeRTOS/parTest/timertest.c **** 
  78:FreeRTOS/parTest/timertest.c **** /*-----------------------------------------------------------*/
  79:FreeRTOS/parTest/timertest.c **** 
  80:FreeRTOS/parTest/timertest.c **** /*
  81:FreeRTOS/parTest/timertest.c ****  * Configures the two timers used to perform the test.
  82:FreeRTOS/parTest/timertest.c ****  */
  83:FreeRTOS/parTest/timertest.c **** void vSetupTimerTest( void );
  84:FreeRTOS/parTest/timertest.c **** 
  85:FreeRTOS/parTest/timertest.c **** /* Interrupt handler in which the jitter is measured. */
  86:FreeRTOS/parTest/timertest.c **** void vTimer2IntHandler( void );
  87:FreeRTOS/parTest/timertest.c **** 
  88:FreeRTOS/parTest/timertest.c **** /* Stores the value of the maximum recorded jitter between interrupts. */
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccrJQnVB.s 			page 3


  89:FreeRTOS/parTest/timertest.c **** volatile unsigned portSHORT usMaxJitter = 0;
  90:FreeRTOS/parTest/timertest.c **** 
  91:FreeRTOS/parTest/timertest.c **** /*-----------------------------------------------------------*/
  92:FreeRTOS/parTest/timertest.c **** 
  93:FreeRTOS/parTest/timertest.c **** void vSetupTimerTest( void )
  94:FreeRTOS/parTest/timertest.c **** {
  28              		.loc 1 94 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 16
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 30B5     		push	{r4, r5, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 12
  35              		.cfi_offset 4, -12
  36              		.cfi_offset 5, -8
  37              		.cfi_offset 14, -4
  38 0002 85B0     		sub	sp, sp, #20
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 32
  95:FreeRTOS/parTest/timertest.c **** unsigned long ulFrequency;
  96:FreeRTOS/parTest/timertest.c **** TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
  97:FreeRTOS/parTest/timertest.c **** NVIC_InitTypeDef NVIC_InitStructure;
  98:FreeRTOS/parTest/timertest.c **** 
  99:FreeRTOS/parTest/timertest.c **** 
 100:FreeRTOS/parTest/timertest.c **** 	/* Enable timer clocks */
 101:FreeRTOS/parTest/timertest.c **** 	RCC_APB1PeriphClockCmd( RCC_APB1Periph_TIM2, ENABLE );
  41              		.loc 1 101 0
  42 0004 0121     		movs	r1, #1
  43 0006 0846     		mov	r0, r1
  44 0008 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
  45              	.LVL0:
 102:FreeRTOS/parTest/timertest.c **** 	RCC_APB1PeriphClockCmd( RCC_APB1Periph_TIM3, ENABLE );
  46              		.loc 1 102 0
  47 000c 0121     		movs	r1, #1
  48 000e 0220     		movs	r0, #2
  49 0010 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
  50              	.LVL1:
 103:FreeRTOS/parTest/timertest.c **** 
 104:FreeRTOS/parTest/timertest.c **** 	/* Initialise data. */
 105:FreeRTOS/parTest/timertest.c **** 	TIM_DeInit( TIM2 );
  51              		.loc 1 105 0
  52 0014 4FF08040 		mov	r0, #1073741824
  53 0018 FFF7FEFF 		bl	TIM_DeInit
  54              	.LVL2:
 106:FreeRTOS/parTest/timertest.c **** 	TIM_DeInit( TIM3 );
  55              		.loc 1 106 0
  56 001c 224D     		ldr	r5, .L3
  57 001e 2846     		mov	r0, r5
  58 0020 FFF7FEFF 		bl	TIM_DeInit
  59              	.LVL3:
 107:FreeRTOS/parTest/timertest.c **** 	TIM_TimeBaseStructInit( &TIM_TimeBaseStructure );
  60              		.loc 1 107 0
  61 0024 01A8     		add	r0, sp, #4
  62 0026 FFF7FEFF 		bl	TIM_TimeBaseStructInit
  63              	.LVL4:
 108:FreeRTOS/parTest/timertest.c **** 
 109:FreeRTOS/parTest/timertest.c **** 	/* Time base configuration for timer 2 - which generates the interrupts. */
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccrJQnVB.s 			page 4


 110:FreeRTOS/parTest/timertest.c **** 	ulFrequency = configCPU_CLOCK_HZ / timerINTERRUPT_FREQUENCY;	
 111:FreeRTOS/parTest/timertest.c **** 	TIM_TimeBaseStructure.TIM_Period = ( unsigned portSHORT ) ( ulFrequency & 0xffffUL );
  64              		.loc 1 111 0
  65 002a 4FF46163 		mov	r3, #3600
  66 002e ADF80830 		strh	r3, [sp, #8]	@ movhi
 112:FreeRTOS/parTest/timertest.c **** 	TIM_TimeBaseStructure.TIM_Prescaler = 0x0;
  67              		.loc 1 112 0
  68 0032 0024     		movs	r4, #0
  69 0034 ADF80440 		strh	r4, [sp, #4]	@ movhi
 113:FreeRTOS/parTest/timertest.c **** 	TIM_TimeBaseStructure.TIM_ClockDivision = 0x0;
  70              		.loc 1 113 0
  71 0038 ADF80A40 		strh	r4, [sp, #10]	@ movhi
 114:FreeRTOS/parTest/timertest.c **** 	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
  72              		.loc 1 114 0
  73 003c ADF80640 		strh	r4, [sp, #6]	@ movhi
 115:FreeRTOS/parTest/timertest.c **** 	TIM_TimeBaseInit( TIM2, &TIM_TimeBaseStructure );
  74              		.loc 1 115 0
  75 0040 01A9     		add	r1, sp, #4
  76 0042 4FF08040 		mov	r0, #1073741824
  77 0046 FFF7FEFF 		bl	TIM_TimeBaseInit
  78              	.LVL5:
 116:FreeRTOS/parTest/timertest.c **** 	TIM_ARRPreloadConfig( TIM2, ENABLE );
  79              		.loc 1 116 0
  80 004a 0121     		movs	r1, #1
  81 004c 4FF08040 		mov	r0, #1073741824
  82 0050 FFF7FEFF 		bl	TIM_ARRPreloadConfig
  83              	.LVL6:
 117:FreeRTOS/parTest/timertest.c **** 
 118:FreeRTOS/parTest/timertest.c **** 	
 119:FreeRTOS/parTest/timertest.c **** 	/* Configuration for timer 3 which is used as a high resolution time
 120:FreeRTOS/parTest/timertest.c **** 	measurement. */
 121:FreeRTOS/parTest/timertest.c **** 	TIM_TimeBaseStructure.TIM_Period = ( unsigned portSHORT ) 0xffff;
  84              		.loc 1 121 0
  85 0054 4FF6FF73 		movw	r3, #65535
  86 0058 ADF80830 		strh	r3, [sp, #8]	@ movhi
 122:FreeRTOS/parTest/timertest.c **** 	TIM_TimeBaseInit( TIM3, &TIM_TimeBaseStructure );
  87              		.loc 1 122 0
  88 005c 01A9     		add	r1, sp, #4
  89 005e 2846     		mov	r0, r5
  90 0060 FFF7FEFF 		bl	TIM_TimeBaseInit
  91              	.LVL7:
 123:FreeRTOS/parTest/timertest.c **** 	TIM_ARRPreloadConfig( TIM3, ENABLE );
  92              		.loc 1 123 0
  93 0064 0121     		movs	r1, #1
  94 0066 2846     		mov	r0, r5
  95 0068 FFF7FEFF 		bl	TIM_ARRPreloadConfig
  96              	.LVL8:
 124:FreeRTOS/parTest/timertest.c **** 	
 125:FreeRTOS/parTest/timertest.c **** 	/* Enable TIM2 IT.  TIM3 does not generate an interrupt. */
 126:FreeRTOS/parTest/timertest.c **** 	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQChannel;
  97              		.loc 1 126 0
  98 006c 1C23     		movs	r3, #28
  99 006e 8DF80030 		strb	r3, [sp]
 127:FreeRTOS/parTest/timertest.c **** 	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 100              		.loc 1 127 0
 101 0072 8DF80240 		strb	r4, [sp, #2]
 128:FreeRTOS/parTest/timertest.c **** 	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = timerHIGHEST_PRIORITY;
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccrJQnVB.s 			page 5


 102              		.loc 1 128 0
 103 0076 8DF80140 		strb	r4, [sp, #1]
 129:FreeRTOS/parTest/timertest.c **** 	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 104              		.loc 1 129 0
 105 007a 0124     		movs	r4, #1
 106 007c 8DF80340 		strb	r4, [sp, #3]
 130:FreeRTOS/parTest/timertest.c **** 	NVIC_Init( &NVIC_InitStructure );	
 107              		.loc 1 130 0
 108 0080 6846     		mov	r0, sp
 109 0082 FFF7FEFF 		bl	NVIC_Init
 110              	.LVL9:
 131:FreeRTOS/parTest/timertest.c **** 	TIM_ITConfig( TIM2, TIM_IT_Update, ENABLE );
 111              		.loc 1 131 0
 112 0086 2246     		mov	r2, r4
 113 0088 2146     		mov	r1, r4
 114 008a 4FF08040 		mov	r0, #1073741824
 115 008e FFF7FEFF 		bl	TIM_ITConfig
 116              	.LVL10:
 132:FreeRTOS/parTest/timertest.c **** 
 133:FreeRTOS/parTest/timertest.c **** 	/* Finally, enable both timers. */
 134:FreeRTOS/parTest/timertest.c **** 	TIM_Cmd( TIM2, ENABLE );
 117              		.loc 1 134 0
 118 0092 2146     		mov	r1, r4
 119 0094 4FF08040 		mov	r0, #1073741824
 120 0098 FFF7FEFF 		bl	TIM_Cmd
 121              	.LVL11:
 135:FreeRTOS/parTest/timertest.c **** 	TIM_Cmd( TIM3, ENABLE );
 122              		.loc 1 135 0
 123 009c 2146     		mov	r1, r4
 124 009e 2846     		mov	r0, r5
 125 00a0 FFF7FEFF 		bl	TIM_Cmd
 126              	.LVL12:
 136:FreeRTOS/parTest/timertest.c **** }
 127              		.loc 1 136 0
 128 00a4 05B0     		add	sp, sp, #20
 129              	.LCFI2:
 130              		.cfi_def_cfa_offset 12
 131              		@ sp needed
 132 00a6 30BD     		pop	{r4, r5, pc}
 133              	.L4:
 134              		.align	2
 135              	.L3:
 136 00a8 00040040 		.word	1073742848
 137              		.cfi_endproc
 138              	.LFE27:
 140              		.section	.text.vTimer2IntHandler,"ax",%progbits
 141              		.align	2
 142              		.global	vTimer2IntHandler
 143              		.thumb
 144              		.thumb_func
 146              	vTimer2IntHandler:
 147              	.LFB28:
 137:FreeRTOS/parTest/timertest.c **** /*-----------------------------------------------------------*/
 138:FreeRTOS/parTest/timertest.c **** 
 139:FreeRTOS/parTest/timertest.c **** void vTimer2IntHandler( void )
 140:FreeRTOS/parTest/timertest.c **** {
 148              		.loc 1 140 0
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccrJQnVB.s 			page 6


 149              		.cfi_startproc
 150              		@ args = 0, pretend = 0, frame = 0
 151              		@ frame_needed = 0, uses_anonymous_args = 0
 152 0000 08B5     		push	{r3, lr}
 153              	.LCFI3:
 154              		.cfi_def_cfa_offset 8
 155              		.cfi_offset 3, -8
 156              		.cfi_offset 14, -4
 141:FreeRTOS/parTest/timertest.c **** static unsigned portSHORT usLastCount = 0, usSettleCount = 0, usMaxDifference = 0;
 142:FreeRTOS/parTest/timertest.c **** unsigned portSHORT usThisCount, usDifference;
 143:FreeRTOS/parTest/timertest.c **** 
 144:FreeRTOS/parTest/timertest.c **** 	/* Capture the free running timer 3 value as we enter the interrupt. */
 145:FreeRTOS/parTest/timertest.c **** 	usThisCount = TIM3->CNT;
 157              		.loc 1 145 0
 158 0002 114B     		ldr	r3, .L9
 159 0004 9B8C     		ldrh	r3, [r3, #36]
 160 0006 9BB2     		uxth	r3, r3
 161              	.LVL13:
 146:FreeRTOS/parTest/timertest.c **** 	
 147:FreeRTOS/parTest/timertest.c **** 	if( usSettleCount >= timerSETTLE_TIME )
 162              		.loc 1 147 0
 163 0008 104A     		ldr	r2, .L9+4
 164 000a 1288     		ldrh	r2, [r2]
 165 000c 042A     		cmp	r2, #4
 166 000e 0FD9     		bls	.L6
 148:FreeRTOS/parTest/timertest.c **** 	{
 149:FreeRTOS/parTest/timertest.c **** 		/* What is the difference between the timer value in this interrupt
 150:FreeRTOS/parTest/timertest.c **** 		and the value from the last interrupt. */
 151:FreeRTOS/parTest/timertest.c **** 		usDifference = usThisCount - usLastCount;
 167              		.loc 1 151 0
 168 0010 0F4A     		ldr	r2, .L9+8
 169 0012 1288     		ldrh	r2, [r2]
 170 0014 9A1A     		subs	r2, r3, r2
 171 0016 92B2     		uxth	r2, r2
 172              	.LVL14:
 152:FreeRTOS/parTest/timertest.c **** 
 153:FreeRTOS/parTest/timertest.c **** 		/* Store the difference in the timer values if it is larger than the
 154:FreeRTOS/parTest/timertest.c **** 		currently stored largest value.  The difference over and above the
 155:FreeRTOS/parTest/timertest.c **** 		expected difference will give the 'jitter' in the processing of these
 156:FreeRTOS/parTest/timertest.c **** 		interrupts. */
 157:FreeRTOS/parTest/timertest.c **** 		if( usDifference > usMaxDifference )
 173              		.loc 1 157 0
 174 0018 0E49     		ldr	r1, .L9+12
 175 001a 0988     		ldrh	r1, [r1]
 176 001c 8A42     		cmp	r2, r1
 177 001e 0AD9     		bls	.L7
 158:FreeRTOS/parTest/timertest.c **** 		{
 159:FreeRTOS/parTest/timertest.c **** 			usMaxDifference = usDifference;
 178              		.loc 1 159 0
 179 0020 0C49     		ldr	r1, .L9+12
 180 0022 0A80     		strh	r2, [r1]	@ movhi
 160:FreeRTOS/parTest/timertest.c **** 			usMaxJitter = usMaxDifference - timerEXPECTED_DIFFERENCE_VALUE;
 181              		.loc 1 160 0
 182 0024 A2F56162 		sub	r2, r2, #3600
 183              	.LVL15:
 184 0028 92B2     		uxth	r2, r2
 185 002a 0B49     		ldr	r1, .L9+16
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccrJQnVB.s 			page 7


 186 002c 0A80     		strh	r2, [r1]	@ movhi
 187 002e 02E0     		b	.L7
 188              	.LVL16:
 189              	.L6:
 161:FreeRTOS/parTest/timertest.c **** 		}
 162:FreeRTOS/parTest/timertest.c **** 	}
 163:FreeRTOS/parTest/timertest.c **** 	else
 164:FreeRTOS/parTest/timertest.c **** 	{
 165:FreeRTOS/parTest/timertest.c **** 		/* Don't bother storing any values for the first couple of
 166:FreeRTOS/parTest/timertest.c **** 		interrupts. */
 167:FreeRTOS/parTest/timertest.c **** 		usSettleCount++;
 190              		.loc 1 167 0
 191 0030 0132     		adds	r2, r2, #1
 192 0032 0649     		ldr	r1, .L9+4
 193 0034 0A80     		strh	r2, [r1]	@ movhi
 194              	.L7:
 168:FreeRTOS/parTest/timertest.c **** 	}
 169:FreeRTOS/parTest/timertest.c **** 
 170:FreeRTOS/parTest/timertest.c **** 	/* Remember what the timer value was this time through, so we can calculate
 171:FreeRTOS/parTest/timertest.c **** 	the difference the next time through. */
 172:FreeRTOS/parTest/timertest.c **** 	usLastCount = usThisCount;
 195              		.loc 1 172 0
 196 0036 064A     		ldr	r2, .L9+8
 197 0038 1380     		strh	r3, [r2]	@ movhi
 173:FreeRTOS/parTest/timertest.c **** 
 174:FreeRTOS/parTest/timertest.c ****     TIM_ClearITPendingBit( TIM2, TIM_IT_Update );
 198              		.loc 1 174 0
 199 003a 0121     		movs	r1, #1
 200 003c 4FF08040 		mov	r0, #1073741824
 201 0040 FFF7FEFF 		bl	TIM_ClearITPendingBit
 202              	.LVL17:
 203 0044 08BD     		pop	{r3, pc}
 204              	.L10:
 205 0046 00BF     		.align	2
 206              	.L9:
 207 0048 00040040 		.word	1073742848
 208 004c 00000000 		.word	.LANCHOR0
 209 0050 00000000 		.word	.LANCHOR1
 210 0054 00000000 		.word	.LANCHOR2
 211 0058 00000000 		.word	.LANCHOR3
 212              		.cfi_endproc
 213              	.LFE28:
 215              		.global	usMaxJitter
 216              		.section	.bss.usLastCount.6491,"aw",%nobits
 217              		.align	1
 218              		.set	.LANCHOR1,. + 0
 221              	usLastCount.6491:
 222 0000 0000     		.space	2
 223              		.section	.bss.usMaxDifference.6493,"aw",%nobits
 224              		.align	1
 225              		.set	.LANCHOR2,. + 0
 228              	usMaxDifference.6493:
 229 0000 0000     		.space	2
 230              		.section	.bss.usMaxJitter,"aw",%nobits
 231              		.align	1
 232              		.set	.LANCHOR3,. + 0
 235              	usMaxJitter:
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccrJQnVB.s 			page 8


 236 0000 0000     		.space	2
 237              		.section	.bss.usSettleCount.6492,"aw",%nobits
 238              		.align	1
 239              		.set	.LANCHOR0,. + 0
 242              	usSettleCount.6492:
 243 0000 0000     		.space	2
 244              		.text
 245              	.Letext0:
 246              		.file 2 "/usr/local/Cellar/gcc-arm-none-eabi/20160926/arm-none-eabi/include/machine/_default_types
 247              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20160926/arm-none-eabi/include/sys/_stdint.h"
 248              		.file 4 "CMSIS/Core/CM3/stm32f10x.h"
 249              		.file 5 "STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
 250              		.file 6 "STM32F10x_StdPeriph_Driver/inc/misc.h"
 251              		.file 7 "STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h"
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccrJQnVB.s 			page 9


DEFINED SYMBOLS
                            *ABS*:0000000000000000 timertest.c
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccrJQnVB.s:20     .text.vSetupTimerTest:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccrJQnVB.s:25     .text.vSetupTimerTest:0000000000000000 vSetupTimerTest
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccrJQnVB.s:136    .text.vSetupTimerTest:00000000000000a8 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccrJQnVB.s:141    .text.vTimer2IntHandler:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccrJQnVB.s:146    .text.vTimer2IntHandler:0000000000000000 vTimer2IntHandler
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccrJQnVB.s:207    .text.vTimer2IntHandler:0000000000000048 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccrJQnVB.s:235    .bss.usMaxJitter:0000000000000000 usMaxJitter
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccrJQnVB.s:217    .bss.usLastCount.6491:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccrJQnVB.s:221    .bss.usLastCount.6491:0000000000000000 usLastCount.6491
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccrJQnVB.s:224    .bss.usMaxDifference.6493:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccrJQnVB.s:228    .bss.usMaxDifference.6493:0000000000000000 usMaxDifference.6493
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccrJQnVB.s:231    .bss.usMaxJitter:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccrJQnVB.s:238    .bss.usSettleCount.6492:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccrJQnVB.s:242    .bss.usSettleCount.6492:0000000000000000 usSettleCount.6492
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphClockCmd
TIM_DeInit
TIM_TimeBaseStructInit
TIM_TimeBaseInit
TIM_ARRPreloadConfig
NVIC_Init
TIM_ITConfig
TIM_Cmd
TIM_ClearITPendingBit
