ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc6RwWIO.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"semtest.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvSemaphoreTest,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	prvSemaphoreTest:
  25              	.LFB1:
  26              		.file 1 "FreeRTOS/Common/Minimal/semtest.c"
   1:FreeRTOS/Common/Minimal/semtest.c **** /*
   2:FreeRTOS/Common/Minimal/semtest.c **** 	FreeRTOS V5.4.2 - Copyright (C) 2009 Real Time Engineers Ltd.
   3:FreeRTOS/Common/Minimal/semtest.c **** 
   4:FreeRTOS/Common/Minimal/semtest.c **** 	This file is part of the FreeRTOS distribution.
   5:FreeRTOS/Common/Minimal/semtest.c **** 
   6:FreeRTOS/Common/Minimal/semtest.c **** 	FreeRTOS is free software; you can redistribute it and/or modify it	under 
   7:FreeRTOS/Common/Minimal/semtest.c **** 	the terms of the GNU General Public License (version 2) as published by the 
   8:FreeRTOS/Common/Minimal/semtest.c **** 	Free Software Foundation and modified by the FreeRTOS exception.
   9:FreeRTOS/Common/Minimal/semtest.c **** 	**NOTE** The exception to the GPL is included to allow you to distribute a
  10:FreeRTOS/Common/Minimal/semtest.c **** 	combined work that includes FreeRTOS without being obliged to provide the 
  11:FreeRTOS/Common/Minimal/semtest.c **** 	source code for proprietary components outside of the FreeRTOS kernel.  
  12:FreeRTOS/Common/Minimal/semtest.c **** 	Alternative commercial license and support terms are also available upon 
  13:FreeRTOS/Common/Minimal/semtest.c **** 	request.  See the licensing section of http://www.FreeRTOS.org for full 
  14:FreeRTOS/Common/Minimal/semtest.c **** 	license details.
  15:FreeRTOS/Common/Minimal/semtest.c **** 
  16:FreeRTOS/Common/Minimal/semtest.c **** 	FreeRTOS is distributed in the hope that it will be useful,	but WITHOUT
  17:FreeRTOS/Common/Minimal/semtest.c **** 	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  18:FreeRTOS/Common/Minimal/semtest.c **** 	FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  19:FreeRTOS/Common/Minimal/semtest.c **** 	more details.
  20:FreeRTOS/Common/Minimal/semtest.c **** 
  21:FreeRTOS/Common/Minimal/semtest.c **** 	You should have received a copy of the GNU General Public License along
  22:FreeRTOS/Common/Minimal/semtest.c **** 	with FreeRTOS; if not, write to the Free Software Foundation, Inc., 59
  23:FreeRTOS/Common/Minimal/semtest.c **** 	Temple Place, Suite 330, Boston, MA  02111-1307  USA.
  24:FreeRTOS/Common/Minimal/semtest.c **** 
  25:FreeRTOS/Common/Minimal/semtest.c **** 
  26:FreeRTOS/Common/Minimal/semtest.c **** 	***************************************************************************
  27:FreeRTOS/Common/Minimal/semtest.c **** 	*                                                                         *
  28:FreeRTOS/Common/Minimal/semtest.c **** 	* Looking for a quick start?  Then check out the FreeRTOS eBook!          *
  29:FreeRTOS/Common/Minimal/semtest.c **** 	* See http://www.FreeRTOS.org/Documentation for details                   *
  30:FreeRTOS/Common/Minimal/semtest.c **** 	*                                                                         *
  31:FreeRTOS/Common/Minimal/semtest.c **** 	***************************************************************************
  32:FreeRTOS/Common/Minimal/semtest.c **** 
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc6RwWIO.s 			page 2


  33:FreeRTOS/Common/Minimal/semtest.c **** 	1 tab == 4 spaces!
  34:FreeRTOS/Common/Minimal/semtest.c **** 
  35:FreeRTOS/Common/Minimal/semtest.c **** 	Please ensure to read the configuration and relevant port sections of the
  36:FreeRTOS/Common/Minimal/semtest.c **** 	online documentation.
  37:FreeRTOS/Common/Minimal/semtest.c **** 
  38:FreeRTOS/Common/Minimal/semtest.c **** 	http://www.FreeRTOS.org - Documentation, latest information, license and
  39:FreeRTOS/Common/Minimal/semtest.c **** 	contact details.
  40:FreeRTOS/Common/Minimal/semtest.c **** 
  41:FreeRTOS/Common/Minimal/semtest.c **** 	http://www.SafeRTOS.com - A version that is certified for use in safety
  42:FreeRTOS/Common/Minimal/semtest.c **** 	critical systems.
  43:FreeRTOS/Common/Minimal/semtest.c **** 
  44:FreeRTOS/Common/Minimal/semtest.c **** 	http://www.OpenRTOS.com - Commercial support, development, porting,
  45:FreeRTOS/Common/Minimal/semtest.c **** 	licensing and training services.
  46:FreeRTOS/Common/Minimal/semtest.c **** */
  47:FreeRTOS/Common/Minimal/semtest.c **** 
  48:FreeRTOS/Common/Minimal/semtest.c **** /*
  49:FreeRTOS/Common/Minimal/semtest.c ****  * Creates two sets of two tasks.  The tasks within a set share a variable, access 
  50:FreeRTOS/Common/Minimal/semtest.c ****  * to which is guarded by a semaphore.
  51:FreeRTOS/Common/Minimal/semtest.c ****  * 
  52:FreeRTOS/Common/Minimal/semtest.c ****  * Each task starts by attempting to obtain the semaphore.  On obtaining a 
  53:FreeRTOS/Common/Minimal/semtest.c ****  * semaphore a task checks to ensure that the guarded variable has an expected 
  54:FreeRTOS/Common/Minimal/semtest.c ****  * value.  It then clears the variable to zero before counting it back up to the 
  55:FreeRTOS/Common/Minimal/semtest.c ****  * expected value in increments of 1.  After each increment the variable is checked 
  56:FreeRTOS/Common/Minimal/semtest.c ****  * to ensure it contains the value to which it was just set. When the starting 
  57:FreeRTOS/Common/Minimal/semtest.c ****  * value is again reached the task releases the semaphore giving the other task in 
  58:FreeRTOS/Common/Minimal/semtest.c ****  * the set a chance to do exactly the same thing.  The starting value is high 
  59:FreeRTOS/Common/Minimal/semtest.c ****  * enough to ensure that a tick is likely to occur during the incrementing loop.
  60:FreeRTOS/Common/Minimal/semtest.c ****  *
  61:FreeRTOS/Common/Minimal/semtest.c ****  * An error is flagged if at any time during the process a shared variable is 
  62:FreeRTOS/Common/Minimal/semtest.c ****  * found to have a value other than that expected.  Such an occurrence would 
  63:FreeRTOS/Common/Minimal/semtest.c ****  * suggest an error in the mutual exclusion mechanism by which access to the 
  64:FreeRTOS/Common/Minimal/semtest.c ****  * variable is restricted.
  65:FreeRTOS/Common/Minimal/semtest.c ****  *
  66:FreeRTOS/Common/Minimal/semtest.c ****  * The first set of two tasks poll their semaphore.  The second set use blocking 
  67:FreeRTOS/Common/Minimal/semtest.c ****  * calls.
  68:FreeRTOS/Common/Minimal/semtest.c ****  *
  69:FreeRTOS/Common/Minimal/semtest.c ****  */
  70:FreeRTOS/Common/Minimal/semtest.c **** 
  71:FreeRTOS/Common/Minimal/semtest.c **** 
  72:FreeRTOS/Common/Minimal/semtest.c **** #include <stdlib.h>
  73:FreeRTOS/Common/Minimal/semtest.c **** 
  74:FreeRTOS/Common/Minimal/semtest.c **** /* Scheduler include files. */
  75:FreeRTOS/Common/Minimal/semtest.c **** #include "FreeRTOS.h"
  76:FreeRTOS/Common/Minimal/semtest.c **** #include "task.h"
  77:FreeRTOS/Common/Minimal/semtest.c **** #include "semphr.h"
  78:FreeRTOS/Common/Minimal/semtest.c **** 
  79:FreeRTOS/Common/Minimal/semtest.c **** /* Demo app include files. */
  80:FreeRTOS/Common/Minimal/semtest.c **** #include "semtest.h"
  81:FreeRTOS/Common/Minimal/semtest.c **** 
  82:FreeRTOS/Common/Minimal/semtest.c **** /* The value to which the shared variables are counted. */
  83:FreeRTOS/Common/Minimal/semtest.c **** #define semtstBLOCKING_EXPECTED_VALUE		( ( unsigned portLONG ) 0xfff )
  84:FreeRTOS/Common/Minimal/semtest.c **** #define semtstNON_BLOCKING_EXPECTED_VALUE	( ( unsigned portLONG ) 0xff  )
  85:FreeRTOS/Common/Minimal/semtest.c **** 
  86:FreeRTOS/Common/Minimal/semtest.c **** #define semtstSTACK_SIZE			configMINIMAL_STACK_SIZE
  87:FreeRTOS/Common/Minimal/semtest.c **** 
  88:FreeRTOS/Common/Minimal/semtest.c **** #define semtstNUM_TASKS				( 4 )
  89:FreeRTOS/Common/Minimal/semtest.c **** 
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc6RwWIO.s 			page 3


  90:FreeRTOS/Common/Minimal/semtest.c **** #define semtstDELAY_FACTOR			( ( portTickType ) 10 )
  91:FreeRTOS/Common/Minimal/semtest.c **** 
  92:FreeRTOS/Common/Minimal/semtest.c **** /* The task function as described at the top of the file. */
  93:FreeRTOS/Common/Minimal/semtest.c **** static portTASK_FUNCTION_PROTO( prvSemaphoreTest, pvParameters );
  94:FreeRTOS/Common/Minimal/semtest.c **** 
  95:FreeRTOS/Common/Minimal/semtest.c **** /* Structure used to pass parameters to each task. */
  96:FreeRTOS/Common/Minimal/semtest.c **** typedef struct SEMAPHORE_PARAMETERS
  97:FreeRTOS/Common/Minimal/semtest.c **** {
  98:FreeRTOS/Common/Minimal/semtest.c **** 	xSemaphoreHandle xSemaphore;
  99:FreeRTOS/Common/Minimal/semtest.c **** 	volatile unsigned portLONG *pulSharedVariable;
 100:FreeRTOS/Common/Minimal/semtest.c **** 	portTickType xBlockTime;
 101:FreeRTOS/Common/Minimal/semtest.c **** } xSemaphoreParameters;
 102:FreeRTOS/Common/Minimal/semtest.c **** 
 103:FreeRTOS/Common/Minimal/semtest.c **** /* Variables used to check that all the tasks are still running without errors. */
 104:FreeRTOS/Common/Minimal/semtest.c **** static volatile portSHORT sCheckVariables[ semtstNUM_TASKS ] = { 0 };
 105:FreeRTOS/Common/Minimal/semtest.c **** static volatile portSHORT sNextCheckVariable = 0;
 106:FreeRTOS/Common/Minimal/semtest.c **** 
 107:FreeRTOS/Common/Minimal/semtest.c **** /*-----------------------------------------------------------*/
 108:FreeRTOS/Common/Minimal/semtest.c **** 
 109:FreeRTOS/Common/Minimal/semtest.c **** void vStartSemaphoreTasks( unsigned portBASE_TYPE uxPriority )
 110:FreeRTOS/Common/Minimal/semtest.c **** {
 111:FreeRTOS/Common/Minimal/semtest.c **** xSemaphoreParameters *pxFirstSemaphoreParameters, *pxSecondSemaphoreParameters;
 112:FreeRTOS/Common/Minimal/semtest.c **** const portTickType xBlockTime = ( portTickType ) 100;
 113:FreeRTOS/Common/Minimal/semtest.c **** 
 114:FreeRTOS/Common/Minimal/semtest.c **** 	/* Create the structure used to pass parameters to the first two tasks. */
 115:FreeRTOS/Common/Minimal/semtest.c **** 	pxFirstSemaphoreParameters = ( xSemaphoreParameters * ) pvPortMalloc( sizeof( xSemaphoreParameters
 116:FreeRTOS/Common/Minimal/semtest.c **** 
 117:FreeRTOS/Common/Minimal/semtest.c **** 	if( pxFirstSemaphoreParameters != NULL )
 118:FreeRTOS/Common/Minimal/semtest.c **** 	{
 119:FreeRTOS/Common/Minimal/semtest.c **** 		/* Create the semaphore used by the first two tasks. */
 120:FreeRTOS/Common/Minimal/semtest.c **** 		vSemaphoreCreateBinary( pxFirstSemaphoreParameters->xSemaphore );
 121:FreeRTOS/Common/Minimal/semtest.c **** 
 122:FreeRTOS/Common/Minimal/semtest.c **** 		if( pxFirstSemaphoreParameters->xSemaphore != NULL )
 123:FreeRTOS/Common/Minimal/semtest.c **** 		{
 124:FreeRTOS/Common/Minimal/semtest.c **** 			/* Create the variable which is to be shared by the first two tasks. */
 125:FreeRTOS/Common/Minimal/semtest.c **** 			pxFirstSemaphoreParameters->pulSharedVariable = ( unsigned portLONG * ) pvPortMalloc( sizeof( un
 126:FreeRTOS/Common/Minimal/semtest.c **** 
 127:FreeRTOS/Common/Minimal/semtest.c **** 			/* Initialise the share variable to the value the tasks expect. */
 128:FreeRTOS/Common/Minimal/semtest.c **** 			*( pxFirstSemaphoreParameters->pulSharedVariable ) = semtstNON_BLOCKING_EXPECTED_VALUE;
 129:FreeRTOS/Common/Minimal/semtest.c **** 
 130:FreeRTOS/Common/Minimal/semtest.c **** 			/* The first two tasks do not block on semaphore calls. */
 131:FreeRTOS/Common/Minimal/semtest.c **** 			pxFirstSemaphoreParameters->xBlockTime = ( portTickType ) 0;
 132:FreeRTOS/Common/Minimal/semtest.c **** 
 133:FreeRTOS/Common/Minimal/semtest.c **** 			/* Spawn the first two tasks.  As they poll they operate at the idle priority. */
 134:FreeRTOS/Common/Minimal/semtest.c **** 			xTaskCreate( prvSemaphoreTest, ( signed portCHAR * ) "PolSEM1", semtstSTACK_SIZE, ( void * ) pxF
 135:FreeRTOS/Common/Minimal/semtest.c **** 			xTaskCreate( prvSemaphoreTest, ( signed portCHAR * ) "PolSEM2", semtstSTACK_SIZE, ( void * ) pxF
 136:FreeRTOS/Common/Minimal/semtest.c **** 		}
 137:FreeRTOS/Common/Minimal/semtest.c **** 	}
 138:FreeRTOS/Common/Minimal/semtest.c **** 
 139:FreeRTOS/Common/Minimal/semtest.c **** 	/* Do exactly the same to create the second set of tasks, only this time 
 140:FreeRTOS/Common/Minimal/semtest.c **** 	provide a block time for the semaphore calls. */
 141:FreeRTOS/Common/Minimal/semtest.c **** 	pxSecondSemaphoreParameters = ( xSemaphoreParameters * ) pvPortMalloc( sizeof( xSemaphoreParameter
 142:FreeRTOS/Common/Minimal/semtest.c **** 	if( pxSecondSemaphoreParameters != NULL )
 143:FreeRTOS/Common/Minimal/semtest.c **** 	{
 144:FreeRTOS/Common/Minimal/semtest.c **** 		vSemaphoreCreateBinary( pxSecondSemaphoreParameters->xSemaphore );
 145:FreeRTOS/Common/Minimal/semtest.c **** 
 146:FreeRTOS/Common/Minimal/semtest.c **** 		if( pxSecondSemaphoreParameters->xSemaphore != NULL )
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc6RwWIO.s 			page 4


 147:FreeRTOS/Common/Minimal/semtest.c **** 		{
 148:FreeRTOS/Common/Minimal/semtest.c **** 			pxSecondSemaphoreParameters->pulSharedVariable = ( unsigned portLONG * ) pvPortMalloc( sizeof( u
 149:FreeRTOS/Common/Minimal/semtest.c **** 			*( pxSecondSemaphoreParameters->pulSharedVariable ) = semtstBLOCKING_EXPECTED_VALUE;
 150:FreeRTOS/Common/Minimal/semtest.c **** 			pxSecondSemaphoreParameters->xBlockTime = xBlockTime / portTICK_RATE_MS;
 151:FreeRTOS/Common/Minimal/semtest.c **** 
 152:FreeRTOS/Common/Minimal/semtest.c **** 			xTaskCreate( prvSemaphoreTest, ( signed portCHAR * ) "BlkSEM1", semtstSTACK_SIZE, ( void * ) pxS
 153:FreeRTOS/Common/Minimal/semtest.c **** 			xTaskCreate( prvSemaphoreTest, ( signed portCHAR * ) "BlkSEM2", semtstSTACK_SIZE, ( void * ) pxS
 154:FreeRTOS/Common/Minimal/semtest.c **** 		}
 155:FreeRTOS/Common/Minimal/semtest.c **** 	}
 156:FreeRTOS/Common/Minimal/semtest.c **** 
 157:FreeRTOS/Common/Minimal/semtest.c **** 	/* vQueueAddToRegistry() adds the semaphore to the registry, if one is
 158:FreeRTOS/Common/Minimal/semtest.c **** 	in use.  The registry is provided as a means for kernel aware 
 159:FreeRTOS/Common/Minimal/semtest.c **** 	debuggers to locate semaphores and has no purpose if a kernel aware debugger
 160:FreeRTOS/Common/Minimal/semtest.c **** 	is not being used.  The call to vQueueAddToRegistry() will be removed
 161:FreeRTOS/Common/Minimal/semtest.c **** 	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is 
 162:FreeRTOS/Common/Minimal/semtest.c **** 	defined to be less than 1. */
 163:FreeRTOS/Common/Minimal/semtest.c **** 	vQueueAddToRegistry( ( xQueueHandle ) pxFirstSemaphoreParameters->xSemaphore, ( signed portCHAR * 
 164:FreeRTOS/Common/Minimal/semtest.c **** 	vQueueAddToRegistry( ( xQueueHandle ) pxSecondSemaphoreParameters->xSemaphore, ( signed portCHAR *
 165:FreeRTOS/Common/Minimal/semtest.c **** }
 166:FreeRTOS/Common/Minimal/semtest.c **** /*-----------------------------------------------------------*/
 167:FreeRTOS/Common/Minimal/semtest.c **** 
 168:FreeRTOS/Common/Minimal/semtest.c **** static portTASK_FUNCTION( prvSemaphoreTest, pvParameters )
 169:FreeRTOS/Common/Minimal/semtest.c **** {
  27              		.loc 1 169 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 20
  35              		.cfi_offset 4, -20
  36              		.cfi_offset 5, -16
  37              		.cfi_offset 6, -12
  38              		.cfi_offset 7, -8
  39              		.cfi_offset 14, -4
  40 0002 83B0     		sub	sp, sp, #12
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 32
  43 0004 0646     		mov	r6, r0
  44              	.LVL1:
 170:FreeRTOS/Common/Minimal/semtest.c **** xSemaphoreParameters *pxParameters;
 171:FreeRTOS/Common/Minimal/semtest.c **** volatile unsigned portLONG *pulSharedVariable, ulExpectedValue;
 172:FreeRTOS/Common/Minimal/semtest.c **** unsigned portLONG ulCounter;
 173:FreeRTOS/Common/Minimal/semtest.c **** portSHORT sError = pdFALSE, sCheckVariableToUse;
 174:FreeRTOS/Common/Minimal/semtest.c **** 
 175:FreeRTOS/Common/Minimal/semtest.c **** 	/* See which check variable to use.  sNextCheckVariable is not semaphore 
 176:FreeRTOS/Common/Minimal/semtest.c **** 	protected! */
 177:FreeRTOS/Common/Minimal/semtest.c **** 	portENTER_CRITICAL();
  45              		.loc 1 177 0
  46 0006 FFF7FEFF 		bl	vPortEnterCritical
  47              	.LVL2:
 178:FreeRTOS/Common/Minimal/semtest.c **** 		sCheckVariableToUse = sNextCheckVariable;
  48              		.loc 1 178 0
  49 000a 254A     		ldr	r2, .L17
  50 000c 1788     		ldrh	r7, [r2]
  51 000e 3FB2     		sxth	r7, r7
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc6RwWIO.s 			page 5


  52              	.LVL3:
 179:FreeRTOS/Common/Minimal/semtest.c **** 		sNextCheckVariable++;
  53              		.loc 1 179 0
  54 0010 1388     		ldrh	r3, [r2]
  55 0012 0133     		adds	r3, r3, #1
  56 0014 1BB2     		sxth	r3, r3
  57 0016 1380     		strh	r3, [r2]	@ movhi
 180:FreeRTOS/Common/Minimal/semtest.c **** 	portEXIT_CRITICAL();
  58              		.loc 1 180 0
  59 0018 FFF7FEFF 		bl	vPortExitCritical
  60              	.LVL4:
 181:FreeRTOS/Common/Minimal/semtest.c **** 
 182:FreeRTOS/Common/Minimal/semtest.c **** 	/* A structure is passed in as the parameter.  This contains the shared 
 183:FreeRTOS/Common/Minimal/semtest.c **** 	variable being guarded. */
 184:FreeRTOS/Common/Minimal/semtest.c **** 	pxParameters = ( xSemaphoreParameters * ) pvParameters;
 185:FreeRTOS/Common/Minimal/semtest.c **** 	pulSharedVariable = pxParameters->pulSharedVariable;
  61              		.loc 1 185 0
  62 001c 7468     		ldr	r4, [r6, #4]
  63              	.LVL5:
 186:FreeRTOS/Common/Minimal/semtest.c **** 
 187:FreeRTOS/Common/Minimal/semtest.c **** 	/* If we are blocking we use a much higher count to ensure loads of context
 188:FreeRTOS/Common/Minimal/semtest.c **** 	switches occur during the count. */
 189:FreeRTOS/Common/Minimal/semtest.c **** 	if( pxParameters->xBlockTime > ( portTickType ) 0 )
  64              		.loc 1 189 0
  65 001e B368     		ldr	r3, [r6, #8]
  66 0020 1BB1     		cbz	r3, .L2
 190:FreeRTOS/Common/Minimal/semtest.c **** 	{
 191:FreeRTOS/Common/Minimal/semtest.c **** 		ulExpectedValue = semtstBLOCKING_EXPECTED_VALUE;
  67              		.loc 1 191 0
  68 0022 40F6FF73 		movw	r3, #4095
  69 0026 0193     		str	r3, [sp, #4]
  70 0028 01E0     		b	.L3
  71              	.L2:
 192:FreeRTOS/Common/Minimal/semtest.c **** 	}
 193:FreeRTOS/Common/Minimal/semtest.c **** 	else
 194:FreeRTOS/Common/Minimal/semtest.c **** 	{
 195:FreeRTOS/Common/Minimal/semtest.c **** 		ulExpectedValue = semtstNON_BLOCKING_EXPECTED_VALUE;
  72              		.loc 1 195 0
  73 002a FF23     		movs	r3, #255
  74 002c 0193     		str	r3, [sp, #4]
  75              	.L3:
 169:FreeRTOS/Common/Minimal/semtest.c **** xSemaphoreParameters *pxParameters;
  76              		.loc 1 169 0
  77 002e 0025     		movs	r5, #0
  78              	.LVL6:
  79              	.L4:
 196:FreeRTOS/Common/Minimal/semtest.c **** 	}
 197:FreeRTOS/Common/Minimal/semtest.c **** 
 198:FreeRTOS/Common/Minimal/semtest.c **** 	for( ;; )
 199:FreeRTOS/Common/Minimal/semtest.c **** 	{
 200:FreeRTOS/Common/Minimal/semtest.c **** 		/* Try to obtain the semaphore. */
 201:FreeRTOS/Common/Minimal/semtest.c **** 		if( xSemaphoreTake( pxParameters->xSemaphore, pxParameters->xBlockTime ) == pdPASS )
  80              		.loc 1 201 0
  81 0030 0023     		movs	r3, #0
  82 0032 B268     		ldr	r2, [r6, #8]
  83 0034 1946     		mov	r1, r3
  84 0036 3068     		ldr	r0, [r6]
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc6RwWIO.s 			page 6


  85 0038 FFF7FEFF 		bl	xQueueGenericReceive
  86              	.LVL7:
  87 003c 0128     		cmp	r0, #1
  88 003e 28D1     		bne	.L5
 202:FreeRTOS/Common/Minimal/semtest.c **** 		{
 203:FreeRTOS/Common/Minimal/semtest.c **** 			/* We have the semaphore and so expect any other tasks using the
 204:FreeRTOS/Common/Minimal/semtest.c **** 			shared variable to have left it in the state we expect to find
 205:FreeRTOS/Common/Minimal/semtest.c **** 			it. */
 206:FreeRTOS/Common/Minimal/semtest.c **** 			if( *pulSharedVariable != ulExpectedValue )
  89              		.loc 1 206 0
  90 0040 2268     		ldr	r2, [r4]
  91 0042 019B     		ldr	r3, [sp, #4]
  92 0044 9A42     		cmp	r2, r3
  93 0046 00D0     		beq	.L6
 207:FreeRTOS/Common/Minimal/semtest.c **** 			{
 208:FreeRTOS/Common/Minimal/semtest.c **** 				sError = pdTRUE;
  94              		.loc 1 208 0
  95 0048 0125     		movs	r5, #1
  96              	.LVL8:
  97              	.L6:
 209:FreeRTOS/Common/Minimal/semtest.c **** 			}
 210:FreeRTOS/Common/Minimal/semtest.c **** 			
 211:FreeRTOS/Common/Minimal/semtest.c **** 			/* Clear the variable, then count it back up to the expected value
 212:FreeRTOS/Common/Minimal/semtest.c **** 			before releasing the semaphore.  Would expect a context switch or
 213:FreeRTOS/Common/Minimal/semtest.c **** 			two during this time. */
 214:FreeRTOS/Common/Minimal/semtest.c **** 			for( ulCounter = ( unsigned portLONG ) 0; ulCounter <= ulExpectedValue; ulCounter++ )
 215:FreeRTOS/Common/Minimal/semtest.c **** 			{
 216:FreeRTOS/Common/Minimal/semtest.c **** 				*pulSharedVariable = ulCounter;
 217:FreeRTOS/Common/Minimal/semtest.c **** 				if( *pulSharedVariable != ulCounter )
 218:FreeRTOS/Common/Minimal/semtest.c **** 				{
 219:FreeRTOS/Common/Minimal/semtest.c **** 					sError = pdTRUE;
  98              		.loc 1 219 0 discriminator 1
  99 004a 0023     		movs	r3, #0
 100 004c 05E0     		b	.L7
 101              	.LVL9:
 102              	.L9:
 216:FreeRTOS/Common/Minimal/semtest.c **** 				if( *pulSharedVariable != ulCounter )
 103              		.loc 1 216 0
 104 004e 2360     		str	r3, [r4]
 217:FreeRTOS/Common/Minimal/semtest.c **** 				{
 105              		.loc 1 217 0
 106 0050 2268     		ldr	r2, [r4]
 107 0052 9342     		cmp	r3, r2
 108 0054 00D0     		beq	.L8
 109              		.loc 1 219 0
 110 0056 0125     		movs	r5, #1
 111              	.LVL10:
 112              	.L8:
 214:FreeRTOS/Common/Minimal/semtest.c **** 			{
 113              		.loc 1 214 0 discriminator 2
 114 0058 0133     		adds	r3, r3, #1
 115              	.LVL11:
 116              	.L7:
 214:FreeRTOS/Common/Minimal/semtest.c **** 			{
 117              		.loc 1 214 0 is_stmt 0 discriminator 1
 118 005a 019A     		ldr	r2, [sp, #4]
 119 005c 9342     		cmp	r3, r2
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc6RwWIO.s 			page 7


 120 005e F6D9     		bls	.L9
 220:FreeRTOS/Common/Minimal/semtest.c **** 				}
 221:FreeRTOS/Common/Minimal/semtest.c **** 			}
 222:FreeRTOS/Common/Minimal/semtest.c **** 
 223:FreeRTOS/Common/Minimal/semtest.c **** 			/* Release the semaphore, and if no errors have occurred increment the check
 224:FreeRTOS/Common/Minimal/semtest.c **** 			variable. */
 225:FreeRTOS/Common/Minimal/semtest.c **** 			if(	xSemaphoreGive( pxParameters->xSemaphore ) == pdFALSE )
 121              		.loc 1 225 0 is_stmt 1
 122 0060 0023     		movs	r3, #0
 123              	.LVL12:
 124 0062 1A46     		mov	r2, r3
 125 0064 1946     		mov	r1, r3
 126 0066 3068     		ldr	r0, [r6]
 127 0068 FFF7FEFF 		bl	xQueueGenericSend
 128              	.LVL13:
 129 006c 00B9     		cbnz	r0, .L10
 226:FreeRTOS/Common/Minimal/semtest.c **** 			{
 227:FreeRTOS/Common/Minimal/semtest.c **** 				sError = pdTRUE;
 130              		.loc 1 227 0
 131 006e 0125     		movs	r5, #1
 132              	.LVL14:
 133              	.L10:
 228:FreeRTOS/Common/Minimal/semtest.c **** 			}
 229:FreeRTOS/Common/Minimal/semtest.c **** 
 230:FreeRTOS/Common/Minimal/semtest.c **** 			if( sError == pdFALSE )
 134              		.loc 1 230 0
 135 0070 45B9     		cbnz	r5, .L11
 231:FreeRTOS/Common/Minimal/semtest.c **** 			{
 232:FreeRTOS/Common/Minimal/semtest.c **** 				if( sCheckVariableToUse < semtstNUM_TASKS )
 136              		.loc 1 232 0
 137 0072 032F     		cmp	r7, #3
 138 0074 06DC     		bgt	.L11
 233:FreeRTOS/Common/Minimal/semtest.c **** 				{
 234:FreeRTOS/Common/Minimal/semtest.c **** 					( sCheckVariables[ sCheckVariableToUse ] )++;
 139              		.loc 1 234 0
 140 0076 0B4A     		ldr	r2, .L17+4
 141 0078 32F81730 		ldrh	r3, [r2, r7, lsl #1]
 142 007c 0133     		adds	r3, r3, #1
 143 007e 1BB2     		sxth	r3, r3
 144 0080 22F81730 		strh	r3, [r2, r7, lsl #1]	@ movhi
 145              	.L11:
 235:FreeRTOS/Common/Minimal/semtest.c **** 				}
 236:FreeRTOS/Common/Minimal/semtest.c **** 			}
 237:FreeRTOS/Common/Minimal/semtest.c **** 
 238:FreeRTOS/Common/Minimal/semtest.c **** 			/* If we have a block time then we are running at a priority higher
 239:FreeRTOS/Common/Minimal/semtest.c **** 			than the idle priority.  This task takes a long time to complete
 240:FreeRTOS/Common/Minimal/semtest.c **** 			a cycle	(deliberately so to test the guarding) so will be starving
 241:FreeRTOS/Common/Minimal/semtest.c **** 			out lower priority tasks.  Block for some time to allow give lower
 242:FreeRTOS/Common/Minimal/semtest.c **** 			priority tasks some processor time. */
 243:FreeRTOS/Common/Minimal/semtest.c **** 			vTaskDelay( pxParameters->xBlockTime * semtstDELAY_FACTOR );
 146              		.loc 1 243 0
 147 0084 B368     		ldr	r3, [r6, #8]
 148 0086 03EB8303 		add	r3, r3, r3, lsl #2
 149 008a 5800     		lsls	r0, r3, #1
 150 008c FFF7FEFF 		bl	vTaskDelay
 151              	.LVL15:
 152 0090 CEE7     		b	.L4
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc6RwWIO.s 			page 8


 153              	.L5:
 244:FreeRTOS/Common/Minimal/semtest.c **** 		}
 245:FreeRTOS/Common/Minimal/semtest.c **** 		else
 246:FreeRTOS/Common/Minimal/semtest.c **** 		{
 247:FreeRTOS/Common/Minimal/semtest.c **** 			if( pxParameters->xBlockTime == ( portTickType ) 0 )
 154              		.loc 1 247 0
 155 0092 B368     		ldr	r3, [r6, #8]
 156 0094 002B     		cmp	r3, #0
 157 0096 CBD1     		bne	.L4
 248:FreeRTOS/Common/Minimal/semtest.c **** 			{
 249:FreeRTOS/Common/Minimal/semtest.c **** 				/* We have not got the semaphore yet, so no point using the
 250:FreeRTOS/Common/Minimal/semtest.c **** 				processor.  We are not blocking when attempting to obtain the
 251:FreeRTOS/Common/Minimal/semtest.c **** 				semaphore. */
 252:FreeRTOS/Common/Minimal/semtest.c **** 				taskYIELD();
 158              		.loc 1 252 0
 159 0098 FFF7FEFF 		bl	vPortYieldFromISR
 160              	.LVL16:
 161 009c C8E7     		b	.L4
 162              	.L18:
 163 009e 00BF     		.align	2
 164              	.L17:
 165 00a0 00000000 		.word	.LANCHOR0
 166 00a4 00000000 		.word	.LANCHOR1
 167              		.cfi_endproc
 168              	.LFE1:
 170              		.section	.text.vStartSemaphoreTasks,"ax",%progbits
 171              		.align	2
 172              		.global	vStartSemaphoreTasks
 173              		.thumb
 174              		.thumb_func
 176              	vStartSemaphoreTasks:
 177              	.LFB0:
 110:FreeRTOS/Common/Minimal/semtest.c **** xSemaphoreParameters *pxFirstSemaphoreParameters, *pxSecondSemaphoreParameters;
 178              		.loc 1 110 0
 179              		.cfi_startproc
 180              		@ args = 0, pretend = 0, frame = 0
 181              		@ frame_needed = 0, uses_anonymous_args = 0
 182              	.LVL17:
 183 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 184              	.LCFI2:
 185              		.cfi_def_cfa_offset 20
 186              		.cfi_offset 4, -20
 187              		.cfi_offset 5, -16
 188              		.cfi_offset 6, -12
 189              		.cfi_offset 7, -8
 190              		.cfi_offset 14, -4
 191 0002 83B0     		sub	sp, sp, #12
 192              	.LCFI3:
 193              		.cfi_def_cfa_offset 32
 194 0004 0646     		mov	r6, r0
 195              	.LVL18:
 115:FreeRTOS/Common/Minimal/semtest.c **** 
 196              		.loc 1 115 0
 197 0006 0C20     		movs	r0, #12
 198              	.LVL19:
 199 0008 FFF7FEFF 		bl	pvPortMalloc
 200              	.LVL20:
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc6RwWIO.s 			page 9


 117:FreeRTOS/Common/Minimal/semtest.c **** 	{
 201              		.loc 1 117 0
 202 000c 30B3     		cbz	r0, .L20
 203 000e 0446     		mov	r4, r0
 120:FreeRTOS/Common/Minimal/semtest.c **** 
 204              		.loc 1 120 0
 205 0010 0021     		movs	r1, #0
 206 0012 0120     		movs	r0, #1
 207              	.LVL21:
 208 0014 FFF7FEFF 		bl	xQueueCreate
 209              	.LVL22:
 210 0018 2060     		str	r0, [r4]
 211 001a 20B1     		cbz	r0, .L21
 120:FreeRTOS/Common/Minimal/semtest.c **** 
 212              		.loc 1 120 0 is_stmt 0 discriminator 1
 213 001c 0023     		movs	r3, #0
 214 001e 1A46     		mov	r2, r3
 215 0020 1946     		mov	r1, r3
 216 0022 FFF7FEFF 		bl	xQueueGenericSend
 217              	.LVL23:
 218              	.L21:
 122:FreeRTOS/Common/Minimal/semtest.c **** 		{
 219              		.loc 1 122 0 is_stmt 1
 220 0026 2368     		ldr	r3, [r4]
 221 0028 C3B1     		cbz	r3, .L20
 125:FreeRTOS/Common/Minimal/semtest.c **** 
 222              		.loc 1 125 0
 223 002a 0420     		movs	r0, #4
 224 002c FFF7FEFF 		bl	pvPortMalloc
 225              	.LVL24:
 226 0030 6060     		str	r0, [r4, #4]
 128:FreeRTOS/Common/Minimal/semtest.c **** 
 227              		.loc 1 128 0
 228 0032 FF23     		movs	r3, #255
 229 0034 0360     		str	r3, [r0]
 131:FreeRTOS/Common/Minimal/semtest.c **** 
 230              		.loc 1 131 0
 231 0036 0025     		movs	r5, #0
 232 0038 A560     		str	r5, [r4, #8]
 134:FreeRTOS/Common/Minimal/semtest.c **** 			xTaskCreate( prvSemaphoreTest, ( signed portCHAR * ) "PolSEM2", semtstSTACK_SIZE, ( void * ) pxF
 233              		.loc 1 134 0
 234 003a 204F     		ldr	r7, .L25
 235 003c 0195     		str	r5, [sp, #4]
 236 003e 0095     		str	r5, [sp]
 237 0040 2346     		mov	r3, r4
 238 0042 8022     		movs	r2, #128
 239 0044 1E49     		ldr	r1, .L25+4
 240 0046 3846     		mov	r0, r7
 241 0048 FFF7FEFF 		bl	xTaskCreate
 242              	.LVL25:
 135:FreeRTOS/Common/Minimal/semtest.c **** 		}
 243              		.loc 1 135 0
 244 004c 0195     		str	r5, [sp, #4]
 245 004e 0095     		str	r5, [sp]
 246 0050 2346     		mov	r3, r4
 247 0052 8022     		movs	r2, #128
 248 0054 1B49     		ldr	r1, .L25+8
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc6RwWIO.s 			page 10


 249 0056 3846     		mov	r0, r7
 250 0058 FFF7FEFF 		bl	xTaskCreate
 251              	.LVL26:
 252              	.L20:
 141:FreeRTOS/Common/Minimal/semtest.c **** 	if( pxSecondSemaphoreParameters != NULL )
 253              		.loc 1 141 0
 254 005c 0C20     		movs	r0, #12
 255 005e FFF7FEFF 		bl	pvPortMalloc
 256              	.LVL27:
 142:FreeRTOS/Common/Minimal/semtest.c **** 	{
 257              		.loc 1 142 0
 258 0062 0446     		mov	r4, r0
 259 0064 38B3     		cbz	r0, .L19
 144:FreeRTOS/Common/Minimal/semtest.c **** 
 260              		.loc 1 144 0
 261 0066 0021     		movs	r1, #0
 262 0068 0120     		movs	r0, #1
 263              	.LVL28:
 264 006a FFF7FEFF 		bl	xQueueCreate
 265              	.LVL29:
 266 006e 2060     		str	r0, [r4]
 267 0070 20B1     		cbz	r0, .L23
 144:FreeRTOS/Common/Minimal/semtest.c **** 
 268              		.loc 1 144 0 is_stmt 0 discriminator 1
 269 0072 0023     		movs	r3, #0
 270 0074 1A46     		mov	r2, r3
 271 0076 1946     		mov	r1, r3
 272 0078 FFF7FEFF 		bl	xQueueGenericSend
 273              	.LVL30:
 274              	.L23:
 146:FreeRTOS/Common/Minimal/semtest.c **** 		{
 275              		.loc 1 146 0 is_stmt 1
 276 007c 2368     		ldr	r3, [r4]
 277 007e D3B1     		cbz	r3, .L19
 148:FreeRTOS/Common/Minimal/semtest.c **** 			*( pxSecondSemaphoreParameters->pulSharedVariable ) = semtstBLOCKING_EXPECTED_VALUE;
 278              		.loc 1 148 0
 279 0080 0420     		movs	r0, #4
 280 0082 FFF7FEFF 		bl	pvPortMalloc
 281              	.LVL31:
 282 0086 6060     		str	r0, [r4, #4]
 149:FreeRTOS/Common/Minimal/semtest.c **** 			pxSecondSemaphoreParameters->xBlockTime = xBlockTime / portTICK_RATE_MS;
 283              		.loc 1 149 0
 284 0088 40F6FF73 		movw	r3, #4095
 285 008c 0360     		str	r3, [r0]
 150:FreeRTOS/Common/Minimal/semtest.c **** 
 286              		.loc 1 150 0
 287 008e 6423     		movs	r3, #100
 288 0090 A360     		str	r3, [r4, #8]
 152:FreeRTOS/Common/Minimal/semtest.c **** 			xTaskCreate( prvSemaphoreTest, ( signed portCHAR * ) "BlkSEM2", semtstSTACK_SIZE, ( void * ) pxS
 289              		.loc 1 152 0
 290 0092 0A4D     		ldr	r5, .L25
 291 0094 0027     		movs	r7, #0
 292 0096 0197     		str	r7, [sp, #4]
 293 0098 0096     		str	r6, [sp]
 294 009a 2346     		mov	r3, r4
 295 009c 8022     		movs	r2, #128
 296 009e 0A49     		ldr	r1, .L25+12
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc6RwWIO.s 			page 11


 297 00a0 2846     		mov	r0, r5
 298 00a2 FFF7FEFF 		bl	xTaskCreate
 299              	.LVL32:
 153:FreeRTOS/Common/Minimal/semtest.c **** 		}
 300              		.loc 1 153 0
 301 00a6 0197     		str	r7, [sp, #4]
 302 00a8 0096     		str	r6, [sp]
 303 00aa 2346     		mov	r3, r4
 304 00ac 8022     		movs	r2, #128
 305 00ae 0749     		ldr	r1, .L25+16
 306 00b0 2846     		mov	r0, r5
 307 00b2 FFF7FEFF 		bl	xTaskCreate
 308              	.LVL33:
 309              	.L19:
 165:FreeRTOS/Common/Minimal/semtest.c **** /*-----------------------------------------------------------*/
 310              		.loc 1 165 0
 311 00b6 03B0     		add	sp, sp, #12
 312              	.LCFI4:
 313              		.cfi_def_cfa_offset 20
 314              		@ sp needed
 315 00b8 F0BD     		pop	{r4, r5, r6, r7, pc}
 316              	.LVL34:
 317              	.L26:
 318 00ba 00BF     		.align	2
 319              	.L25:
 320 00bc 00000000 		.word	prvSemaphoreTest
 321 00c0 00000000 		.word	.LC0
 322 00c4 08000000 		.word	.LC1
 323 00c8 10000000 		.word	.LC2
 324 00cc 18000000 		.word	.LC3
 325              		.cfi_endproc
 326              	.LFE0:
 328              		.section	.text.xAreSemaphoreTasksStillRunning,"ax",%progbits
 329              		.align	2
 330              		.global	xAreSemaphoreTasksStillRunning
 331              		.thumb
 332              		.thumb_func
 334              	xAreSemaphoreTasksStillRunning:
 335              	.LFB2:
 253:FreeRTOS/Common/Minimal/semtest.c **** 			}
 254:FreeRTOS/Common/Minimal/semtest.c **** 		}
 255:FreeRTOS/Common/Minimal/semtest.c **** 	}
 256:FreeRTOS/Common/Minimal/semtest.c **** }
 257:FreeRTOS/Common/Minimal/semtest.c **** /*-----------------------------------------------------------*/
 258:FreeRTOS/Common/Minimal/semtest.c **** 
 259:FreeRTOS/Common/Minimal/semtest.c **** /* This is called to check that all the created tasks are still running. */
 260:FreeRTOS/Common/Minimal/semtest.c **** portBASE_TYPE xAreSemaphoreTasksStillRunning( void )
 261:FreeRTOS/Common/Minimal/semtest.c **** {
 336              		.loc 1 261 0
 337              		.cfi_startproc
 338              		@ args = 0, pretend = 0, frame = 0
 339              		@ frame_needed = 0, uses_anonymous_args = 0
 340              		@ link register save eliminated.
 341              	.LVL35:
 262:FreeRTOS/Common/Minimal/semtest.c **** static portSHORT sLastCheckVariables[ semtstNUM_TASKS ] = { 0 };
 263:FreeRTOS/Common/Minimal/semtest.c **** portBASE_TYPE xTask, xReturn = pdTRUE;
 342              		.loc 1 263 0
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc6RwWIO.s 			page 12


 343 0000 0120     		movs	r0, #1
 264:FreeRTOS/Common/Minimal/semtest.c **** 
 265:FreeRTOS/Common/Minimal/semtest.c **** 	for( xTask = 0; xTask < semtstNUM_TASKS; xTask++ )
 344              		.loc 1 265 0
 345 0002 0023     		movs	r3, #0
 346 0004 10E0     		b	.L28
 347              	.LVL36:
 348              	.L30:
 266:FreeRTOS/Common/Minimal/semtest.c **** 	{
 267:FreeRTOS/Common/Minimal/semtest.c **** 		if( sLastCheckVariables[ xTask ] == sCheckVariables[ xTask ] )
 349              		.loc 1 267 0
 350 0006 0A4A     		ldr	r2, .L32
 351 0008 32F91310 		ldrsh	r1, [r2, r3, lsl #1]
 352 000c 094A     		ldr	r2, .L32+4
 353 000e 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 354 0012 12B2     		sxth	r2, r2
 355 0014 9142     		cmp	r1, r2
 356 0016 00D1     		bne	.L29
 268:FreeRTOS/Common/Minimal/semtest.c **** 		{
 269:FreeRTOS/Common/Minimal/semtest.c **** 			xReturn = pdFALSE;
 357              		.loc 1 269 0
 358 0018 0020     		movs	r0, #0
 359              	.LVL37:
 360              	.L29:
 270:FreeRTOS/Common/Minimal/semtest.c **** 		}
 271:FreeRTOS/Common/Minimal/semtest.c **** 
 272:FreeRTOS/Common/Minimal/semtest.c **** 		sLastCheckVariables[ xTask ] = sCheckVariables[ xTask ];
 361              		.loc 1 272 0 discriminator 2
 362 001a 064A     		ldr	r2, .L32+4
 363 001c 32F81310 		ldrh	r1, [r2, r3, lsl #1]
 364 0020 034A     		ldr	r2, .L32
 365 0022 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 265:FreeRTOS/Common/Minimal/semtest.c **** 	{
 366              		.loc 1 265 0 discriminator 2
 367 0026 0133     		adds	r3, r3, #1
 368              	.LVL38:
 369              	.L28:
 265:FreeRTOS/Common/Minimal/semtest.c **** 	{
 370              		.loc 1 265 0 is_stmt 0 discriminator 1
 371 0028 032B     		cmp	r3, #3
 372 002a ECDD     		ble	.L30
 273:FreeRTOS/Common/Minimal/semtest.c **** 	}
 274:FreeRTOS/Common/Minimal/semtest.c **** 
 275:FreeRTOS/Common/Minimal/semtest.c **** 	return xReturn;
 276:FreeRTOS/Common/Minimal/semtest.c **** }
 373              		.loc 1 276 0 is_stmt 1
 374 002c 7047     		bx	lr
 375              	.L33:
 376 002e 00BF     		.align	2
 377              	.L32:
 378 0030 00000000 		.word	.LANCHOR2
 379 0034 00000000 		.word	.LANCHOR1
 380              		.cfi_endproc
 381              	.LFE2:
 383              		.section	.bss.sCheckVariables,"aw",%nobits
 384              		.align	2
 385              		.set	.LANCHOR1,. + 0
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc6RwWIO.s 			page 13


 388              	sCheckVariables:
 389 0000 00000000 		.space	8
 389      00000000 
 390              		.section	.bss.sLastCheckVariables.5012,"aw",%nobits
 391              		.align	2
 392              		.set	.LANCHOR2,. + 0
 395              	sLastCheckVariables.5012:
 396 0000 00000000 		.space	8
 396      00000000 
 397              		.section	.rodata.str1.4,"aMS",%progbits,1
 398              		.align	2
 399              	.LC0:
 400 0000 506F6C53 		.ascii	"PolSEM1\000"
 400      454D3100 
 401              	.LC1:
 402 0008 506F6C53 		.ascii	"PolSEM2\000"
 402      454D3200 
 403              	.LC2:
 404 0010 426C6B53 		.ascii	"BlkSEM1\000"
 404      454D3100 
 405              	.LC3:
 406 0018 426C6B53 		.ascii	"BlkSEM2\000"
 406      454D3200 
 407              		.section	.bss.sNextCheckVariable,"aw",%nobits
 408              		.align	1
 409              		.set	.LANCHOR0,. + 0
 412              	sNextCheckVariable:
 413 0000 0000     		.space	2
 414              		.text
 415              	.Letext0:
 416              		.file 2 "FreeRTOS/ARMCM3/Inc/portmacro.h"
 417              		.file 3 "FreeRTOS/Inc/task.h"
 418              		.file 4 "FreeRTOS/Inc/queue.h"
 419              		.file 5 "FreeRTOS/Inc/semphr.h"
 420              		.file 6 "FreeRTOS/Inc/portable.h"
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc6RwWIO.s 			page 14


DEFINED SYMBOLS
                            *ABS*:0000000000000000 semtest.c
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc6RwWIO.s:20     .text.prvSemaphoreTest:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc6RwWIO.s:24     .text.prvSemaphoreTest:0000000000000000 prvSemaphoreTest
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc6RwWIO.s:165    .text.prvSemaphoreTest:00000000000000a0 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc6RwWIO.s:171    .text.vStartSemaphoreTasks:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc6RwWIO.s:176    .text.vStartSemaphoreTasks:0000000000000000 vStartSemaphoreTasks
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc6RwWIO.s:320    .text.vStartSemaphoreTasks:00000000000000bc $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc6RwWIO.s:329    .text.xAreSemaphoreTasksStillRunning:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc6RwWIO.s:334    .text.xAreSemaphoreTasksStillRunning:0000000000000000 xAreSemaphoreTasksStillRunning
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc6RwWIO.s:378    .text.xAreSemaphoreTasksStillRunning:0000000000000030 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc6RwWIO.s:384    .bss.sCheckVariables:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc6RwWIO.s:388    .bss.sCheckVariables:0000000000000000 sCheckVariables
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc6RwWIO.s:391    .bss.sLastCheckVariables.5012:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc6RwWIO.s:395    .bss.sLastCheckVariables.5012:0000000000000000 sLastCheckVariables.5012
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc6RwWIO.s:398    .rodata.str1.4:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc6RwWIO.s:408    .bss.sNextCheckVariable:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc6RwWIO.s:412    .bss.sNextCheckVariable:0000000000000000 sNextCheckVariable
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
vPortEnterCritical
vPortExitCritical
xQueueGenericReceive
xQueueGenericSend
vTaskDelay
vPortYieldFromISR
pvPortMalloc
xQueueCreate
xTaskCreate
