ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc1mxMiH.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"integer.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.vCompeteingIntMathTask,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	vCompeteingIntMathTask:
  25              	.LFB1:
  26              		.file 1 "FreeRTOS/Common/Minimal/integer.c"
   1:FreeRTOS/Common/Minimal/integer.c **** /*
   2:FreeRTOS/Common/Minimal/integer.c **** 	FreeRTOS V5.4.2 - Copyright (C) 2009 Real Time Engineers Ltd.
   3:FreeRTOS/Common/Minimal/integer.c **** 
   4:FreeRTOS/Common/Minimal/integer.c **** 	This file is part of the FreeRTOS distribution.
   5:FreeRTOS/Common/Minimal/integer.c **** 
   6:FreeRTOS/Common/Minimal/integer.c **** 	FreeRTOS is free software; you can redistribute it and/or modify it	under 
   7:FreeRTOS/Common/Minimal/integer.c **** 	the terms of the GNU General Public License (version 2) as published by the 
   8:FreeRTOS/Common/Minimal/integer.c **** 	Free Software Foundation and modified by the FreeRTOS exception.
   9:FreeRTOS/Common/Minimal/integer.c **** 	**NOTE** The exception to the GPL is included to allow you to distribute a
  10:FreeRTOS/Common/Minimal/integer.c **** 	combined work that includes FreeRTOS without being obliged to provide the 
  11:FreeRTOS/Common/Minimal/integer.c **** 	source code for proprietary components outside of the FreeRTOS kernel.  
  12:FreeRTOS/Common/Minimal/integer.c **** 	Alternative commercial license and support terms are also available upon 
  13:FreeRTOS/Common/Minimal/integer.c **** 	request.  See the licensing section of http://www.FreeRTOS.org for full 
  14:FreeRTOS/Common/Minimal/integer.c **** 	license details.
  15:FreeRTOS/Common/Minimal/integer.c **** 
  16:FreeRTOS/Common/Minimal/integer.c **** 	FreeRTOS is distributed in the hope that it will be useful,	but WITHOUT
  17:FreeRTOS/Common/Minimal/integer.c **** 	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  18:FreeRTOS/Common/Minimal/integer.c **** 	FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  19:FreeRTOS/Common/Minimal/integer.c **** 	more details.
  20:FreeRTOS/Common/Minimal/integer.c **** 
  21:FreeRTOS/Common/Minimal/integer.c **** 	You should have received a copy of the GNU General Public License along
  22:FreeRTOS/Common/Minimal/integer.c **** 	with FreeRTOS; if not, write to the Free Software Foundation, Inc., 59
  23:FreeRTOS/Common/Minimal/integer.c **** 	Temple Place, Suite 330, Boston, MA  02111-1307  USA.
  24:FreeRTOS/Common/Minimal/integer.c **** 
  25:FreeRTOS/Common/Minimal/integer.c **** 
  26:FreeRTOS/Common/Minimal/integer.c **** 	***************************************************************************
  27:FreeRTOS/Common/Minimal/integer.c **** 	*                                                                         *
  28:FreeRTOS/Common/Minimal/integer.c **** 	* Looking for a quick start?  Then check out the FreeRTOS eBook!          *
  29:FreeRTOS/Common/Minimal/integer.c **** 	* See http://www.FreeRTOS.org/Documentation for details                   *
  30:FreeRTOS/Common/Minimal/integer.c **** 	*                                                                         *
  31:FreeRTOS/Common/Minimal/integer.c **** 	***************************************************************************
  32:FreeRTOS/Common/Minimal/integer.c **** 
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc1mxMiH.s 			page 2


  33:FreeRTOS/Common/Minimal/integer.c **** 	1 tab == 4 spaces!
  34:FreeRTOS/Common/Minimal/integer.c **** 
  35:FreeRTOS/Common/Minimal/integer.c **** 	Please ensure to read the configuration and relevant port sections of the
  36:FreeRTOS/Common/Minimal/integer.c **** 	online documentation.
  37:FreeRTOS/Common/Minimal/integer.c **** 
  38:FreeRTOS/Common/Minimal/integer.c **** 	http://www.FreeRTOS.org - Documentation, latest information, license and
  39:FreeRTOS/Common/Minimal/integer.c **** 	contact details.
  40:FreeRTOS/Common/Minimal/integer.c **** 
  41:FreeRTOS/Common/Minimal/integer.c **** 	http://www.SafeRTOS.com - A version that is certified for use in safety
  42:FreeRTOS/Common/Minimal/integer.c **** 	critical systems.
  43:FreeRTOS/Common/Minimal/integer.c **** 
  44:FreeRTOS/Common/Minimal/integer.c **** 	http://www.OpenRTOS.com - Commercial support, development, porting,
  45:FreeRTOS/Common/Minimal/integer.c **** 	licensing and training services.
  46:FreeRTOS/Common/Minimal/integer.c **** */
  47:FreeRTOS/Common/Minimal/integer.c **** 
  48:FreeRTOS/Common/Minimal/integer.c **** /*
  49:FreeRTOS/Common/Minimal/integer.c ****  * This version of integer. c is for use on systems that have limited stack
  50:FreeRTOS/Common/Minimal/integer.c ****  * space and no display facilities.  The complete version can be found in
  51:FreeRTOS/Common/Minimal/integer.c ****  * the Demo/Common/Full directory.
  52:FreeRTOS/Common/Minimal/integer.c ****  *
  53:FreeRTOS/Common/Minimal/integer.c ****  * As with the full version, the tasks created in this file are a good test 
  54:FreeRTOS/Common/Minimal/integer.c ****  * of the scheduler context switch mechanism.  The processor has to access 
  55:FreeRTOS/Common/Minimal/integer.c ****  * 32bit variables in two or four chunks (depending on the processor).  The low 
  56:FreeRTOS/Common/Minimal/integer.c ****  * priority of these tasks means there is a high probability that a context 
  57:FreeRTOS/Common/Minimal/integer.c ****  * switch will occur mid calculation.  See flop. c documentation for 
  58:FreeRTOS/Common/Minimal/integer.c ****  * more information.
  59:FreeRTOS/Common/Minimal/integer.c ****  *
  60:FreeRTOS/Common/Minimal/integer.c ****  */
  61:FreeRTOS/Common/Minimal/integer.c **** 
  62:FreeRTOS/Common/Minimal/integer.c **** /*
  63:FreeRTOS/Common/Minimal/integer.c **** Changes from V1.2.1
  64:FreeRTOS/Common/Minimal/integer.c **** 
  65:FreeRTOS/Common/Minimal/integer.c **** 	+ The constants used in the calculations are larger to ensure the
  66:FreeRTOS/Common/Minimal/integer.c **** 	  optimiser does not truncate them to 16 bits.
  67:FreeRTOS/Common/Minimal/integer.c **** 
  68:FreeRTOS/Common/Minimal/integer.c **** Changes from V1.2.3
  69:FreeRTOS/Common/Minimal/integer.c **** 
  70:FreeRTOS/Common/Minimal/integer.c **** 	+ uxTaskCheck is now just used as a boolean.  Instead of incrementing
  71:FreeRTOS/Common/Minimal/integer.c **** 	  the variable each cycle of the task, the variable is simply set to
  72:FreeRTOS/Common/Minimal/integer.c **** 	  true.  sAreIntegerMathsTaskStillRunning() sets it back to false and
  73:FreeRTOS/Common/Minimal/integer.c **** 	  expects it to have been set back to true by the time it is called
  74:FreeRTOS/Common/Minimal/integer.c **** 	  again.
  75:FreeRTOS/Common/Minimal/integer.c **** 	+ A division has been included in the calculation.
  76:FreeRTOS/Common/Minimal/integer.c **** */
  77:FreeRTOS/Common/Minimal/integer.c **** 
  78:FreeRTOS/Common/Minimal/integer.c **** #include <stdlib.h>
  79:FreeRTOS/Common/Minimal/integer.c **** 
  80:FreeRTOS/Common/Minimal/integer.c **** /* Scheduler include files. */
  81:FreeRTOS/Common/Minimal/integer.c **** #include "FreeRTOS.h"
  82:FreeRTOS/Common/Minimal/integer.c **** #include "task.h"
  83:FreeRTOS/Common/Minimal/integer.c **** 
  84:FreeRTOS/Common/Minimal/integer.c **** /* Demo program include files. */
  85:FreeRTOS/Common/Minimal/integer.c **** #include "integer.h"
  86:FreeRTOS/Common/Minimal/integer.c **** 
  87:FreeRTOS/Common/Minimal/integer.c **** /* The constants used in the calculation. */
  88:FreeRTOS/Common/Minimal/integer.c **** #define intgCONST1				( ( portLONG ) 123 )
  89:FreeRTOS/Common/Minimal/integer.c **** #define intgCONST2				( ( portLONG ) 234567 )
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc1mxMiH.s 			page 3


  90:FreeRTOS/Common/Minimal/integer.c **** #define intgCONST3				( ( portLONG ) -3 )
  91:FreeRTOS/Common/Minimal/integer.c **** #define intgCONST4				( ( portLONG ) 7 )
  92:FreeRTOS/Common/Minimal/integer.c **** #define intgEXPECTED_ANSWER		( ( ( intgCONST1 + intgCONST2 ) * intgCONST3 ) / intgCONST4 )
  93:FreeRTOS/Common/Minimal/integer.c **** 
  94:FreeRTOS/Common/Minimal/integer.c **** #define intgSTACK_SIZE			configMINIMAL_STACK_SIZE
  95:FreeRTOS/Common/Minimal/integer.c **** 
  96:FreeRTOS/Common/Minimal/integer.c **** /* As this is the minimal version, we will only create one task. */
  97:FreeRTOS/Common/Minimal/integer.c **** #define intgNUMBER_OF_TASKS		( 1 )
  98:FreeRTOS/Common/Minimal/integer.c **** 
  99:FreeRTOS/Common/Minimal/integer.c **** /* The task function.  Repeatedly performs a 32 bit calculation, checking the
 100:FreeRTOS/Common/Minimal/integer.c **** result against the expected result.  If the result is incorrect then the
 101:FreeRTOS/Common/Minimal/integer.c **** context switch must have caused some corruption. */
 102:FreeRTOS/Common/Minimal/integer.c **** static portTASK_FUNCTION_PROTO( vCompeteingIntMathTask, pvParameters );
 103:FreeRTOS/Common/Minimal/integer.c **** 
 104:FreeRTOS/Common/Minimal/integer.c **** /* Variables that are set to true within the calculation task to indicate
 105:FreeRTOS/Common/Minimal/integer.c **** that the task is still executing.  The check task sets the variable back to
 106:FreeRTOS/Common/Minimal/integer.c **** false, flagging an error if the variable is still false the next time it
 107:FreeRTOS/Common/Minimal/integer.c **** is called. */
 108:FreeRTOS/Common/Minimal/integer.c **** static volatile signed portBASE_TYPE xTaskCheck[ intgNUMBER_OF_TASKS ] = { ( signed portBASE_TYPE )
 109:FreeRTOS/Common/Minimal/integer.c **** 
 110:FreeRTOS/Common/Minimal/integer.c **** /*-----------------------------------------------------------*/
 111:FreeRTOS/Common/Minimal/integer.c **** 
 112:FreeRTOS/Common/Minimal/integer.c **** void vStartIntegerMathTasks( unsigned portBASE_TYPE uxPriority )
 113:FreeRTOS/Common/Minimal/integer.c **** {
 114:FreeRTOS/Common/Minimal/integer.c **** portSHORT sTask;
 115:FreeRTOS/Common/Minimal/integer.c **** 
 116:FreeRTOS/Common/Minimal/integer.c **** 	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
 117:FreeRTOS/Common/Minimal/integer.c **** 	{
 118:FreeRTOS/Common/Minimal/integer.c **** 		xTaskCreate( vCompeteingIntMathTask, ( signed portCHAR * ) "IntMath", intgSTACK_SIZE, ( void * ) 
 119:FreeRTOS/Common/Minimal/integer.c **** 	}
 120:FreeRTOS/Common/Minimal/integer.c **** }
 121:FreeRTOS/Common/Minimal/integer.c **** /*-----------------------------------------------------------*/
 122:FreeRTOS/Common/Minimal/integer.c **** 
 123:FreeRTOS/Common/Minimal/integer.c **** static portTASK_FUNCTION( vCompeteingIntMathTask, pvParameters )
 124:FreeRTOS/Common/Minimal/integer.c **** {
  27              		.loc 1 124 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 30B5     		push	{r4, r5, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 12
  35              		.cfi_offset 4, -12
  36              		.cfi_offset 5, -8
  37              		.cfi_offset 14, -4
  38 0002 83B0     		sub	sp, sp, #12
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 24
  41 0004 0546     		mov	r5, r0
  42              	.LVL1:
 125:FreeRTOS/Common/Minimal/integer.c **** /* These variables are all effectively set to constants so they are volatile to
 126:FreeRTOS/Common/Minimal/integer.c **** ensure the compiler does not just get rid of them. */
 127:FreeRTOS/Common/Minimal/integer.c **** volatile portLONG lValue;
 128:FreeRTOS/Common/Minimal/integer.c **** portSHORT sError = pdFALSE;
  43              		.loc 1 128 0
  44 0006 0024     		movs	r4, #0
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc1mxMiH.s 			page 4


  45              	.LVL2:
  46              	.L2:
 129:FreeRTOS/Common/Minimal/integer.c **** volatile signed portBASE_TYPE *pxTaskHasExecuted;
 130:FreeRTOS/Common/Minimal/integer.c **** 
 131:FreeRTOS/Common/Minimal/integer.c **** 	/* Set a pointer to the variable we are going to set to true each
 132:FreeRTOS/Common/Minimal/integer.c **** 	iteration.  This is also a good test of the parameter passing mechanism
 133:FreeRTOS/Common/Minimal/integer.c **** 	within each port. */
 134:FreeRTOS/Common/Minimal/integer.c **** 	pxTaskHasExecuted = ( volatile signed portBASE_TYPE * ) pvParameters;
 135:FreeRTOS/Common/Minimal/integer.c **** 
 136:FreeRTOS/Common/Minimal/integer.c **** 	/* Keep performing a calculation and checking the result against a constant. */
 137:FreeRTOS/Common/Minimal/integer.c **** 	for( ;; )
 138:FreeRTOS/Common/Minimal/integer.c **** 	{
 139:FreeRTOS/Common/Minimal/integer.c **** 		/* Perform the calculation.  This will store partial value in
 140:FreeRTOS/Common/Minimal/integer.c **** 		registers, resulting in a good test of the context switch mechanism. */
 141:FreeRTOS/Common/Minimal/integer.c **** 		lValue = intgCONST1;
  47              		.loc 1 141 0
  48 0008 7B23     		movs	r3, #123
  49 000a 0193     		str	r3, [sp, #4]
 142:FreeRTOS/Common/Minimal/integer.c **** 		lValue += intgCONST2;
  50              		.loc 1 142 0
  51 000c 019B     		ldr	r3, [sp, #4]
  52 000e 03F56533 		add	r3, r3, #234496
  53 0012 4733     		adds	r3, r3, #71
  54 0014 0193     		str	r3, [sp, #4]
 143:FreeRTOS/Common/Minimal/integer.c **** 
 144:FreeRTOS/Common/Minimal/integer.c **** 		/* Yield in case cooperative scheduling is being used. */
 145:FreeRTOS/Common/Minimal/integer.c **** 		#if configUSE_PREEMPTION == 0
 146:FreeRTOS/Common/Minimal/integer.c **** 		{
 147:FreeRTOS/Common/Minimal/integer.c **** 			taskYIELD();
 148:FreeRTOS/Common/Minimal/integer.c **** 		}
 149:FreeRTOS/Common/Minimal/integer.c **** 		#endif
 150:FreeRTOS/Common/Minimal/integer.c **** 
 151:FreeRTOS/Common/Minimal/integer.c **** 		/* Finish off the calculation. */
 152:FreeRTOS/Common/Minimal/integer.c **** 		lValue *= intgCONST3;
  55              		.loc 1 152 0
  56 0016 019B     		ldr	r3, [sp, #4]
  57 0018 A3EB8303 		sub	r3, r3, r3, lsl #2
  58 001c 0193     		str	r3, [sp, #4]
 153:FreeRTOS/Common/Minimal/integer.c **** 		lValue /= intgCONST4;
  59              		.loc 1 153 0
  60 001e 019B     		ldr	r3, [sp, #4]
  61 0020 0A4A     		ldr	r2, .L7
  62 0022 82FB0312 		smull	r1, r2, r2, r3
  63 0026 1A44     		add	r2, r2, r3
  64 0028 DB17     		asrs	r3, r3, #31
  65 002a C3EBA203 		rsb	r3, r3, r2, asr #2
  66 002e 0193     		str	r3, [sp, #4]
 154:FreeRTOS/Common/Minimal/integer.c **** 
 155:FreeRTOS/Common/Minimal/integer.c **** 		/* If the calculation is found to be incorrect we stop setting the 
 156:FreeRTOS/Common/Minimal/integer.c **** 		TaskHasExecuted variable so the check task can see an error has 
 157:FreeRTOS/Common/Minimal/integer.c **** 		occurred. */
 158:FreeRTOS/Common/Minimal/integer.c **** 		if( lValue != intgEXPECTED_ANSWER ) /*lint !e774 volatile used to prevent this being optimised ou
  67              		.loc 1 158 0
  68 0030 019A     		ldr	r2, [sp, #4]
  69 0032 074B     		ldr	r3, .L7+4
  70 0034 9A42     		cmp	r2, r3
  71 0036 00D0     		beq	.L3
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc1mxMiH.s 			page 5


 159:FreeRTOS/Common/Minimal/integer.c **** 		{
 160:FreeRTOS/Common/Minimal/integer.c **** 			sError = pdTRUE;
  72              		.loc 1 160 0
  73 0038 0124     		movs	r4, #1
  74              	.LVL3:
  75              	.L3:
 161:FreeRTOS/Common/Minimal/integer.c **** 		}
 162:FreeRTOS/Common/Minimal/integer.c **** 
 163:FreeRTOS/Common/Minimal/integer.c **** 		if( sError == pdFALSE )
  76              		.loc 1 163 0
  77 003a 002C     		cmp	r4, #0
  78 003c E4D1     		bne	.L2
 164:FreeRTOS/Common/Minimal/integer.c **** 		{
 165:FreeRTOS/Common/Minimal/integer.c **** 			/* We have not encountered any errors, so set the flag that show
 166:FreeRTOS/Common/Minimal/integer.c **** 			we are still executing.  This will be periodically cleared by
 167:FreeRTOS/Common/Minimal/integer.c **** 			the check task. */
 168:FreeRTOS/Common/Minimal/integer.c **** 			portENTER_CRITICAL();
  79              		.loc 1 168 0
  80 003e FFF7FEFF 		bl	vPortEnterCritical
  81              	.LVL4:
 169:FreeRTOS/Common/Minimal/integer.c **** 				*pxTaskHasExecuted = pdTRUE;
  82              		.loc 1 169 0
  83 0042 0123     		movs	r3, #1
  84 0044 2B60     		str	r3, [r5]
 170:FreeRTOS/Common/Minimal/integer.c **** 			portEXIT_CRITICAL();
  85              		.loc 1 170 0
  86 0046 FFF7FEFF 		bl	vPortExitCritical
  87              	.LVL5:
  88 004a DDE7     		b	.L2
  89              	.L8:
  90              		.align	2
  91              	.L7:
  92 004c 93244992 		.word	-1840700269
  93 0050 1B77FEFF 		.word	-100581
  94              		.cfi_endproc
  95              	.LFE1:
  97              		.section	.text.vStartIntegerMathTasks,"ax",%progbits
  98              		.align	2
  99              		.global	vStartIntegerMathTasks
 100              		.thumb
 101              		.thumb_func
 103              	vStartIntegerMathTasks:
 104              	.LFB0:
 113:FreeRTOS/Common/Minimal/integer.c **** portSHORT sTask;
 105              		.loc 1 113 0
 106              		.cfi_startproc
 107              		@ args = 0, pretend = 0, frame = 0
 108              		@ frame_needed = 0, uses_anonymous_args = 0
 109              	.LVL6:
 110 0000 30B5     		push	{r4, r5, lr}
 111              	.LCFI2:
 112              		.cfi_def_cfa_offset 12
 113              		.cfi_offset 4, -12
 114              		.cfi_offset 5, -8
 115              		.cfi_offset 14, -4
 116 0002 83B0     		sub	sp, sp, #12
 117              	.LCFI3:
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc1mxMiH.s 			page 6


 118              		.cfi_def_cfa_offset 24
 119 0004 0546     		mov	r5, r0
 120              	.LVL7:
 116:FreeRTOS/Common/Minimal/integer.c **** 	{
 121              		.loc 1 116 0
 122 0006 0024     		movs	r4, #0
 123 0008 0CE0     		b	.L10
 124              	.LVL8:
 125              	.L11:
 118:FreeRTOS/Common/Minimal/integer.c **** 	}
 126              		.loc 1 118 0 discriminator 3
 127 000a 0023     		movs	r3, #0
 128 000c 0193     		str	r3, [sp, #4]
 129 000e 0095     		str	r5, [sp]
 130 0010 064B     		ldr	r3, .L13
 131 0012 03EB8403 		add	r3, r3, r4, lsl #2
 132 0016 8022     		movs	r2, #128
 133 0018 0549     		ldr	r1, .L13+4
 134 001a 0648     		ldr	r0, .L13+8
 135 001c FFF7FEFF 		bl	xTaskCreate
 136              	.LVL9:
 116:FreeRTOS/Common/Minimal/integer.c **** 	{
 137              		.loc 1 116 0 discriminator 3
 138 0020 0134     		adds	r4, r4, #1
 139              	.LVL10:
 140 0022 24B2     		sxth	r4, r4
 141              	.LVL11:
 142              	.L10:
 116:FreeRTOS/Common/Minimal/integer.c **** 	{
 143              		.loc 1 116 0 is_stmt 0 discriminator 1
 144 0024 002C     		cmp	r4, #0
 145 0026 F0DD     		ble	.L11
 120:FreeRTOS/Common/Minimal/integer.c **** /*-----------------------------------------------------------*/
 146              		.loc 1 120 0 is_stmt 1
 147 0028 03B0     		add	sp, sp, #12
 148              	.LCFI4:
 149              		.cfi_def_cfa_offset 12
 150              		@ sp needed
 151 002a 30BD     		pop	{r4, r5, pc}
 152              	.LVL12:
 153              	.L14:
 154              		.align	2
 155              	.L13:
 156 002c 00000000 		.word	.LANCHOR0
 157 0030 00000000 		.word	.LC0
 158 0034 00000000 		.word	vCompeteingIntMathTask
 159              		.cfi_endproc
 160              	.LFE0:
 162              		.section	.text.xAreIntegerMathsTaskStillRunning,"ax",%progbits
 163              		.align	2
 164              		.global	xAreIntegerMathsTaskStillRunning
 165              		.thumb
 166              		.thumb_func
 168              	xAreIntegerMathsTaskStillRunning:
 169              	.LFB2:
 171:FreeRTOS/Common/Minimal/integer.c **** 		}
 172:FreeRTOS/Common/Minimal/integer.c **** 
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc1mxMiH.s 			page 7


 173:FreeRTOS/Common/Minimal/integer.c **** 		/* Yield in case cooperative scheduling is being used. */
 174:FreeRTOS/Common/Minimal/integer.c **** 		#if configUSE_PREEMPTION == 0
 175:FreeRTOS/Common/Minimal/integer.c **** 		{
 176:FreeRTOS/Common/Minimal/integer.c **** 			taskYIELD();
 177:FreeRTOS/Common/Minimal/integer.c **** 		}
 178:FreeRTOS/Common/Minimal/integer.c **** 		#endif
 179:FreeRTOS/Common/Minimal/integer.c **** 	}
 180:FreeRTOS/Common/Minimal/integer.c **** }
 181:FreeRTOS/Common/Minimal/integer.c **** /*-----------------------------------------------------------*/
 182:FreeRTOS/Common/Minimal/integer.c **** 
 183:FreeRTOS/Common/Minimal/integer.c **** /* This is called to check that all the created tasks are still running. */
 184:FreeRTOS/Common/Minimal/integer.c **** portBASE_TYPE xAreIntegerMathsTaskStillRunning( void )
 185:FreeRTOS/Common/Minimal/integer.c **** {
 170              		.loc 1 185 0
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 0
 173              		@ frame_needed = 0, uses_anonymous_args = 0
 174              		@ link register save eliminated.
 175 0000 10B4     		push	{r4}
 176              	.LCFI5:
 177              		.cfi_def_cfa_offset 4
 178              		.cfi_offset 4, -4
 179              	.LVL13:
 186:FreeRTOS/Common/Minimal/integer.c **** portBASE_TYPE xReturn = pdTRUE;
 187:FreeRTOS/Common/Minimal/integer.c **** portSHORT sTask;
 188:FreeRTOS/Common/Minimal/integer.c **** 
 189:FreeRTOS/Common/Minimal/integer.c **** 	/* Check the maths tasks are still running by ensuring their check variables 
 190:FreeRTOS/Common/Minimal/integer.c **** 	are still being set to true. */
 191:FreeRTOS/Common/Minimal/integer.c **** 	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
 180              		.loc 1 191 0
 181 0002 0023     		movs	r3, #0
 186:FreeRTOS/Common/Minimal/integer.c **** portBASE_TYPE xReturn = pdTRUE;
 182              		.loc 1 186 0
 183 0004 0120     		movs	r0, #1
 184              		.loc 1 191 0
 185 0006 0BE0     		b	.L16
 186              	.LVL14:
 187              	.L18:
 192:FreeRTOS/Common/Minimal/integer.c **** 	{
 193:FreeRTOS/Common/Minimal/integer.c **** 		if( xTaskCheck[ sTask ] == pdFALSE )
 188              		.loc 1 193 0
 189 0008 1946     		mov	r1, r3
 190 000a 074A     		ldr	r2, .L21
 191 000c 52F82320 		ldr	r2, [r2, r3, lsl #2]
 192 0010 02B9     		cbnz	r2, .L17
 194:FreeRTOS/Common/Minimal/integer.c **** 		{
 195:FreeRTOS/Common/Minimal/integer.c **** 			/* The check has not incremented so an error exists. */
 196:FreeRTOS/Common/Minimal/integer.c **** 			xReturn = pdFALSE;
 193              		.loc 1 196 0
 194 0012 0020     		movs	r0, #0
 195              	.LVL15:
 196              	.L17:
 197:FreeRTOS/Common/Minimal/integer.c **** 		}
 198:FreeRTOS/Common/Minimal/integer.c **** 
 199:FreeRTOS/Common/Minimal/integer.c **** 		/* Reset the check variable so we can tell if it has been set by
 200:FreeRTOS/Common/Minimal/integer.c **** 		the next time around. */
 201:FreeRTOS/Common/Minimal/integer.c **** 		xTaskCheck[ sTask ] = pdFALSE;
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc1mxMiH.s 			page 8


 197              		.loc 1 201 0 discriminator 2
 198 0014 0024     		movs	r4, #0
 199 0016 044A     		ldr	r2, .L21
 200 0018 42F82140 		str	r4, [r2, r1, lsl #2]
 191:FreeRTOS/Common/Minimal/integer.c **** 	{
 201              		.loc 1 191 0 discriminator 2
 202 001c 0133     		adds	r3, r3, #1
 203              	.LVL16:
 204 001e 1BB2     		sxth	r3, r3
 205              	.LVL17:
 206              	.L16:
 191:FreeRTOS/Common/Minimal/integer.c **** 	{
 207              		.loc 1 191 0 is_stmt 0 discriminator 1
 208 0020 002B     		cmp	r3, #0
 209 0022 F1DD     		ble	.L18
 202:FreeRTOS/Common/Minimal/integer.c **** 	}
 203:FreeRTOS/Common/Minimal/integer.c **** 
 204:FreeRTOS/Common/Minimal/integer.c **** 	return xReturn;
 205:FreeRTOS/Common/Minimal/integer.c **** }
 210              		.loc 1 205 0 is_stmt 1
 211 0024 10BC     		pop	{r4}
 212              	.LCFI6:
 213              		.cfi_restore 4
 214              		.cfi_def_cfa_offset 0
 215 0026 7047     		bx	lr
 216              	.L22:
 217              		.align	2
 218              	.L21:
 219 0028 00000000 		.word	.LANCHOR0
 220              		.cfi_endproc
 221              	.LFE2:
 223              		.section	.rodata.str1.4,"aMS",%progbits,1
 224              		.align	2
 225              	.LC0:
 226 0000 496E744D 		.ascii	"IntMath\000"
 226      61746800 
 227              		.section	.bss.xTaskCheck,"aw",%nobits
 228              		.align	2
 229              		.set	.LANCHOR0,. + 0
 232              	xTaskCheck:
 233 0000 00000000 		.space	4
 234              		.text
 235              	.Letext0:
 236              		.file 2 "FreeRTOS/ARMCM3/Inc/portmacro.h"
 237              		.file 3 "FreeRTOS/Inc/task.h"
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc1mxMiH.s 			page 9


DEFINED SYMBOLS
                            *ABS*:0000000000000000 integer.c
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc1mxMiH.s:20     .text.vCompeteingIntMathTask:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc1mxMiH.s:24     .text.vCompeteingIntMathTask:0000000000000000 vCompeteingIntMathTask
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc1mxMiH.s:92     .text.vCompeteingIntMathTask:000000000000004c $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc1mxMiH.s:98     .text.vStartIntegerMathTasks:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc1mxMiH.s:103    .text.vStartIntegerMathTasks:0000000000000000 vStartIntegerMathTasks
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc1mxMiH.s:156    .text.vStartIntegerMathTasks:000000000000002c $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc1mxMiH.s:163    .text.xAreIntegerMathsTaskStillRunning:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc1mxMiH.s:168    .text.xAreIntegerMathsTaskStillRunning:0000000000000000 xAreIntegerMathsTaskStillRunning
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc1mxMiH.s:219    .text.xAreIntegerMathsTaskStillRunning:0000000000000028 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc1mxMiH.s:224    .rodata.str1.4:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc1mxMiH.s:228    .bss.xTaskCheck:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc1mxMiH.s:232    .bss.xTaskCheck:0000000000000000 xTaskCheck
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
vPortEnterCritical
vPortExitCritical
xTaskCreate
