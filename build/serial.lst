ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccbroiRd.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"serial.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.xSerialPortInitMinimal,"ax",%progbits
  20              		.align	2
  21              		.global	xSerialPortInitMinimal
  22              		.thumb
  23              		.thumb_func
  25              	xSerialPortInitMinimal:
  26              	.LFB32:
  27              		.file 1 "FreeRTOS/test_Src/serial.c"
   1:FreeRTOS/test_Src/serial.c **** /*
   2:FreeRTOS/test_Src/serial.c ****  * FreeRTOS Kernel V10.1.1
   3:FreeRTOS/test_Src/serial.c ****  * Copyright (C) 2018 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/test_Src/serial.c ****  *
   5:FreeRTOS/test_Src/serial.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:FreeRTOS/test_Src/serial.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:FreeRTOS/test_Src/serial.c ****  * the Software without restriction, including without limitation the rights to
   8:FreeRTOS/test_Src/serial.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:FreeRTOS/test_Src/serial.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:FreeRTOS/test_Src/serial.c ****  * subject to the following conditions:
  11:FreeRTOS/test_Src/serial.c ****  *
  12:FreeRTOS/test_Src/serial.c ****  * The above copyright notice and this permission notice shall be included in all
  13:FreeRTOS/test_Src/serial.c ****  * copies or substantial portions of the Software.
  14:FreeRTOS/test_Src/serial.c ****  *
  15:FreeRTOS/test_Src/serial.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:FreeRTOS/test_Src/serial.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:FreeRTOS/test_Src/serial.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:FreeRTOS/test_Src/serial.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:FreeRTOS/test_Src/serial.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:FreeRTOS/test_Src/serial.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:FreeRTOS/test_Src/serial.c ****  *
  22:FreeRTOS/test_Src/serial.c ****  * http://www.FreeRTOS.org
  23:FreeRTOS/test_Src/serial.c ****  * http://aws.amazon.com/freertos
  24:FreeRTOS/test_Src/serial.c ****  *
  25:FreeRTOS/test_Src/serial.c ****  * 1 tab == 4 spaces!
  26:FreeRTOS/test_Src/serial.c ****  */
  27:FreeRTOS/test_Src/serial.c **** 
  28:FreeRTOS/test_Src/serial.c **** /*
  29:FreeRTOS/test_Src/serial.c **** 	BASIC INTERRUPT DRIVEN SERIAL PORT DRIVER FOR UART0.
  30:FreeRTOS/test_Src/serial.c **** */
  31:FreeRTOS/test_Src/serial.c **** 
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccbroiRd.s 			page 2


  32:FreeRTOS/test_Src/serial.c **** /* Scheduler includes. */
  33:FreeRTOS/test_Src/serial.c **** #include "FreeRTOS.h"
  34:FreeRTOS/test_Src/serial.c **** #include "queue.h"
  35:FreeRTOS/test_Src/serial.c **** #include "semphr.h"
  36:FreeRTOS/test_Src/serial.c **** 
  37:FreeRTOS/test_Src/serial.c **** /* Library includes. */
  38:FreeRTOS/test_Src/serial.c **** #include "stm32f10x_conf.h"
  39:FreeRTOS/test_Src/serial.c **** 
  40:FreeRTOS/test_Src/serial.c **** /* Demo application includes. */
  41:FreeRTOS/test_Src/serial.c **** #include "serial.h"
  42:FreeRTOS/test_Src/serial.c **** /*-----------------------------------------------------------*/
  43:FreeRTOS/test_Src/serial.c **** 
  44:FreeRTOS/test_Src/serial.c **** /* Misc defines. */
  45:FreeRTOS/test_Src/serial.c **** #define serINVALID_QUEUE				( ( QueueHandle_t ) 0 )
  46:FreeRTOS/test_Src/serial.c **** #define serNO_BLOCK						( ( TickType_t ) 0 )
  47:FreeRTOS/test_Src/serial.c **** #define serTX_BLOCK_TIME				( 40 / portTICK_PERIOD_MS )
  48:FreeRTOS/test_Src/serial.c **** 
  49:FreeRTOS/test_Src/serial.c **** /*-----------------------------------------------------------*/
  50:FreeRTOS/test_Src/serial.c **** 
  51:FreeRTOS/test_Src/serial.c **** /* The queue used to hold received characters. */
  52:FreeRTOS/test_Src/serial.c **** static QueueHandle_t xRxedChars;
  53:FreeRTOS/test_Src/serial.c **** static QueueHandle_t xCharsForTx;
  54:FreeRTOS/test_Src/serial.c **** 
  55:FreeRTOS/test_Src/serial.c **** /*-----------------------------------------------------------*/
  56:FreeRTOS/test_Src/serial.c **** 
  57:FreeRTOS/test_Src/serial.c **** /* UART interrupt handler. */
  58:FreeRTOS/test_Src/serial.c **** void vUARTInterruptHandler( void );
  59:FreeRTOS/test_Src/serial.c **** 
  60:FreeRTOS/test_Src/serial.c **** /*-----------------------------------------------------------*/
  61:FreeRTOS/test_Src/serial.c **** 
  62:FreeRTOS/test_Src/serial.c **** /*
  63:FreeRTOS/test_Src/serial.c ****  * See the serial2.h header file.
  64:FreeRTOS/test_Src/serial.c ****  */
  65:FreeRTOS/test_Src/serial.c **** xComPortHandle xSerialPortInitMinimal( unsigned long ulWantedBaud, unsigned portBASE_TYPE uxQueueLe
  66:FreeRTOS/test_Src/serial.c **** {
  28              		.loc 1 66 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 32
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 70B5     		push	{r4, r5, r6, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 4, -16
  37              		.cfi_offset 5, -12
  38              		.cfi_offset 6, -8
  39              		.cfi_offset 14, -4
  40 0002 88B0     		sub	sp, sp, #32
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 48
  43 0004 0646     		mov	r6, r0
  44 0006 0D46     		mov	r5, r1
  67:FreeRTOS/test_Src/serial.c **** xComPortHandle xReturn;
  68:FreeRTOS/test_Src/serial.c **** USART_InitTypeDef USART_InitStructure;
  69:FreeRTOS/test_Src/serial.c **** NVIC_InitTypeDef NVIC_InitStructure;
  70:FreeRTOS/test_Src/serial.c **** GPIO_InitTypeDef GPIO_InitStructure;
  71:FreeRTOS/test_Src/serial.c **** USART_ClockInitTypeDef USART_InitClockStructure;
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccbroiRd.s 			page 3


  72:FreeRTOS/test_Src/serial.c **** 
  73:FreeRTOS/test_Src/serial.c **** 	/* Create the queues used to hold Rx/Tx characters. */
  74:FreeRTOS/test_Src/serial.c **** 	xRxedChars = xQueueCreate( uxQueueLength, ( unsigned portBASE_TYPE ) sizeof( signed char ) );
  45              		.loc 1 74 0
  46 0008 0022     		movs	r2, #0
  47 000a 0121     		movs	r1, #1
  48              	.LVL1:
  49 000c 2846     		mov	r0, r5
  50              	.LVL2:
  51 000e FFF7FEFF 		bl	xQueueGenericCreate
  52              	.LVL3:
  53 0012 334C     		ldr	r4, .L4
  54 0014 2060     		str	r0, [r4]
  75:FreeRTOS/test_Src/serial.c **** 	xCharsForTx = xQueueCreate( uxQueueLength + 1, ( unsigned portBASE_TYPE ) sizeof( signed char ) );
  55              		.loc 1 75 0
  56 0016 0022     		movs	r2, #0
  57 0018 0121     		movs	r1, #1
  58 001a 6818     		adds	r0, r5, r1
  59 001c FFF7FEFF 		bl	xQueueGenericCreate
  60              	.LVL4:
  61 0020 304B     		ldr	r3, .L4+4
  62 0022 1860     		str	r0, [r3]
  76:FreeRTOS/test_Src/serial.c **** 	
  77:FreeRTOS/test_Src/serial.c **** 	/* If the queue/semaphore was created correctly then setup the serial port
  78:FreeRTOS/test_Src/serial.c **** 	hardware. */
  79:FreeRTOS/test_Src/serial.c **** 	if( ( xRxedChars != serINVALID_QUEUE ) && ( xCharsForTx != serINVALID_QUEUE ) )
  63              		.loc 1 79 0
  64 0024 2368     		ldr	r3, [r4]
  65 0026 002B     		cmp	r3, #0
  66 0028 56D0     		beq	.L2
  67              		.loc 1 79 0 is_stmt 0 discriminator 1
  68 002a 0028     		cmp	r0, #0
  69 002c 54D0     		beq	.L2
  80:FreeRTOS/test_Src/serial.c **** 	{
  81:FreeRTOS/test_Src/serial.c **** 		/* Enable USART1 clock */
  82:FreeRTOS/test_Src/serial.c **** 		RCC_APB2PeriphClockCmd( RCC_APB2Periph_USART1 | RCC_APB2Periph_GPIOA, ENABLE );	
  70              		.loc 1 82 0 is_stmt 1
  71 002e 0121     		movs	r1, #1
  72 0030 44F20400 		movw	r0, #16388
  73 0034 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
  74              	.LVL5:
  83:FreeRTOS/test_Src/serial.c **** 
  84:FreeRTOS/test_Src/serial.c **** 		/* Configure USART1 Rx (PA10) as input floating */
  85:FreeRTOS/test_Src/serial.c **** 		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
  75              		.loc 1 85 0
  76 0038 4FF48063 		mov	r3, #1024
  77 003c ADF80830 		strh	r3, [sp, #8]	@ movhi
  86:FreeRTOS/test_Src/serial.c **** 		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
  78              		.loc 1 86 0
  79 0040 0423     		movs	r3, #4
  80 0042 8DF80B30 		strb	r3, [sp, #11]
  87:FreeRTOS/test_Src/serial.c **** 		GPIO_Init( GPIOA, &GPIO_InitStructure );
  81              		.loc 1 87 0
  82 0046 284C     		ldr	r4, .L4+8
  83 0048 02A9     		add	r1, sp, #8
  84 004a 2046     		mov	r0, r4
  85 004c FFF7FEFF 		bl	GPIO_Init
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccbroiRd.s 			page 4


  86              	.LVL6:
  88:FreeRTOS/test_Src/serial.c **** 		
  89:FreeRTOS/test_Src/serial.c **** 		/* Configure USART1 Tx (PA9) as alternate function push-pull */
  90:FreeRTOS/test_Src/serial.c **** 		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
  87              		.loc 1 90 0
  88 0050 4FF40075 		mov	r5, #512
  89              	.LVL7:
  90 0054 ADF80850 		strh	r5, [sp, #8]	@ movhi
  91:FreeRTOS/test_Src/serial.c **** 		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  91              		.loc 1 91 0
  92 0058 0323     		movs	r3, #3
  93 005a 8DF80A30 		strb	r3, [sp, #10]
  92:FreeRTOS/test_Src/serial.c **** 		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  94              		.loc 1 92 0
  95 005e 1823     		movs	r3, #24
  96 0060 8DF80B30 		strb	r3, [sp, #11]
  93:FreeRTOS/test_Src/serial.c **** 		GPIO_Init( GPIOA, &GPIO_InitStructure );
  97              		.loc 1 93 0
  98 0064 02A9     		add	r1, sp, #8
  99 0066 2046     		mov	r0, r4
 100 0068 FFF7FEFF 		bl	GPIO_Init
 101              	.LVL8:
  94:FreeRTOS/test_Src/serial.c **** 
  95:FreeRTOS/test_Src/serial.c **** 		USART_InitStructure.USART_BaudRate = ulWantedBaud;
 102              		.loc 1 95 0
 103 006c 0496     		str	r6, [sp, #16]
  96:FreeRTOS/test_Src/serial.c **** 		USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 104              		.loc 1 96 0
 105 006e 0024     		movs	r4, #0
 106 0070 ADF81440 		strh	r4, [sp, #20]	@ movhi
  97:FreeRTOS/test_Src/serial.c **** 		USART_InitStructure.USART_StopBits = USART_StopBits_1;
 107              		.loc 1 97 0
 108 0074 ADF81640 		strh	r4, [sp, #22]	@ movhi
  98:FreeRTOS/test_Src/serial.c **** 		USART_InitStructure.USART_Parity = USART_Parity_No ;
 109              		.loc 1 98 0
 110 0078 ADF81840 		strh	r4, [sp, #24]	@ movhi
  99:FreeRTOS/test_Src/serial.c **** 		USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 111              		.loc 1 99 0
 112 007c ADF81C40 		strh	r4, [sp, #28]	@ movhi
 100:FreeRTOS/test_Src/serial.c **** 		USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 113              		.loc 1 100 0
 114 0080 0C23     		movs	r3, #12
 115 0082 ADF81A30 		strh	r3, [sp, #26]	@ movhi
 101:FreeRTOS/test_Src/serial.c **** 
 102:FreeRTOS/test_Src/serial.c **** 		//USART_ClockInitTypeDef setting 
 103:FreeRTOS/test_Src/serial.c **** 		USART_InitClockStructure.USART_Clock = USART_Clock_Disable;
 116              		.loc 1 103 0
 117 0086 ADF80040 		strh	r4, [sp]	@ movhi
 104:FreeRTOS/test_Src/serial.c **** 		USART_InitClockStructure.USART_CPOL = USART_CPOL_Low;
 118              		.loc 1 104 0
 119 008a ADF80240 		strh	r4, [sp, #2]	@ movhi
 105:FreeRTOS/test_Src/serial.c **** 		USART_InitClockStructure.USART_CPHA = USART_CPHA_2Edge;
 120              		.loc 1 105 0
 121 008e ADF80450 		strh	r5, [sp, #4]	@ movhi
 106:FreeRTOS/test_Src/serial.c **** 		USART_InitClockStructure.USART_LastBit = USART_LastBit_Disable;
 122              		.loc 1 106 0
 123 0092 ADF80640 		strh	r4, [sp, #6]	@ movhi
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccbroiRd.s 			page 5


 107:FreeRTOS/test_Src/serial.c **** 		
 108:FreeRTOS/test_Src/serial.c **** 		//clock setting
 109:FreeRTOS/test_Src/serial.c **** 		USART_ClockInit(USART1, &USART_InitClockStructure);
 124              		.loc 1 109 0
 125 0096 154D     		ldr	r5, .L4+12
 126 0098 6946     		mov	r1, sp
 127 009a 2846     		mov	r0, r5
 128 009c FFF7FEFF 		bl	USART_ClockInit
 129              	.LVL9:
 110:FreeRTOS/test_Src/serial.c **** 		USART_Init( USART1, &USART_InitStructure );
 130              		.loc 1 110 0
 131 00a0 04A9     		add	r1, sp, #16
 132 00a2 2846     		mov	r0, r5
 133 00a4 FFF7FEFF 		bl	USART_Init
 134              	.LVL10:
 111:FreeRTOS/test_Src/serial.c **** 		
 112:FreeRTOS/test_Src/serial.c **** 		USART_ITConfig( USART1, USART_IT_RXNE, ENABLE );
 135              		.loc 1 112 0
 136 00a8 0122     		movs	r2, #1
 137 00aa 40F22551 		movw	r1, #1317
 138 00ae 2846     		mov	r0, r5
 139 00b0 FFF7FEFF 		bl	USART_ITConfig
 140              	.LVL11:
 113:FreeRTOS/test_Src/serial.c **** 		
 114:FreeRTOS/test_Src/serial.c **** 
 115:FreeRTOS/test_Src/serial.c **** 		//
 116:FreeRTOS/test_Src/serial.c **** 		NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;
 141              		.loc 1 116 0
 142 00b4 2523     		movs	r3, #37
 143 00b6 8DF80C30 		strb	r3, [sp, #12]
 117:FreeRTOS/test_Src/serial.c **** 		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = configLIBRARY_KERNEL_INTERRUPT_PRIORITY;
 144              		.loc 1 117 0
 145 00ba 0F23     		movs	r3, #15
 146 00bc 8DF80D30 		strb	r3, [sp, #13]
 118:FreeRTOS/test_Src/serial.c **** 		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 147              		.loc 1 118 0
 148 00c0 8DF80E40 		strb	r4, [sp, #14]
 119:FreeRTOS/test_Src/serial.c **** 		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 149              		.loc 1 119 0
 150 00c4 0124     		movs	r4, #1
 151 00c6 8DF80F40 		strb	r4, [sp, #15]
 120:FreeRTOS/test_Src/serial.c **** 		NVIC_Init( &NVIC_InitStructure );
 152              		.loc 1 120 0
 153 00ca 03A8     		add	r0, sp, #12
 154 00cc FFF7FEFF 		bl	NVIC_Init
 155              	.LVL12:
 121:FreeRTOS/test_Src/serial.c **** 		
 122:FreeRTOS/test_Src/serial.c **** 		USART_Cmd( USART1, ENABLE );		
 156              		.loc 1 122 0
 157 00d0 2146     		mov	r1, r4
 158 00d2 2846     		mov	r0, r5
 159 00d4 FFF7FEFF 		bl	USART_Cmd
 160              	.LVL13:
 161              	.L2:
 123:FreeRTOS/test_Src/serial.c **** 	}
 124:FreeRTOS/test_Src/serial.c **** 	else
 125:FreeRTOS/test_Src/serial.c **** 	{
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccbroiRd.s 			page 6


 126:FreeRTOS/test_Src/serial.c **** 		xReturn = ( xComPortHandle ) 0;
 127:FreeRTOS/test_Src/serial.c **** 	}
 128:FreeRTOS/test_Src/serial.c **** 
 129:FreeRTOS/test_Src/serial.c **** 	/* This demo file only supports a single port but we have to return
 130:FreeRTOS/test_Src/serial.c **** 	something to comply with the standard demo header file. */
 131:FreeRTOS/test_Src/serial.c **** 	return xReturn;
 132:FreeRTOS/test_Src/serial.c **** }
 162              		.loc 1 132 0
 163 00d8 0020     		movs	r0, #0
 164 00da 08B0     		add	sp, sp, #32
 165              	.LCFI2:
 166              		.cfi_def_cfa_offset 16
 167              		@ sp needed
 168 00dc 70BD     		pop	{r4, r5, r6, pc}
 169              	.LVL14:
 170              	.L5:
 171 00de 00BF     		.align	2
 172              	.L4:
 173 00e0 00000000 		.word	.LANCHOR0
 174 00e4 00000000 		.word	.LANCHOR1
 175 00e8 00080140 		.word	1073809408
 176 00ec 00380140 		.word	1073821696
 177              		.cfi_endproc
 178              	.LFE32:
 180              		.section	.text.xSerialGetChar,"ax",%progbits
 181              		.align	2
 182              		.global	xSerialGetChar
 183              		.thumb
 184              		.thumb_func
 186              	xSerialGetChar:
 187              	.LFB33:
 133:FreeRTOS/test_Src/serial.c **** /*-----------------------------------------------------------*/
 134:FreeRTOS/test_Src/serial.c **** 
 135:FreeRTOS/test_Src/serial.c **** signed portBASE_TYPE xSerialGetChar( xComPortHandle pxPort, signed char *pcRxedChar, TickType_t xBl
 136:FreeRTOS/test_Src/serial.c **** {
 188              		.loc 1 136 0
 189              		.cfi_startproc
 190              		@ args = 0, pretend = 0, frame = 0
 191              		@ frame_needed = 0, uses_anonymous_args = 0
 192              	.LVL15:
 193 0000 08B5     		push	{r3, lr}
 194              	.LCFI3:
 195              		.cfi_def_cfa_offset 8
 196              		.cfi_offset 3, -8
 197              		.cfi_offset 14, -4
 137:FreeRTOS/test_Src/serial.c **** 	/* The port handle is not required as this driver only supports one port. */
 138:FreeRTOS/test_Src/serial.c **** 	( void ) pxPort;
 139:FreeRTOS/test_Src/serial.c **** 
 140:FreeRTOS/test_Src/serial.c **** 	/* Get the next character from the buffer.  Return false if no characters
 141:FreeRTOS/test_Src/serial.c **** 	are available, or arrive before xBlockTime expires. */
 142:FreeRTOS/test_Src/serial.c **** 	if( xQueueReceive( xRxedChars, pcRxedChar, xBlockTime ) )
 198              		.loc 1 142 0
 199 0002 044B     		ldr	r3, .L9
 200 0004 1868     		ldr	r0, [r3]
 201              	.LVL16:
 202 0006 FFF7FEFF 		bl	xQueueReceive
 203              	.LVL17:
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccbroiRd.s 			page 7


 204 000a 0346     		mov	r3, r0
 205 000c 00B1     		cbz	r0, .L7
 143:FreeRTOS/test_Src/serial.c **** 	{
 144:FreeRTOS/test_Src/serial.c **** 		return pdTRUE;
 206              		.loc 1 144 0
 207 000e 0123     		movs	r3, #1
 208              	.L7:
 145:FreeRTOS/test_Src/serial.c **** 	}
 146:FreeRTOS/test_Src/serial.c **** 	else
 147:FreeRTOS/test_Src/serial.c **** 	{
 148:FreeRTOS/test_Src/serial.c **** 		return pdFALSE;
 149:FreeRTOS/test_Src/serial.c **** 	}
 150:FreeRTOS/test_Src/serial.c **** }
 209              		.loc 1 150 0
 210 0010 1846     		mov	r0, r3
 211 0012 08BD     		pop	{r3, pc}
 212              	.L10:
 213              		.align	2
 214              	.L9:
 215 0014 00000000 		.word	.LANCHOR0
 216              		.cfi_endproc
 217              	.LFE33:
 219              		.section	.text.xSerialPutChar,"ax",%progbits
 220              		.align	2
 221              		.global	xSerialPutChar
 222              		.thumb
 223              		.thumb_func
 225              	xSerialPutChar:
 226              	.LFB35:
 151:FreeRTOS/test_Src/serial.c **** /*-----------------------------------------------------------*/
 152:FreeRTOS/test_Src/serial.c **** 
 153:FreeRTOS/test_Src/serial.c **** void vSerialPutString( xComPortHandle pxPort, const signed char * const pcString, unsigned short us
 154:FreeRTOS/test_Src/serial.c **** {
 155:FreeRTOS/test_Src/serial.c **** signed char *pxNext;
 156:FreeRTOS/test_Src/serial.c **** 
 157:FreeRTOS/test_Src/serial.c **** 	/* A couple of parameters that this port does not use. */
 158:FreeRTOS/test_Src/serial.c **** 	( void ) usStringLength;
 159:FreeRTOS/test_Src/serial.c **** 	( void ) pxPort;
 160:FreeRTOS/test_Src/serial.c **** 
 161:FreeRTOS/test_Src/serial.c **** 	/* NOTE: This implementation does not handle the queue being full as no
 162:FreeRTOS/test_Src/serial.c **** 	block time is used! */
 163:FreeRTOS/test_Src/serial.c **** 
 164:FreeRTOS/test_Src/serial.c **** 	/* The port handle is not required as this driver only supports UART1. */
 165:FreeRTOS/test_Src/serial.c **** 	( void ) pxPort;
 166:FreeRTOS/test_Src/serial.c **** 
 167:FreeRTOS/test_Src/serial.c **** 	/* Send each character in the string, one at a time. */
 168:FreeRTOS/test_Src/serial.c **** 	pxNext = ( signed char * ) pcString;
 169:FreeRTOS/test_Src/serial.c **** 	while( *pxNext )
 170:FreeRTOS/test_Src/serial.c **** 	{
 171:FreeRTOS/test_Src/serial.c **** 		xSerialPutChar( pxPort, *pxNext, serNO_BLOCK );
 172:FreeRTOS/test_Src/serial.c **** 		pxNext++;
 173:FreeRTOS/test_Src/serial.c **** 	}
 174:FreeRTOS/test_Src/serial.c **** }
 175:FreeRTOS/test_Src/serial.c **** /*-----------------------------------------------------------*/
 176:FreeRTOS/test_Src/serial.c **** 
 177:FreeRTOS/test_Src/serial.c **** signed portBASE_TYPE xSerialPutChar( xComPortHandle pxPort, signed char cOutChar, TickType_t xBlock
 178:FreeRTOS/test_Src/serial.c **** {
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccbroiRd.s 			page 8


 227              		.loc 1 178 0
 228              		.cfi_startproc
 229              		@ args = 0, pretend = 0, frame = 8
 230              		@ frame_needed = 0, uses_anonymous_args = 0
 231              	.LVL18:
 232 0000 00B5     		push	{lr}
 233              	.LCFI4:
 234              		.cfi_def_cfa_offset 4
 235              		.cfi_offset 14, -4
 236 0002 83B0     		sub	sp, sp, #12
 237              	.LCFI5:
 238              		.cfi_def_cfa_offset 16
 239 0004 02A8     		add	r0, sp, #8
 240              	.LVL19:
 241 0006 00F8011D 		strb	r1, [r0, #-1]!
 179:FreeRTOS/test_Src/serial.c **** signed portBASE_TYPE xReturn;
 180:FreeRTOS/test_Src/serial.c **** 
 181:FreeRTOS/test_Src/serial.c **** 	if( xQueueSend( xCharsForTx, &cOutChar, xBlockTime ) == pdPASS )
 242              		.loc 1 181 0
 243 000a 0023     		movs	r3, #0
 244 000c 0146     		mov	r1, r0
 245              	.LVL20:
 246 000e 0948     		ldr	r0, .L15
 247              	.LVL21:
 248 0010 0068     		ldr	r0, [r0]
 249 0012 FFF7FEFF 		bl	xQueueGenericSend
 250              	.LVL22:
 251 0016 0128     		cmp	r0, #1
 252 0018 07D1     		bne	.L13
 253              	.LVL23:
 182:FreeRTOS/test_Src/serial.c **** 	{
 183:FreeRTOS/test_Src/serial.c **** 		xReturn = pdPASS;
 184:FreeRTOS/test_Src/serial.c **** 		USART_ITConfig( USART1, USART_IT_TXE, ENABLE );
 254              		.loc 1 184 0
 255 001a 0122     		movs	r2, #1
 256 001c 40F22771 		movw	r1, #1831
 257 0020 0548     		ldr	r0, .L15+4
 258 0022 FFF7FEFF 		bl	USART_ITConfig
 259              	.LVL24:
 183:FreeRTOS/test_Src/serial.c **** 		USART_ITConfig( USART1, USART_IT_TXE, ENABLE );
 260              		.loc 1 183 0
 261 0026 0120     		movs	r0, #1
 262 0028 00E0     		b	.L12
 263              	.LVL25:
 264              	.L13:
 185:FreeRTOS/test_Src/serial.c **** 	}
 186:FreeRTOS/test_Src/serial.c **** 	else
 187:FreeRTOS/test_Src/serial.c **** 	{
 188:FreeRTOS/test_Src/serial.c **** 		xReturn = pdFAIL;
 265              		.loc 1 188 0
 266 002a 0020     		movs	r0, #0
 267              	.L12:
 268              	.LVL26:
 189:FreeRTOS/test_Src/serial.c **** 	}
 190:FreeRTOS/test_Src/serial.c **** 
 191:FreeRTOS/test_Src/serial.c **** 	return xReturn;
 192:FreeRTOS/test_Src/serial.c **** }
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccbroiRd.s 			page 9


 269              		.loc 1 192 0
 270 002c 03B0     		add	sp, sp, #12
 271              	.LCFI6:
 272              		.cfi_def_cfa_offset 4
 273              		@ sp needed
 274 002e 5DF804FB 		ldr	pc, [sp], #4
 275              	.LVL27:
 276              	.L16:
 277 0032 00BF     		.align	2
 278              	.L15:
 279 0034 00000000 		.word	.LANCHOR1
 280 0038 00380140 		.word	1073821696
 281              		.cfi_endproc
 282              	.LFE35:
 284              		.section	.text.vSerialPutString,"ax",%progbits
 285              		.align	2
 286              		.global	vSerialPutString
 287              		.thumb
 288              		.thumb_func
 290              	vSerialPutString:
 291              	.LFB34:
 154:FreeRTOS/test_Src/serial.c **** signed char *pxNext;
 292              		.loc 1 154 0
 293              		.cfi_startproc
 294              		@ args = 0, pretend = 0, frame = 0
 295              		@ frame_needed = 0, uses_anonymous_args = 0
 296              	.LVL28:
 297 0000 38B5     		push	{r3, r4, r5, lr}
 298              	.LCFI7:
 299              		.cfi_def_cfa_offset 16
 300              		.cfi_offset 3, -16
 301              		.cfi_offset 4, -12
 302              		.cfi_offset 5, -8
 303              		.cfi_offset 14, -4
 304 0002 0546     		mov	r5, r0
 305 0004 0C46     		mov	r4, r1
 169:FreeRTOS/test_Src/serial.c **** 	{
 306              		.loc 1 169 0
 307 0006 04E0     		b	.L18
 308              	.LVL29:
 309              	.L19:
 171:FreeRTOS/test_Src/serial.c **** 		pxNext++;
 310              		.loc 1 171 0
 311 0008 0022     		movs	r2, #0
 312 000a 2846     		mov	r0, r5
 313 000c FFF7FEFF 		bl	xSerialPutChar
 314              	.LVL30:
 172:FreeRTOS/test_Src/serial.c **** 	}
 315              		.loc 1 172 0
 316 0010 0134     		adds	r4, r4, #1
 317              	.LVL31:
 318              	.L18:
 169:FreeRTOS/test_Src/serial.c **** 	{
 319              		.loc 1 169 0
 320 0012 94F90010 		ldrsb	r1, [r4]
 321 0016 0029     		cmp	r1, #0
 322 0018 F6D1     		bne	.L19
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccbroiRd.s 			page 10


 174:FreeRTOS/test_Src/serial.c **** /*-----------------------------------------------------------*/
 323              		.loc 1 174 0
 324 001a 38BD     		pop	{r3, r4, r5, pc}
 325              		.cfi_endproc
 326              	.LFE34:
 328              		.section	.text.vSerialClose,"ax",%progbits
 329              		.align	2
 330              		.global	vSerialClose
 331              		.thumb
 332              		.thumb_func
 334              	vSerialClose:
 335              	.LFB36:
 193:FreeRTOS/test_Src/serial.c **** /*-----------------------------------------------------------*/
 194:FreeRTOS/test_Src/serial.c **** 
 195:FreeRTOS/test_Src/serial.c **** void vSerialClose( xComPortHandle xPort )
 196:FreeRTOS/test_Src/serial.c **** {
 336              		.loc 1 196 0
 337              		.cfi_startproc
 338              		@ args = 0, pretend = 0, frame = 0
 339              		@ frame_needed = 0, uses_anonymous_args = 0
 340              		@ link register save eliminated.
 341              	.LVL32:
 342 0000 7047     		bx	lr
 343              		.cfi_endproc
 344              	.LFE36:
 346 0002 00BF     		.section	.text.vUARTInterruptHandler,"ax",%progbits
 347              		.align	2
 348              		.global	vUARTInterruptHandler
 349              		.thumb
 350              		.thumb_func
 352              	vUARTInterruptHandler:
 353              	.LFB37:
 197:FreeRTOS/test_Src/serial.c **** 	/* Not supported as not required by the demo application. */
 198:FreeRTOS/test_Src/serial.c **** }
 199:FreeRTOS/test_Src/serial.c **** /*-----------------------------------------------------------*/
 200:FreeRTOS/test_Src/serial.c **** 
 201:FreeRTOS/test_Src/serial.c **** void vUARTInterruptHandler( void )
 202:FreeRTOS/test_Src/serial.c **** {
 354              		.loc 1 202 0
 355              		.cfi_startproc
 356              		@ args = 0, pretend = 0, frame = 8
 357              		@ frame_needed = 0, uses_anonymous_args = 0
 358              		.loc 1 202 0
 359 0000 00B5     		push	{lr}
 360              	.LCFI8:
 361              		.cfi_def_cfa_offset 4
 362              		.cfi_offset 14, -4
 363 0002 83B0     		sub	sp, sp, #12
 364              	.LCFI9:
 365              		.cfi_def_cfa_offset 16
 203:FreeRTOS/test_Src/serial.c **** portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 366              		.loc 1 203 0
 367 0004 0023     		movs	r3, #0
 368 0006 0193     		str	r3, [sp, #4]
 204:FreeRTOS/test_Src/serial.c **** char cChar;
 205:FreeRTOS/test_Src/serial.c **** 
 206:FreeRTOS/test_Src/serial.c **** 	if( USART_GetITStatus( USART1, USART_IT_TXE ) == SET )
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccbroiRd.s 			page 11


 369              		.loc 1 206 0
 370 0008 40F22771 		movw	r1, #1831
 371 000c 1D48     		ldr	r0, .L28
 372 000e FFF7FEFF 		bl	USART_GetITStatus
 373              	.LVL33:
 374 0012 0128     		cmp	r0, #1
 375 0014 14D1     		bne	.L23
 207:FreeRTOS/test_Src/serial.c **** 	{
 208:FreeRTOS/test_Src/serial.c **** 		/* The interrupt was caused by the THR becoming empty.  Are there any
 209:FreeRTOS/test_Src/serial.c **** 		more characters to transmit? */
 210:FreeRTOS/test_Src/serial.c **** 		if( xQueueReceiveFromISR( xCharsForTx, &cChar, &xHigherPriorityTaskWoken ) == pdTRUE )
 376              		.loc 1 210 0
 377 0016 01AA     		add	r2, sp, #4
 378 0018 0DF10301 		add	r1, sp, #3
 379 001c 1A4B     		ldr	r3, .L28+4
 380 001e 1868     		ldr	r0, [r3]
 381 0020 FFF7FEFF 		bl	xQueueReceiveFromISR
 382              	.LVL34:
 383 0024 0128     		cmp	r0, #1
 384 0026 05D1     		bne	.L24
 211:FreeRTOS/test_Src/serial.c **** 		{
 212:FreeRTOS/test_Src/serial.c **** 			/* A character was retrieved from the queue so can be sent to the
 213:FreeRTOS/test_Src/serial.c **** 			THR now. */
 214:FreeRTOS/test_Src/serial.c **** 			USART_SendData( USART1, cChar );
 385              		.loc 1 214 0
 386 0028 9DF80310 		ldrb	r1, [sp, #3]	@ zero_extendqisi2
 387 002c 1548     		ldr	r0, .L28
 388 002e FFF7FEFF 		bl	USART_SendData
 389              	.LVL35:
 390 0032 05E0     		b	.L23
 391              	.L24:
 215:FreeRTOS/test_Src/serial.c **** 		}
 216:FreeRTOS/test_Src/serial.c **** 		else
 217:FreeRTOS/test_Src/serial.c **** 		{
 218:FreeRTOS/test_Src/serial.c **** 			USART_ITConfig( USART1, USART_IT_TXE, DISABLE );		
 392              		.loc 1 218 0
 393 0034 0022     		movs	r2, #0
 394 0036 40F22771 		movw	r1, #1831
 395 003a 1248     		ldr	r0, .L28
 396 003c FFF7FEFF 		bl	USART_ITConfig
 397              	.LVL36:
 398              	.L23:
 219:FreeRTOS/test_Src/serial.c **** 		}		
 220:FreeRTOS/test_Src/serial.c **** 	}
 221:FreeRTOS/test_Src/serial.c **** 	
 222:FreeRTOS/test_Src/serial.c **** 	if( USART_GetITStatus( USART1, USART_IT_RXNE ) == SET )
 399              		.loc 1 222 0
 400 0040 40F22551 		movw	r1, #1317
 401 0044 0F48     		ldr	r0, .L28
 402 0046 FFF7FEFF 		bl	USART_GetITStatus
 403              	.LVL37:
 404 004a 0128     		cmp	r0, #1
 405 004c 0CD1     		bne	.L25
 223:FreeRTOS/test_Src/serial.c **** 	{
 224:FreeRTOS/test_Src/serial.c **** 		cChar = USART_ReceiveData( USART1 );
 406              		.loc 1 224 0
 407 004e 0D48     		ldr	r0, .L28
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccbroiRd.s 			page 12


 408 0050 FFF7FEFF 		bl	USART_ReceiveData
 409              	.LVL38:
 410 0054 8DF80300 		strb	r0, [sp, #3]
 225:FreeRTOS/test_Src/serial.c **** 		xQueueSendFromISR( xRxedChars, &cChar, &xHigherPriorityTaskWoken );
 411              		.loc 1 225 0
 412 0058 0023     		movs	r3, #0
 413 005a 01AA     		add	r2, sp, #4
 414 005c 0DF10301 		add	r1, sp, #3
 415 0060 0A48     		ldr	r0, .L28+8
 416 0062 0068     		ldr	r0, [r0]
 417 0064 FFF7FEFF 		bl	xQueueGenericSendFromISR
 418              	.LVL39:
 419              	.L25:
 226:FreeRTOS/test_Src/serial.c **** 	}	
 227:FreeRTOS/test_Src/serial.c **** 	
 228:FreeRTOS/test_Src/serial.c **** 	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 420              		.loc 1 228 0
 421 0068 019B     		ldr	r3, [sp, #4]
 422 006a 3BB1     		cbz	r3, .L22
 423              		.loc 1 228 0 is_stmt 0 discriminator 1
 424 006c 4FF08052 		mov	r2, #268435456
 425 0070 074B     		ldr	r3, .L28+12
 426 0072 1A60     		str	r2, [r3]
 427              		.syntax unified
 428              	@ 228 "FreeRTOS/test_Src/serial.c" 1
 429 0074 BFF34F8F 		dsb
 430              	@ 0 "" 2
 431              	@ 228 "FreeRTOS/test_Src/serial.c" 1
 432 0078 BFF36F8F 		isb
 433              	@ 0 "" 2
 434              		.thumb
 435              		.syntax unified
 436              	.L22:
 229:FreeRTOS/test_Src/serial.c **** }
 437              		.loc 1 229 0 is_stmt 1
 438 007c 03B0     		add	sp, sp, #12
 439              	.LCFI10:
 440              		.cfi_def_cfa_offset 4
 441              		@ sp needed
 442 007e 5DF804FB 		ldr	pc, [sp], #4
 443              	.L29:
 444 0082 00BF     		.align	2
 445              	.L28:
 446 0084 00380140 		.word	1073821696
 447 0088 00000000 		.word	.LANCHOR1
 448 008c 00000000 		.word	.LANCHOR0
 449 0090 04ED00E0 		.word	-536810236
 450              		.cfi_endproc
 451              	.LFE37:
 453              		.section	.bss.xCharsForTx,"aw",%nobits
 454              		.align	2
 455              		.set	.LANCHOR1,. + 0
 458              	xCharsForTx:
 459 0000 00000000 		.space	4
 460              		.section	.bss.xRxedChars,"aw",%nobits
 461              		.align	2
 462              		.set	.LANCHOR0,. + 0
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccbroiRd.s 			page 13


 465              	xRxedChars:
 466 0000 00000000 		.space	4
 467              		.text
 468              	.Letext0:
 469              		.file 2 "/usr/local/Cellar/gcc-arm-none-eabi/20160926/arm-none-eabi/include/machine/_default_types
 470              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20160926/arm-none-eabi/include/sys/_stdint.h"
 471              		.file 4 "CMSIS/Core/CM3/stm32f10x.h"
 472              		.file 5 "STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h"
 473              		.file 6 "STM32F10x_StdPeriph_Driver/inc/stm32f10x_usart.h"
 474              		.file 7 "STM32F10x_StdPeriph_Driver/inc/misc.h"
 475              		.file 8 "FreeRTOS/ARM_CM3/portmacro.h"
 476              		.file 9 "FreeRTOS/Inc/queue.h"
 477              		.file 10 "FreeRTOS/test_Inc/serial.h"
 478              		.file 11 "STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h"
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccbroiRd.s 			page 14


DEFINED SYMBOLS
                            *ABS*:0000000000000000 serial.c
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccbroiRd.s:20     .text.xSerialPortInitMinimal:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccbroiRd.s:25     .text.xSerialPortInitMinimal:0000000000000000 xSerialPortInitMinimal
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccbroiRd.s:173    .text.xSerialPortInitMinimal:00000000000000e0 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccbroiRd.s:181    .text.xSerialGetChar:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccbroiRd.s:186    .text.xSerialGetChar:0000000000000000 xSerialGetChar
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccbroiRd.s:215    .text.xSerialGetChar:0000000000000014 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccbroiRd.s:220    .text.xSerialPutChar:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccbroiRd.s:225    .text.xSerialPutChar:0000000000000000 xSerialPutChar
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccbroiRd.s:279    .text.xSerialPutChar:0000000000000034 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccbroiRd.s:285    .text.vSerialPutString:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccbroiRd.s:290    .text.vSerialPutString:0000000000000000 vSerialPutString
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccbroiRd.s:329    .text.vSerialClose:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccbroiRd.s:334    .text.vSerialClose:0000000000000000 vSerialClose
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccbroiRd.s:347    .text.vUARTInterruptHandler:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccbroiRd.s:352    .text.vUARTInterruptHandler:0000000000000000 vUARTInterruptHandler
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccbroiRd.s:446    .text.vUARTInterruptHandler:0000000000000084 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccbroiRd.s:454    .bss.xCharsForTx:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccbroiRd.s:458    .bss.xCharsForTx:0000000000000000 xCharsForTx
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccbroiRd.s:461    .bss.xRxedChars:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccbroiRd.s:465    .bss.xRxedChars:0000000000000000 xRxedChars
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
xQueueGenericCreate
RCC_APB2PeriphClockCmd
GPIO_Init
USART_ClockInit
USART_Init
USART_ITConfig
NVIC_Init
USART_Cmd
xQueueReceive
xQueueGenericSend
USART_GetITStatus
xQueueReceiveFromISR
USART_SendData
USART_ReceiveData
xQueueGenericSendFromISR
