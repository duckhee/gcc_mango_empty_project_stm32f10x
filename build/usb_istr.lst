ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpM6z54.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"usb_istr.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.USB_Istr,"ax",%progbits
  20              		.align	2
  21              		.global	USB_Istr
  22              		.thumb
  23              		.thumb_func
  25              	USB_Istr:
  26              	.LFB28:
  27              		.file 1 "src/usb/usb_istr.c"
   1:src/usb/usb_istr.c **** /******************** (C) COPYRIGHT 2009 STMicroelectronics ********************
   2:src/usb/usb_istr.c **** * File Name          : usb_istr.c
   3:src/usb/usb_istr.c **** * Author             : MCD Application Team
   4:src/usb/usb_istr.c **** * Version            : V3.0.1
   5:src/usb/usb_istr.c **** * Date               : 04/27/2009
   6:src/usb/usb_istr.c **** * Description        : ISTR events interrupt service routines
   7:src/usb/usb_istr.c **** ********************************************************************************
   8:src/usb/usb_istr.c **** * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
   9:src/usb/usb_istr.c **** * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
  10:src/usb/usb_istr.c **** * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
  11:src/usb/usb_istr.c **** * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
  12:src/usb/usb_istr.c **** * CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
  13:src/usb/usb_istr.c **** * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  14:src/usb/usb_istr.c **** *******************************************************************************/
  15:src/usb/usb_istr.c **** 
  16:src/usb/usb_istr.c **** /* Includes ------------------------------------------------------------------*/
  17:src/usb/usb_istr.c **** #include "usb_lib.h"
  18:src/usb/usb_istr.c **** #include "usb_prop.h"
  19:src/usb/usb_istr.c **** #include "usb_pwr.h"
  20:src/usb/usb_istr.c **** #include "usb_istr.h"
  21:src/usb/usb_istr.c **** #include "stdio.h"
  22:src/usb/usb_istr.c **** 
  23:src/usb/usb_istr.c **** /* Private typedef -----------------------------------------------------------*/
  24:src/usb/usb_istr.c **** /* Private define ------------------------------------------------------------*/
  25:src/usb/usb_istr.c **** /* Private macro -------------------------------------------------------------*/
  26:src/usb/usb_istr.c **** /* Private variables ---------------------------------------------------------*/
  27:src/usb/usb_istr.c **** __IO uint16_t wIstr;  /* ISTR register last read value */
  28:src/usb/usb_istr.c **** __IO uint8_t bIntPackSOF = 0;  /* SOFs received between 2 consecutive packets */
  29:src/usb/usb_istr.c **** 
  30:src/usb/usb_istr.c **** /* Extern variables ----------------------------------------------------------*/
  31:src/usb/usb_istr.c **** /* Private function prototypes -----------------------------------------------*/
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpM6z54.s 			page 2


  32:src/usb/usb_istr.c **** /* Private functions ---------------------------------------------------------*/
  33:src/usb/usb_istr.c **** /* function pointers to non-control endpoints service routines */
  34:src/usb/usb_istr.c **** void (*pEpInt_IN[7])(void) =
  35:src/usb/usb_istr.c ****   {
  36:src/usb/usb_istr.c ****     EP1_IN_Callback,
  37:src/usb/usb_istr.c ****     EP2_IN_Callback,
  38:src/usb/usb_istr.c ****     EP3_IN_Callback,
  39:src/usb/usb_istr.c ****     EP4_IN_Callback,
  40:src/usb/usb_istr.c ****     EP5_IN_Callback,
  41:src/usb/usb_istr.c ****     EP6_IN_Callback,
  42:src/usb/usb_istr.c ****     EP7_IN_Callback,
  43:src/usb/usb_istr.c ****   };
  44:src/usb/usb_istr.c **** 
  45:src/usb/usb_istr.c **** void (*pEpInt_OUT[7])(void) =
  46:src/usb/usb_istr.c ****   {
  47:src/usb/usb_istr.c ****     EP1_OUT_Callback,
  48:src/usb/usb_istr.c ****     EP2_OUT_Callback,
  49:src/usb/usb_istr.c ****     EP3_OUT_Callback,
  50:src/usb/usb_istr.c ****     EP4_OUT_Callback,
  51:src/usb/usb_istr.c ****     EP5_OUT_Callback,
  52:src/usb/usb_istr.c ****     EP6_OUT_Callback,
  53:src/usb/usb_istr.c ****     EP7_OUT_Callback,
  54:src/usb/usb_istr.c ****   };
  55:src/usb/usb_istr.c **** 
  56:src/usb/usb_istr.c **** 
  57:src/usb/usb_istr.c **** /*******************************************************************************
  58:src/usb/usb_istr.c **** * Function Name  : USB_Istr
  59:src/usb/usb_istr.c **** * Description    : STR events interrupt service routine
  60:src/usb/usb_istr.c **** * Input          :
  61:src/usb/usb_istr.c **** * Output         :
  62:src/usb/usb_istr.c **** * Return         :
  63:src/usb/usb_istr.c **** *******************************************************************************/
  64:src/usb/usb_istr.c **** void USB_Istr(void)
  65:src/usb/usb_istr.c **** {
  28              		.loc 1 65 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 08B5     		push	{r3, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 3, -8
  36              		.cfi_offset 14, -4
  66:src/usb/usb_istr.c ****   wIstr = _GetISTR();
  37              		.loc 1 66 0
  38 0002 384B     		ldr	r3, .L12
  39 0004 1B68     		ldr	r3, [r3]
  40 0006 9BB2     		uxth	r3, r3
  41 0008 374A     		ldr	r2, .L12+4
  42 000a 1380     		strh	r3, [r2]	@ movhi
  67:src/usb/usb_istr.c **** 
  68:src/usb/usb_istr.c **** #if (IMR_MSK & ISTR_RESET)
  69:src/usb/usb_istr.c ****   if (wIstr & ISTR_RESET & wInterrupt_Mask)
  43              		.loc 1 69 0
  44 000c 1388     		ldrh	r3, [r2]
  45 000e 374A     		ldr	r2, .L12+8
  46 0010 1288     		ldrh	r2, [r2]
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpM6z54.s 			page 3


  47 0012 03F48063 		and	r3, r3, #1024
  48 0016 1A42     		tst	r2, r3
  49 0018 06D0     		beq	.L2
  70:src/usb/usb_istr.c ****   {
  71:src/usb/usb_istr.c ****     _SetISTR((uint16_t)CLR_RESET);
  50              		.loc 1 71 0
  51 001a 4FF6FF32 		movw	r2, #64511
  52 001e 314B     		ldr	r3, .L12
  53 0020 1A60     		str	r2, [r3]
  72:src/usb/usb_istr.c ****     Device_Property.Reset();
  54              		.loc 1 72 0
  55 0022 334B     		ldr	r3, .L12+12
  56 0024 5B68     		ldr	r3, [r3, #4]
  57 0026 9847     		blx	r3
  58              	.LVL0:
  59              	.L2:
  73:src/usb/usb_istr.c **** #ifdef RESET_CALLBACK
  74:src/usb/usb_istr.c ****     RESET_Callback();
  75:src/usb/usb_istr.c **** #endif
  76:src/usb/usb_istr.c ****   }
  77:src/usb/usb_istr.c **** #endif
  78:src/usb/usb_istr.c ****   /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
  79:src/usb/usb_istr.c **** #if (IMR_MSK & ISTR_DOVR)
  80:src/usb/usb_istr.c ****   if (wIstr & ISTR_DOVR & wInterrupt_Mask)
  81:src/usb/usb_istr.c ****   {
  82:src/usb/usb_istr.c ****     _SetISTR((uint16_t)CLR_DOVR);
  83:src/usb/usb_istr.c **** #ifdef DOVR_CALLBACK
  84:src/usb/usb_istr.c ****     DOVR_Callback();
  85:src/usb/usb_istr.c **** #endif
  86:src/usb/usb_istr.c ****   }
  87:src/usb/usb_istr.c **** #endif
  88:src/usb/usb_istr.c ****   /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
  89:src/usb/usb_istr.c **** #if (IMR_MSK & ISTR_ERR)
  90:src/usb/usb_istr.c ****   if (wIstr & ISTR_ERR & wInterrupt_Mask)
  60              		.loc 1 90 0
  61 0028 2F4B     		ldr	r3, .L12+4
  62 002a 1B88     		ldrh	r3, [r3]
  63 002c 2F4A     		ldr	r2, .L12+8
  64 002e 1288     		ldrh	r2, [r2]
  65 0030 03F40053 		and	r3, r3, #8192
  66 0034 1A42     		tst	r2, r3
  67 0036 03D0     		beq	.L3
  91:src/usb/usb_istr.c ****   {
  92:src/usb/usb_istr.c ****     _SetISTR((uint16_t)CLR_ERR);
  68              		.loc 1 92 0
  69 0038 4DF6FF72 		movw	r2, #57343
  70 003c 294B     		ldr	r3, .L12
  71 003e 1A60     		str	r2, [r3]
  72              	.L3:
  93:src/usb/usb_istr.c **** #ifdef ERR_CALLBACK
  94:src/usb/usb_istr.c ****     ERR_Callback();
  95:src/usb/usb_istr.c **** #endif
  96:src/usb/usb_istr.c ****   }
  97:src/usb/usb_istr.c **** #endif
  98:src/usb/usb_istr.c ****   /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
  99:src/usb/usb_istr.c **** #if (IMR_MSK & ISTR_WKUP)
 100:src/usb/usb_istr.c ****   if (wIstr & ISTR_WKUP & wInterrupt_Mask)
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpM6z54.s 			page 4


  73              		.loc 1 100 0
  74 0040 294B     		ldr	r3, .L12+4
  75 0042 1B88     		ldrh	r3, [r3]
  76 0044 294A     		ldr	r2, .L12+8
  77 0046 1288     		ldrh	r2, [r2]
  78 0048 03F48053 		and	r3, r3, #4096
  79 004c 1A42     		tst	r2, r3
  80 004e 06D0     		beq	.L4
 101:src/usb/usb_istr.c ****   {
 102:src/usb/usb_istr.c ****     _SetISTR((uint16_t)CLR_WKUP);
  81              		.loc 1 102 0
  82 0050 4EF6FF72 		movw	r2, #61439
  83 0054 234B     		ldr	r3, .L12
  84 0056 1A60     		str	r2, [r3]
 103:src/usb/usb_istr.c ****     Resume(RESUME_EXTERNAL);
  85              		.loc 1 103 0
  86 0058 0020     		movs	r0, #0
  87 005a FFF7FEFF 		bl	Resume
  88              	.LVL1:
  89              	.L4:
 104:src/usb/usb_istr.c **** #ifdef WKUP_CALLBACK
 105:src/usb/usb_istr.c ****     WKUP_Callback();
 106:src/usb/usb_istr.c **** #endif
 107:src/usb/usb_istr.c ****   }
 108:src/usb/usb_istr.c **** #endif
 109:src/usb/usb_istr.c ****   /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
 110:src/usb/usb_istr.c **** #if (IMR_MSK & ISTR_SUSP)
 111:src/usb/usb_istr.c ****   if (wIstr & ISTR_SUSP & wInterrupt_Mask)
  90              		.loc 1 111 0
  91 005e 224B     		ldr	r3, .L12+4
  92 0060 1B88     		ldrh	r3, [r3]
  93 0062 224A     		ldr	r2, .L12+8
  94 0064 1288     		ldrh	r2, [r2]
  95 0066 03F40063 		and	r3, r3, #2048
  96 006a 1A42     		tst	r2, r3
  97 006c 0ED0     		beq	.L5
 112:src/usb/usb_istr.c ****   {
 113:src/usb/usb_istr.c ****     /* check if SUSPEND is possible */
 114:src/usb/usb_istr.c ****     if (fSuspendEnabled)
  98              		.loc 1 114 0
  99 006e 214B     		ldr	r3, .L12+16
 100 0070 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 101 0072 13F0FF0F 		tst	r3, #255
 102 0076 02D0     		beq	.L6
 115:src/usb/usb_istr.c ****     {
 116:src/usb/usb_istr.c ****       Suspend();
 103              		.loc 1 116 0
 104 0078 FFF7FEFF 		bl	Suspend
 105              	.LVL2:
 106 007c 02E0     		b	.L7
 107              	.L6:
 117:src/usb/usb_istr.c ****     }
 118:src/usb/usb_istr.c ****     else
 119:src/usb/usb_istr.c ****     {
 120:src/usb/usb_istr.c ****       /* if not possible then resume after xx ms */
 121:src/usb/usb_istr.c ****       Resume(RESUME_LATER);
 108              		.loc 1 121 0
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpM6z54.s 			page 5


 109 007e 0220     		movs	r0, #2
 110 0080 FFF7FEFF 		bl	Resume
 111              	.LVL3:
 112              	.L7:
 122:src/usb/usb_istr.c ****     }
 123:src/usb/usb_istr.c ****     /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
 124:src/usb/usb_istr.c ****     _SetISTR((uint16_t)CLR_SUSP);
 113              		.loc 1 124 0
 114 0084 4FF2FF72 		movw	r2, #63487
 115 0088 164B     		ldr	r3, .L12
 116 008a 1A60     		str	r2, [r3]
 117              	.L5:
 125:src/usb/usb_istr.c **** #ifdef SUSP_CALLBACK
 126:src/usb/usb_istr.c ****     SUSP_Callback();
 127:src/usb/usb_istr.c **** #endif
 128:src/usb/usb_istr.c ****   }
 129:src/usb/usb_istr.c **** #endif
 130:src/usb/usb_istr.c ****   /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
 131:src/usb/usb_istr.c **** #if (IMR_MSK & ISTR_SOF)
 132:src/usb/usb_istr.c ****   if (wIstr & ISTR_SOF & wInterrupt_Mask)
 118              		.loc 1 132 0
 119 008c 164B     		ldr	r3, .L12+4
 120 008e 1B88     		ldrh	r3, [r3]
 121 0090 164A     		ldr	r2, .L12+8
 122 0092 1288     		ldrh	r2, [r2]
 123 0094 03F40073 		and	r3, r3, #512
 124 0098 1A42     		tst	r2, r3
 125 009a 08D0     		beq	.L8
 133:src/usb/usb_istr.c ****   {
 134:src/usb/usb_istr.c ****     _SetISTR((uint16_t)CLR_SOF);
 126              		.loc 1 134 0
 127 009c 4FF6FF52 		movw	r2, #65023
 128 00a0 104B     		ldr	r3, .L12
 129 00a2 1A60     		str	r2, [r3]
 135:src/usb/usb_istr.c ****     bIntPackSOF++;
 130              		.loc 1 135 0
 131 00a4 144A     		ldr	r2, .L12+20
 132 00a6 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 133 00a8 0133     		adds	r3, r3, #1
 134 00aa DBB2     		uxtb	r3, r3
 135 00ac 1370     		strb	r3, [r2]
 136              	.L8:
 136:src/usb/usb_istr.c **** 
 137:src/usb/usb_istr.c **** #ifdef SOF_CALLBACK
 138:src/usb/usb_istr.c ****     SOF_Callback();
 139:src/usb/usb_istr.c **** #endif
 140:src/usb/usb_istr.c ****   }
 141:src/usb/usb_istr.c **** #endif
 142:src/usb/usb_istr.c ****   /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
 143:src/usb/usb_istr.c **** #if (IMR_MSK & ISTR_ESOF)
 144:src/usb/usb_istr.c ****   if (wIstr & ISTR_ESOF & wInterrupt_Mask)
 137              		.loc 1 144 0
 138 00ae 0E4B     		ldr	r3, .L12+4
 139 00b0 1B88     		ldrh	r3, [r3]
 140 00b2 0E4A     		ldr	r2, .L12+8
 141 00b4 1288     		ldrh	r2, [r2]
 142 00b6 03F48073 		and	r3, r3, #256
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpM6z54.s 			page 6


 143 00ba 1A42     		tst	r2, r3
 144 00bc 06D0     		beq	.L9
 145:src/usb/usb_istr.c ****   {
 146:src/usb/usb_istr.c ****     _SetISTR((uint16_t)CLR_ESOF);
 145              		.loc 1 146 0
 146 00be 4FF6FF62 		movw	r2, #65279
 147 00c2 084B     		ldr	r3, .L12
 148 00c4 1A60     		str	r2, [r3]
 147:src/usb/usb_istr.c ****     /* resume handling timing is made with ESOFs */
 148:src/usb/usb_istr.c ****     Resume(RESUME_ESOF); /* request without change of the machine state */
 149              		.loc 1 148 0
 150 00c6 0720     		movs	r0, #7
 151 00c8 FFF7FEFF 		bl	Resume
 152              	.LVL4:
 153              	.L9:
 149:src/usb/usb_istr.c **** 
 150:src/usb/usb_istr.c **** #ifdef ESOF_CALLBACK
 151:src/usb/usb_istr.c ****     ESOF_Callback();
 152:src/usb/usb_istr.c **** #endif
 153:src/usb/usb_istr.c ****   }
 154:src/usb/usb_istr.c **** #endif
 155:src/usb/usb_istr.c ****   /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
 156:src/usb/usb_istr.c **** #if (IMR_MSK & ISTR_CTR)
 157:src/usb/usb_istr.c ****   if (wIstr & ISTR_CTR & wInterrupt_Mask)
 154              		.loc 1 157 0
 155 00cc 064B     		ldr	r3, .L12+4
 156 00ce 1B88     		ldrh	r3, [r3]
 157 00d0 064A     		ldr	r2, .L12+8
 158 00d2 1288     		ldrh	r2, [r2]
 159 00d4 03F40043 		and	r3, r3, #32768
 160 00d8 1A42     		tst	r2, r3
 161 00da 01D0     		beq	.L1
 158:src/usb/usb_istr.c ****   {
 159:src/usb/usb_istr.c ****     /* servicing of the endpoint correct transfer interrupt */
 160:src/usb/usb_istr.c ****     /* clear of the CTR flag into the sub */
 161:src/usb/usb_istr.c ****     CTR_LP();
 162              		.loc 1 161 0
 163 00dc FFF7FEFF 		bl	CTR_LP
 164              	.LVL5:
 165              	.L1:
 166 00e0 08BD     		pop	{r3, pc}
 167              	.L13:
 168 00e2 00BF     		.align	2
 169              	.L12:
 170 00e4 445C0040 		.word	1073765444
 171 00e8 00000000 		.word	wIstr
 172 00ec 00000000 		.word	wInterrupt_Mask
 173 00f0 00000000 		.word	Device_Property
 174 00f4 00000000 		.word	fSuspendEnabled
 175 00f8 00000000 		.word	.LANCHOR0
 176              		.cfi_endproc
 177              	.LFE28:
 179              		.global	pEpInt_OUT
 180              		.global	pEpInt_IN
 181              		.global	bIntPackSOF
 182              		.comm	wIstr,2,2
 183              		.section	.data.pEpInt_IN,"aw",%progbits
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpM6z54.s 			page 7


 184              		.align	2
 187              	pEpInt_IN:
 188 0000 00000000 		.word	EP1_IN_Callback
 189 0004 00000000 		.word	NOP_Process
 190 0008 00000000 		.word	NOP_Process
 191 000c 00000000 		.word	NOP_Process
 192 0010 00000000 		.word	NOP_Process
 193 0014 00000000 		.word	NOP_Process
 194 0018 00000000 		.word	NOP_Process
 195              		.section	.bss.bIntPackSOF,"aw",%nobits
 196              		.set	.LANCHOR0,. + 0
 199              	bIntPackSOF:
 200 0000 00       		.space	1
 201              		.section	.data.pEpInt_OUT,"aw",%progbits
 202              		.align	2
 205              	pEpInt_OUT:
 206 0000 00000000 		.word	EP1_OUT_Callback
 207 0004 00000000 		.word	NOP_Process
 208 0008 00000000 		.word	NOP_Process
 209 000c 00000000 		.word	NOP_Process
 210 0010 00000000 		.word	NOP_Process
 211 0014 00000000 		.word	NOP_Process
 212 0018 00000000 		.word	NOP_Process
 213              		.text
 214              	.Letext0:
 215              		.file 2 "/usr/local/Cellar/gcc-arm-none-eabi/20160926/arm-none-eabi/include/machine/_default_types
 216              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20160926/arm-none-eabi/include/sys/_stdint.h"
 217              		.file 4 "CMSIS/Core/CM3/stm32f10x.h"
 218              		.file 5 "STM32_USB-FS-Device_Driver/inc/usb_core.h"
 219              		.file 6 "Inc/usb/usb_pwr.h"
 220              		.file 7 "STM32_USB-FS-Device_Driver/inc/usb_init.h"
 221              		.file 8 "STM32_USB-FS-Device_Driver/inc/usb_int.h"
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpM6z54.s 			page 8


DEFINED SYMBOLS
                            *ABS*:0000000000000000 usb_istr.c
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpM6z54.s:20     .text.USB_Istr:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpM6z54.s:25     .text.USB_Istr:0000000000000000 USB_Istr
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpM6z54.s:170    .text.USB_Istr:00000000000000e4 $d
                            *COM*:0000000000000002 wIstr
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpM6z54.s:205    .data.pEpInt_OUT:0000000000000000 pEpInt_OUT
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpM6z54.s:187    .data.pEpInt_IN:0000000000000000 pEpInt_IN
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpM6z54.s:199    .bss.bIntPackSOF:0000000000000000 bIntPackSOF
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpM6z54.s:184    .data.pEpInt_IN:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpM6z54.s:200    .bss.bIntPackSOF:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccpM6z54.s:202    .data.pEpInt_OUT:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
Resume
Suspend
CTR_LP
wInterrupt_Mask
Device_Property
fSuspendEnabled
EP1_IN_Callback
NOP_Process
EP1_OUT_Callback
