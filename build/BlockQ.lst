ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqEYVjk.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"BlockQ.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.vBlockingQueueProducer,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	vBlockingQueueProducer:
  25              	.LFB33:
  26              		.file 1 "FreeRTOS/test_Src/BlockQ.c"
   1:FreeRTOS/test_Src/BlockQ.c **** /*
   2:FreeRTOS/test_Src/BlockQ.c ****  * FreeRTOS Kernel V10.1.1
   3:FreeRTOS/test_Src/BlockQ.c ****  * Copyright (C) 2018 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/test_Src/BlockQ.c ****  *
   5:FreeRTOS/test_Src/BlockQ.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:FreeRTOS/test_Src/BlockQ.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:FreeRTOS/test_Src/BlockQ.c ****  * the Software without restriction, including without limitation the rights to
   8:FreeRTOS/test_Src/BlockQ.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:FreeRTOS/test_Src/BlockQ.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:FreeRTOS/test_Src/BlockQ.c ****  * subject to the following conditions:
  11:FreeRTOS/test_Src/BlockQ.c ****  *
  12:FreeRTOS/test_Src/BlockQ.c ****  * The above copyright notice and this permission notice shall be included in all
  13:FreeRTOS/test_Src/BlockQ.c ****  * copies or substantial portions of the Software.
  14:FreeRTOS/test_Src/BlockQ.c ****  *
  15:FreeRTOS/test_Src/BlockQ.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:FreeRTOS/test_Src/BlockQ.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:FreeRTOS/test_Src/BlockQ.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:FreeRTOS/test_Src/BlockQ.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:FreeRTOS/test_Src/BlockQ.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:FreeRTOS/test_Src/BlockQ.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:FreeRTOS/test_Src/BlockQ.c ****  *
  22:FreeRTOS/test_Src/BlockQ.c ****  * http://www.FreeRTOS.org
  23:FreeRTOS/test_Src/BlockQ.c ****  * http://aws.amazon.com/freertos
  24:FreeRTOS/test_Src/BlockQ.c ****  *
  25:FreeRTOS/test_Src/BlockQ.c ****  * 1 tab == 4 spaces!
  26:FreeRTOS/test_Src/BlockQ.c ****  */
  27:FreeRTOS/test_Src/BlockQ.c **** 
  28:FreeRTOS/test_Src/BlockQ.c **** /*
  29:FreeRTOS/test_Src/BlockQ.c ****  * Creates six tasks that operate on three queues as follows:
  30:FreeRTOS/test_Src/BlockQ.c ****  *
  31:FreeRTOS/test_Src/BlockQ.c ****  * The first two tasks send and receive an incrementing number to/from a queue.
  32:FreeRTOS/test_Src/BlockQ.c ****  * One task acts as a producer and the other as the consumer.  The consumer is a
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqEYVjk.s 			page 2


  33:FreeRTOS/test_Src/BlockQ.c ****  * higher priority than the producer and is set to block on queue reads.  The queue
  34:FreeRTOS/test_Src/BlockQ.c ****  * only has space for one item - as soon as the producer posts a message on the
  35:FreeRTOS/test_Src/BlockQ.c ****  * queue the consumer will unblock, pre-empt the producer, and remove the item.
  36:FreeRTOS/test_Src/BlockQ.c ****  *
  37:FreeRTOS/test_Src/BlockQ.c ****  * The second two tasks work the other way around.  Again the queue used only has
  38:FreeRTOS/test_Src/BlockQ.c ****  * enough space for one item.  This time the consumer has a lower priority than the
  39:FreeRTOS/test_Src/BlockQ.c ****  * producer.  The producer will try to post on the queue blocking when the queue is
  40:FreeRTOS/test_Src/BlockQ.c ****  * full.  When the consumer wakes it will remove the item from the queue, causing
  41:FreeRTOS/test_Src/BlockQ.c ****  * the producer to unblock, pre-empt the consumer, and immediately re-fill the
  42:FreeRTOS/test_Src/BlockQ.c ****  * queue.
  43:FreeRTOS/test_Src/BlockQ.c ****  *
  44:FreeRTOS/test_Src/BlockQ.c ****  * The last two tasks use the same queue producer and consumer functions.  This time the queue has
  45:FreeRTOS/test_Src/BlockQ.c ****  * enough space for lots of items and the tasks operate at the same priority.  The
  46:FreeRTOS/test_Src/BlockQ.c ****  * producer will execute, placing items into the queue.  The consumer will start
  47:FreeRTOS/test_Src/BlockQ.c ****  * executing when either the queue becomes full (causing the producer to block) or
  48:FreeRTOS/test_Src/BlockQ.c ****  * a context switch occurs (tasks of the same priority will time slice).
  49:FreeRTOS/test_Src/BlockQ.c ****  *
  50:FreeRTOS/test_Src/BlockQ.c ****  */
  51:FreeRTOS/test_Src/BlockQ.c **** 
  52:FreeRTOS/test_Src/BlockQ.c **** #include <stdlib.h>
  53:FreeRTOS/test_Src/BlockQ.c **** 
  54:FreeRTOS/test_Src/BlockQ.c **** /* Scheduler include files. */
  55:FreeRTOS/test_Src/BlockQ.c **** #include "FreeRTOS.h"
  56:FreeRTOS/test_Src/BlockQ.c **** #include "task.h"
  57:FreeRTOS/test_Src/BlockQ.c **** #include "queue.h"
  58:FreeRTOS/test_Src/BlockQ.c **** 
  59:FreeRTOS/test_Src/BlockQ.c **** /* Demo program include files. */
  60:FreeRTOS/test_Src/BlockQ.c **** #include "BlockQ.h"
  61:FreeRTOS/test_Src/BlockQ.c **** 
  62:FreeRTOS/test_Src/BlockQ.c **** #define blckqSTACK_SIZE		configMINIMAL_STACK_SIZE
  63:FreeRTOS/test_Src/BlockQ.c **** #define blckqNUM_TASK_SETS	( 3 )
  64:FreeRTOS/test_Src/BlockQ.c **** 
  65:FreeRTOS/test_Src/BlockQ.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 0 )
  66:FreeRTOS/test_Src/BlockQ.c **** 	#error This example cannot be used if dynamic allocation is not allowed.
  67:FreeRTOS/test_Src/BlockQ.c **** #endif
  68:FreeRTOS/test_Src/BlockQ.c **** 
  69:FreeRTOS/test_Src/BlockQ.c **** /* Structure used to pass parameters to the blocking queue tasks. */
  70:FreeRTOS/test_Src/BlockQ.c **** typedef struct BLOCKING_QUEUE_PARAMETERS
  71:FreeRTOS/test_Src/BlockQ.c **** {
  72:FreeRTOS/test_Src/BlockQ.c **** 	QueueHandle_t xQueue;					/*< The queue to be used by the task. */
  73:FreeRTOS/test_Src/BlockQ.c **** 	TickType_t xBlockTime;				/*< The block time to use on queue reads/writes. */
  74:FreeRTOS/test_Src/BlockQ.c **** 	volatile short *psCheckVariable;	/*< Incremented on each successful cycle to check the task is sti
  75:FreeRTOS/test_Src/BlockQ.c **** } xBlockingQueueParameters;
  76:FreeRTOS/test_Src/BlockQ.c **** 
  77:FreeRTOS/test_Src/BlockQ.c **** /* Task function that creates an incrementing number and posts it on a queue. */
  78:FreeRTOS/test_Src/BlockQ.c **** static portTASK_FUNCTION_PROTO( vBlockingQueueProducer, pvParameters );
  79:FreeRTOS/test_Src/BlockQ.c **** 
  80:FreeRTOS/test_Src/BlockQ.c **** /* Task function that removes the incrementing number from a queue and checks that
  81:FreeRTOS/test_Src/BlockQ.c **** it is the expected number. */
  82:FreeRTOS/test_Src/BlockQ.c **** static portTASK_FUNCTION_PROTO( vBlockingQueueConsumer, pvParameters );
  83:FreeRTOS/test_Src/BlockQ.c **** 
  84:FreeRTOS/test_Src/BlockQ.c **** /* Variables which are incremented each time an item is removed from a queue, and
  85:FreeRTOS/test_Src/BlockQ.c **** found to be the expected value.
  86:FreeRTOS/test_Src/BlockQ.c **** These are used to check that the tasks are still running. */
  87:FreeRTOS/test_Src/BlockQ.c **** static volatile short sBlockingConsumerCount[ blckqNUM_TASK_SETS ] = { ( uint16_t ) 0, ( uint16_t )
  88:FreeRTOS/test_Src/BlockQ.c **** 
  89:FreeRTOS/test_Src/BlockQ.c **** /* Variable which are incremented each time an item is posted on a queue.   These
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqEYVjk.s 			page 3


  90:FreeRTOS/test_Src/BlockQ.c **** are used to check that the tasks are still running. */
  91:FreeRTOS/test_Src/BlockQ.c **** static volatile short sBlockingProducerCount[ blckqNUM_TASK_SETS ] = { ( uint16_t ) 0, ( uint16_t )
  92:FreeRTOS/test_Src/BlockQ.c **** 
  93:FreeRTOS/test_Src/BlockQ.c **** /*-----------------------------------------------------------*/
  94:FreeRTOS/test_Src/BlockQ.c **** 
  95:FreeRTOS/test_Src/BlockQ.c **** void vStartBlockingQueueTasks( UBaseType_t uxPriority )
  96:FreeRTOS/test_Src/BlockQ.c **** {
  97:FreeRTOS/test_Src/BlockQ.c **** xBlockingQueueParameters *pxQueueParameters1, *pxQueueParameters2;
  98:FreeRTOS/test_Src/BlockQ.c **** xBlockingQueueParameters *pxQueueParameters3, *pxQueueParameters4;
  99:FreeRTOS/test_Src/BlockQ.c **** xBlockingQueueParameters *pxQueueParameters5, *pxQueueParameters6;
 100:FreeRTOS/test_Src/BlockQ.c **** const UBaseType_t uxQueueSize1 = 1, uxQueueSize5 = 5;
 101:FreeRTOS/test_Src/BlockQ.c **** const TickType_t xBlockTime = pdMS_TO_TICKS( ( TickType_t ) 1000 );
 102:FreeRTOS/test_Src/BlockQ.c **** const TickType_t xDontBlock = ( TickType_t ) 0;
 103:FreeRTOS/test_Src/BlockQ.c **** 
 104:FreeRTOS/test_Src/BlockQ.c **** 	/* Create the first two tasks as described at the top of the file. */
 105:FreeRTOS/test_Src/BlockQ.c **** 
 106:FreeRTOS/test_Src/BlockQ.c **** 	/* First create the structure used to pass parameters to the consumer tasks. */
 107:FreeRTOS/test_Src/BlockQ.c **** 	pxQueueParameters1 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters
 108:FreeRTOS/test_Src/BlockQ.c **** 
 109:FreeRTOS/test_Src/BlockQ.c **** 	/* Create the queue used by the first two tasks to pass the incrementing number.
 110:FreeRTOS/test_Src/BlockQ.c **** 	Pass a pointer to the queue in the parameter structure. */
 111:FreeRTOS/test_Src/BlockQ.c **** 	pxQueueParameters1->xQueue = xQueueCreate( uxQueueSize1, ( UBaseType_t ) sizeof( uint16_t ) );
 112:FreeRTOS/test_Src/BlockQ.c **** 
 113:FreeRTOS/test_Src/BlockQ.c **** 	/* The consumer is created first so gets a block time as described above. */
 114:FreeRTOS/test_Src/BlockQ.c **** 	pxQueueParameters1->xBlockTime = xBlockTime;
 115:FreeRTOS/test_Src/BlockQ.c **** 
 116:FreeRTOS/test_Src/BlockQ.c **** 	/* Pass in the variable that this task is going to increment so we can check it
 117:FreeRTOS/test_Src/BlockQ.c **** 	is still running. */
 118:FreeRTOS/test_Src/BlockQ.c **** 	pxQueueParameters1->psCheckVariable = &( sBlockingConsumerCount[ 0 ] );
 119:FreeRTOS/test_Src/BlockQ.c **** 
 120:FreeRTOS/test_Src/BlockQ.c **** 	/* Create the structure used to pass parameters to the producer task. */
 121:FreeRTOS/test_Src/BlockQ.c **** 	pxQueueParameters2 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters
 122:FreeRTOS/test_Src/BlockQ.c **** 
 123:FreeRTOS/test_Src/BlockQ.c **** 	/* Pass the queue to this task also, using the parameter structure. */
 124:FreeRTOS/test_Src/BlockQ.c **** 	pxQueueParameters2->xQueue = pxQueueParameters1->xQueue;
 125:FreeRTOS/test_Src/BlockQ.c **** 
 126:FreeRTOS/test_Src/BlockQ.c **** 	/* The producer is not going to block - as soon as it posts the consumer will
 127:FreeRTOS/test_Src/BlockQ.c **** 	wake and remove the item so the producer should always have room to post. */
 128:FreeRTOS/test_Src/BlockQ.c **** 	pxQueueParameters2->xBlockTime = xDontBlock;
 129:FreeRTOS/test_Src/BlockQ.c **** 
 130:FreeRTOS/test_Src/BlockQ.c **** 	/* Pass in the variable that this task is going to increment so we can check
 131:FreeRTOS/test_Src/BlockQ.c **** 	it is still running. */
 132:FreeRTOS/test_Src/BlockQ.c **** 	pxQueueParameters2->psCheckVariable = &( sBlockingProducerCount[ 0 ] );
 133:FreeRTOS/test_Src/BlockQ.c **** 
 134:FreeRTOS/test_Src/BlockQ.c **** 
 135:FreeRTOS/test_Src/BlockQ.c **** 	/* Note the producer has a lower priority than the consumer when the tasks are
 136:FreeRTOS/test_Src/BlockQ.c **** 	spawned. */
 137:FreeRTOS/test_Src/BlockQ.c **** 	xTaskCreate( vBlockingQueueConsumer, "QConsB1", blckqSTACK_SIZE, ( void * ) pxQueueParameters1, ux
 138:FreeRTOS/test_Src/BlockQ.c **** 	xTaskCreate( vBlockingQueueProducer, "QProdB2", blckqSTACK_SIZE, ( void * ) pxQueueParameters2, ts
 139:FreeRTOS/test_Src/BlockQ.c **** 
 140:FreeRTOS/test_Src/BlockQ.c **** 
 141:FreeRTOS/test_Src/BlockQ.c **** 
 142:FreeRTOS/test_Src/BlockQ.c **** 	/* Create the second two tasks as described at the top of the file.   This uses
 143:FreeRTOS/test_Src/BlockQ.c **** 	the same mechanism but reverses the task priorities. */
 144:FreeRTOS/test_Src/BlockQ.c **** 
 145:FreeRTOS/test_Src/BlockQ.c **** 	pxQueueParameters3 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters
 146:FreeRTOS/test_Src/BlockQ.c **** 	pxQueueParameters3->xQueue = xQueueCreate( uxQueueSize1, ( UBaseType_t ) sizeof( uint16_t ) );
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqEYVjk.s 			page 4


 147:FreeRTOS/test_Src/BlockQ.c **** 	pxQueueParameters3->xBlockTime = xDontBlock;
 148:FreeRTOS/test_Src/BlockQ.c **** 	pxQueueParameters3->psCheckVariable = &( sBlockingProducerCount[ 1 ] );
 149:FreeRTOS/test_Src/BlockQ.c **** 
 150:FreeRTOS/test_Src/BlockQ.c **** 	pxQueueParameters4 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters
 151:FreeRTOS/test_Src/BlockQ.c **** 	pxQueueParameters4->xQueue = pxQueueParameters3->xQueue;
 152:FreeRTOS/test_Src/BlockQ.c **** 	pxQueueParameters4->xBlockTime = xBlockTime;
 153:FreeRTOS/test_Src/BlockQ.c **** 	pxQueueParameters4->psCheckVariable = &( sBlockingConsumerCount[ 1 ] );
 154:FreeRTOS/test_Src/BlockQ.c **** 
 155:FreeRTOS/test_Src/BlockQ.c **** 	xTaskCreate( vBlockingQueueConsumer, "QConsB3", blckqSTACK_SIZE, ( void * ) pxQueueParameters3, ts
 156:FreeRTOS/test_Src/BlockQ.c **** 	xTaskCreate( vBlockingQueueProducer, "QProdB4", blckqSTACK_SIZE, ( void * ) pxQueueParameters4, ux
 157:FreeRTOS/test_Src/BlockQ.c **** 
 158:FreeRTOS/test_Src/BlockQ.c **** 
 159:FreeRTOS/test_Src/BlockQ.c **** 
 160:FreeRTOS/test_Src/BlockQ.c **** 	/* Create the last two tasks as described above.  The mechanism is again just
 161:FreeRTOS/test_Src/BlockQ.c **** 	the same.  This time both parameter structures are given a block time. */
 162:FreeRTOS/test_Src/BlockQ.c **** 	pxQueueParameters5 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters
 163:FreeRTOS/test_Src/BlockQ.c **** 	pxQueueParameters5->xQueue = xQueueCreate( uxQueueSize5, ( UBaseType_t ) sizeof( uint16_t ) );
 164:FreeRTOS/test_Src/BlockQ.c **** 	pxQueueParameters5->xBlockTime = xBlockTime;
 165:FreeRTOS/test_Src/BlockQ.c **** 	pxQueueParameters5->psCheckVariable = &( sBlockingProducerCount[ 2 ] );
 166:FreeRTOS/test_Src/BlockQ.c **** 
 167:FreeRTOS/test_Src/BlockQ.c **** 	pxQueueParameters6 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters
 168:FreeRTOS/test_Src/BlockQ.c **** 	pxQueueParameters6->xQueue = pxQueueParameters5->xQueue;
 169:FreeRTOS/test_Src/BlockQ.c **** 	pxQueueParameters6->xBlockTime = xBlockTime;
 170:FreeRTOS/test_Src/BlockQ.c **** 	pxQueueParameters6->psCheckVariable = &( sBlockingConsumerCount[ 2 ] );
 171:FreeRTOS/test_Src/BlockQ.c **** 
 172:FreeRTOS/test_Src/BlockQ.c **** 	xTaskCreate( vBlockingQueueProducer, "QProdB5", blckqSTACK_SIZE, ( void * ) pxQueueParameters5, ts
 173:FreeRTOS/test_Src/BlockQ.c **** 	xTaskCreate( vBlockingQueueConsumer, "QConsB6", blckqSTACK_SIZE, ( void * ) pxQueueParameters6, ts
 174:FreeRTOS/test_Src/BlockQ.c **** }
 175:FreeRTOS/test_Src/BlockQ.c **** /*-----------------------------------------------------------*/
 176:FreeRTOS/test_Src/BlockQ.c **** 
 177:FreeRTOS/test_Src/BlockQ.c **** static portTASK_FUNCTION( vBlockingQueueProducer, pvParameters )
 178:FreeRTOS/test_Src/BlockQ.c **** {
  27              		.loc 1 178 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 30B5     		push	{r4, r5, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 12
  35              		.cfi_offset 4, -12
  36              		.cfi_offset 5, -8
  37              		.cfi_offset 14, -4
  38 0002 83B0     		sub	sp, sp, #12
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 24
  41 0004 0446     		mov	r4, r0
 179:FreeRTOS/test_Src/BlockQ.c **** uint16_t usValue = 0;
  42              		.loc 1 179 0
  43 0006 0025     		movs	r5, #0
  44 0008 ADF80650 		strh	r5, [sp, #6]	@ movhi
  45              	.LVL1:
  46 000c 00E0     		b	.L2
  47              	.LVL2:
  48              	.L5:
 180:FreeRTOS/test_Src/BlockQ.c **** xBlockingQueueParameters *pxQueueParameters;
 181:FreeRTOS/test_Src/BlockQ.c **** short sErrorEverOccurred = pdFALSE;
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqEYVjk.s 			page 5


 182:FreeRTOS/test_Src/BlockQ.c **** 
 183:FreeRTOS/test_Src/BlockQ.c **** 	pxQueueParameters = ( xBlockingQueueParameters * ) pvParameters;
 184:FreeRTOS/test_Src/BlockQ.c **** 
 185:FreeRTOS/test_Src/BlockQ.c **** 	for( ;; )
 186:FreeRTOS/test_Src/BlockQ.c **** 	{
 187:FreeRTOS/test_Src/BlockQ.c **** 		if( xQueueSend( pxQueueParameters->xQueue, ( void * ) &usValue, pxQueueParameters->xBlockTime ) !
 188:FreeRTOS/test_Src/BlockQ.c **** 		{
 189:FreeRTOS/test_Src/BlockQ.c **** 			sErrorEverOccurred = pdTRUE;
  49              		.loc 1 189 0
  50 000e 0125     		movs	r5, #1
  51              	.LVL3:
  52              	.L2:
 187:FreeRTOS/test_Src/BlockQ.c **** 		{
  53              		.loc 1 187 0
  54 0010 0023     		movs	r3, #0
  55 0012 6268     		ldr	r2, [r4, #4]
  56 0014 0DF10601 		add	r1, sp, #6
  57 0018 2068     		ldr	r0, [r4]
  58 001a FFF7FEFF 		bl	xQueueGenericSend
  59              	.LVL4:
  60 001e 0128     		cmp	r0, #1
  61 0020 F5D1     		bne	.L5
 190:FreeRTOS/test_Src/BlockQ.c **** 		}
 191:FreeRTOS/test_Src/BlockQ.c **** 		else
 192:FreeRTOS/test_Src/BlockQ.c **** 		{
 193:FreeRTOS/test_Src/BlockQ.c **** 			/* We have successfully posted a message, so increment the variable
 194:FreeRTOS/test_Src/BlockQ.c **** 			used to check we are still running. */
 195:FreeRTOS/test_Src/BlockQ.c **** 			if( sErrorEverOccurred == pdFALSE )
  62              		.loc 1 195 0
  63 0022 25B9     		cbnz	r5, .L3
 196:FreeRTOS/test_Src/BlockQ.c **** 			{
 197:FreeRTOS/test_Src/BlockQ.c **** 				( *pxQueueParameters->psCheckVariable )++;
  64              		.loc 1 197 0
  65 0024 A268     		ldr	r2, [r4, #8]
  66 0026 1388     		ldrh	r3, [r2]
  67 0028 0133     		adds	r3, r3, #1
  68 002a 1BB2     		sxth	r3, r3
  69 002c 1380     		strh	r3, [r2]	@ movhi
  70              	.L3:
 198:FreeRTOS/test_Src/BlockQ.c **** 			}
 199:FreeRTOS/test_Src/BlockQ.c **** 
 200:FreeRTOS/test_Src/BlockQ.c **** 			/* Increment the variable we are going to post next time round.  The
 201:FreeRTOS/test_Src/BlockQ.c **** 			consumer will expect the numbers to	follow in numerical order. */
 202:FreeRTOS/test_Src/BlockQ.c **** 			++usValue;
  71              		.loc 1 202 0
  72 002e BDF80630 		ldrh	r3, [sp, #6]
  73 0032 0133     		adds	r3, r3, #1
  74 0034 ADF80630 		strh	r3, [sp, #6]	@ movhi
  75 0038 EAE7     		b	.L2
  76              		.cfi_endproc
  77              	.LFE33:
  79 003a 00BF     		.section	.text.vBlockingQueueConsumer,"ax",%progbits
  80              		.align	2
  81              		.thumb
  82              		.thumb_func
  84              	vBlockingQueueConsumer:
  85              	.LFB34:
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqEYVjk.s 			page 6


 203:FreeRTOS/test_Src/BlockQ.c **** 
 204:FreeRTOS/test_Src/BlockQ.c **** 			#if configUSE_PREEMPTION == 0
 205:FreeRTOS/test_Src/BlockQ.c **** 				taskYIELD();
 206:FreeRTOS/test_Src/BlockQ.c **** 			#endif
 207:FreeRTOS/test_Src/BlockQ.c **** 		}
 208:FreeRTOS/test_Src/BlockQ.c **** 	}
 209:FreeRTOS/test_Src/BlockQ.c **** }
 210:FreeRTOS/test_Src/BlockQ.c **** /*-----------------------------------------------------------*/
 211:FreeRTOS/test_Src/BlockQ.c **** 
 212:FreeRTOS/test_Src/BlockQ.c **** static portTASK_FUNCTION( vBlockingQueueConsumer, pvParameters )
 213:FreeRTOS/test_Src/BlockQ.c **** {
  86              		.loc 1 213 0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 8
  89              		@ frame_needed = 0, uses_anonymous_args = 0
  90              	.LVL5:
  91 0000 70B5     		push	{r4, r5, r6, lr}
  92              	.LCFI2:
  93              		.cfi_def_cfa_offset 16
  94              		.cfi_offset 4, -16
  95              		.cfi_offset 5, -12
  96              		.cfi_offset 6, -8
  97              		.cfi_offset 14, -4
  98 0002 82B0     		sub	sp, sp, #8
  99              	.LCFI3:
 100              		.cfi_def_cfa_offset 24
 101 0004 0446     		mov	r4, r0
 102              	.LVL6:
 214:FreeRTOS/test_Src/BlockQ.c **** uint16_t usData, usExpectedValue = 0;
 215:FreeRTOS/test_Src/BlockQ.c **** xBlockingQueueParameters *pxQueueParameters;
 216:FreeRTOS/test_Src/BlockQ.c **** short sErrorEverOccurred = pdFALSE;
 103              		.loc 1 216 0
 104 0006 0026     		movs	r6, #0
 214:FreeRTOS/test_Src/BlockQ.c **** uint16_t usData, usExpectedValue = 0;
 105              		.loc 1 214 0
 106 0008 3546     		mov	r5, r6
 107 000a 01E0     		b	.L8
 108              	.LVL7:
 109              	.L11:
 217:FreeRTOS/test_Src/BlockQ.c **** 
 218:FreeRTOS/test_Src/BlockQ.c **** 	pxQueueParameters = ( xBlockingQueueParameters * ) pvParameters;
 219:FreeRTOS/test_Src/BlockQ.c **** 
 220:FreeRTOS/test_Src/BlockQ.c **** 	for( ;; )
 221:FreeRTOS/test_Src/BlockQ.c **** 	{
 222:FreeRTOS/test_Src/BlockQ.c **** 		if( xQueueReceive( pxQueueParameters->xQueue, &usData, pxQueueParameters->xBlockTime ) == pdPASS 
 223:FreeRTOS/test_Src/BlockQ.c **** 		{
 224:FreeRTOS/test_Src/BlockQ.c **** 			if( usData != usExpectedValue )
 225:FreeRTOS/test_Src/BlockQ.c **** 			{
 226:FreeRTOS/test_Src/BlockQ.c **** 				/* Catch-up. */
 227:FreeRTOS/test_Src/BlockQ.c **** 				usExpectedValue = usData;
 110              		.loc 1 227 0
 111 000c 1D46     		mov	r5, r3
 112              	.LVL8:
 228:FreeRTOS/test_Src/BlockQ.c **** 
 229:FreeRTOS/test_Src/BlockQ.c **** 				sErrorEverOccurred = pdTRUE;
 113              		.loc 1 229 0
 114 000e 0126     		movs	r6, #1
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqEYVjk.s 			page 7


 115              	.LVL9:
 116              	.L8:
 222:FreeRTOS/test_Src/BlockQ.c **** 		{
 117              		.loc 1 222 0
 118 0010 6268     		ldr	r2, [r4, #4]
 119 0012 0DF10601 		add	r1, sp, #6
 120 0016 2068     		ldr	r0, [r4]
 121 0018 FFF7FEFF 		bl	xQueueReceive
 122              	.LVL10:
 123 001c 0128     		cmp	r0, #1
 124 001e F7D1     		bne	.L8
 224:FreeRTOS/test_Src/BlockQ.c **** 			{
 125              		.loc 1 224 0
 126 0020 BDF80630 		ldrh	r3, [sp, #6]
 127 0024 9D42     		cmp	r5, r3
 128 0026 F1D1     		bne	.L11
 230:FreeRTOS/test_Src/BlockQ.c **** 			}
 231:FreeRTOS/test_Src/BlockQ.c **** 			else
 232:FreeRTOS/test_Src/BlockQ.c **** 			{
 233:FreeRTOS/test_Src/BlockQ.c **** 				/* We have successfully received a message, so increment the
 234:FreeRTOS/test_Src/BlockQ.c **** 				variable used to check we are still running. */
 235:FreeRTOS/test_Src/BlockQ.c **** 				if( sErrorEverOccurred == pdFALSE )
 129              		.loc 1 235 0
 130 0028 26B9     		cbnz	r6, .L10
 236:FreeRTOS/test_Src/BlockQ.c **** 				{
 237:FreeRTOS/test_Src/BlockQ.c **** 					( *pxQueueParameters->psCheckVariable )++;
 131              		.loc 1 237 0
 132 002a A268     		ldr	r2, [r4, #8]
 133 002c 1388     		ldrh	r3, [r2]
 134 002e 0133     		adds	r3, r3, #1
 135 0030 1BB2     		sxth	r3, r3
 136 0032 1380     		strh	r3, [r2]	@ movhi
 137              	.L10:
 238:FreeRTOS/test_Src/BlockQ.c **** 				}
 239:FreeRTOS/test_Src/BlockQ.c **** 
 240:FreeRTOS/test_Src/BlockQ.c **** 				/* Increment the value we expect to remove from the queue next time
 241:FreeRTOS/test_Src/BlockQ.c **** 				round. */
 242:FreeRTOS/test_Src/BlockQ.c **** 				++usExpectedValue;
 138              		.loc 1 242 0
 139 0034 0135     		adds	r5, r5, #1
 140              	.LVL11:
 141 0036 ADB2     		uxth	r5, r5
 142              	.LVL12:
 143 0038 EAE7     		b	.L8
 144              		.cfi_endproc
 145              	.LFE34:
 147 003a 00BF     		.section	.text.vStartBlockingQueueTasks,"ax",%progbits
 148              		.align	2
 149              		.global	vStartBlockingQueueTasks
 150              		.thumb
 151              		.thumb_func
 153              	vStartBlockingQueueTasks:
 154              	.LFB32:
  96:FreeRTOS/test_Src/BlockQ.c **** xBlockingQueueParameters *pxQueueParameters1, *pxQueueParameters2;
 155              		.loc 1 96 0
 156              		.cfi_startproc
 157              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqEYVjk.s 			page 8


 158              		@ frame_needed = 0, uses_anonymous_args = 0
 159              	.LVL13:
 160 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 161              	.LCFI4:
 162              		.cfi_def_cfa_offset 36
 163              		.cfi_offset 4, -36
 164              		.cfi_offset 5, -32
 165              		.cfi_offset 6, -28
 166              		.cfi_offset 7, -24
 167              		.cfi_offset 8, -20
 168              		.cfi_offset 9, -16
 169              		.cfi_offset 10, -12
 170              		.cfi_offset 11, -8
 171              		.cfi_offset 14, -4
 172 0004 83B0     		sub	sp, sp, #12
 173              	.LCFI5:
 174              		.cfi_def_cfa_offset 48
 175 0006 8346     		mov	fp, r0
 176              	.LVL14:
 107:FreeRTOS/test_Src/BlockQ.c **** 
 177              		.loc 1 107 0
 178 0008 0C20     		movs	r0, #12
 179              	.LVL15:
 180 000a FFF7FEFF 		bl	pvPortMalloc
 181              	.LVL16:
 182 000e 8146     		mov	r9, r0
 183              	.LVL17:
 111:FreeRTOS/test_Src/BlockQ.c **** 
 184              		.loc 1 111 0
 185 0010 0022     		movs	r2, #0
 186 0012 0221     		movs	r1, #2
 187 0014 0120     		movs	r0, #1
 188              	.LVL18:
 189 0016 FFF7FEFF 		bl	xQueueGenericCreate
 190              	.LVL19:
 191 001a C9F80000 		str	r0, [r9]
 114:FreeRTOS/test_Src/BlockQ.c **** 
 192              		.loc 1 114 0
 193 001e 4FF47A78 		mov	r8, #1000
 194 0022 C9F80480 		str	r8, [r9, #4]
 118:FreeRTOS/test_Src/BlockQ.c **** 
 195              		.loc 1 118 0
 196 0026 3A4D     		ldr	r5, .L15
 197 0028 C9F80850 		str	r5, [r9, #8]
 121:FreeRTOS/test_Src/BlockQ.c **** 
 198              		.loc 1 121 0
 199 002c 0C20     		movs	r0, #12
 200 002e FFF7FEFF 		bl	pvPortMalloc
 201              	.LVL20:
 202 0032 0746     		mov	r7, r0
 203              	.LVL21:
 124:FreeRTOS/test_Src/BlockQ.c **** 
 204              		.loc 1 124 0
 205 0034 D9F80030 		ldr	r3, [r9]
 206 0038 0360     		str	r3, [r0]
 128:FreeRTOS/test_Src/BlockQ.c **** 
 207              		.loc 1 128 0
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqEYVjk.s 			page 9


 208 003a 0024     		movs	r4, #0
 209 003c 4460     		str	r4, [r0, #4]
 132:FreeRTOS/test_Src/BlockQ.c **** 
 210              		.loc 1 132 0
 211 003e 354E     		ldr	r6, .L15+4
 212 0040 8660     		str	r6, [r0, #8]
 137:FreeRTOS/test_Src/BlockQ.c **** 	xTaskCreate( vBlockingQueueProducer, "QProdB2", blckqSTACK_SIZE, ( void * ) pxQueueParameters2, ts
 213              		.loc 1 137 0
 214 0042 0194     		str	r4, [sp, #4]
 215 0044 CDF800B0 		str	fp, [sp]
 216 0048 4B46     		mov	r3, r9
 217 004a 8022     		movs	r2, #128
 218 004c 3249     		ldr	r1, .L15+8
 219 004e 3348     		ldr	r0, .L15+12
 220              	.LVL22:
 221 0050 FFF7FEFF 		bl	xTaskCreate
 222              	.LVL23:
 138:FreeRTOS/test_Src/BlockQ.c **** 
 223              		.loc 1 138 0
 224 0054 DFF8DCA0 		ldr	r10, .L15+36
 225 0058 0194     		str	r4, [sp, #4]
 226 005a 0094     		str	r4, [sp]
 227 005c 3B46     		mov	r3, r7
 228 005e 8022     		movs	r2, #128
 229 0060 2F49     		ldr	r1, .L15+16
 230 0062 5046     		mov	r0, r10
 231 0064 FFF7FEFF 		bl	xTaskCreate
 232              	.LVL24:
 145:FreeRTOS/test_Src/BlockQ.c **** 	pxQueueParameters3->xQueue = xQueueCreate( uxQueueSize1, ( UBaseType_t ) sizeof( uint16_t ) );
 233              		.loc 1 145 0
 234 0068 0C20     		movs	r0, #12
 235 006a FFF7FEFF 		bl	pvPortMalloc
 236              	.LVL25:
 237 006e 0746     		mov	r7, r0
 238              	.LVL26:
 146:FreeRTOS/test_Src/BlockQ.c **** 	pxQueueParameters3->xBlockTime = xDontBlock;
 239              		.loc 1 146 0
 240 0070 2246     		mov	r2, r4
 241 0072 0221     		movs	r1, #2
 242 0074 0120     		movs	r0, #1
 243              	.LVL27:
 244 0076 FFF7FEFF 		bl	xQueueGenericCreate
 245              	.LVL28:
 246 007a 3860     		str	r0, [r7]
 147:FreeRTOS/test_Src/BlockQ.c **** 	pxQueueParameters3->psCheckVariable = &( sBlockingProducerCount[ 1 ] );
 247              		.loc 1 147 0
 248 007c 7C60     		str	r4, [r7, #4]
 148:FreeRTOS/test_Src/BlockQ.c **** 
 249              		.loc 1 148 0
 250 007e B31C     		adds	r3, r6, #2
 251 0080 BB60     		str	r3, [r7, #8]
 150:FreeRTOS/test_Src/BlockQ.c **** 	pxQueueParameters4->xQueue = pxQueueParameters3->xQueue;
 252              		.loc 1 150 0
 253 0082 0C20     		movs	r0, #12
 254 0084 FFF7FEFF 		bl	pvPortMalloc
 255              	.LVL29:
 256 0088 8146     		mov	r9, r0
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqEYVjk.s 			page 10


 257              	.LVL30:
 151:FreeRTOS/test_Src/BlockQ.c **** 	pxQueueParameters4->xBlockTime = xBlockTime;
 258              		.loc 1 151 0
 259 008a 3B68     		ldr	r3, [r7]
 260 008c 0360     		str	r3, [r0]
 152:FreeRTOS/test_Src/BlockQ.c **** 	pxQueueParameters4->psCheckVariable = &( sBlockingConsumerCount[ 1 ] );
 261              		.loc 1 152 0
 262 008e C0F80480 		str	r8, [r0, #4]
 153:FreeRTOS/test_Src/BlockQ.c **** 
 263              		.loc 1 153 0
 264 0092 AB1C     		adds	r3, r5, #2
 265 0094 8360     		str	r3, [r0, #8]
 155:FreeRTOS/test_Src/BlockQ.c **** 	xTaskCreate( vBlockingQueueProducer, "QProdB4", blckqSTACK_SIZE, ( void * ) pxQueueParameters4, ux
 266              		.loc 1 155 0
 267 0096 0194     		str	r4, [sp, #4]
 268 0098 0094     		str	r4, [sp]
 269 009a 3B46     		mov	r3, r7
 270 009c 8022     		movs	r2, #128
 271 009e 2149     		ldr	r1, .L15+20
 272 00a0 1E48     		ldr	r0, .L15+12
 273              	.LVL31:
 274 00a2 FFF7FEFF 		bl	xTaskCreate
 275              	.LVL32:
 156:FreeRTOS/test_Src/BlockQ.c **** 
 276              		.loc 1 156 0
 277 00a6 0194     		str	r4, [sp, #4]
 278 00a8 CDF800B0 		str	fp, [sp]
 279 00ac 4B46     		mov	r3, r9
 280 00ae 8022     		movs	r2, #128
 281 00b0 1D49     		ldr	r1, .L15+24
 282 00b2 5046     		mov	r0, r10
 283 00b4 FFF7FEFF 		bl	xTaskCreate
 284              	.LVL33:
 162:FreeRTOS/test_Src/BlockQ.c **** 	pxQueueParameters5->xQueue = xQueueCreate( uxQueueSize5, ( UBaseType_t ) sizeof( uint16_t ) );
 285              		.loc 1 162 0
 286 00b8 0C20     		movs	r0, #12
 287 00ba FFF7FEFF 		bl	pvPortMalloc
 288              	.LVL34:
 289 00be 0746     		mov	r7, r0
 290              	.LVL35:
 163:FreeRTOS/test_Src/BlockQ.c **** 	pxQueueParameters5->xBlockTime = xBlockTime;
 291              		.loc 1 163 0
 292 00c0 2246     		mov	r2, r4
 293 00c2 0221     		movs	r1, #2
 294 00c4 0520     		movs	r0, #5
 295              	.LVL36:
 296 00c6 FFF7FEFF 		bl	xQueueGenericCreate
 297              	.LVL37:
 298 00ca 3860     		str	r0, [r7]
 164:FreeRTOS/test_Src/BlockQ.c **** 	pxQueueParameters5->psCheckVariable = &( sBlockingProducerCount[ 2 ] );
 299              		.loc 1 164 0
 300 00cc C7F80480 		str	r8, [r7, #4]
 165:FreeRTOS/test_Src/BlockQ.c **** 
 301              		.loc 1 165 0
 302 00d0 0436     		adds	r6, r6, #4
 303 00d2 BE60     		str	r6, [r7, #8]
 167:FreeRTOS/test_Src/BlockQ.c **** 	pxQueueParameters6->xQueue = pxQueueParameters5->xQueue;
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqEYVjk.s 			page 11


 304              		.loc 1 167 0
 305 00d4 0C20     		movs	r0, #12
 306 00d6 FFF7FEFF 		bl	pvPortMalloc
 307              	.LVL38:
 308 00da 0646     		mov	r6, r0
 309              	.LVL39:
 168:FreeRTOS/test_Src/BlockQ.c **** 	pxQueueParameters6->xBlockTime = xBlockTime;
 310              		.loc 1 168 0
 311 00dc 3B68     		ldr	r3, [r7]
 312 00de 0360     		str	r3, [r0]
 169:FreeRTOS/test_Src/BlockQ.c **** 	pxQueueParameters6->psCheckVariable = &( sBlockingConsumerCount[ 2 ] );
 313              		.loc 1 169 0
 314 00e0 C0F80480 		str	r8, [r0, #4]
 170:FreeRTOS/test_Src/BlockQ.c **** 
 315              		.loc 1 170 0
 316 00e4 0435     		adds	r5, r5, #4
 317 00e6 8560     		str	r5, [r0, #8]
 172:FreeRTOS/test_Src/BlockQ.c **** 	xTaskCreate( vBlockingQueueConsumer, "QConsB6", blckqSTACK_SIZE, ( void * ) pxQueueParameters6, ts
 318              		.loc 1 172 0
 319 00e8 0194     		str	r4, [sp, #4]
 320 00ea 0094     		str	r4, [sp]
 321 00ec 3B46     		mov	r3, r7
 322 00ee 8022     		movs	r2, #128
 323 00f0 0E49     		ldr	r1, .L15+28
 324 00f2 5046     		mov	r0, r10
 325              	.LVL40:
 326 00f4 FFF7FEFF 		bl	xTaskCreate
 327              	.LVL41:
 173:FreeRTOS/test_Src/BlockQ.c **** }
 328              		.loc 1 173 0
 329 00f8 0194     		str	r4, [sp, #4]
 330 00fa 0094     		str	r4, [sp]
 331 00fc 3346     		mov	r3, r6
 332 00fe 8022     		movs	r2, #128
 333 0100 0B49     		ldr	r1, .L15+32
 334 0102 0648     		ldr	r0, .L15+12
 335 0104 FFF7FEFF 		bl	xTaskCreate
 336              	.LVL42:
 174:FreeRTOS/test_Src/BlockQ.c **** /*-----------------------------------------------------------*/
 337              		.loc 1 174 0
 338 0108 03B0     		add	sp, sp, #12
 339              	.LCFI6:
 340              		.cfi_def_cfa_offset 36
 341              		@ sp needed
 342 010a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 343              	.LVL43:
 344              	.L16:
 345 010e 00BF     		.align	2
 346              	.L15:
 347 0110 00000000 		.word	.LANCHOR0
 348 0114 00000000 		.word	.LANCHOR1
 349 0118 00000000 		.word	.LC0
 350 011c 00000000 		.word	vBlockingQueueConsumer
 351 0120 08000000 		.word	.LC1
 352 0124 10000000 		.word	.LC2
 353 0128 18000000 		.word	.LC3
 354 012c 20000000 		.word	.LC4
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqEYVjk.s 			page 12


 355 0130 28000000 		.word	.LC5
 356 0134 00000000 		.word	vBlockingQueueProducer
 357              		.cfi_endproc
 358              	.LFE32:
 360              		.section	.text.xAreBlockingQueuesStillRunning,"ax",%progbits
 361              		.align	2
 362              		.global	xAreBlockingQueuesStillRunning
 363              		.thumb
 364              		.thumb_func
 366              	xAreBlockingQueuesStillRunning:
 367              	.LFB35:
 243:FreeRTOS/test_Src/BlockQ.c **** 			}
 244:FreeRTOS/test_Src/BlockQ.c **** 
 245:FreeRTOS/test_Src/BlockQ.c **** 			#if configUSE_PREEMPTION == 0
 246:FreeRTOS/test_Src/BlockQ.c **** 			{
 247:FreeRTOS/test_Src/BlockQ.c **** 				if( pxQueueParameters->xBlockTime == 0 )
 248:FreeRTOS/test_Src/BlockQ.c **** 				{
 249:FreeRTOS/test_Src/BlockQ.c **** 					taskYIELD();
 250:FreeRTOS/test_Src/BlockQ.c **** 				}
 251:FreeRTOS/test_Src/BlockQ.c **** 			}
 252:FreeRTOS/test_Src/BlockQ.c **** 			#endif
 253:FreeRTOS/test_Src/BlockQ.c **** 		}
 254:FreeRTOS/test_Src/BlockQ.c **** 	}
 255:FreeRTOS/test_Src/BlockQ.c **** }
 256:FreeRTOS/test_Src/BlockQ.c **** /*-----------------------------------------------------------*/
 257:FreeRTOS/test_Src/BlockQ.c **** 
 258:FreeRTOS/test_Src/BlockQ.c **** /* This is called to check that all the created tasks are still running. */
 259:FreeRTOS/test_Src/BlockQ.c **** BaseType_t xAreBlockingQueuesStillRunning( void )
 260:FreeRTOS/test_Src/BlockQ.c **** {
 368              		.loc 1 260 0
 369              		.cfi_startproc
 370              		@ args = 0, pretend = 0, frame = 0
 371              		@ frame_needed = 0, uses_anonymous_args = 0
 372              		@ link register save eliminated.
 373              	.LVL44:
 261:FreeRTOS/test_Src/BlockQ.c **** static short sLastBlockingConsumerCount[ blckqNUM_TASK_SETS ] = { ( uint16_t ) 0, ( uint16_t ) 0, (
 262:FreeRTOS/test_Src/BlockQ.c **** static short sLastBlockingProducerCount[ blckqNUM_TASK_SETS ] = { ( uint16_t ) 0, ( uint16_t ) 0, (
 263:FreeRTOS/test_Src/BlockQ.c **** BaseType_t xReturn = pdPASS, xTasks;
 264:FreeRTOS/test_Src/BlockQ.c **** 
 265:FreeRTOS/test_Src/BlockQ.c **** 	/* Not too worried about mutual exclusion on these variables as they are 16
 266:FreeRTOS/test_Src/BlockQ.c **** 	bits and we are only reading them. We also only care to see if they have
 267:FreeRTOS/test_Src/BlockQ.c **** 	changed or not.
 268:FreeRTOS/test_Src/BlockQ.c **** 
 269:FreeRTOS/test_Src/BlockQ.c **** 	Loop through each check variable to and return pdFALSE if any are found not
 270:FreeRTOS/test_Src/BlockQ.c **** 	to have changed since the last call. */
 271:FreeRTOS/test_Src/BlockQ.c **** 
 272:FreeRTOS/test_Src/BlockQ.c **** 	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
 374              		.loc 1 272 0
 375 0000 0023     		movs	r3, #0
 263:FreeRTOS/test_Src/BlockQ.c **** 
 376              		.loc 1 263 0
 377 0002 0120     		movs	r0, #1
 378              		.loc 1 272 0
 379 0004 20E0     		b	.L18
 380              	.LVL45:
 381              	.L21:
 273:FreeRTOS/test_Src/BlockQ.c **** 	{
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqEYVjk.s 			page 13


 274:FreeRTOS/test_Src/BlockQ.c **** 		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
 382              		.loc 1 274 0
 383 0006 124A     		ldr	r2, .L24
 384 0008 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 385 000c 12B2     		sxth	r2, r2
 386 000e 1149     		ldr	r1, .L24+4
 387 0010 31F91310 		ldrsh	r1, [r1, r3, lsl #1]
 388 0014 8A42     		cmp	r2, r1
 389 0016 00D1     		bne	.L19
 275:FreeRTOS/test_Src/BlockQ.c **** 		{
 276:FreeRTOS/test_Src/BlockQ.c **** 			xReturn = pdFALSE;
 390              		.loc 1 276 0
 391 0018 0020     		movs	r0, #0
 392              	.LVL46:
 393              	.L19:
 277:FreeRTOS/test_Src/BlockQ.c **** 		}
 278:FreeRTOS/test_Src/BlockQ.c **** 		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];
 394              		.loc 1 278 0
 395 001a 0D4A     		ldr	r2, .L24
 396 001c 32F81310 		ldrh	r1, [r2, r3, lsl #1]
 397 0020 0C4A     		ldr	r2, .L24+4
 398 0022 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 279:FreeRTOS/test_Src/BlockQ.c **** 
 280:FreeRTOS/test_Src/BlockQ.c **** 
 281:FreeRTOS/test_Src/BlockQ.c **** 		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
 399              		.loc 1 281 0
 400 0026 0C4A     		ldr	r2, .L24+8
 401 0028 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 402 002c 12B2     		sxth	r2, r2
 403 002e 0B49     		ldr	r1, .L24+12
 404 0030 31F91310 		ldrsh	r1, [r1, r3, lsl #1]
 405 0034 8A42     		cmp	r2, r1
 406 0036 00D1     		bne	.L20
 282:FreeRTOS/test_Src/BlockQ.c **** 		{
 283:FreeRTOS/test_Src/BlockQ.c **** 			xReturn = pdFALSE;
 407              		.loc 1 283 0
 408 0038 0020     		movs	r0, #0
 409              	.LVL47:
 410              	.L20:
 284:FreeRTOS/test_Src/BlockQ.c **** 		}
 285:FreeRTOS/test_Src/BlockQ.c **** 		sLastBlockingProducerCount[ xTasks ] = sBlockingProducerCount[ xTasks ];
 411              		.loc 1 285 0 discriminator 2
 412 003a 074A     		ldr	r2, .L24+8
 413 003c 32F81310 		ldrh	r1, [r2, r3, lsl #1]
 414 0040 064A     		ldr	r2, .L24+12
 415 0042 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 272:FreeRTOS/test_Src/BlockQ.c **** 	{
 416              		.loc 1 272 0 discriminator 2
 417 0046 0133     		adds	r3, r3, #1
 418              	.LVL48:
 419              	.L18:
 272:FreeRTOS/test_Src/BlockQ.c **** 	{
 420              		.loc 1 272 0 is_stmt 0 discriminator 1
 421 0048 022B     		cmp	r3, #2
 422 004a DCDD     		ble	.L21
 286:FreeRTOS/test_Src/BlockQ.c **** 	}
 287:FreeRTOS/test_Src/BlockQ.c **** 
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqEYVjk.s 			page 14


 288:FreeRTOS/test_Src/BlockQ.c **** 	return xReturn;
 289:FreeRTOS/test_Src/BlockQ.c **** }
 423              		.loc 1 289 0 is_stmt 1
 424 004c 7047     		bx	lr
 425              	.L25:
 426 004e 00BF     		.align	2
 427              	.L24:
 428 0050 00000000 		.word	.LANCHOR0
 429 0054 00000000 		.word	.LANCHOR2
 430 0058 00000000 		.word	.LANCHOR1
 431 005c 00000000 		.word	.LANCHOR3
 432              		.cfi_endproc
 433              	.LFE35:
 435              		.section	.bss.sBlockingProducerCount,"aw",%nobits
 436              		.align	2
 437              		.set	.LANCHOR1,. + 0
 440              	sBlockingProducerCount:
 441 0000 00000000 		.space	6
 441      0000
 442              		.section	.bss.sBlockingConsumerCount,"aw",%nobits
 443              		.align	2
 444              		.set	.LANCHOR0,. + 0
 447              	sBlockingConsumerCount:
 448 0000 00000000 		.space	6
 448      0000
 449              		.section	.rodata.str1.4,"aMS",%progbits,1
 450              		.align	2
 451              	.LC0:
 452 0000 51436F6E 		.ascii	"QConsB1\000"
 452      73423100 
 453              	.LC1:
 454 0008 5150726F 		.ascii	"QProdB2\000"
 454      64423200 
 455              	.LC2:
 456 0010 51436F6E 		.ascii	"QConsB3\000"
 456      73423300 
 457              	.LC3:
 458 0018 5150726F 		.ascii	"QProdB4\000"
 458      64423400 
 459              	.LC4:
 460 0020 5150726F 		.ascii	"QProdB5\000"
 460      64423500 
 461              	.LC5:
 462 0028 51436F6E 		.ascii	"QConsB6\000"
 462      73423600 
 463              		.section	.bss.sLastBlockingProducerCount.7533,"aw",%nobits
 464              		.align	2
 465              		.set	.LANCHOR3,. + 0
 468              	sLastBlockingProducerCount.7533:
 469 0000 00000000 		.space	6
 469      0000
 470              		.section	.bss.sLastBlockingConsumerCount.7532,"aw",%nobits
 471              		.align	2
 472              		.set	.LANCHOR2,. + 0
 475              	sLastBlockingConsumerCount.7532:
 476 0000 00000000 		.space	6
 476      0000
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqEYVjk.s 			page 15


 477              		.text
 478              	.Letext0:
 479              		.file 2 "/usr/local/Cellar/gcc-arm-none-eabi/20160926/arm-none-eabi/include/machine/_default_types
 480              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20160926/arm-none-eabi/include/sys/_stdint.h"
 481              		.file 4 "FreeRTOS/ARM_CM3/portmacro.h"
 482              		.file 5 "FreeRTOS/Inc/queue.h"
 483              		.file 6 "FreeRTOS/Inc/portable.h"
 484              		.file 7 "FreeRTOS/Inc/task.h"
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqEYVjk.s 			page 16


DEFINED SYMBOLS
                            *ABS*:0000000000000000 BlockQ.c
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqEYVjk.s:20     .text.vBlockingQueueProducer:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqEYVjk.s:24     .text.vBlockingQueueProducer:0000000000000000 vBlockingQueueProducer
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqEYVjk.s:80     .text.vBlockingQueueConsumer:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqEYVjk.s:84     .text.vBlockingQueueConsumer:0000000000000000 vBlockingQueueConsumer
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqEYVjk.s:148    .text.vStartBlockingQueueTasks:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqEYVjk.s:153    .text.vStartBlockingQueueTasks:0000000000000000 vStartBlockingQueueTasks
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqEYVjk.s:347    .text.vStartBlockingQueueTasks:0000000000000110 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqEYVjk.s:361    .text.xAreBlockingQueuesStillRunning:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqEYVjk.s:366    .text.xAreBlockingQueuesStillRunning:0000000000000000 xAreBlockingQueuesStillRunning
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqEYVjk.s:428    .text.xAreBlockingQueuesStillRunning:0000000000000050 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqEYVjk.s:436    .bss.sBlockingProducerCount:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqEYVjk.s:440    .bss.sBlockingProducerCount:0000000000000000 sBlockingProducerCount
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqEYVjk.s:443    .bss.sBlockingConsumerCount:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqEYVjk.s:447    .bss.sBlockingConsumerCount:0000000000000000 sBlockingConsumerCount
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqEYVjk.s:450    .rodata.str1.4:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqEYVjk.s:464    .bss.sLastBlockingProducerCount.7533:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqEYVjk.s:468    .bss.sLastBlockingProducerCount.7533:0000000000000000 sLastBlockingProducerCount.7533
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqEYVjk.s:471    .bss.sLastBlockingConsumerCount.7532:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccqEYVjk.s:475    .bss.sLastBlockingConsumerCount.7532:0000000000000000 sLastBlockingConsumerCount.7532
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
xQueueGenericSend
xQueueReceive
pvPortMalloc
xQueueGenericCreate
xTaskCreate
