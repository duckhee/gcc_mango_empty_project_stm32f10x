ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cczd4qvg.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"BlockQ.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.vBlockingQueueProducer,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	vBlockingQueueProducer:
  25              	.LFB1:
  26              		.file 1 "FreeRTOS/Common/Minimal/BlockQ.c"
   1:FreeRTOS/Common/Minimal/BlockQ.c **** /*
   2:FreeRTOS/Common/Minimal/BlockQ.c **** 	FreeRTOS V5.4.2 - Copyright (C) 2009 Real Time Engineers Ltd.
   3:FreeRTOS/Common/Minimal/BlockQ.c **** 
   4:FreeRTOS/Common/Minimal/BlockQ.c **** 	This file is part of the FreeRTOS distribution.
   5:FreeRTOS/Common/Minimal/BlockQ.c **** 
   6:FreeRTOS/Common/Minimal/BlockQ.c **** 	FreeRTOS is free software; you can redistribute it and/or modify it	under 
   7:FreeRTOS/Common/Minimal/BlockQ.c **** 	the terms of the GNU General Public License (version 2) as published by the 
   8:FreeRTOS/Common/Minimal/BlockQ.c **** 	Free Software Foundation and modified by the FreeRTOS exception.
   9:FreeRTOS/Common/Minimal/BlockQ.c **** 	**NOTE** The exception to the GPL is included to allow you to distribute a
  10:FreeRTOS/Common/Minimal/BlockQ.c **** 	combined work that includes FreeRTOS without being obliged to provide the 
  11:FreeRTOS/Common/Minimal/BlockQ.c **** 	source code for proprietary components outside of the FreeRTOS kernel.  
  12:FreeRTOS/Common/Minimal/BlockQ.c **** 	Alternative commercial license and support terms are also available upon 
  13:FreeRTOS/Common/Minimal/BlockQ.c **** 	request.  See the licensing section of http://www.FreeRTOS.org for full 
  14:FreeRTOS/Common/Minimal/BlockQ.c **** 	license details.
  15:FreeRTOS/Common/Minimal/BlockQ.c **** 
  16:FreeRTOS/Common/Minimal/BlockQ.c **** 	FreeRTOS is distributed in the hope that it will be useful,	but WITHOUT
  17:FreeRTOS/Common/Minimal/BlockQ.c **** 	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  18:FreeRTOS/Common/Minimal/BlockQ.c **** 	FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  19:FreeRTOS/Common/Minimal/BlockQ.c **** 	more details.
  20:FreeRTOS/Common/Minimal/BlockQ.c **** 
  21:FreeRTOS/Common/Minimal/BlockQ.c **** 	You should have received a copy of the GNU General Public License along
  22:FreeRTOS/Common/Minimal/BlockQ.c **** 	with FreeRTOS; if not, write to the Free Software Foundation, Inc., 59
  23:FreeRTOS/Common/Minimal/BlockQ.c **** 	Temple Place, Suite 330, Boston, MA  02111-1307  USA.
  24:FreeRTOS/Common/Minimal/BlockQ.c **** 
  25:FreeRTOS/Common/Minimal/BlockQ.c **** 
  26:FreeRTOS/Common/Minimal/BlockQ.c **** 	***************************************************************************
  27:FreeRTOS/Common/Minimal/BlockQ.c **** 	*                                                                         *
  28:FreeRTOS/Common/Minimal/BlockQ.c **** 	* Looking for a quick start?  Then check out the FreeRTOS eBook!          *
  29:FreeRTOS/Common/Minimal/BlockQ.c **** 	* See http://www.FreeRTOS.org/Documentation for details                   *
  30:FreeRTOS/Common/Minimal/BlockQ.c **** 	*                                                                         *
  31:FreeRTOS/Common/Minimal/BlockQ.c **** 	***************************************************************************
  32:FreeRTOS/Common/Minimal/BlockQ.c **** 
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cczd4qvg.s 			page 2


  33:FreeRTOS/Common/Minimal/BlockQ.c **** 	1 tab == 4 spaces!
  34:FreeRTOS/Common/Minimal/BlockQ.c **** 
  35:FreeRTOS/Common/Minimal/BlockQ.c **** 	Please ensure to read the configuration and relevant port sections of the
  36:FreeRTOS/Common/Minimal/BlockQ.c **** 	online documentation.
  37:FreeRTOS/Common/Minimal/BlockQ.c **** 
  38:FreeRTOS/Common/Minimal/BlockQ.c **** 	http://www.FreeRTOS.org - Documentation, latest information, license and
  39:FreeRTOS/Common/Minimal/BlockQ.c **** 	contact details.
  40:FreeRTOS/Common/Minimal/BlockQ.c **** 
  41:FreeRTOS/Common/Minimal/BlockQ.c **** 	http://www.SafeRTOS.com - A version that is certified for use in safety
  42:FreeRTOS/Common/Minimal/BlockQ.c **** 	critical systems.
  43:FreeRTOS/Common/Minimal/BlockQ.c **** 
  44:FreeRTOS/Common/Minimal/BlockQ.c **** 	http://www.OpenRTOS.com - Commercial support, development, porting,
  45:FreeRTOS/Common/Minimal/BlockQ.c **** 	licensing and training services.
  46:FreeRTOS/Common/Minimal/BlockQ.c **** */
  47:FreeRTOS/Common/Minimal/BlockQ.c **** 
  48:FreeRTOS/Common/Minimal/BlockQ.c **** /*
  49:FreeRTOS/Common/Minimal/BlockQ.c ****  * Creates six tasks that operate on three queues as follows:
  50:FreeRTOS/Common/Minimal/BlockQ.c ****  *
  51:FreeRTOS/Common/Minimal/BlockQ.c ****  * The first two tasks send and receive an incrementing number to/from a queue.
  52:FreeRTOS/Common/Minimal/BlockQ.c ****  * One task acts as a producer and the other as the consumer.  The consumer is a
  53:FreeRTOS/Common/Minimal/BlockQ.c ****  * higher priority than the producer and is set to block on queue reads.  The queue
  54:FreeRTOS/Common/Minimal/BlockQ.c ****  * only has space for one item - as soon as the producer posts a message on the
  55:FreeRTOS/Common/Minimal/BlockQ.c ****  * queue the consumer will unblock, pre-empt the producer, and remove the item.
  56:FreeRTOS/Common/Minimal/BlockQ.c ****  *
  57:FreeRTOS/Common/Minimal/BlockQ.c ****  * The second two tasks work the other way around.  Again the queue used only has
  58:FreeRTOS/Common/Minimal/BlockQ.c ****  * enough space for one item.  This time the consumer has a lower priority than the
  59:FreeRTOS/Common/Minimal/BlockQ.c ****  * producer.  The producer will try to post on the queue blocking when the queue is
  60:FreeRTOS/Common/Minimal/BlockQ.c ****  * full.  When the consumer wakes it will remove the item from the queue, causing
  61:FreeRTOS/Common/Minimal/BlockQ.c ****  * the producer to unblock, pre-empt the consumer, and immediately re-fill the
  62:FreeRTOS/Common/Minimal/BlockQ.c ****  * queue.
  63:FreeRTOS/Common/Minimal/BlockQ.c ****  *
  64:FreeRTOS/Common/Minimal/BlockQ.c ****  * The last two tasks use the same queue producer and consumer functions.  This time the queue has
  65:FreeRTOS/Common/Minimal/BlockQ.c ****  * enough space for lots of items and the tasks operate at the same priority.  The
  66:FreeRTOS/Common/Minimal/BlockQ.c ****  * producer will execute, placing items into the queue.  The consumer will start
  67:FreeRTOS/Common/Minimal/BlockQ.c ****  * executing when either the queue becomes full (causing the producer to block) or
  68:FreeRTOS/Common/Minimal/BlockQ.c ****  * a context switch occurs (tasks of the same priority will time slice).
  69:FreeRTOS/Common/Minimal/BlockQ.c ****  *
  70:FreeRTOS/Common/Minimal/BlockQ.c ****  */
  71:FreeRTOS/Common/Minimal/BlockQ.c **** 
  72:FreeRTOS/Common/Minimal/BlockQ.c **** /*
  73:FreeRTOS/Common/Minimal/BlockQ.c **** 
  74:FreeRTOS/Common/Minimal/BlockQ.c **** Changes from V4.1.1
  75:FreeRTOS/Common/Minimal/BlockQ.c **** 
  76:FreeRTOS/Common/Minimal/BlockQ.c **** 	+ The second set of tasks were created the wrong way around.  This has been
  77:FreeRTOS/Common/Minimal/BlockQ.c **** 	  corrected.
  78:FreeRTOS/Common/Minimal/BlockQ.c **** */
  79:FreeRTOS/Common/Minimal/BlockQ.c **** 
  80:FreeRTOS/Common/Minimal/BlockQ.c **** 
  81:FreeRTOS/Common/Minimal/BlockQ.c **** #include <stdlib.h>
  82:FreeRTOS/Common/Minimal/BlockQ.c **** 
  83:FreeRTOS/Common/Minimal/BlockQ.c **** /* Scheduler include files. */
  84:FreeRTOS/Common/Minimal/BlockQ.c **** #include "FreeRTOS.h"
  85:FreeRTOS/Common/Minimal/BlockQ.c **** #include "task.h"
  86:FreeRTOS/Common/Minimal/BlockQ.c **** #include "queue.h"
  87:FreeRTOS/Common/Minimal/BlockQ.c **** 
  88:FreeRTOS/Common/Minimal/BlockQ.c **** /* Demo program include files. */
  89:FreeRTOS/Common/Minimal/BlockQ.c **** #include "BlockQ.h"
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cczd4qvg.s 			page 3


  90:FreeRTOS/Common/Minimal/BlockQ.c **** 
  91:FreeRTOS/Common/Minimal/BlockQ.c **** #define blckqSTACK_SIZE		configMINIMAL_STACK_SIZE
  92:FreeRTOS/Common/Minimal/BlockQ.c **** #define blckqNUM_TASK_SETS	( 3 )
  93:FreeRTOS/Common/Minimal/BlockQ.c **** 
  94:FreeRTOS/Common/Minimal/BlockQ.c **** /* Structure used to pass parameters to the blocking queue tasks. */
  95:FreeRTOS/Common/Minimal/BlockQ.c **** typedef struct BLOCKING_QUEUE_PARAMETERS
  96:FreeRTOS/Common/Minimal/BlockQ.c **** {
  97:FreeRTOS/Common/Minimal/BlockQ.c **** 	xQueueHandle xQueue;					/*< The queue to be used by the task. */
  98:FreeRTOS/Common/Minimal/BlockQ.c **** 	portTickType xBlockTime;				/*< The block time to use on queue reads/writes. */
  99:FreeRTOS/Common/Minimal/BlockQ.c **** 	volatile portSHORT *psCheckVariable;	/*< Incremented on each successful cycle to check the task is
 100:FreeRTOS/Common/Minimal/BlockQ.c **** } xBlockingQueueParameters;
 101:FreeRTOS/Common/Minimal/BlockQ.c **** 
 102:FreeRTOS/Common/Minimal/BlockQ.c **** /* Task function that creates an incrementing number and posts it on a queue. */
 103:FreeRTOS/Common/Minimal/BlockQ.c **** static portTASK_FUNCTION_PROTO( vBlockingQueueProducer, pvParameters );
 104:FreeRTOS/Common/Minimal/BlockQ.c **** 
 105:FreeRTOS/Common/Minimal/BlockQ.c **** /* Task function that removes the incrementing number from a queue and checks that
 106:FreeRTOS/Common/Minimal/BlockQ.c **** it is the expected number. */
 107:FreeRTOS/Common/Minimal/BlockQ.c **** static portTASK_FUNCTION_PROTO( vBlockingQueueConsumer, pvParameters );
 108:FreeRTOS/Common/Minimal/BlockQ.c **** 
 109:FreeRTOS/Common/Minimal/BlockQ.c **** /* Variables which are incremented each time an item is removed from a queue, and
 110:FreeRTOS/Common/Minimal/BlockQ.c **** found to be the expected value.
 111:FreeRTOS/Common/Minimal/BlockQ.c **** These are used to check that the tasks are still running. */
 112:FreeRTOS/Common/Minimal/BlockQ.c **** static volatile portSHORT sBlockingConsumerCount[ blckqNUM_TASK_SETS ] = { ( unsigned portSHORT ) 0
 113:FreeRTOS/Common/Minimal/BlockQ.c **** 
 114:FreeRTOS/Common/Minimal/BlockQ.c **** /* Variable which are incremented each time an item is posted on a queue.   These
 115:FreeRTOS/Common/Minimal/BlockQ.c **** are used to check that the tasks are still running. */
 116:FreeRTOS/Common/Minimal/BlockQ.c **** static volatile portSHORT sBlockingProducerCount[ blckqNUM_TASK_SETS ] = { ( unsigned portSHORT ) 0
 117:FreeRTOS/Common/Minimal/BlockQ.c **** 
 118:FreeRTOS/Common/Minimal/BlockQ.c **** /*-----------------------------------------------------------*/
 119:FreeRTOS/Common/Minimal/BlockQ.c **** 
 120:FreeRTOS/Common/Minimal/BlockQ.c **** void vStartBlockingQueueTasks( unsigned portBASE_TYPE uxPriority )
 121:FreeRTOS/Common/Minimal/BlockQ.c **** {
 122:FreeRTOS/Common/Minimal/BlockQ.c **** xBlockingQueueParameters *pxQueueParameters1, *pxQueueParameters2;
 123:FreeRTOS/Common/Minimal/BlockQ.c **** xBlockingQueueParameters *pxQueueParameters3, *pxQueueParameters4;
 124:FreeRTOS/Common/Minimal/BlockQ.c **** xBlockingQueueParameters *pxQueueParameters5, *pxQueueParameters6;
 125:FreeRTOS/Common/Minimal/BlockQ.c **** const unsigned portBASE_TYPE uxQueueSize1 = 1, uxQueueSize5 = 5;
 126:FreeRTOS/Common/Minimal/BlockQ.c **** const portTickType xBlockTime = ( portTickType ) 1000 / portTICK_RATE_MS;
 127:FreeRTOS/Common/Minimal/BlockQ.c **** const portTickType xDontBlock = ( portTickType ) 0;
 128:FreeRTOS/Common/Minimal/BlockQ.c **** 
 129:FreeRTOS/Common/Minimal/BlockQ.c **** 	/* Create the first two tasks as described at the top of the file. */
 130:FreeRTOS/Common/Minimal/BlockQ.c **** 	
 131:FreeRTOS/Common/Minimal/BlockQ.c **** 	/* First create the structure used to pass parameters to the consumer tasks. */
 132:FreeRTOS/Common/Minimal/BlockQ.c **** 	pxQueueParameters1 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters
 133:FreeRTOS/Common/Minimal/BlockQ.c **** 
 134:FreeRTOS/Common/Minimal/BlockQ.c **** 	/* Create the queue used by the first two tasks to pass the incrementing number.
 135:FreeRTOS/Common/Minimal/BlockQ.c **** 	Pass a pointer to the queue in the parameter structure. */
 136:FreeRTOS/Common/Minimal/BlockQ.c **** 	pxQueueParameters1->xQueue = xQueueCreate( uxQueueSize1, ( unsigned portBASE_TYPE ) sizeof( unsign
 137:FreeRTOS/Common/Minimal/BlockQ.c **** 
 138:FreeRTOS/Common/Minimal/BlockQ.c **** 	/* The consumer is created first so gets a block time as described above. */
 139:FreeRTOS/Common/Minimal/BlockQ.c **** 	pxQueueParameters1->xBlockTime = xBlockTime;
 140:FreeRTOS/Common/Minimal/BlockQ.c **** 
 141:FreeRTOS/Common/Minimal/BlockQ.c **** 	/* Pass in the variable that this task is going to increment so we can check it
 142:FreeRTOS/Common/Minimal/BlockQ.c **** 	is still running. */
 143:FreeRTOS/Common/Minimal/BlockQ.c **** 	pxQueueParameters1->psCheckVariable = &( sBlockingConsumerCount[ 0 ] );
 144:FreeRTOS/Common/Minimal/BlockQ.c **** 		
 145:FreeRTOS/Common/Minimal/BlockQ.c **** 	/* Create the structure used to pass parameters to the producer task. */
 146:FreeRTOS/Common/Minimal/BlockQ.c **** 	pxQueueParameters2 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cczd4qvg.s 			page 4


 147:FreeRTOS/Common/Minimal/BlockQ.c **** 
 148:FreeRTOS/Common/Minimal/BlockQ.c **** 	/* Pass the queue to this task also, using the parameter structure. */
 149:FreeRTOS/Common/Minimal/BlockQ.c **** 	pxQueueParameters2->xQueue = pxQueueParameters1->xQueue;
 150:FreeRTOS/Common/Minimal/BlockQ.c **** 
 151:FreeRTOS/Common/Minimal/BlockQ.c **** 	/* The producer is not going to block - as soon as it posts the consumer will
 152:FreeRTOS/Common/Minimal/BlockQ.c **** 	wake and remove the item so the producer should always have room to post. */
 153:FreeRTOS/Common/Minimal/BlockQ.c **** 	pxQueueParameters2->xBlockTime = xDontBlock;
 154:FreeRTOS/Common/Minimal/BlockQ.c **** 
 155:FreeRTOS/Common/Minimal/BlockQ.c **** 	/* Pass in the variable that this task is going to increment so we can check
 156:FreeRTOS/Common/Minimal/BlockQ.c **** 	it is still running. */
 157:FreeRTOS/Common/Minimal/BlockQ.c **** 	pxQueueParameters2->psCheckVariable = &( sBlockingProducerCount[ 0 ] );
 158:FreeRTOS/Common/Minimal/BlockQ.c **** 
 159:FreeRTOS/Common/Minimal/BlockQ.c **** 
 160:FreeRTOS/Common/Minimal/BlockQ.c **** 	/* Note the producer has a lower priority than the consumer when the tasks are
 161:FreeRTOS/Common/Minimal/BlockQ.c **** 	spawned. */
 162:FreeRTOS/Common/Minimal/BlockQ.c **** 	xTaskCreate( vBlockingQueueConsumer, ( signed portCHAR * ) "QConsB1", blckqSTACK_SIZE, ( void * ) 
 163:FreeRTOS/Common/Minimal/BlockQ.c **** 	xTaskCreate( vBlockingQueueProducer, ( signed portCHAR * ) "QProdB2", blckqSTACK_SIZE, ( void * ) 
 164:FreeRTOS/Common/Minimal/BlockQ.c **** 
 165:FreeRTOS/Common/Minimal/BlockQ.c **** 	
 166:FreeRTOS/Common/Minimal/BlockQ.c **** 
 167:FreeRTOS/Common/Minimal/BlockQ.c **** 	/* Create the second two tasks as described at the top of the file.   This uses
 168:FreeRTOS/Common/Minimal/BlockQ.c **** 	the same mechanism but reverses the task priorities. */
 169:FreeRTOS/Common/Minimal/BlockQ.c **** 
 170:FreeRTOS/Common/Minimal/BlockQ.c **** 	pxQueueParameters3 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters
 171:FreeRTOS/Common/Minimal/BlockQ.c **** 	pxQueueParameters3->xQueue = xQueueCreate( uxQueueSize1, ( unsigned portBASE_TYPE ) sizeof( unsign
 172:FreeRTOS/Common/Minimal/BlockQ.c **** 	pxQueueParameters3->xBlockTime = xDontBlock;
 173:FreeRTOS/Common/Minimal/BlockQ.c **** 	pxQueueParameters3->psCheckVariable = &( sBlockingProducerCount[ 1 ] );
 174:FreeRTOS/Common/Minimal/BlockQ.c **** 
 175:FreeRTOS/Common/Minimal/BlockQ.c **** 	pxQueueParameters4 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters
 176:FreeRTOS/Common/Minimal/BlockQ.c **** 	pxQueueParameters4->xQueue = pxQueueParameters3->xQueue;
 177:FreeRTOS/Common/Minimal/BlockQ.c **** 	pxQueueParameters4->xBlockTime = xBlockTime;
 178:FreeRTOS/Common/Minimal/BlockQ.c **** 	pxQueueParameters4->psCheckVariable = &( sBlockingConsumerCount[ 1 ] );
 179:FreeRTOS/Common/Minimal/BlockQ.c **** 
 180:FreeRTOS/Common/Minimal/BlockQ.c **** 	xTaskCreate( vBlockingQueueConsumer, ( signed portCHAR * ) "QProdB3", blckqSTACK_SIZE, ( void * ) 
 181:FreeRTOS/Common/Minimal/BlockQ.c **** 	xTaskCreate( vBlockingQueueProducer, ( signed portCHAR * ) "QConsB4", blckqSTACK_SIZE, ( void * ) 
 182:FreeRTOS/Common/Minimal/BlockQ.c **** 
 183:FreeRTOS/Common/Minimal/BlockQ.c **** 
 184:FreeRTOS/Common/Minimal/BlockQ.c **** 
 185:FreeRTOS/Common/Minimal/BlockQ.c **** 	/* Create the last two tasks as described above.  The mechanism is again just
 186:FreeRTOS/Common/Minimal/BlockQ.c **** 	the same.  This time both parameter structures are given a block time. */
 187:FreeRTOS/Common/Minimal/BlockQ.c **** 	pxQueueParameters5 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters
 188:FreeRTOS/Common/Minimal/BlockQ.c **** 	pxQueueParameters5->xQueue = xQueueCreate( uxQueueSize5, ( unsigned portBASE_TYPE ) sizeof( unsign
 189:FreeRTOS/Common/Minimal/BlockQ.c **** 	pxQueueParameters5->xBlockTime = xBlockTime;
 190:FreeRTOS/Common/Minimal/BlockQ.c **** 	pxQueueParameters5->psCheckVariable = &( sBlockingProducerCount[ 2 ] );
 191:FreeRTOS/Common/Minimal/BlockQ.c **** 
 192:FreeRTOS/Common/Minimal/BlockQ.c **** 	pxQueueParameters6 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters
 193:FreeRTOS/Common/Minimal/BlockQ.c **** 	pxQueueParameters6->xQueue = pxQueueParameters5->xQueue;
 194:FreeRTOS/Common/Minimal/BlockQ.c **** 	pxQueueParameters6->xBlockTime = xBlockTime;
 195:FreeRTOS/Common/Minimal/BlockQ.c **** 	pxQueueParameters6->psCheckVariable = &( sBlockingConsumerCount[ 2 ] );	
 196:FreeRTOS/Common/Minimal/BlockQ.c **** 
 197:FreeRTOS/Common/Minimal/BlockQ.c **** 	xTaskCreate( vBlockingQueueProducer, ( signed portCHAR * ) "QProdB5", blckqSTACK_SIZE, ( void * ) 
 198:FreeRTOS/Common/Minimal/BlockQ.c **** 	xTaskCreate( vBlockingQueueConsumer, ( signed portCHAR * ) "QConsB6", blckqSTACK_SIZE, ( void * ) 
 199:FreeRTOS/Common/Minimal/BlockQ.c **** }
 200:FreeRTOS/Common/Minimal/BlockQ.c **** /*-----------------------------------------------------------*/
 201:FreeRTOS/Common/Minimal/BlockQ.c **** 
 202:FreeRTOS/Common/Minimal/BlockQ.c **** static portTASK_FUNCTION( vBlockingQueueProducer, pvParameters )
 203:FreeRTOS/Common/Minimal/BlockQ.c **** {
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cczd4qvg.s 			page 5


  27              		.loc 1 203 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 30B5     		push	{r4, r5, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 12
  35              		.cfi_offset 4, -12
  36              		.cfi_offset 5, -8
  37              		.cfi_offset 14, -4
  38 0002 83B0     		sub	sp, sp, #12
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 24
  41 0004 0446     		mov	r4, r0
 204:FreeRTOS/Common/Minimal/BlockQ.c **** unsigned portSHORT usValue = 0;
  42              		.loc 1 204 0
  43 0006 0025     		movs	r5, #0
  44 0008 ADF80650 		strh	r5, [sp, #6]	@ movhi
  45              	.LVL1:
  46 000c 00E0     		b	.L2
  47              	.LVL2:
  48              	.L5:
 205:FreeRTOS/Common/Minimal/BlockQ.c **** xBlockingQueueParameters *pxQueueParameters;
 206:FreeRTOS/Common/Minimal/BlockQ.c **** portSHORT sErrorEverOccurred = pdFALSE;
 207:FreeRTOS/Common/Minimal/BlockQ.c **** 
 208:FreeRTOS/Common/Minimal/BlockQ.c **** 	pxQueueParameters = ( xBlockingQueueParameters * ) pvParameters;
 209:FreeRTOS/Common/Minimal/BlockQ.c **** 
 210:FreeRTOS/Common/Minimal/BlockQ.c **** 	for( ;; )
 211:FreeRTOS/Common/Minimal/BlockQ.c **** 	{		
 212:FreeRTOS/Common/Minimal/BlockQ.c **** 		if( xQueueSend( pxQueueParameters->xQueue, ( void * ) &usValue, pxQueueParameters->xBlockTime ) !
 213:FreeRTOS/Common/Minimal/BlockQ.c **** 		{
 214:FreeRTOS/Common/Minimal/BlockQ.c **** 			sErrorEverOccurred = pdTRUE;
  49              		.loc 1 214 0
  50 000e 0125     		movs	r5, #1
  51              	.LVL3:
  52              	.L2:
 212:FreeRTOS/Common/Minimal/BlockQ.c **** 		{
  53              		.loc 1 212 0
  54 0010 0023     		movs	r3, #0
  55 0012 6268     		ldr	r2, [r4, #4]
  56 0014 0DF10601 		add	r1, sp, #6
  57 0018 2068     		ldr	r0, [r4]
  58 001a FFF7FEFF 		bl	xQueueGenericSend
  59              	.LVL4:
  60 001e 0128     		cmp	r0, #1
  61 0020 F5D1     		bne	.L5
 215:FreeRTOS/Common/Minimal/BlockQ.c **** 		}
 216:FreeRTOS/Common/Minimal/BlockQ.c **** 		else
 217:FreeRTOS/Common/Minimal/BlockQ.c **** 		{
 218:FreeRTOS/Common/Minimal/BlockQ.c **** 			/* We have successfully posted a message, so increment the variable
 219:FreeRTOS/Common/Minimal/BlockQ.c **** 			used to check we are still running. */
 220:FreeRTOS/Common/Minimal/BlockQ.c **** 			if( sErrorEverOccurred == pdFALSE )
  62              		.loc 1 220 0
  63 0022 25B9     		cbnz	r5, .L3
 221:FreeRTOS/Common/Minimal/BlockQ.c **** 			{
 222:FreeRTOS/Common/Minimal/BlockQ.c **** 				( *pxQueueParameters->psCheckVariable )++;
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cczd4qvg.s 			page 6


  64              		.loc 1 222 0
  65 0024 A268     		ldr	r2, [r4, #8]
  66 0026 1388     		ldrh	r3, [r2]
  67 0028 0133     		adds	r3, r3, #1
  68 002a 1BB2     		sxth	r3, r3
  69 002c 1380     		strh	r3, [r2]	@ movhi
  70              	.L3:
 223:FreeRTOS/Common/Minimal/BlockQ.c **** 			}
 224:FreeRTOS/Common/Minimal/BlockQ.c **** 
 225:FreeRTOS/Common/Minimal/BlockQ.c **** 			/* Increment the variable we are going to post next time round.  The
 226:FreeRTOS/Common/Minimal/BlockQ.c **** 			consumer will expect the numbers to	follow in numerical order. */
 227:FreeRTOS/Common/Minimal/BlockQ.c **** 			++usValue;
  71              		.loc 1 227 0
  72 002e BDF80630 		ldrh	r3, [sp, #6]
  73 0032 0133     		adds	r3, r3, #1
  74 0034 ADF80630 		strh	r3, [sp, #6]	@ movhi
  75 0038 EAE7     		b	.L2
  76              		.cfi_endproc
  77              	.LFE1:
  79 003a 00BF     		.section	.text.vBlockingQueueConsumer,"ax",%progbits
  80              		.align	2
  81              		.thumb
  82              		.thumb_func
  84              	vBlockingQueueConsumer:
  85              	.LFB2:
 228:FreeRTOS/Common/Minimal/BlockQ.c **** 		}
 229:FreeRTOS/Common/Minimal/BlockQ.c **** 	}
 230:FreeRTOS/Common/Minimal/BlockQ.c **** }
 231:FreeRTOS/Common/Minimal/BlockQ.c **** /*-----------------------------------------------------------*/
 232:FreeRTOS/Common/Minimal/BlockQ.c **** 
 233:FreeRTOS/Common/Minimal/BlockQ.c **** static portTASK_FUNCTION( vBlockingQueueConsumer, pvParameters )
 234:FreeRTOS/Common/Minimal/BlockQ.c **** {
  86              		.loc 1 234 0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 8
  89              		@ frame_needed = 0, uses_anonymous_args = 0
  90              	.LVL5:
  91 0000 70B5     		push	{r4, r5, r6, lr}
  92              	.LCFI2:
  93              		.cfi_def_cfa_offset 16
  94              		.cfi_offset 4, -16
  95              		.cfi_offset 5, -12
  96              		.cfi_offset 6, -8
  97              		.cfi_offset 14, -4
  98 0002 82B0     		sub	sp, sp, #8
  99              	.LCFI3:
 100              		.cfi_def_cfa_offset 24
 101 0004 0446     		mov	r4, r0
 102              	.LVL6:
 235:FreeRTOS/Common/Minimal/BlockQ.c **** unsigned portSHORT usData, usExpectedValue = 0;
 236:FreeRTOS/Common/Minimal/BlockQ.c **** xBlockingQueueParameters *pxQueueParameters;
 237:FreeRTOS/Common/Minimal/BlockQ.c **** portSHORT sErrorEverOccurred = pdFALSE;
 103              		.loc 1 237 0
 104 0006 0026     		movs	r6, #0
 235:FreeRTOS/Common/Minimal/BlockQ.c **** unsigned portSHORT usData, usExpectedValue = 0;
 105              		.loc 1 235 0
 106 0008 3546     		mov	r5, r6
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cczd4qvg.s 			page 7


 107 000a 01E0     		b	.L8
 108              	.LVL7:
 109              	.L11:
 238:FreeRTOS/Common/Minimal/BlockQ.c **** 
 239:FreeRTOS/Common/Minimal/BlockQ.c **** 	pxQueueParameters = ( xBlockingQueueParameters * ) pvParameters;
 240:FreeRTOS/Common/Minimal/BlockQ.c **** 
 241:FreeRTOS/Common/Minimal/BlockQ.c **** 	for( ;; )
 242:FreeRTOS/Common/Minimal/BlockQ.c **** 	{	
 243:FreeRTOS/Common/Minimal/BlockQ.c **** 		if( xQueueReceive( pxQueueParameters->xQueue, &usData, pxQueueParameters->xBlockTime ) == pdPASS 
 244:FreeRTOS/Common/Minimal/BlockQ.c **** 		{
 245:FreeRTOS/Common/Minimal/BlockQ.c **** 			if( usData != usExpectedValue )
 246:FreeRTOS/Common/Minimal/BlockQ.c **** 			{
 247:FreeRTOS/Common/Minimal/BlockQ.c **** 				/* Catch-up. */
 248:FreeRTOS/Common/Minimal/BlockQ.c **** 				usExpectedValue = usData;
 110              		.loc 1 248 0
 111 000c 1D46     		mov	r5, r3
 112              	.LVL8:
 249:FreeRTOS/Common/Minimal/BlockQ.c **** 
 250:FreeRTOS/Common/Minimal/BlockQ.c **** 				sErrorEverOccurred = pdTRUE;
 113              		.loc 1 250 0
 114 000e 0126     		movs	r6, #1
 115              	.LVL9:
 116              	.L8:
 243:FreeRTOS/Common/Minimal/BlockQ.c **** 		{
 117              		.loc 1 243 0
 118 0010 0023     		movs	r3, #0
 119 0012 6268     		ldr	r2, [r4, #4]
 120 0014 0DF10601 		add	r1, sp, #6
 121 0018 2068     		ldr	r0, [r4]
 122 001a FFF7FEFF 		bl	xQueueGenericReceive
 123              	.LVL10:
 124 001e 0128     		cmp	r0, #1
 125 0020 F6D1     		bne	.L8
 245:FreeRTOS/Common/Minimal/BlockQ.c **** 			{
 126              		.loc 1 245 0
 127 0022 BDF80630 		ldrh	r3, [sp, #6]
 128 0026 9D42     		cmp	r5, r3
 129 0028 F0D1     		bne	.L11
 251:FreeRTOS/Common/Minimal/BlockQ.c **** 			}
 252:FreeRTOS/Common/Minimal/BlockQ.c **** 			else
 253:FreeRTOS/Common/Minimal/BlockQ.c **** 			{
 254:FreeRTOS/Common/Minimal/BlockQ.c **** 				/* We have successfully received a message, so increment the
 255:FreeRTOS/Common/Minimal/BlockQ.c **** 				variable used to check we are still running. */	
 256:FreeRTOS/Common/Minimal/BlockQ.c **** 				if( sErrorEverOccurred == pdFALSE )
 130              		.loc 1 256 0
 131 002a 26B9     		cbnz	r6, .L10
 257:FreeRTOS/Common/Minimal/BlockQ.c **** 				{
 258:FreeRTOS/Common/Minimal/BlockQ.c **** 					( *pxQueueParameters->psCheckVariable )++;
 132              		.loc 1 258 0
 133 002c A268     		ldr	r2, [r4, #8]
 134 002e 1388     		ldrh	r3, [r2]
 135 0030 0133     		adds	r3, r3, #1
 136 0032 1BB2     		sxth	r3, r3
 137 0034 1380     		strh	r3, [r2]	@ movhi
 138              	.L10:
 259:FreeRTOS/Common/Minimal/BlockQ.c **** 				}
 260:FreeRTOS/Common/Minimal/BlockQ.c **** 							
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cczd4qvg.s 			page 8


 261:FreeRTOS/Common/Minimal/BlockQ.c **** 				/* Increment the value we expect to remove from the queue next time
 262:FreeRTOS/Common/Minimal/BlockQ.c **** 				round. */
 263:FreeRTOS/Common/Minimal/BlockQ.c **** 				++usExpectedValue;
 139              		.loc 1 263 0
 140 0036 0135     		adds	r5, r5, #1
 141              	.LVL11:
 142 0038 ADB2     		uxth	r5, r5
 143              	.LVL12:
 144 003a E9E7     		b	.L8
 145              		.cfi_endproc
 146              	.LFE2:
 148              		.section	.text.vStartBlockingQueueTasks,"ax",%progbits
 149              		.align	2
 150              		.global	vStartBlockingQueueTasks
 151              		.thumb
 152              		.thumb_func
 154              	vStartBlockingQueueTasks:
 155              	.LFB0:
 121:FreeRTOS/Common/Minimal/BlockQ.c **** xBlockingQueueParameters *pxQueueParameters1, *pxQueueParameters2;
 156              		.loc 1 121 0
 157              		.cfi_startproc
 158              		@ args = 0, pretend = 0, frame = 0
 159              		@ frame_needed = 0, uses_anonymous_args = 0
 160              	.LVL13:
 161 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 162              	.LCFI4:
 163              		.cfi_def_cfa_offset 36
 164              		.cfi_offset 4, -36
 165              		.cfi_offset 5, -32
 166              		.cfi_offset 6, -28
 167              		.cfi_offset 7, -24
 168              		.cfi_offset 8, -20
 169              		.cfi_offset 9, -16
 170              		.cfi_offset 10, -12
 171              		.cfi_offset 11, -8
 172              		.cfi_offset 14, -4
 173 0004 83B0     		sub	sp, sp, #12
 174              	.LCFI5:
 175              		.cfi_def_cfa_offset 48
 176 0006 8346     		mov	fp, r0
 177              	.LVL14:
 132:FreeRTOS/Common/Minimal/BlockQ.c **** 
 178              		.loc 1 132 0
 179 0008 0C20     		movs	r0, #12
 180              	.LVL15:
 181 000a FFF7FEFF 		bl	pvPortMalloc
 182              	.LVL16:
 183 000e 8146     		mov	r9, r0
 184              	.LVL17:
 136:FreeRTOS/Common/Minimal/BlockQ.c **** 
 185              		.loc 1 136 0
 186 0010 0221     		movs	r1, #2
 187 0012 0120     		movs	r0, #1
 188              	.LVL18:
 189 0014 FFF7FEFF 		bl	xQueueCreate
 190              	.LVL19:
 191 0018 C9F80000 		str	r0, [r9]
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cczd4qvg.s 			page 9


 139:FreeRTOS/Common/Minimal/BlockQ.c **** 
 192              		.loc 1 139 0
 193 001c 4FF47A78 		mov	r8, #1000
 194 0020 C9F80480 		str	r8, [r9, #4]
 143:FreeRTOS/Common/Minimal/BlockQ.c **** 		
 195              		.loc 1 143 0
 196 0024 384D     		ldr	r5, .L15
 197 0026 C9F80850 		str	r5, [r9, #8]
 146:FreeRTOS/Common/Minimal/BlockQ.c **** 
 198              		.loc 1 146 0
 199 002a 0C20     		movs	r0, #12
 200 002c FFF7FEFF 		bl	pvPortMalloc
 201              	.LVL20:
 202 0030 0746     		mov	r7, r0
 203              	.LVL21:
 149:FreeRTOS/Common/Minimal/BlockQ.c **** 
 204              		.loc 1 149 0
 205 0032 D9F80030 		ldr	r3, [r9]
 206 0036 0360     		str	r3, [r0]
 153:FreeRTOS/Common/Minimal/BlockQ.c **** 
 207              		.loc 1 153 0
 208 0038 0024     		movs	r4, #0
 209 003a 4460     		str	r4, [r0, #4]
 157:FreeRTOS/Common/Minimal/BlockQ.c **** 
 210              		.loc 1 157 0
 211 003c 334E     		ldr	r6, .L15+4
 212 003e 8660     		str	r6, [r0, #8]
 162:FreeRTOS/Common/Minimal/BlockQ.c **** 	xTaskCreate( vBlockingQueueProducer, ( signed portCHAR * ) "QProdB2", blckqSTACK_SIZE, ( void * ) 
 213              		.loc 1 162 0
 214 0040 0194     		str	r4, [sp, #4]
 215 0042 CDF800B0 		str	fp, [sp]
 216 0046 4B46     		mov	r3, r9
 217 0048 8022     		movs	r2, #128
 218 004a 3149     		ldr	r1, .L15+8
 219 004c 3148     		ldr	r0, .L15+12
 220              	.LVL22:
 221 004e FFF7FEFF 		bl	xTaskCreate
 222              	.LVL23:
 163:FreeRTOS/Common/Minimal/BlockQ.c **** 
 223              		.loc 1 163 0
 224 0052 DFF8D8A0 		ldr	r10, .L15+36
 225 0056 0194     		str	r4, [sp, #4]
 226 0058 0094     		str	r4, [sp]
 227 005a 3B46     		mov	r3, r7
 228 005c 8022     		movs	r2, #128
 229 005e 2E49     		ldr	r1, .L15+16
 230 0060 5046     		mov	r0, r10
 231 0062 FFF7FEFF 		bl	xTaskCreate
 232              	.LVL24:
 170:FreeRTOS/Common/Minimal/BlockQ.c **** 	pxQueueParameters3->xQueue = xQueueCreate( uxQueueSize1, ( unsigned portBASE_TYPE ) sizeof( unsign
 233              		.loc 1 170 0
 234 0066 0C20     		movs	r0, #12
 235 0068 FFF7FEFF 		bl	pvPortMalloc
 236              	.LVL25:
 237 006c 0746     		mov	r7, r0
 238              	.LVL26:
 171:FreeRTOS/Common/Minimal/BlockQ.c **** 	pxQueueParameters3->xBlockTime = xDontBlock;
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cczd4qvg.s 			page 10


 239              		.loc 1 171 0
 240 006e 0221     		movs	r1, #2
 241 0070 0120     		movs	r0, #1
 242              	.LVL27:
 243 0072 FFF7FEFF 		bl	xQueueCreate
 244              	.LVL28:
 245 0076 3860     		str	r0, [r7]
 172:FreeRTOS/Common/Minimal/BlockQ.c **** 	pxQueueParameters3->psCheckVariable = &( sBlockingProducerCount[ 1 ] );
 246              		.loc 1 172 0
 247 0078 7C60     		str	r4, [r7, #4]
 173:FreeRTOS/Common/Minimal/BlockQ.c **** 
 248              		.loc 1 173 0
 249 007a B31C     		adds	r3, r6, #2
 250 007c BB60     		str	r3, [r7, #8]
 175:FreeRTOS/Common/Minimal/BlockQ.c **** 	pxQueueParameters4->xQueue = pxQueueParameters3->xQueue;
 251              		.loc 1 175 0
 252 007e 0C20     		movs	r0, #12
 253 0080 FFF7FEFF 		bl	pvPortMalloc
 254              	.LVL29:
 255 0084 8146     		mov	r9, r0
 256              	.LVL30:
 176:FreeRTOS/Common/Minimal/BlockQ.c **** 	pxQueueParameters4->xBlockTime = xBlockTime;
 257              		.loc 1 176 0
 258 0086 3B68     		ldr	r3, [r7]
 259 0088 0360     		str	r3, [r0]
 177:FreeRTOS/Common/Minimal/BlockQ.c **** 	pxQueueParameters4->psCheckVariable = &( sBlockingConsumerCount[ 1 ] );
 260              		.loc 1 177 0
 261 008a C0F80480 		str	r8, [r0, #4]
 178:FreeRTOS/Common/Minimal/BlockQ.c **** 
 262              		.loc 1 178 0
 263 008e AB1C     		adds	r3, r5, #2
 264 0090 8360     		str	r3, [r0, #8]
 180:FreeRTOS/Common/Minimal/BlockQ.c **** 	xTaskCreate( vBlockingQueueProducer, ( signed portCHAR * ) "QConsB4", blckqSTACK_SIZE, ( void * ) 
 265              		.loc 1 180 0
 266 0092 0194     		str	r4, [sp, #4]
 267 0094 0094     		str	r4, [sp]
 268 0096 3B46     		mov	r3, r7
 269 0098 8022     		movs	r2, #128
 270 009a 2049     		ldr	r1, .L15+20
 271 009c 1D48     		ldr	r0, .L15+12
 272              	.LVL31:
 273 009e FFF7FEFF 		bl	xTaskCreate
 274              	.LVL32:
 181:FreeRTOS/Common/Minimal/BlockQ.c **** 
 275              		.loc 1 181 0
 276 00a2 0194     		str	r4, [sp, #4]
 277 00a4 CDF800B0 		str	fp, [sp]
 278 00a8 4B46     		mov	r3, r9
 279 00aa 8022     		movs	r2, #128
 280 00ac 1C49     		ldr	r1, .L15+24
 281 00ae 5046     		mov	r0, r10
 282 00b0 FFF7FEFF 		bl	xTaskCreate
 283              	.LVL33:
 187:FreeRTOS/Common/Minimal/BlockQ.c **** 	pxQueueParameters5->xQueue = xQueueCreate( uxQueueSize5, ( unsigned portBASE_TYPE ) sizeof( unsign
 284              		.loc 1 187 0
 285 00b4 0C20     		movs	r0, #12
 286 00b6 FFF7FEFF 		bl	pvPortMalloc
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cczd4qvg.s 			page 11


 287              	.LVL34:
 288 00ba 0746     		mov	r7, r0
 289              	.LVL35:
 188:FreeRTOS/Common/Minimal/BlockQ.c **** 	pxQueueParameters5->xBlockTime = xBlockTime;
 290              		.loc 1 188 0
 291 00bc 0221     		movs	r1, #2
 292 00be 0520     		movs	r0, #5
 293              	.LVL36:
 294 00c0 FFF7FEFF 		bl	xQueueCreate
 295              	.LVL37:
 296 00c4 3860     		str	r0, [r7]
 189:FreeRTOS/Common/Minimal/BlockQ.c **** 	pxQueueParameters5->psCheckVariable = &( sBlockingProducerCount[ 2 ] );
 297              		.loc 1 189 0
 298 00c6 C7F80480 		str	r8, [r7, #4]
 190:FreeRTOS/Common/Minimal/BlockQ.c **** 
 299              		.loc 1 190 0
 300 00ca 0436     		adds	r6, r6, #4
 301 00cc BE60     		str	r6, [r7, #8]
 192:FreeRTOS/Common/Minimal/BlockQ.c **** 	pxQueueParameters6->xQueue = pxQueueParameters5->xQueue;
 302              		.loc 1 192 0
 303 00ce 0C20     		movs	r0, #12
 304 00d0 FFF7FEFF 		bl	pvPortMalloc
 305              	.LVL38:
 306 00d4 0646     		mov	r6, r0
 307              	.LVL39:
 193:FreeRTOS/Common/Minimal/BlockQ.c **** 	pxQueueParameters6->xBlockTime = xBlockTime;
 308              		.loc 1 193 0
 309 00d6 3B68     		ldr	r3, [r7]
 310 00d8 0360     		str	r3, [r0]
 194:FreeRTOS/Common/Minimal/BlockQ.c **** 	pxQueueParameters6->psCheckVariable = &( sBlockingConsumerCount[ 2 ] );	
 311              		.loc 1 194 0
 312 00da C0F80480 		str	r8, [r0, #4]
 195:FreeRTOS/Common/Minimal/BlockQ.c **** 
 313              		.loc 1 195 0
 314 00de 0435     		adds	r5, r5, #4
 315 00e0 8560     		str	r5, [r0, #8]
 197:FreeRTOS/Common/Minimal/BlockQ.c **** 	xTaskCreate( vBlockingQueueConsumer, ( signed portCHAR * ) "QConsB6", blckqSTACK_SIZE, ( void * ) 
 316              		.loc 1 197 0
 317 00e2 0194     		str	r4, [sp, #4]
 318 00e4 0094     		str	r4, [sp]
 319 00e6 3B46     		mov	r3, r7
 320 00e8 8022     		movs	r2, #128
 321 00ea 0E49     		ldr	r1, .L15+28
 322 00ec 5046     		mov	r0, r10
 323              	.LVL40:
 324 00ee FFF7FEFF 		bl	xTaskCreate
 325              	.LVL41:
 198:FreeRTOS/Common/Minimal/BlockQ.c **** }
 326              		.loc 1 198 0
 327 00f2 0194     		str	r4, [sp, #4]
 328 00f4 0094     		str	r4, [sp]
 329 00f6 3346     		mov	r3, r6
 330 00f8 8022     		movs	r2, #128
 331 00fa 0B49     		ldr	r1, .L15+32
 332 00fc 0548     		ldr	r0, .L15+12
 333 00fe FFF7FEFF 		bl	xTaskCreate
 334              	.LVL42:
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cczd4qvg.s 			page 12


 199:FreeRTOS/Common/Minimal/BlockQ.c **** /*-----------------------------------------------------------*/
 335              		.loc 1 199 0
 336 0102 03B0     		add	sp, sp, #12
 337              	.LCFI6:
 338              		.cfi_def_cfa_offset 36
 339              		@ sp needed
 340 0104 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 341              	.LVL43:
 342              	.L16:
 343              		.align	2
 344              	.L15:
 345 0108 00000000 		.word	.LANCHOR0
 346 010c 00000000 		.word	.LANCHOR1
 347 0110 00000000 		.word	.LC0
 348 0114 00000000 		.word	vBlockingQueueConsumer
 349 0118 08000000 		.word	.LC1
 350 011c 10000000 		.word	.LC2
 351 0120 18000000 		.word	.LC3
 352 0124 20000000 		.word	.LC4
 353 0128 28000000 		.word	.LC5
 354 012c 00000000 		.word	vBlockingQueueProducer
 355              		.cfi_endproc
 356              	.LFE0:
 358              		.section	.text.xAreBlockingQueuesStillRunning,"ax",%progbits
 359              		.align	2
 360              		.global	xAreBlockingQueuesStillRunning
 361              		.thumb
 362              		.thumb_func
 364              	xAreBlockingQueuesStillRunning:
 365              	.LFB3:
 264:FreeRTOS/Common/Minimal/BlockQ.c **** 			}			
 265:FreeRTOS/Common/Minimal/BlockQ.c **** 		}		
 266:FreeRTOS/Common/Minimal/BlockQ.c **** 	}
 267:FreeRTOS/Common/Minimal/BlockQ.c **** }
 268:FreeRTOS/Common/Minimal/BlockQ.c **** /*-----------------------------------------------------------*/
 269:FreeRTOS/Common/Minimal/BlockQ.c **** 
 270:FreeRTOS/Common/Minimal/BlockQ.c **** /* This is called to check that all the created tasks are still running. */
 271:FreeRTOS/Common/Minimal/BlockQ.c **** portBASE_TYPE xAreBlockingQueuesStillRunning( void )
 272:FreeRTOS/Common/Minimal/BlockQ.c **** {
 366              		.loc 1 272 0
 367              		.cfi_startproc
 368              		@ args = 0, pretend = 0, frame = 0
 369              		@ frame_needed = 0, uses_anonymous_args = 0
 370              		@ link register save eliminated.
 371              	.LVL44:
 273:FreeRTOS/Common/Minimal/BlockQ.c **** static portSHORT sLastBlockingConsumerCount[ blckqNUM_TASK_SETS ] = { ( unsigned portSHORT ) 0, ( u
 274:FreeRTOS/Common/Minimal/BlockQ.c **** static portSHORT sLastBlockingProducerCount[ blckqNUM_TASK_SETS ] = { ( unsigned portSHORT ) 0, ( u
 275:FreeRTOS/Common/Minimal/BlockQ.c **** portBASE_TYPE xReturn = pdPASS, xTasks;
 276:FreeRTOS/Common/Minimal/BlockQ.c **** 
 277:FreeRTOS/Common/Minimal/BlockQ.c **** 	/* Not too worried about mutual exclusion on these variables as they are 16
 278:FreeRTOS/Common/Minimal/BlockQ.c **** 	bits and we are only reading them. We also only care to see if they have
 279:FreeRTOS/Common/Minimal/BlockQ.c **** 	changed or not.
 280:FreeRTOS/Common/Minimal/BlockQ.c **** 	
 281:FreeRTOS/Common/Minimal/BlockQ.c **** 	Loop through each check variable to and return pdFALSE if any are found not
 282:FreeRTOS/Common/Minimal/BlockQ.c **** 	to have changed since the last call. */
 283:FreeRTOS/Common/Minimal/BlockQ.c **** 
 284:FreeRTOS/Common/Minimal/BlockQ.c **** 	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cczd4qvg.s 			page 13


 372              		.loc 1 284 0
 373 0000 0023     		movs	r3, #0
 275:FreeRTOS/Common/Minimal/BlockQ.c **** 
 374              		.loc 1 275 0
 375 0002 0120     		movs	r0, #1
 376              		.loc 1 284 0
 377 0004 20E0     		b	.L18
 378              	.LVL45:
 379              	.L21:
 285:FreeRTOS/Common/Minimal/BlockQ.c **** 	{
 286:FreeRTOS/Common/Minimal/BlockQ.c **** 		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
 380              		.loc 1 286 0
 381 0006 124A     		ldr	r2, .L24
 382 0008 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 383 000c 12B2     		sxth	r2, r2
 384 000e 1149     		ldr	r1, .L24+4
 385 0010 31F91310 		ldrsh	r1, [r1, r3, lsl #1]
 386 0014 8A42     		cmp	r2, r1
 387 0016 00D1     		bne	.L19
 287:FreeRTOS/Common/Minimal/BlockQ.c **** 		{
 288:FreeRTOS/Common/Minimal/BlockQ.c **** 			xReturn = pdFALSE;
 388              		.loc 1 288 0
 389 0018 0020     		movs	r0, #0
 390              	.LVL46:
 391              	.L19:
 289:FreeRTOS/Common/Minimal/BlockQ.c **** 		}
 290:FreeRTOS/Common/Minimal/BlockQ.c **** 		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];
 392              		.loc 1 290 0
 393 001a 0D4A     		ldr	r2, .L24
 394 001c 32F81310 		ldrh	r1, [r2, r3, lsl #1]
 395 0020 0C4A     		ldr	r2, .L24+4
 396 0022 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 291:FreeRTOS/Common/Minimal/BlockQ.c **** 
 292:FreeRTOS/Common/Minimal/BlockQ.c **** 
 293:FreeRTOS/Common/Minimal/BlockQ.c **** 		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
 397              		.loc 1 293 0
 398 0026 0C4A     		ldr	r2, .L24+8
 399 0028 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 400 002c 12B2     		sxth	r2, r2
 401 002e 0B49     		ldr	r1, .L24+12
 402 0030 31F91310 		ldrsh	r1, [r1, r3, lsl #1]
 403 0034 8A42     		cmp	r2, r1
 404 0036 00D1     		bne	.L20
 294:FreeRTOS/Common/Minimal/BlockQ.c **** 		{
 295:FreeRTOS/Common/Minimal/BlockQ.c **** 			xReturn = pdFALSE;
 405              		.loc 1 295 0
 406 0038 0020     		movs	r0, #0
 407              	.LVL47:
 408              	.L20:
 296:FreeRTOS/Common/Minimal/BlockQ.c **** 		}
 297:FreeRTOS/Common/Minimal/BlockQ.c **** 		sLastBlockingProducerCount[ xTasks ] = sBlockingProducerCount[ xTasks ];
 409              		.loc 1 297 0 discriminator 2
 410 003a 074A     		ldr	r2, .L24+8
 411 003c 32F81310 		ldrh	r1, [r2, r3, lsl #1]
 412 0040 064A     		ldr	r2, .L24+12
 413 0042 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 284:FreeRTOS/Common/Minimal/BlockQ.c **** 	{
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cczd4qvg.s 			page 14


 414              		.loc 1 284 0 discriminator 2
 415 0046 0133     		adds	r3, r3, #1
 416              	.LVL48:
 417              	.L18:
 284:FreeRTOS/Common/Minimal/BlockQ.c **** 	{
 418              		.loc 1 284 0 is_stmt 0 discriminator 1
 419 0048 022B     		cmp	r3, #2
 420 004a DCDD     		ble	.L21
 298:FreeRTOS/Common/Minimal/BlockQ.c **** 	}
 299:FreeRTOS/Common/Minimal/BlockQ.c **** 
 300:FreeRTOS/Common/Minimal/BlockQ.c **** 	return xReturn;
 301:FreeRTOS/Common/Minimal/BlockQ.c **** }
 421              		.loc 1 301 0 is_stmt 1
 422 004c 7047     		bx	lr
 423              	.L25:
 424 004e 00BF     		.align	2
 425              	.L24:
 426 0050 00000000 		.word	.LANCHOR0
 427 0054 00000000 		.word	.LANCHOR2
 428 0058 00000000 		.word	.LANCHOR1
 429 005c 00000000 		.word	.LANCHOR3
 430              		.cfi_endproc
 431              	.LFE3:
 433              		.section	.bss.sBlockingProducerCount,"aw",%nobits
 434              		.align	2
 435              		.set	.LANCHOR1,. + 0
 438              	sBlockingProducerCount:
 439 0000 00000000 		.space	6
 439      0000
 440              		.section	.bss.sBlockingConsumerCount,"aw",%nobits
 441              		.align	2
 442              		.set	.LANCHOR0,. + 0
 445              	sBlockingConsumerCount:
 446 0000 00000000 		.space	6
 446      0000
 447              		.section	.rodata.str1.4,"aMS",%progbits,1
 448              		.align	2
 449              	.LC0:
 450 0000 51436F6E 		.ascii	"QConsB1\000"
 450      73423100 
 451              	.LC1:
 452 0008 5150726F 		.ascii	"QProdB2\000"
 452      64423200 
 453              	.LC2:
 454 0010 5150726F 		.ascii	"QProdB3\000"
 454      64423300 
 455              	.LC3:
 456 0018 51436F6E 		.ascii	"QConsB4\000"
 456      73423400 
 457              	.LC4:
 458 0020 5150726F 		.ascii	"QProdB5\000"
 458      64423500 
 459              	.LC5:
 460 0028 51436F6E 		.ascii	"QConsB6\000"
 460      73423600 
 461              		.section	.bss.sLastBlockingConsumerCount.5022,"aw",%nobits
 462              		.align	2
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cczd4qvg.s 			page 15


 463              		.set	.LANCHOR2,. + 0
 466              	sLastBlockingConsumerCount.5022:
 467 0000 00000000 		.space	6
 467      0000
 468              		.section	.bss.sLastBlockingProducerCount.5023,"aw",%nobits
 469              		.align	2
 470              		.set	.LANCHOR3,. + 0
 473              	sLastBlockingProducerCount.5023:
 474 0000 00000000 		.space	6
 474      0000
 475              		.text
 476              	.Letext0:
 477              		.file 2 "FreeRTOS/ARMCM3/Inc/portmacro.h"
 478              		.file 3 "FreeRTOS/Inc/queue.h"
 479              		.file 4 "FreeRTOS/Inc/portable.h"
 480              		.file 5 "FreeRTOS/Inc/task.h"
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cczd4qvg.s 			page 16


DEFINED SYMBOLS
                            *ABS*:0000000000000000 BlockQ.c
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cczd4qvg.s:20     .text.vBlockingQueueProducer:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cczd4qvg.s:24     .text.vBlockingQueueProducer:0000000000000000 vBlockingQueueProducer
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cczd4qvg.s:80     .text.vBlockingQueueConsumer:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cczd4qvg.s:84     .text.vBlockingQueueConsumer:0000000000000000 vBlockingQueueConsumer
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cczd4qvg.s:149    .text.vStartBlockingQueueTasks:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cczd4qvg.s:154    .text.vStartBlockingQueueTasks:0000000000000000 vStartBlockingQueueTasks
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cczd4qvg.s:345    .text.vStartBlockingQueueTasks:0000000000000108 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cczd4qvg.s:359    .text.xAreBlockingQueuesStillRunning:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cczd4qvg.s:364    .text.xAreBlockingQueuesStillRunning:0000000000000000 xAreBlockingQueuesStillRunning
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cczd4qvg.s:426    .text.xAreBlockingQueuesStillRunning:0000000000000050 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cczd4qvg.s:434    .bss.sBlockingProducerCount:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cczd4qvg.s:438    .bss.sBlockingProducerCount:0000000000000000 sBlockingProducerCount
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cczd4qvg.s:441    .bss.sBlockingConsumerCount:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cczd4qvg.s:445    .bss.sBlockingConsumerCount:0000000000000000 sBlockingConsumerCount
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cczd4qvg.s:448    .rodata.str1.4:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cczd4qvg.s:462    .bss.sLastBlockingConsumerCount.5022:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cczd4qvg.s:466    .bss.sLastBlockingConsumerCount.5022:0000000000000000 sLastBlockingConsumerCount.5022
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cczd4qvg.s:469    .bss.sLastBlockingProducerCount.5023:0000000000000000 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cczd4qvg.s:473    .bss.sLastBlockingProducerCount.5023:0000000000000000 sLastBlockingProducerCount.5023
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
xQueueGenericSend
xQueueGenericReceive
pvPortMalloc
xQueueCreate
xTaskCreate
