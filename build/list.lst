ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc1ZSr0b.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"list.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.vListInitialise,"ax",%progbits
  20              		.align	2
  21              		.global	vListInitialise
  22              		.thumb
  23              		.thumb_func
  25              	vListInitialise:
  26              	.LFB32:
  27              		.file 1 "FreeRTOS/Src/list.c"
   1:FreeRTOS/Src/list.c **** /*
   2:FreeRTOS/Src/list.c ****  * FreeRTOS Kernel V10.1.1
   3:FreeRTOS/Src/list.c ****  * Copyright (C) 2018 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/Src/list.c ****  *
   5:FreeRTOS/Src/list.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:FreeRTOS/Src/list.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:FreeRTOS/Src/list.c ****  * the Software without restriction, including without limitation the rights to
   8:FreeRTOS/Src/list.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:FreeRTOS/Src/list.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:FreeRTOS/Src/list.c ****  * subject to the following conditions:
  11:FreeRTOS/Src/list.c ****  *
  12:FreeRTOS/Src/list.c ****  * The above copyright notice and this permission notice shall be included in all
  13:FreeRTOS/Src/list.c ****  * copies or substantial portions of the Software.
  14:FreeRTOS/Src/list.c ****  *
  15:FreeRTOS/Src/list.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:FreeRTOS/Src/list.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:FreeRTOS/Src/list.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:FreeRTOS/Src/list.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:FreeRTOS/Src/list.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:FreeRTOS/Src/list.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:FreeRTOS/Src/list.c ****  *
  22:FreeRTOS/Src/list.c ****  * http://www.FreeRTOS.org
  23:FreeRTOS/Src/list.c ****  * http://aws.amazon.com/freertos
  24:FreeRTOS/Src/list.c ****  *
  25:FreeRTOS/Src/list.c ****  * 1 tab == 4 spaces!
  26:FreeRTOS/Src/list.c ****  */
  27:FreeRTOS/Src/list.c **** 
  28:FreeRTOS/Src/list.c **** 
  29:FreeRTOS/Src/list.c **** #include <stdlib.h>
  30:FreeRTOS/Src/list.c **** #include "FreeRTOS.h"
  31:FreeRTOS/Src/list.c **** #include "list.h"
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc1ZSr0b.s 			page 2


  32:FreeRTOS/Src/list.c **** 
  33:FreeRTOS/Src/list.c **** /*-----------------------------------------------------------
  34:FreeRTOS/Src/list.c ****  * PUBLIC LIST API documented in list.h
  35:FreeRTOS/Src/list.c ****  *----------------------------------------------------------*/
  36:FreeRTOS/Src/list.c **** 
  37:FreeRTOS/Src/list.c **** void vListInitialise( List_t * const pxList )
  38:FreeRTOS/Src/list.c **** {
  28              		.loc 1 38 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  39:FreeRTOS/Src/list.c **** 	/* The list structure contains a list item which is used to mark the
  40:FreeRTOS/Src/list.c **** 	end of the list.  To initialise the list the list end is inserted
  41:FreeRTOS/Src/list.c **** 	as the only list entry. */
  42:FreeRTOS/Src/list.c **** 	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini lis
  34              		.loc 1 42 0
  35 0000 00F10803 		add	r3, r0, #8
  36 0004 4360     		str	r3, [r0, #4]
  43:FreeRTOS/Src/list.c **** 
  44:FreeRTOS/Src/list.c **** 	/* The list end value is the highest possible value in the list to
  45:FreeRTOS/Src/list.c **** 	ensure it remains at the end of the list. */
  46:FreeRTOS/Src/list.c **** 	pxList->xListEnd.xItemValue = portMAX_DELAY;
  37              		.loc 1 46 0
  38 0006 4FF0FF32 		mov	r2, #-1
  39 000a 8260     		str	r2, [r0, #8]
  47:FreeRTOS/Src/list.c **** 
  48:FreeRTOS/Src/list.c **** 	/* The list end next and previous pointers point to itself so we know
  49:FreeRTOS/Src/list.c **** 	when the list is empty. */
  50:FreeRTOS/Src/list.c **** 	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mi
  40              		.loc 1 50 0
  41 000c C360     		str	r3, [r0, #12]
  51:FreeRTOS/Src/list.c **** 	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The
  42              		.loc 1 51 0
  43 000e 0361     		str	r3, [r0, #16]
  52:FreeRTOS/Src/list.c **** 
  53:FreeRTOS/Src/list.c **** 	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  44              		.loc 1 53 0
  45 0010 0023     		movs	r3, #0
  46 0012 0360     		str	r3, [r0]
  47 0014 7047     		bx	lr
  48              		.cfi_endproc
  49              	.LFE32:
  51 0016 00BF     		.section	.text.vListInitialiseItem,"ax",%progbits
  52              		.align	2
  53              		.global	vListInitialiseItem
  54              		.thumb
  55              		.thumb_func
  57              	vListInitialiseItem:
  58              	.LFB33:
  54:FreeRTOS/Src/list.c **** 
  55:FreeRTOS/Src/list.c **** 	/* Write known values into the list if
  56:FreeRTOS/Src/list.c **** 	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
  57:FreeRTOS/Src/list.c **** 	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
  58:FreeRTOS/Src/list.c **** 	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
  59:FreeRTOS/Src/list.c **** }
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc1ZSr0b.s 			page 3


  60:FreeRTOS/Src/list.c **** /*-----------------------------------------------------------*/
  61:FreeRTOS/Src/list.c **** 
  62:FreeRTOS/Src/list.c **** void vListInitialiseItem( ListItem_t * const pxItem )
  63:FreeRTOS/Src/list.c **** {
  59              		.loc 1 63 0
  60              		.cfi_startproc
  61              		@ args = 0, pretend = 0, frame = 0
  62              		@ frame_needed = 0, uses_anonymous_args = 0
  63              		@ link register save eliminated.
  64              	.LVL1:
  64:FreeRTOS/Src/list.c **** 	/* Make sure the list item is not recorded as being on a list. */
  65:FreeRTOS/Src/list.c **** 	pxItem->pxContainer = NULL;
  65              		.loc 1 65 0
  66 0000 0023     		movs	r3, #0
  67 0002 0361     		str	r3, [r0, #16]
  68 0004 7047     		bx	lr
  69              		.cfi_endproc
  70              	.LFE33:
  72 0006 00BF     		.section	.text.vListInsertEnd,"ax",%progbits
  73              		.align	2
  74              		.global	vListInsertEnd
  75              		.thumb
  76              		.thumb_func
  78              	vListInsertEnd:
  79              	.LFB34:
  66:FreeRTOS/Src/list.c **** 
  67:FreeRTOS/Src/list.c **** 	/* Write known values into the list item if
  68:FreeRTOS/Src/list.c **** 	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
  69:FreeRTOS/Src/list.c **** 	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
  70:FreeRTOS/Src/list.c **** 	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
  71:FreeRTOS/Src/list.c **** }
  72:FreeRTOS/Src/list.c **** /*-----------------------------------------------------------*/
  73:FreeRTOS/Src/list.c **** 
  74:FreeRTOS/Src/list.c **** void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
  75:FreeRTOS/Src/list.c **** {
  80              		.loc 1 75 0
  81              		.cfi_startproc
  82              		@ args = 0, pretend = 0, frame = 0
  83              		@ frame_needed = 0, uses_anonymous_args = 0
  84              		@ link register save eliminated.
  85              	.LVL2:
  76:FreeRTOS/Src/list.c **** ListItem_t * const pxIndex = pxList->pxIndex;
  86              		.loc 1 76 0
  87 0000 4368     		ldr	r3, [r0, #4]
  88              	.LVL3:
  77:FreeRTOS/Src/list.c **** 
  78:FreeRTOS/Src/list.c **** 	/* Only effective when configASSERT() is also defined, these tests may catch
  79:FreeRTOS/Src/list.c **** 	the list data structures being overwritten in memory.  They will not catch
  80:FreeRTOS/Src/list.c **** 	data errors caused by incorrect configuration or use of FreeRTOS. */
  81:FreeRTOS/Src/list.c **** 	listTEST_LIST_INTEGRITY( pxList );
  82:FreeRTOS/Src/list.c **** 	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
  83:FreeRTOS/Src/list.c **** 
  84:FreeRTOS/Src/list.c **** 	/* Insert a new list item into pxList, but rather than sort the list,
  85:FreeRTOS/Src/list.c **** 	makes the new list item the last item to be removed by a call to
  86:FreeRTOS/Src/list.c **** 	listGET_OWNER_OF_NEXT_ENTRY(). */
  87:FreeRTOS/Src/list.c **** 	pxNewListItem->pxNext = pxIndex;
  89              		.loc 1 87 0
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc1ZSr0b.s 			page 4


  90 0002 4B60     		str	r3, [r1, #4]
  88:FreeRTOS/Src/list.c **** 	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  91              		.loc 1 88 0
  92 0004 9A68     		ldr	r2, [r3, #8]
  93 0006 8A60     		str	r2, [r1, #8]
  89:FreeRTOS/Src/list.c **** 
  90:FreeRTOS/Src/list.c **** 	/* Only used during decision coverage testing. */
  91:FreeRTOS/Src/list.c **** 	mtCOVERAGE_TEST_DELAY();
  92:FreeRTOS/Src/list.c **** 
  93:FreeRTOS/Src/list.c **** 	pxIndex->pxPrevious->pxNext = pxNewListItem;
  94              		.loc 1 93 0
  95 0008 9A68     		ldr	r2, [r3, #8]
  96 000a 5160     		str	r1, [r2, #4]
  94:FreeRTOS/Src/list.c **** 	pxIndex->pxPrevious = pxNewListItem;
  97              		.loc 1 94 0
  98 000c 9960     		str	r1, [r3, #8]
  95:FreeRTOS/Src/list.c **** 
  96:FreeRTOS/Src/list.c **** 	/* Remember which list the item is in. */
  97:FreeRTOS/Src/list.c **** 	pxNewListItem->pxContainer = pxList;
  99              		.loc 1 97 0
 100 000e 0861     		str	r0, [r1, #16]
  98:FreeRTOS/Src/list.c **** 
  99:FreeRTOS/Src/list.c **** 	( pxList->uxNumberOfItems )++;
 101              		.loc 1 99 0
 102 0010 0368     		ldr	r3, [r0]
 103              	.LVL4:
 104 0012 0133     		adds	r3, r3, #1
 105 0014 0360     		str	r3, [r0]
 106 0016 7047     		bx	lr
 107              		.cfi_endproc
 108              	.LFE34:
 110              		.section	.text.vListInsert,"ax",%progbits
 111              		.align	2
 112              		.global	vListInsert
 113              		.thumb
 114              		.thumb_func
 116              	vListInsert:
 117              	.LFB35:
 100:FreeRTOS/Src/list.c **** }
 101:FreeRTOS/Src/list.c **** /*-----------------------------------------------------------*/
 102:FreeRTOS/Src/list.c **** 
 103:FreeRTOS/Src/list.c **** void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
 104:FreeRTOS/Src/list.c **** {
 118              		.loc 1 104 0
 119              		.cfi_startproc
 120              		@ args = 0, pretend = 0, frame = 0
 121              		@ frame_needed = 0, uses_anonymous_args = 0
 122              		@ link register save eliminated.
 123              	.LVL5:
 124 0000 30B4     		push	{r4, r5}
 125              	.LCFI0:
 126              		.cfi_def_cfa_offset 8
 127              		.cfi_offset 4, -8
 128              		.cfi_offset 5, -4
 105:FreeRTOS/Src/list.c **** ListItem_t *pxIterator;
 106:FreeRTOS/Src/list.c **** const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 129              		.loc 1 106 0
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc1ZSr0b.s 			page 5


 130 0002 0D68     		ldr	r5, [r1]
 131              	.LVL6:
 107:FreeRTOS/Src/list.c **** 
 108:FreeRTOS/Src/list.c **** 	/* Only effective when configASSERT() is also defined, these tests may catch
 109:FreeRTOS/Src/list.c **** 	the list data structures being overwritten in memory.  They will not catch
 110:FreeRTOS/Src/list.c **** 	data errors caused by incorrect configuration or use of FreeRTOS. */
 111:FreeRTOS/Src/list.c **** 	listTEST_LIST_INTEGRITY( pxList );
 112:FreeRTOS/Src/list.c **** 	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
 113:FreeRTOS/Src/list.c **** 
 114:FreeRTOS/Src/list.c **** 	/* Insert the new list item into the list, sorted in xItemValue order.
 115:FreeRTOS/Src/list.c **** 
 116:FreeRTOS/Src/list.c **** 	If the list already contains a list item with the same item value then the
 117:FreeRTOS/Src/list.c **** 	new list item should be placed after it.  This ensures that TCBs which are
 118:FreeRTOS/Src/list.c **** 	stored in ready lists (all of which have the same xItemValue value) get a
 119:FreeRTOS/Src/list.c **** 	share of the CPU.  However, if the xItemValue is the same as the back marker
 120:FreeRTOS/Src/list.c **** 	the iteration loop below will not end.  Therefore the value is checked
 121:FreeRTOS/Src/list.c **** 	first, and the algorithm slightly modified if necessary. */
 122:FreeRTOS/Src/list.c **** 	if( xValueOfInsertion == portMAX_DELAY )
 132              		.loc 1 122 0
 133 0004 B5F1FF3F 		cmp	r5, #-1
 134 0008 01D1     		bne	.L5
 123:FreeRTOS/Src/list.c **** 	{
 124:FreeRTOS/Src/list.c **** 		pxIterator = pxList->xListEnd.pxPrevious;
 135              		.loc 1 124 0
 136 000a 0269     		ldr	r2, [r0, #16]
 137              	.LVL7:
 138 000c 07E0     		b	.L6
 139              	.LVL8:
 140              	.L5:
 125:FreeRTOS/Src/list.c **** 	}
 126:FreeRTOS/Src/list.c **** 	else
 127:FreeRTOS/Src/list.c **** 	{
 128:FreeRTOS/Src/list.c **** 		/* *** NOTE ***********************************************************
 129:FreeRTOS/Src/list.c **** 		If you find your application is crashing here then likely causes are
 130:FreeRTOS/Src/list.c **** 		listed below.  In addition see https://www.freertos.org/FAQHelp.html for
 131:FreeRTOS/Src/list.c **** 		more tips, and ensure configASSERT() is defined!
 132:FreeRTOS/Src/list.c **** 		https://www.freertos.org/a00110.html#configASSERT
 133:FreeRTOS/Src/list.c **** 
 134:FreeRTOS/Src/list.c **** 			1) Stack overflow -
 135:FreeRTOS/Src/list.c **** 			   see https://www.freertos.org/Stacks-and-stack-overflow-checking.html
 136:FreeRTOS/Src/list.c **** 			2) Incorrect interrupt priority assignment, especially on Cortex-M
 137:FreeRTOS/Src/list.c **** 			   parts where numerically high priority values denote low actual
 138:FreeRTOS/Src/list.c **** 			   interrupt priorities, which can seem counter intuitive.  See
 139:FreeRTOS/Src/list.c **** 			   https://www.freertos.org/RTOS-Cortex-M3-M4.html and the definition
 140:FreeRTOS/Src/list.c **** 			   of configMAX_SYSCALL_INTERRUPT_PRIORITY on
 141:FreeRTOS/Src/list.c **** 			   https://www.freertos.org/a00110.html
 142:FreeRTOS/Src/list.c **** 			3) Calling an API function from within a critical section or when
 143:FreeRTOS/Src/list.c **** 			   the scheduler is suspended, or calling an API function that does
 144:FreeRTOS/Src/list.c **** 			   not end in "FromISR" from an interrupt.
 145:FreeRTOS/Src/list.c **** 			4) Using a queue or semaphore before it has been initialised or
 146:FreeRTOS/Src/list.c **** 			   before the scheduler has been started (are interrupts firing
 147:FreeRTOS/Src/list.c **** 			   before vTaskStartScheduler() has been called?).
 148:FreeRTOS/Src/list.c **** 		**********************************************************************/
 149:FreeRTOS/Src/list.c **** 
 150:FreeRTOS/Src/list.c **** 		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValu
 141              		.loc 1 150 0
 142 000e 00F10802 		add	r2, r0, #8
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc1ZSr0b.s 			page 6


 143              	.LVL9:
 144 0012 00E0     		b	.L7
 145              	.L8:
 146 0014 1A46     		mov	r2, r3
 147              	.LVL10:
 148              	.L7:
 149              		.loc 1 150 0 is_stmt 0 discriminator 1
 150 0016 5368     		ldr	r3, [r2, #4]
 151 0018 1C68     		ldr	r4, [r3]
 152 001a A542     		cmp	r5, r4
 153 001c FAD2     		bcs	.L8
 154              	.L6:
 151:FreeRTOS/Src/list.c **** 		{
 152:FreeRTOS/Src/list.c **** 			/* There is nothing to do here, just iterating to the wanted
 153:FreeRTOS/Src/list.c **** 			insertion position. */
 154:FreeRTOS/Src/list.c **** 		}
 155:FreeRTOS/Src/list.c **** 	}
 156:FreeRTOS/Src/list.c **** 
 157:FreeRTOS/Src/list.c **** 	pxNewListItem->pxNext = pxIterator->pxNext;
 155              		.loc 1 157 0 is_stmt 1
 156 001e 5368     		ldr	r3, [r2, #4]
 157 0020 4B60     		str	r3, [r1, #4]
 158:FreeRTOS/Src/list.c **** 	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 158              		.loc 1 158 0
 159 0022 9960     		str	r1, [r3, #8]
 159:FreeRTOS/Src/list.c **** 	pxNewListItem->pxPrevious = pxIterator;
 160              		.loc 1 159 0
 161 0024 8A60     		str	r2, [r1, #8]
 160:FreeRTOS/Src/list.c **** 	pxIterator->pxNext = pxNewListItem;
 162              		.loc 1 160 0
 163 0026 5160     		str	r1, [r2, #4]
 161:FreeRTOS/Src/list.c **** 
 162:FreeRTOS/Src/list.c **** 	/* Remember which list the item is in.  This allows fast removal of the
 163:FreeRTOS/Src/list.c **** 	item later. */
 164:FreeRTOS/Src/list.c **** 	pxNewListItem->pxContainer = pxList;
 164              		.loc 1 164 0
 165 0028 0861     		str	r0, [r1, #16]
 165:FreeRTOS/Src/list.c **** 
 166:FreeRTOS/Src/list.c **** 	( pxList->uxNumberOfItems )++;
 166              		.loc 1 166 0
 167 002a 0368     		ldr	r3, [r0]
 168 002c 0133     		adds	r3, r3, #1
 169 002e 0360     		str	r3, [r0]
 167:FreeRTOS/Src/list.c **** }
 170              		.loc 1 167 0
 171 0030 30BC     		pop	{r4, r5}
 172              	.LCFI1:
 173              		.cfi_restore 5
 174              		.cfi_restore 4
 175              		.cfi_def_cfa_offset 0
 176              	.LVL11:
 177 0032 7047     		bx	lr
 178              		.cfi_endproc
 179              	.LFE35:
 181              		.section	.text.uxListRemove,"ax",%progbits
 182              		.align	2
 183              		.global	uxListRemove
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc1ZSr0b.s 			page 7


 184              		.thumb
 185              		.thumb_func
 187              	uxListRemove:
 188              	.LFB36:
 168:FreeRTOS/Src/list.c **** /*-----------------------------------------------------------*/
 169:FreeRTOS/Src/list.c **** 
 170:FreeRTOS/Src/list.c **** UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
 171:FreeRTOS/Src/list.c **** {
 189              		.loc 1 171 0
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 0
 192              		@ frame_needed = 0, uses_anonymous_args = 0
 193              		@ link register save eliminated.
 194              	.LVL12:
 172:FreeRTOS/Src/list.c **** /* The list item knows which list it is in.  Obtain the list from the list
 173:FreeRTOS/Src/list.c **** item. */
 174:FreeRTOS/Src/list.c **** List_t * const pxList = pxItemToRemove->pxContainer;
 195              		.loc 1 174 0
 196 0000 0369     		ldr	r3, [r0, #16]
 197              	.LVL13:
 175:FreeRTOS/Src/list.c **** 
 176:FreeRTOS/Src/list.c **** 	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 198              		.loc 1 176 0
 199 0002 4268     		ldr	r2, [r0, #4]
 200 0004 8168     		ldr	r1, [r0, #8]
 201 0006 9160     		str	r1, [r2, #8]
 177:FreeRTOS/Src/list.c **** 	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 202              		.loc 1 177 0
 203 0008 8268     		ldr	r2, [r0, #8]
 204 000a 4168     		ldr	r1, [r0, #4]
 205 000c 5160     		str	r1, [r2, #4]
 178:FreeRTOS/Src/list.c **** 
 179:FreeRTOS/Src/list.c **** 	/* Only used during decision coverage testing. */
 180:FreeRTOS/Src/list.c **** 	mtCOVERAGE_TEST_DELAY();
 181:FreeRTOS/Src/list.c **** 
 182:FreeRTOS/Src/list.c **** 	/* Make sure the index is left pointing to a valid item. */
 183:FreeRTOS/Src/list.c **** 	if( pxList->pxIndex == pxItemToRemove )
 206              		.loc 1 183 0
 207 000e 5A68     		ldr	r2, [r3, #4]
 208 0010 9042     		cmp	r0, r2
 209 0012 01D1     		bne	.L11
 184:FreeRTOS/Src/list.c **** 	{
 185:FreeRTOS/Src/list.c **** 		pxList->pxIndex = pxItemToRemove->pxPrevious;
 210              		.loc 1 185 0
 211 0014 8268     		ldr	r2, [r0, #8]
 212 0016 5A60     		str	r2, [r3, #4]
 213              	.L11:
 186:FreeRTOS/Src/list.c **** 	}
 187:FreeRTOS/Src/list.c **** 	else
 188:FreeRTOS/Src/list.c **** 	{
 189:FreeRTOS/Src/list.c **** 		mtCOVERAGE_TEST_MARKER();
 190:FreeRTOS/Src/list.c **** 	}
 191:FreeRTOS/Src/list.c **** 
 192:FreeRTOS/Src/list.c **** 	pxItemToRemove->pxContainer = NULL;
 214              		.loc 1 192 0
 215 0018 0022     		movs	r2, #0
 216 001a 0261     		str	r2, [r0, #16]
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc1ZSr0b.s 			page 8


 193:FreeRTOS/Src/list.c **** 	( pxList->uxNumberOfItems )--;
 217              		.loc 1 193 0
 218 001c 1A68     		ldr	r2, [r3]
 219 001e 013A     		subs	r2, r2, #1
 220 0020 1A60     		str	r2, [r3]
 194:FreeRTOS/Src/list.c **** 
 195:FreeRTOS/Src/list.c **** 	return pxList->uxNumberOfItems;
 221              		.loc 1 195 0
 222 0022 1868     		ldr	r0, [r3]
 223              	.LVL14:
 196:FreeRTOS/Src/list.c **** }
 224              		.loc 1 196 0
 225 0024 7047     		bx	lr
 226              		.cfi_endproc
 227              	.LFE36:
 229 0026 00BF     		.text
 230              	.Letext0:
 231              		.file 2 "/usr/local/Cellar/gcc-arm-none-eabi/20160926/arm-none-eabi/include/machine/_default_types
 232              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20160926/arm-none-eabi/include/sys/_stdint.h"
 233              		.file 4 "FreeRTOS/ARM_CM3/portmacro.h"
 234              		.file 5 "FreeRTOS/Inc/list.h"
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc1ZSr0b.s 			page 9


DEFINED SYMBOLS
                            *ABS*:0000000000000000 list.c
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc1ZSr0b.s:20     .text.vListInitialise:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc1ZSr0b.s:25     .text.vListInitialise:0000000000000000 vListInitialise
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc1ZSr0b.s:52     .text.vListInitialiseItem:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc1ZSr0b.s:57     .text.vListInitialiseItem:0000000000000000 vListInitialiseItem
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc1ZSr0b.s:73     .text.vListInsertEnd:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc1ZSr0b.s:78     .text.vListInsertEnd:0000000000000000 vListInsertEnd
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc1ZSr0b.s:111    .text.vListInsert:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc1ZSr0b.s:116    .text.vListInsert:0000000000000000 vListInsert
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc1ZSr0b.s:182    .text.uxListRemove:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//cc1ZSr0b.s:187    .text.uxListRemove:0000000000000000 uxListRemove
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
